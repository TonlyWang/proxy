// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: up.proto

package up

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pb "proxy/proto/pb"
	chatmessage "proxy/proto/pb/chatmessage"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetNameSetType int32

const (
	SetName_free SetNameSetType = 0
	SetName_gold SetNameSetType = 1
)

// Enum value maps for SetNameSetType.
var (
	SetNameSetType_name = map[int32]string{
		0: "free",
		1: "gold",
	}
	SetNameSetType_value = map[string]int32{
		"free": 0,
		"gold": 1,
	}
)

func (x SetNameSetType) Enum() *SetNameSetType {
	p := new(SetNameSetType)
	*p = x
	return p
}

func (x SetNameSetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetNameSetType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[0].Descriptor()
}

func (SetNameSetType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[0]
}

func (x SetNameSetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SetNameSetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SetNameSetType(num)
	return nil
}

// Deprecated: Use SetNameSetType.Descriptor instead.
func (SetNameSetType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{41, 0}
}

type AskDailyLoginStatus int32

const (
	AskDailyLogin_all    AskDailyLoginStatus = 1 // 正常领取+VIP领取
	AskDailyLogin_common AskDailyLoginStatus = 2 // 正常领取
	AskDailyLogin_vip    AskDailyLoginStatus = 3 // VIP补领
)

// Enum value maps for AskDailyLoginStatus.
var (
	AskDailyLoginStatus_name = map[int32]string{
		1: "all",
		2: "common",
		3: "vip",
	}
	AskDailyLoginStatus_value = map[string]int32{
		"all":    1,
		"common": 2,
		"vip":    3,
	}
)

func (x AskDailyLoginStatus) Enum() *AskDailyLoginStatus {
	p := new(AskDailyLoginStatus)
	*p = x
	return p
}

func (x AskDailyLoginStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AskDailyLoginStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[1].Descriptor()
}

func (AskDailyLoginStatus) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[1]
}

func (x AskDailyLoginStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AskDailyLoginStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AskDailyLoginStatus(num)
	return nil
}

// Deprecated: Use AskDailyLoginStatus.Descriptor instead.
func (AskDailyLoginStatus) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{46, 0}
}

type TeleportTeleportMode int32

const (
	Teleport_use_item TeleportTeleportMode = 0
	Teleport_use_gold TeleportTeleportMode = 1
)

// Enum value maps for TeleportTeleportMode.
var (
	TeleportTeleportMode_name = map[int32]string{
		0: "use_item",
		1: "use_gold",
	}
	TeleportTeleportMode_value = map[string]int32{
		"use_item": 0,
		"use_gold": 1,
	}
)

func (x TeleportTeleportMode) Enum() *TeleportTeleportMode {
	p := new(TeleportTeleportMode)
	*p = x
	return p
}

func (x TeleportTeleportMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeleportTeleportMode) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[2].Descriptor()
}

func (TeleportTeleportMode) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[2]
}

func (x TeleportTeleportMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TeleportTeleportMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TeleportTeleportMode(num)
	return nil
}

// Deprecated: Use TeleportTeleportMode.Descriptor instead.
func (TeleportTeleportMode) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{49, 0}
}

type ReapResourceDataType int32

const (
	ReapResourceData_resA ReapResourceDataType = 1
	ReapResourceData_resB ReapResourceDataType = 2
	ReapResourceData_resC ReapResourceDataType = 3
	ReapResourceData_resD ReapResourceDataType = 4
	ReapResourceData_resE ReapResourceDataType = 5
)

// Enum value maps for ReapResourceDataType.
var (
	ReapResourceDataType_name = map[int32]string{
		1: "resA",
		2: "resB",
		3: "resC",
		4: "resD",
		5: "resE",
	}
	ReapResourceDataType_value = map[string]int32{
		"resA": 1,
		"resB": 2,
		"resC": 3,
		"resD": 4,
		"resE": 5,
	}
)

func (x ReapResourceDataType) Enum() *ReapResourceDataType {
	p := new(ReapResourceDataType)
	*p = x
	return p
}

func (x ReapResourceDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReapResourceDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[3].Descriptor()
}

func (ReapResourceDataType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[3]
}

func (x ReapResourceDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReapResourceDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReapResourceDataType(num)
	return nil
}

// Deprecated: Use ReapResourceDataType.Descriptor instead.
func (ReapResourceDataType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{72, 0}
}

type PushTokenType int32

const (
	PushToken_ios     PushTokenType = 1
	PushToken_android PushTokenType = 2
	PushToken_getui   PushTokenType = 3
	PushToken_icp     PushTokenType = 4
)

// Enum value maps for PushTokenType.
var (
	PushTokenType_name = map[int32]string{
		1: "ios",
		2: "android",
		3: "getui",
		4: "icp",
	}
	PushTokenType_value = map[string]int32{
		"ios":     1,
		"android": 2,
		"getui":   3,
		"icp":     4,
	}
)

func (x PushTokenType) Enum() *PushTokenType {
	p := new(PushTokenType)
	*p = x
	return p
}

func (x PushTokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushTokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[4].Descriptor()
}

func (PushTokenType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[4]
}

func (x PushTokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PushTokenType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PushTokenType(num)
	return nil
}

// Deprecated: Use PushTokenType.Descriptor instead.
func (PushTokenType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{135, 0}
}

type CollectPatrolAwardCollectPatrolType int32

const (
	CollectPatrolAward_free_collect  CollectPatrolAwardCollectPatrolType = 0 //免费领取
	CollectPatrolAward_force_collect CollectPatrolAwardCollectPatrolType = 1 //强制领取，即：花费金币领取
)

// Enum value maps for CollectPatrolAwardCollectPatrolType.
var (
	CollectPatrolAwardCollectPatrolType_name = map[int32]string{
		0: "free_collect",
		1: "force_collect",
	}
	CollectPatrolAwardCollectPatrolType_value = map[string]int32{
		"free_collect":  0,
		"force_collect": 1,
	}
)

func (x CollectPatrolAwardCollectPatrolType) Enum() *CollectPatrolAwardCollectPatrolType {
	p := new(CollectPatrolAwardCollectPatrolType)
	*p = x
	return p
}

func (x CollectPatrolAwardCollectPatrolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectPatrolAwardCollectPatrolType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[5].Descriptor()
}

func (CollectPatrolAwardCollectPatrolType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[5]
}

func (x CollectPatrolAwardCollectPatrolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CollectPatrolAwardCollectPatrolType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CollectPatrolAwardCollectPatrolType(num)
	return nil
}

// Deprecated: Use CollectPatrolAwardCollectPatrolType.Descriptor instead.
func (CollectPatrolAwardCollectPatrolType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{305, 0}
}

type SelectSkinTeleportMode int32

const (
	SelectSkin_use_item SelectSkinTeleportMode = 0
	SelectSkin_use_gold SelectSkinTeleportMode = 1
)

// Enum value maps for SelectSkinTeleportMode.
var (
	SelectSkinTeleportMode_name = map[int32]string{
		0: "use_item",
		1: "use_gold",
	}
	SelectSkinTeleportMode_value = map[string]int32{
		"use_item": 0,
		"use_gold": 1,
	}
)

func (x SelectSkinTeleportMode) Enum() *SelectSkinTeleportMode {
	p := new(SelectSkinTeleportMode)
	*p = x
	return p
}

func (x SelectSkinTeleportMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectSkinTeleportMode) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[6].Descriptor()
}

func (SelectSkinTeleportMode) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[6]
}

func (x SelectSkinTeleportMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SelectSkinTeleportMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SelectSkinTeleportMode(num)
	return nil
}

// Deprecated: Use SelectSkinTeleportMode.Descriptor instead.
func (SelectSkinTeleportMode) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{339, 0}
}

type SaveUserPrefsOpType int32

const (
	SaveUserPrefs_unknown  SaveUserPrefsOpType = 0
	SaveUserPrefs_edit_gem SaveUserPrefsOpType = 1
)

// Enum value maps for SaveUserPrefsOpType.
var (
	SaveUserPrefsOpType_name = map[int32]string{
		0: "unknown",
		1: "edit_gem",
	}
	SaveUserPrefsOpType_value = map[string]int32{
		"unknown":  0,
		"edit_gem": 1,
	}
)

func (x SaveUserPrefsOpType) Enum() *SaveUserPrefsOpType {
	p := new(SaveUserPrefsOpType)
	*p = x
	return p
}

func (x SaveUserPrefsOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaveUserPrefsOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[7].Descriptor()
}

func (SaveUserPrefsOpType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[7]
}

func (x SaveUserPrefsOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SaveUserPrefsOpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SaveUserPrefsOpType(num)
	return nil
}

// Deprecated: Use SaveUserPrefsOpType.Descriptor instead.
func (SaveUserPrefsOpType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{350, 0}
}

type GetUserDataType int32

const (
	GetUserData_items    GetUserDataType = 1 //道具
	GetUserData_soldiers GetUserDataType = 3 //兵力
	GetUserData_resource GetUserDataType = 4 //资源(包括粮木石铁、钻石、金币)
	GetUserData_stamina  GetUserDataType = 5 //体力
)

// Enum value maps for GetUserDataType.
var (
	GetUserDataType_name = map[int32]string{
		1: "items",
		3: "soldiers",
		4: "resource",
		5: "stamina",
	}
	GetUserDataType_value = map[string]int32{
		"items":    1,
		"soldiers": 3,
		"resource": 4,
		"stamina":  5,
	}
)

func (x GetUserDataType) Enum() *GetUserDataType {
	p := new(GetUserDataType)
	*p = x
	return p
}

func (x GetUserDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[8].Descriptor()
}

func (GetUserDataType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[8]
}

func (x GetUserDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetUserDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetUserDataType(num)
	return nil
}

// Deprecated: Use GetUserDataType.Descriptor instead.
func (GetUserDataType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{469, 0}
}

type GetSmallBattlefieldInviteType int32

const (
	GetSmallBattlefieldInvite_guild  GetSmallBattlefieldInviteType = 0
	GetSmallBattlefieldInvite_friend GetSmallBattlefieldInviteType = 1
)

// Enum value maps for GetSmallBattlefieldInviteType.
var (
	GetSmallBattlefieldInviteType_name = map[int32]string{
		0: "guild",
		1: "friend",
	}
	GetSmallBattlefieldInviteType_value = map[string]int32{
		"guild":  0,
		"friend": 1,
	}
)

func (x GetSmallBattlefieldInviteType) Enum() *GetSmallBattlefieldInviteType {
	p := new(GetSmallBattlefieldInviteType)
	*p = x
	return p
}

func (x GetSmallBattlefieldInviteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSmallBattlefieldInviteType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[9].Descriptor()
}

func (GetSmallBattlefieldInviteType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[9]
}

func (x GetSmallBattlefieldInviteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GetSmallBattlefieldInviteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GetSmallBattlefieldInviteType(num)
	return nil
}

// Deprecated: Use GetSmallBattlefieldInviteType.Descriptor instead.
func (GetSmallBattlefieldInviteType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{487, 0}
}

type AskEquipInfoSceneType int32

const (
	AskEquipInfo_world_drop AskEquipInfoSceneType = 0 // 大地图上掉落的装备
	AskEquipInfo_bag        AskEquipInfoSceneType = 1 // 背包里的装备
)

// Enum value maps for AskEquipInfoSceneType.
var (
	AskEquipInfoSceneType_name = map[int32]string{
		0: "world_drop",
		1: "bag",
	}
	AskEquipInfoSceneType_value = map[string]int32{
		"world_drop": 0,
		"bag":        1,
	}
)

func (x AskEquipInfoSceneType) Enum() *AskEquipInfoSceneType {
	p := new(AskEquipInfoSceneType)
	*p = x
	return p
}

func (x AskEquipInfoSceneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AskEquipInfoSceneType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[10].Descriptor()
}

func (AskEquipInfoSceneType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[10]
}

func (x AskEquipInfoSceneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AskEquipInfoSceneType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AskEquipInfoSceneType(num)
	return nil
}

// Deprecated: Use AskEquipInfoSceneType.Descriptor instead.
func (AskEquipInfoSceneType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{585, 0}
}

type OpenGiftBoxSceneType int32

const (
	OpenGiftBox_normal    OpenGiftBoxSceneType = 0 // 普通类型
	OpenGiftBox_daily_vip OpenGiftBoxSceneType = 1 // 每日VIP签到时
)

// Enum value maps for OpenGiftBoxSceneType.
var (
	OpenGiftBoxSceneType_name = map[int32]string{
		0: "normal",
		1: "daily_vip",
	}
	OpenGiftBoxSceneType_value = map[string]int32{
		"normal":    0,
		"daily_vip": 1,
	}
)

func (x OpenGiftBoxSceneType) Enum() *OpenGiftBoxSceneType {
	p := new(OpenGiftBoxSceneType)
	*p = x
	return p
}

func (x OpenGiftBoxSceneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenGiftBoxSceneType) Descriptor() protoreflect.EnumDescriptor {
	return file_up_proto_enumTypes[11].Descriptor()
}

func (OpenGiftBoxSceneType) Type() protoreflect.EnumType {
	return &file_up_proto_enumTypes[11]
}

func (x OpenGiftBoxSceneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenGiftBoxSceneType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenGiftBoxSceneType(num)
	return nil
}

// Deprecated: Use OpenGiftBoxSceneType.Descriptor instead.
func (OpenGiftBoxSceneType) EnumDescriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{598, 0}
}

type UpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XRepeat                               *uint32                               `protobuf:"varint,1,req,name=_repeat,json=Repeat" json:"_repeat,omitempty"`
	XUserId                               *uint32                               `protobuf:"varint,2,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`
	XLogin                                *Login                                `protobuf:"bytes,3,opt,name=_login,json=Login" json:"_login,omitempty"`
	XRequestWorldmap                      *RequestMapinfo                       `protobuf:"bytes,4,opt,name=_request_worldmap,json=RequestWorldmap" json:"_request_worldmap,omitempty"`                                     //获取地图信息
	XGetTimeReward                        *GetTimeReward                        `protobuf:"bytes,5,opt,name=_get_time_reward,json=GetTimeReward" json:"_get_time_reward,omitempty"`                                         //获取计时奖励
	XConfigVer                            *int32                                `protobuf:"varint,6,opt,name=_config_ver,json=ConfigVer" json:"_config_ver,omitempty"`                                                      //配置文件的版本号。
	XEquipSynthesis                       *EquipSynthesis                       `protobuf:"bytes,9,opt,name=_equip_synthesis,json=EquipSynthesis" json:"_equip_synthesis,omitempty"`                                        //需要合成的装备
	XWearEquip                            *WearEquip                            `protobuf:"bytes,10,opt,name=_wear_equip,json=WearEquip" json:"_wear_equip,omitempty"`                                                      //英雄穿装备
	XConsumeItem                          *ConsumeItem                          `protobuf:"bytes,11,opt,name=_consume_item,json=ConsumeItem" json:"_consume_item,omitempty"`                                                //使用物品
	XRequireRewards                       *RequireRewards                       `protobuf:"bytes,19,opt,name=_require_rewards,json=RequireRewards" json:"_require_rewards,omitempty"`                                       //请求任务奖励
	XSetName                              *SetName                              `protobuf:"bytes,34,opt,name=_set_name,json=SetName" json:"_set_name,omitempty"`                                                            //设置玩家名字
	XSetAvatar                            *SetAvatar                            `protobuf:"bytes,39,opt,name=_set_avatar,json=SetAvatar" json:"_set_avatar,omitempty"`                                                      //设置头像
	XAskDailyLogin                        *AskDailyLogin                        `protobuf:"bytes,40,opt,name=_ask_daily_login,json=AskDailyLogin" json:"_ask_daily_login,omitempty"`                                        //每日签到
	XGetMaillist                          *GetMaillist                          `protobuf:"bytes,42,opt,name=_get_maillist,json=GetMaillist" json:"_get_maillist,omitempty"`                                                //获取所有邮件
	XReadMail                             *ReadMail                             `protobuf:"bytes,43,opt,name=_read_mail,json=ReadMail" json:"_read_mail,omitempty"`                                                         //通知服务器处理某封邮件：领取附件，删除邮件
	XGuild                                *Guild                                `protobuf:"bytes,49,opt,name=_guild,json=Guild" json:"_guild,omitempty"`                                                                    //联盟 的 所有接口都通过这个接口调用。
	XTeleport                             *Teleport                             `protobuf:"bytes,78,opt,name=_teleport,json=Teleport" json:"_teleport,omitempty"`                                                           //定位迁城
	XTeleportRandom                       *TeleportRandom                       `protobuf:"bytes,79,opt,name=_teleport_random,json=TeleportRandom" json:"_teleport_random,omitempty"`                                       //随机迁城
	XCreateBuilding                       *CreateBuilding                       `protobuf:"bytes,80,opt,name=_create_building,json=CreateBuilding" json:"_create_building,omitempty"`                                       //新建建筑
	XUpgradeBuilding                      *UpgradeBuilding                      `protobuf:"bytes,81,opt,name=_upgrade_building,json=UpgradeBuilding" json:"_upgrade_building,omitempty"`                                    //升级建筑
	XRemoveBuilding                       *RemoveBuilding                       `protobuf:"bytes,82,opt,name=_remove_building,json=RemoveBuilding" json:"_remove_building,omitempty"`                                       //拆除建筑
	XSpeedupBuilding                      *SpeedupBuilding                      `protobuf:"bytes,83,opt,name=_speedup_building,json=SpeedupBuilding" json:"_speedup_building,omitempty"`                                    //加速建筑
	XTrainSoldiers                        *TrainSoldiers                        `protobuf:"bytes,84,opt,name=_train_soldiers,json=TrainSoldiers" json:"_train_soldiers,omitempty"`                                          //造兵
	XReapSoldiers                         *ReapSoldiers                         `protobuf:"bytes,85,opt,name=_reap_soldiers,json=ReapSoldiers" json:"_reap_soldiers,omitempty"`                                             //收兵
	XSpeedupTrain                         *SpeedupTrain                         `protobuf:"bytes,86,opt,name=_speedup_train,json=SpeedupTrain" json:"_speedup_train,omitempty"`                                             //加速造兵
	XReapResource                         *ReapResource                         `protobuf:"bytes,87,opt,name=_reap_resource,json=ReapResource" json:"_reap_resource,omitempty"`                                             //收割资源
	XClaimQuestReward                     *ClaimQuestReward                     `protobuf:"bytes,88,opt,name=_claim_quest_reward,json=ClaimQuestReward" json:"_claim_quest_reward,omitempty"`                               //领取任务奖励
	XSendTroop                            *SendTroop                            `protobuf:"bytes,89,opt,name=_send_troop,json=SendTroop" json:"_send_troop,omitempty"`                                                      // 出兵
	XCheckMarch                           *CheckMarch                           `protobuf:"bytes,90,opt,name=_check_march,json=CheckMarch" json:"_check_march,omitempty"`                                                   // 检查行军状态
	XReturnCastle                         *ReturnCastle                         `protobuf:"bytes,91,opt,name=_return_castle,json=ReturnCastle" json:"_return_castle,omitempty"`                                             // 行军返回
	XSendTroopGarrison                    *SendTroopGarrison                    `protobuf:"bytes,92,opt,name=_send_troop_garrison,json=SendTroopGarrison" json:"_send_troop_garrison,omitempty"`                            // 驻军出发
	XBuyBuilder                           *BuyBuilder                           `protobuf:"bytes,93,opt,name=_buy_builder,json=BuyBuilder" json:"_buy_builder,omitempty"`                                                   // 购买建筑队列
	XUpgradeTech                          *UpgradeTech                          `protobuf:"bytes,94,opt,name=_upgrade_tech,json=UpgradeTech" json:"_upgrade_tech,omitempty"`                                                // 升级科技
	XGetServerList                        *GetServerList                        `protobuf:"bytes,95,opt,name=_get_server_list,json=GetServerList" json:"_get_server_list,omitempty"`                                        // 获取正在运行的王国列表。（弃用）
	XSpeedupTech                          *SpeedupTech                          `protobuf:"bytes,96,opt,name=_speedup_tech,json=SpeedupTech" json:"_speedup_tech,omitempty"`                                                // 加速升级科技
	XBuyItem                              *BuyItem                              `protobuf:"bytes,97,opt,name=_buy_item,json=BuyItem" json:"_buy_item,omitempty"`                                                            // 从金币商店中购买物品
	XHealSoldiers                         *HealSoldiers                         `protobuf:"bytes,98,opt,name=_heal_soldiers,json=HealSoldiers" json:"_heal_soldiers,omitempty"`                                             // 治疗伤兵
	XSurrenderSoldiers                    *SurrenderSoldiers                    `protobuf:"bytes,99,opt,name=_surrender_soldiers,json=SurrenderSoldiers" json:"_surrender_soldiers,omitempty"`                              // 招降俘虏
	XEquipReap                            *EquipReap                            `protobuf:"bytes,100,opt,name=_equip_reap,json=EquipReap" json:"_equip_reap,omitempty"`                                                     // 收取装备
	XWork                                 *Work                                 `protobuf:"bytes,101,opt,name=_work,json=Work" json:"_work,omitempty"`                                                                      // 俘虏劳作
	XCancelBuilding                       *CancelBuilding                       `protobuf:"bytes,102,opt,name=_cancel_building,json=CancelBuilding" json:"_cancel_building,omitempty"`                                      //取消建筑
	XCancelTrain                          *CancelTrain                          `protobuf:"bytes,103,opt,name=_cancel_train,json=CancelTrain" json:"_cancel_train,omitempty"`                                               //取消造兵
	XCancelTech                           *CancelTech                           `protobuf:"bytes,104,opt,name=_cancel_tech,json=CancelTech" json:"_cancel_tech,omitempty"`                                                  //取消科技研究
	XCancelEquip                          *CancelEquip                          `protobuf:"bytes,105,opt,name=_cancel_equip,json=CancelEquip" json:"_cancel_equip,omitempty"`                                               //取消锻造
	XUpgradeGift                          *UpgradeGift                          `protobuf:"bytes,106,opt,name=_upgrade_gift,json=UpgradeGift" json:"_upgrade_gift,omitempty"`                                               // 升级天赋
	XPeaceShield                          *PeaceShield                          `protobuf:"bytes,107,opt,name=_peace_shield,json=PeaceShield" json:"_peace_shield,omitempty"`                                               // 使用防护罩
	XGetReportlist                        *GetReportlist                        `protobuf:"bytes,108,opt,name=_get_reportlist,json=GetReportlist" json:"_get_reportlist,omitempty"`                                         // 获取所有报告
	XDelMail                              *DelMail                              `protobuf:"bytes,109,opt,name=_del_mail,json=DelMail" json:"_del_mail,omitempty"`                                                           // 删除邮件
	XStartDailyTask                       *StartDailyTask                       `protobuf:"bytes,110,opt,name=_start_daily_task,json=StartDailyTask" json:"_start_daily_task,omitempty"`                                    //开始一个每日任务
	XDailyTaskRewards                     *DailyTaskRewards                     `protobuf:"bytes,111,opt,name=_daily_task_rewards,json=DailyTaskRewards" json:"_daily_task_rewards,omitempty"`                              //获取一个每日任务的奖励
	XSacrifice                            *Sacrifice                            `protobuf:"bytes,112,opt,name=_sacrifice,json=Sacrifice" json:"_sacrifice,omitempty"`                                                       //献祭
	XTaxes                                *Taxes                                `protobuf:"bytes,113,opt,name=_taxes,json=Taxes" json:"_taxes,omitempty"`                                                                   //收税
	XFavoriteMail                         *FavoriteMail                         `protobuf:"bytes,114,opt,name=_favorite_mail,json=FavoriteMail" json:"_favorite_mail,omitempty"`                                            // 收藏邮件
	XGetFavoritelist                      *GetFavoritelist                      `protobuf:"bytes,115,opt,name=_get_favoritelist,json=GetFavoritelist" json:"_get_favoritelist,omitempty"`                                   // 收藏邮件列表
	XGetSysmaillist                       *GetSysmaillist                       `protobuf:"bytes,116,opt,name=_get_sysmaillist,json=GetSysmaillist" json:"_get_sysmaillist,omitempty"`                                      // 系统邮件列表
	XSendMail                             *SendMail                             `protobuf:"bytes,117,opt,name=_send_mail,json=SendMail" json:"_send_mail,omitempty"`                                                        // 发送邮件
	XSendTextMessage                      *chatmessage.SendTextMessage          `protobuf:"bytes,118,opt,name=_send_text_message,json=SendTextMessage" json:"_send_text_message,omitempty"`                                 //发聊天消息
	XChatHistoryFecth                     *ChatHistoryFecth                     `protobuf:"bytes,119,opt,name=_chat_history_fecth,json=ChatHistoryFecth" json:"_chat_history_fecth,omitempty"`                              //获取聊天历史记录
	XSendVoiceMessage                     *chatmessage.SendVoiceMessage         `protobuf:"bytes,120,opt,name=_send_voice_message,json=SendVoiceMessage" json:"_send_voice_message,omitempty"`                              //发语音聊天消息
	XSyncTaxInfo                          *SyncTaxInfo                          `protobuf:"bytes,121,opt,name=_sync_tax_info,json=SyncTaxInfo" json:"_sync_tax_info,omitempty"`                                             //同步服务器的收税数据。
	XPushToken                            *PushToken                            `protobuf:"bytes,122,opt,name=_push_token,json=PushToken" json:"_push_token,omitempty"`                                                     //同步push token
	XContactGetList                       *ContactGetList                       `protobuf:"bytes,123,opt,name=_contact_get_list,json=ContactGetList" json:"_contact_get_list,omitempty"`                                    //获取联系人列表
	XContactAddUser                       *ContactAddUser                       `protobuf:"bytes,124,opt,name=_contact_add_user,json=ContactAddUser" json:"_contact_add_user,omitempty"`                                    //添加联系人
	XContactRemoveUser                    *ContactRemoveUser                    `protobuf:"bytes,125,opt,name=_contact_remove_user,json=ContactRemoveUser" json:"_contact_remove_user,omitempty"`                           //移除联系人
	XDismissSoldiers                      *DismissSoldiers                      `protobuf:"bytes,126,opt,name=_dismiss_soldiers,json=DismissSoldiers" json:"_dismiss_soldiers,omitempty"`                                   //解散士兵
	XSetLanguage                          *SetLanguage                          `protobuf:"bytes,127,opt,name=_set_language,json=SetLanguage" json:"_set_language,omitempty"`                                               //设置用户语言
	XReturnCastleByItem                   *ReturnCastleByItem                   `protobuf:"bytes,129,opt,name=_return_castle_by_item,json=ReturnCastleByItem" json:"_return_castle_by_item,omitempty"`                      //行军召回
	XSpeedupMarch                         *SpeedupMarch                         `protobuf:"bytes,130,opt,name=_speedup_march,json=SpeedupMarch" json:"_speedup_march,omitempty"`                                            //行军加速
	XSetPush                              *SetPush                              `protobuf:"bytes,131,opt,name=_set_push,json=SetPush" json:"_set_push,omitempty"`                                                           //设置通知
	XGetPopularityRankList                *GetPopularityRankList                `protobuf:"bytes,132,opt,name=_get_popularity_rank_list,json=GetPopularityRankList" json:"_get_popularity_rank_list,omitempty"`             //获取声望排行列表
	XGetRouletteList                      *GetRouletteList                      `protobuf:"bytes,133,opt,name=_get_roulette_list,json=GetRouletteList" json:"_get_roulette_list,omitempty"`                                 //获取轮盘的物品列表
	XAbandonTreasureBox                   *AbandonTreasureBox                   `protobuf:"bytes,134,opt,name=_abandon_treasure_box,json=AbandonTreasureBox" json:"_abandon_treasure_box,omitempty"`                        //取消当前宝箱
	XRefreshRoulette                      *RefreshRoulette                      `protobuf:"bytes,135,opt,name=_refresh_roulette,json=RefreshRoulette" json:"_refresh_roulette,omitempty"`                                   //刷新轮盘
	XStartRoulette                        *StartRoulette                        `protobuf:"bytes,136,opt,name=_start_roulette,json=StartRoulette" json:"_start_roulette,omitempty"`                                         //转轮盘
	XOpenTreasureBox                      *OpenTreasureBox                      `protobuf:"bytes,137,opt,name=_open_treasure_box,json=OpenTreasureBox" json:"_open_treasure_box,omitempty"`                                 //翻宝箱
	XBlackMarketRefresh                   *BlackMarketRefresh                   `protobuf:"bytes,138,opt,name=_black_market_refresh,json=BlackMarketRefresh" json:"_black_market_refresh,omitempty"`                        //黑市刷新
	XBlackMarketBuy                       *BlackMarketBuy                       `protobuf:"bytes,139,opt,name=_black_market_buy,json=BlackMarketBuy" json:"_black_market_buy,omitempty"`                                    //黑市购买
	XGetMailReward                        *GetMailReward                        `protobuf:"bytes,140,opt,name=_get_mail_reward,json=GetMailReward" json:"_get_mail_reward,omitempty"`                                       //收取邮件里面的附件
	XBuyRouletteCredits                   *BuyRouletteCredits                   `protobuf:"bytes,141,opt,name=_buy_roulette_credits,json=BuyRouletteCredits" json:"_buy_roulette_credits,omitempty"`                        //轮盘购买积分
	XVersion                              *int32                                `protobuf:"varint,142,opt,name=_version,json=Version" json:"_version,omitempty"`                                                            //客户端版本
	XHealWall                             *HealWall                             `protobuf:"bytes,143,opt,name=_heal_wall,json=HealWall" json:"_heal_wall,omitempty"`                                                        //修复城墙
	XCancelHealWall                       *CancelHealWall                       `protobuf:"bytes,144,opt,name=_cancel_heal_wall,json=CancelHealWall" json:"_cancel_heal_wall,omitempty"`                                    //取消修复城墙
	XBuildingFinish                       *BuildingFinish                       `protobuf:"bytes,145,opt,name=_building_finish,json=BuildingFinish" json:"_building_finish,omitempty"`                                      //建筑修建完成
	XTechnologyFinish                     *TechnologyFinish                     `protobuf:"bytes,146,opt,name=_technology_finish,json=TechnologyFinish" json:"_technology_finish,omitempty"`                                //科技研究完成
	XSavePlayerSteps                      *SavePlayerSteps                      `protobuf:"bytes,147,opt,name=_save_player_steps,json=SavePlayerSteps" json:"_save_player_steps,omitempty"`                                 //保存新手引导当前步骤
	XHealFinish                           *HealFinish                           `protobuf:"bytes,148,opt,name=_heal_finish,json=HealFinish" json:"_heal_finish,omitempty"`                                                  //治疗完成
	XSynthesisFinish                      *SynthesisFinish                      `protobuf:"bytes,149,opt,name=_synthesis_finish,json=SynthesisFinish" json:"_synthesis_finish,omitempty"`                                   //锻造完成
	XGetUserDetails                       *GetUserDetails                       `protobuf:"bytes,150,opt,name=_get_user_details,json=GetUserDetails" json:"_get_user_details,omitempty"`                                    //获取用户详细信息
	XBattleGuideFinished                  *BattleGuideFinished                  `protobuf:"bytes,151,opt,name=_battle_guide_finished,json=BattleGuideFinished" json:"_battle_guide_finished,omitempty"`                     //新手打野完成
	XGetDailyTaskList                     *GetDailyTaskList                     `protobuf:"bytes,152,opt,name=_get_daily_task_list,json=GetDailyTaskList" json:"_get_daily_task_list,omitempty"`                            //获取每日任务列表
	XBuyFromStore                         *BuyFromStore                         `protobuf:"bytes,153,opt,name=_buy_from_store,json=BuyFromStore" json:"_buy_from_store,omitempty"`                                          //从商城购买物品
	XRefreshDailyTask                     *RefreshDailyTask                     `protobuf:"bytes,154,opt,name=_refresh_daily_task,json=RefreshDailyTask" json:"_refresh_daily_task,omitempty"`                              //刷新每日任务
	XGetIapList                           *GetIapList                           `protobuf:"bytes,155,opt,name=_get_iap_list,json=GetIapList" json:"_get_iap_list,omitempty"`                                                //获取程序内购买内容
	XGetRuinsList                         *GetRuinsList                         `protobuf:"bytes,156,opt,name=_get_ruins_list,json=GetRuinsList" json:"_get_ruins_list,omitempty"`                                          //获取遗迹列表
	XOpenRuins                            *OpenRuins                            `protobuf:"bytes,157,opt,name=_open_ruins,json=OpenRuins" json:"_open_ruins,omitempty"`                                                     //使用藏宝图开启遗迹
	XGetKingCastleInfo                    *GetKingCastleInfo                    `protobuf:"bytes,158,opt,name=_get_king_castle_info,json=GetKingCastleInfo" json:"_get_king_castle_info,omitempty"`                         //请求获取王城信息
	XActiveSubCity                        *ActiveSubCity                        `protobuf:"bytes,159,opt,name=_active_sub_city,json=ActiveSubCity" json:"_active_sub_city,omitempty"`                                       //激活自己的分城
	XModifySubCity                        *ModifySubCity                        `protobuf:"bytes,160,opt,name=_modify_sub_city,json=ModifySubCity" json:"_modify_sub_city,omitempty"`                                       //修改分城请求
	XTavernRefresh                        *TavernRefresh                        `protobuf:"bytes,161,opt,name=_tavern_refresh,json=TavernRefresh" json:"_tavern_refresh,omitempty"`                                         //请求刷新酒馆英雄
	XTavernBuy                            *TavernBuy                            `protobuf:"bytes,162,opt,name=_tavern_buy,json=TavernBuy" json:"_tavern_buy,omitempty"`                                                     //请求购买酒馆英雄
	XGeneral                              *General                              `protobuf:"bytes,163,opt,name=_general,json=General" json:"_general,omitempty"`                                                             //将军相关的所有接口
	XSacrificeReliveGeneral               *SacrificeReliveGeneral               `protobuf:"bytes,164,opt,name=_sacrifice_relive_general,json=SacrificeReliveGeneral" json:"_sacrifice_relive_general,omitempty"`            //祭坛复活将军接口
	XSubCityBuyBuilder                    *SubCityBuyBuilder                    `protobuf:"bytes,165,opt,name=_sub_city_buy_builder,json=SubCityBuyBuilder" json:"_sub_city_buy_builder,omitempty"`                         //分城买锤子
	XSubCityUpgradeTimes                  *SubCityUpgradeTimes                  `protobuf:"bytes,166,opt,name=_sub_city_upgrade_times,json=SubCityUpgradeTimes" json:"_sub_city_upgrade_times,omitempty"`                   //分城升级时代
	XSubCitySpeedupBuilding               *SubCitySpeedupBuilding               `protobuf:"bytes,167,opt,name=_sub_city_speedup_building,json=SubCitySpeedupBuilding" json:"_sub_city_speedup_building,omitempty"`          //分城用物品加速建筑
	XSubCityBuyTroop                      *SubCityBuyTroop                      `protobuf:"bytes,168,opt,name=_sub_city_buy_troop,json=SubCityBuyTroop" json:"_sub_city_buy_troop,omitempty"`                               //分城买兵
	XAbandonSubCity                       *AbandonSubCity                       `protobuf:"bytes,169,opt,name=_abandon_sub_city,json=AbandonSubCity" json:"_abandon_sub_city,omitempty"`                                    //放弃分城
	XGetActivityTaskReward                *GetActivityTaskReward                `protobuf:"bytes,170,opt,name=_get_activity_task_reward,json=GetActivityTaskReward" json:"_get_activity_task_reward,omitempty"`             //获取活跃度奖励
	XChangeKingPlayer                     *ChangeKingPlayer                     `protobuf:"bytes,171,opt,name=_change_king_player,json=ChangeKingPlayer" json:"_change_king_player,omitempty"`                              //联盟内转让当前王城的国王
	XSetguildplayerkingcastlejob          *SetGuildPlayerKingCastleJob          `protobuf:"bytes,172,opt,name=_setguildplayerkingcastlejob,json=Setguildplayerkingcastlejob" json:"_setguildplayerkingcastlejob,omitempty"` // 设置王城的头衔职位
	XGeneralSkillRefresh                  *GeneralSkillRefresh                  `protobuf:"bytes,173,opt,name=_general_skill_refresh,json=GeneralSkillRefresh" json:"_general_skill_refresh,omitempty"`                     //将军技能刷新
	XGeneralSkillBuy                      *GeneralSkillBuy                      `protobuf:"bytes,174,opt,name=_general_skill_buy,json=GeneralSkillBuy" json:"_general_skill_buy,omitempty"`                                 //将军技能购买
	XGetChatConfig                        *GetChatConfig                        `protobuf:"bytes,175,opt,name=_get_chat_config,json=GetChatConfig" json:"_get_chat_config,omitempty"`                                       //获取聊天配置
	XChangeEvony                          *ChangeEvony                          `protobuf:"bytes,176,opt,name=_change_evony,json=ChangeEvony" json:"_change_evony,omitempty"`                                               //换文明
	XDestructEquipment                    *DestructEquipment                    `protobuf:"bytes,177,opt,name=_destruct_equipment,json=DestructEquipment" json:"_destruct_equipment,omitempty"`                             //拆解装备
	XDewelSynthesis                       *DewelSynthesis                       `protobuf:"bytes,178,opt,name=_dewel_synthesis,json=DewelSynthesis" json:"_dewel_synthesis,omitempty"`
	XResetLordGift                        *ResetLordGift                        `protobuf:"bytes,179,opt,name=_reset_lord_gift,json=ResetLordGift" json:"_reset_lord_gift,omitempty"`                                                                            //重置君主天赋
	XSetKingNameLanguage                  *SetKingNameLanguage                  `protobuf:"bytes,180,opt,name=_set_king_name_language,json=SetKingNameLanguage" json:"_set_king_name_language,omitempty"`                                                        //设置国家名字和语言
	XGetGuildTechData                     *GetGuildTechData                     `protobuf:"bytes,181,opt,name=_get_guild_tech_data,json=GetGuildTechData" json:"_get_guild_tech_data,omitempty"`                                                                 //主动拉取联盟科技
	XCallBackKingCastleArmy               *CallBackKingCastleArmy               `protobuf:"bytes,182,opt,name=_call_back_king_castle_army,json=CallBackKingCastleArmy" json:"_call_back_king_castle_army,omitempty"`                                             //召回王城军队
	XGetServerInfo                        *GetServerInfo                        `protobuf:"bytes,183,opt,name=_get_server_info,json=GetServerInfo" json:"_get_server_info,omitempty"`                                                                            //服务器信息,显示小地图时用 (弃用)
	XSearchUser                           *SearchUser                           `protobuf:"bytes,184,opt,name=_search_user,json=SearchUser" json:"_search_user,omitempty"`                                                                                       //用户名全匹配搜索，或者用户id全匹配搜索。
	XGetWheelList                         *GetWheelList                         `protobuf:"bytes,185,opt,name=_get_wheel_list,json=GetWheelList" json:"_get_wheel_list,omitempty"`                                                                               //获取轮盘列表
	XPlayWheel                            *PlayWheel                            `protobuf:"bytes,186,opt,name=_play_wheel,json=PlayWheel" json:"_play_wheel,omitempty"`                                                                                          //转轮盘
	XCollectWheelData                     *CollectWheelData                     `protobuf:"bytes,187,opt,name=_collect_wheel_data,json=CollectWheelData" json:"_collect_wheel_data,omitempty"`                                                                   //收取转轮盘结果
	XSetWheelVipPlay                      *SetWheelVipPlay                      `protobuf:"bytes,188,opt,name=_set_wheel_vip_play,json=SetWheelVipPlay" json:"_set_wheel_vip_play,omitempty"`                                                                    //设置转轮盘VIP等级玩法
	XGetWheelVipPlayList                  *GetWheelVipPlayList                  `protobuf:"bytes,189,opt,name=_get_wheel_vip_play_list,json=GetWheelVipPlayList" json:"_get_wheel_vip_play_list,omitempty"`                                                      //获取用户vip玩法数据
	XGetWheelCredits                      *GetWheelCredits                      `protobuf:"bytes,190,opt,name=_get_wheel_credits,json=GetWheelCredits" json:"_get_wheel_credits,omitempty"`                                                                      //获取轮盘积分
	XClientLog                            *ClientLog                            `protobuf:"bytes,191,opt,name=_client_log,json=ClientLog" json:"_client_log,omitempty"`                                                                                          //客户端记录的log
	XSetDefendGeneral                     *SetDefendGeneral                     `protobuf:"bytes,192,opt,name=_set_defend_general,json=SetDefendGeneral" json:"_set_defend_general,omitempty"`                                                                   //设置主城守将
	XGetKindomInfo                        *GetKindomInfo                        `protobuf:"bytes,193,opt,name=_get_kindom_info,json=GetKindomInfo" json:"_get_kindom_info,omitempty"`                                                                            //获取王城信息
	XGetKindomJobTitleUsers               *GetKindomJobTitleUsers               `protobuf:"bytes,194,opt,name=_get_kindom_job_title_users,json=GetKindomJobTitleUsers" json:"_get_kindom_job_title_users,omitempty"`                                             //获取王城头衔者信息
	XGetKindomHistoryKings                *GetKindomHistoryKings                `protobuf:"bytes,195,opt,name=_get_kindom_history_kings,json=GetKindomHistoryKings" json:"_get_kindom_history_kings,omitempty"`                                                  //获取历任国王信息
	XGetKindomMarchList                   *GetKindomMarchList                   `protobuf:"bytes,196,opt,name=_get_kindom_march_list,json=GetKindomMarchList" json:"_get_kindom_march_list,omitempty"`                                                           //获取战争列表信息
	XSetKindomPlayerJobTitle              *SetKindomPlayerJobTitle              `protobuf:"bytes,197,opt,name=_set_kindom_player_job_title,json=SetKindomPlayerJobTitle" json:"_set_kindom_player_job_title,omitempty"`                                          //设置玩家头衔
	XGetKindomArmySupport                 *GetKindomArmySupport                 `protobuf:"bytes,198,opt,name=_get_kindom_army_support,json=GetKindomArmySupport" json:"_get_kindom_army_support,omitempty"`                                                     //获取王城驻军详情
	XSpeedupHealSoldiers                  *SpeedupHealSoldiers                  `protobuf:"bytes,199,opt,name=_speedup_heal_soldiers,json=SpeedupHealSoldiers" json:"_speedup_heal_soldiers,omitempty"`                                                          //加速士兵治疗
	XSubCityHealWall                      *SubCityHealWall                      `protobuf:"bytes,200,opt,name=_sub_city_heal_wall,json=SubCityHealWall" json:"_sub_city_heal_wall,omitempty"`                                                                    //分城城墙治疗
	XSpeedupEquipSynthesis                *SpeedupEquipSynthesis                `protobuf:"bytes,201,opt,name=_speedup_equip_synthesis,json=SpeedupEquipSynthesis" json:"_speedup_equip_synthesis,omitempty"`                                                    //锻造金币加速
	XGiftExchange                         *GiftExchange                         `protobuf:"bytes,204,opt,name=_gift_exchange,json=GiftExchange" json:"_gift_exchange,omitempty"`                                                                                 //礼包兑换
	XSetUserInfoPermission                *SetUserInfoPermission                `protobuf:"bytes,205,opt,name=_set_user_info_permission,json=SetUserInfoPermission" json:"_set_user_info_permission,omitempty"`                                                  //设置装备查看权限
	XDismissSubcitySoldiers               *DismissSubcitySoldiers               `protobuf:"bytes,206,opt,name=_dismiss_subcity_soldiers,json=DismissSubcitySoldiers" json:"_dismiss_subcity_soldiers,omitempty"`                                                 //解散分城士兵
	XGetHistoryWarList                    *GetHistoryWarList                    `protobuf:"bytes,207,opt,name=_get_history_war_list,json=GetHistoryWarList" json:"_get_history_war_list,omitempty"`                                                              //获取历史战争列表
	XSendGuildWarImmediately              *SendGuildWarImmediately              `protobuf:"bytes,208,opt,name=_send_guild_war_immediately,json=SendGuildWarImmediately" json:"_send_guild_war_immediately,omitempty"`                                            //联盟战立即出征
	XGetKillRankList                      *GetKillRankList                      `protobuf:"bytes,209,opt,name=_get_kill_rank_list,json=GetKillRankList" json:"_get_kill_rank_list,omitempty"`                                                                    //获取杀敌排行列表
	XSetVipPermission                     *SetVipPermission                     `protobuf:"bytes,210,opt,name=_set_vip_permission,json=SetVipPermission" json:"_set_vip_permission,omitempty"`                                                                   //获取VIP查看权限
	XAddFriend                            *AddFriend                            `protobuf:"bytes,211,opt,name=_add_friend,json=AddFriend" json:"_add_friend,omitempty"`                                                                                          //加好友
	XDelFriend                            *DelFriend                            `protobuf:"bytes,212,opt,name=_del_friend,json=DelFriend" json:"_del_friend,omitempty"`                                                                                          //删除好友
	XAddUserToBlacklist                   *AddUserToBlacklist                   `protobuf:"bytes,213,opt,name=_add_user_to_blacklist,json=AddUserToBlacklist" json:"_add_user_to_blacklist,omitempty"`                                                           //将某人拉入黑名单
	XDelUserFromBlacklist                 *DelUserFromBlacklist                 `protobuf:"bytes,214,opt,name=_del_user_from_blacklist,json=DelUserFromBlacklist" json:"_del_user_from_blacklist,omitempty"`                                                     //将某人从黑名单删除
	XConfirmAddFriend                     *ConfirmAddFriend                     `protobuf:"bytes,215,opt,name=_confirm_add_friend,json=ConfirmAddFriend" json:"_confirm_add_friend,omitempty"`                                                                   //好友请求确认
	XGetMailReportDetail                  *GetMailReportDetail                  `protobuf:"bytes,216,opt,name=_get_mail_report_detail,json=GetMailReportDetail" json:"_get_mail_report_detail,omitempty"`                                                        //获取邮件详细信息
	XBuyResource                          *BuyResource                          `protobuf:"bytes,217,opt,name=_buy_resource,json=BuyResource" json:"_buy_resource,omitempty"`                                                                                    //购买资源
	XRefuseAddFriend                      *RefuseAddFriend                      `protobuf:"bytes,218,opt,name=_refuse_add_friend,json=RefuseAddFriend" json:"_refuse_add_friend,omitempty"`                                                                      //拒绝好友请求
	XFavoriteFriend                       *FavoriteFriend                       `protobuf:"bytes,219,opt,name=_favorite_friend,json=FavoriteFriend" json:"_favorite_friend,omitempty"`                                                                           //星标好友
	XUnfavoriteFriend                     *UnfavoriteFriend                     `protobuf:"bytes,220,opt,name=_unfavorite_friend,json=UnfavoriteFriend" json:"_unfavorite_friend,omitempty"`                                                                     //取消星标好友
	XSuggestFriends                       *SuggestFriends                       `protobuf:"bytes,221,opt,name=_suggest_friends,json=SuggestFriends" json:"_suggest_friends,omitempty"`                                                                           //获取推荐好友
	XSendCoordMessage                     *chatmessage.SendCoordMessage         `protobuf:"bytes,222,opt,name=_send_coord_message,json=SendCoordMessage" json:"_send_coord_message,omitempty"`                                                                   //发坐标消息
	XSendPhotoMessage                     *chatmessage.SendPhotoMessage         `protobuf:"bytes,223,opt,name=_send_photo_message,json=SendPhotoMessage" json:"_send_photo_message,omitempty"`                                                                   //发图片消息
	XSendMailMessage                      *chatmessage.SendMailMessage          `protobuf:"bytes,224,opt,name=_send_mail_message,json=SendMailMessage" json:"_send_mail_message,omitempty"`                                                                      //发邮件消息
	XMarkReadChannel                      *chatmessage.MarkReadChannel          `protobuf:"bytes,225,opt,name=_mark_read_channel,json=MarkReadChannel" json:"_mark_read_channel,omitempty"`                                                                      //标记聊天消息已读
	XClaimMembershipReward                *ClaimMembershipReward                `protobuf:"bytes,226,opt,name=_claim_membership_reward,json=ClaimMembershipReward" json:"_claim_membership_reward,omitempty"`                                                    //领取会员每日奖励
	XKingdomAwardPlayer                   *KingdomAwardPlayer                   `protobuf:"bytes,227,opt,name=_kingdom_award_player,json=KingdomAwardPlayer" json:"_kingdom_award_player,omitempty"`                                                             //封赏玩家
	XReportMessage                        *ReportMessage                        `protobuf:"bytes,229,opt,name=_report_message,json=ReportMessage" json:"_report_message,omitempty"`                                                                              //举报聊天消息
	XChatHistoryWholeFetch                *ChatHistoryWholeFetch                `protobuf:"bytes,230,opt,name=_chat_history_whole_fetch,json=ChatHistoryWholeFetch" json:"_chat_history_whole_fetch,omitempty"`                                                  //获取聊天列表整体历史记录
	XOutfireWall                          *OutfireWall                          `protobuf:"bytes,231,opt,name=_outfire_wall,json=OutfireWall" json:"_outfire_wall,omitempty"`                                                                                    //城墙灭火
	XOnWallOutlife                        *OnWallOutlife                        `protobuf:"bytes,232,opt,name=_on_wall_outlife,json=OnWallOutlife" json:"_on_wall_outlife,omitempty"`                                                                            //城墙生命为0, 等待服务器给个新的位置
	XGetRewardmaillist                    *GetRewardmaillist                    `protobuf:"bytes,233,opt,name=_get_rewardmaillist,json=GetRewardmaillist" json:"_get_rewardmaillist,omitempty"`                                                                  //获取奖励邮件列表
	XClaimConsumerReward                  *ClaimConsumerReward                  `protobuf:"bytes,234,opt,name=_claim_consumer_reward,json=ClaimConsumerReward" json:"_claim_consumer_reward,omitempty"`                                                          //获取消费奖励
	XRefreshPatrol                        *RefreshPatrol                        `protobuf:"bytes,235,opt,name=_refresh_patrol,json=RefreshPatrol" json:"_refresh_patrol,omitempty"`                                                                              //刷新巡查内容
	XCollectPatrolAward                   *CollectPatrolAward                   `protobuf:"bytes,236,opt,name=_collect_patrol_award,json=CollectPatrolAward" json:"_collect_patrol_award,omitempty"`                                                             //收取巡查奖励
	XAutoPatrol                           *AutoPatrol                           `protobuf:"bytes,237,opt,name=_auto_patrol,json=AutoPatrol" json:"_auto_patrol,omitempty"`                                                                                       //自动巡查
	XGetServerActiveReward                *GetServerActiveReward                `protobuf:"bytes,239,opt,name=_get_server_active_reward,json=GetServerActiveReward" json:"_get_server_active_reward,omitempty"`                                                  //领取开服活动奖励
	XAllianceUseGift                      *AllianceUseGift                      `protobuf:"bytes,240,opt,name=_alliance_use_gift,json=AllianceUseGift" json:"_alliance_use_gift,omitempty"`                                                                      //使用联盟礼物
	XKingUseGift                          *KingUseGift                          `protobuf:"bytes,241,opt,name=_king_use_gift,json=KingUseGift" json:"_king_use_gift,omitempty"`                                                                                  //使用全服礼物
	XServerActive                         *ServerActive                         `protobuf:"bytes,242,opt,name=_server_active,json=ServerActive" json:"_server_active,omitempty"`                                                                                 //开服活动请求
	XCompileType                          *int32                                `protobuf:"varint,243,opt,name=_compileType,json=CompileType" json:"_compileType,omitempty"`                                                                                     //客户端编译类型
	XDeleteMessage                        *chatmessage.DeleteMessage            `protobuf:"bytes,244,opt,name=_delete_message,json=DeleteMessage" json:"_delete_message,omitempty"`                                                                              //删除消息
	XGetKingGift                          *GetKingGift                          `protobuf:"bytes,245,opt,name=_get_king_gift,json=GetKingGift" json:"_get_king_gift,omitempty"`                                                                                  //获得全服礼物
	XGetFriendsList                       *GetFriendsList                       `protobuf:"bytes,246,opt,name=_get_friends_list,json=GetFriendsList" json:"_get_friends_list,omitempty"`                                                                         //获取好友列表
	XGetAllianceRankList                  *GetAllianceRankList                  `protobuf:"bytes,247,opt,name=_get_alliance_rank_list,json=GetAllianceRankList" json:"_get_alliance_rank_list,omitempty"`                                                        //获取联盟战力排行列表
	XGetAllianceKillRankList              *GetAllianceKillRankList              `protobuf:"bytes,248,opt,name=_get_alliance_kill_rank_list,json=GetAllianceKillRankList" json:"_get_alliance_kill_rank_list,omitempty"`                                          //获取联盟杀敌排行列表
	XGetPowerRankList                     *GetPowerRankList                     `protobuf:"bytes,249,opt,name=_get_power_rank_list,json=GetPowerRankList" json:"_get_power_rank_list,omitempty"`                                                                 //获取个人战力排行列表
	XChangeServerCastle                   *ChangeServerCastle                   `protobuf:"bytes,250,opt,name=_change_server_castle,json=ChangeServerCastle" json:"_change_server_castle,omitempty"`                                                             //修改服务器城堡
	XGetServerKingdomList                 *GetServerKingdomList                 `protobuf:"bytes,251,opt,name=_get_server_kingdom_list,json=GetServerKingdomList" json:"_get_server_kingdom_list,omitempty"`                                                     //获取各个服的王城列表信息
	XGetServerKingdom                     *GetServerKingdom                     `protobuf:"bytes,252,opt,name=_get_server_kingdom,json=GetServerKingdom" json:"_get_server_kingdom,omitempty"`                                                                   //获取指定服的王城信息
	XCheckBuff                            *CheckBuff                            `protobuf:"bytes,253,opt,name=_check_buff,json=CheckBuff" json:"_check_buff,omitempty"`                                                                                          //检查buff
	XCheckRotary                          *CheckRotary                          `protobuf:"bytes,254,opt,name=_check_rotary,json=CheckRotary" json:"_check_rotary,omitempty"`                                                                                    //检查轮盘播报
	XGetActivitymaillist                  *GetActivitymaillist                  `protobuf:"bytes,255,opt,name=_get_activitymaillist,json=GetActivitymaillist" json:"_get_activitymaillist,omitempty"`                                                            //获取活动邮件列表
	XCheckRotaryAdvance                   *CheckRotaryAdvance                   `protobuf:"bytes,256,opt,name=_check_rotary_advance,json=CheckRotaryAdvance" json:"_check_rotary_advance,omitempty"`                                                             //轮盘高级播报请求
	XWhiteWalkerActiveStart               *WhiteWalkerActiveStart               `protobuf:"bytes,257,opt,name=_white_walker_active_start,json=WhiteWalkerActiveStart" json:"_white_walker_active_start,omitempty"`                                               //开启异鬼来袭活动
	XGetLordHourGift                      *GetLordHourGift                      `protobuf:"bytes,258,opt,name=_get_lord_hour_gift,json=GetLordHourGift" json:"_get_lord_hour_gift,omitempty"`                                                                    //领取全服王国在线礼物
	XRepatriateWarMember                  *RepatriateWarMember                  `protobuf:"bytes,259,opt,name=_repatriate_war_member,json=RepatriateWarMember" json:"_repatriate_war_member,omitempty"`                                                          //遣返合战成员
	XGetTarvenStamina                     *GetTarvenStamina                     `protobuf:"bytes,260,opt,name=_get_tarven_stamina,json=GetTarvenStamina" json:"_get_tarven_stamina,omitempty"`                                                                   //获得酒馆体力
	XAddFavoriteCoord                     *AddFavoriteCoord                     `protobuf:"bytes,261,opt,name=_add_favorite_coord,json=AddFavoriteCoord" json:"_add_favorite_coord,omitempty"`                                                                   //添加收藏坐标
	XGetFavoriteCoordList                 *GetFavoriteCoordList                 `protobuf:"bytes,262,opt,name=_get_favorite_coord_list,json=GetFavoriteCoordList" json:"_get_favorite_coord_list,omitempty"`                                                     //取收藏坐标列表
	XAskGeneral                           *AskGeneral                           `protobuf:"bytes,263,opt,name=_ask_general,json=AskGeneral" json:"_ask_general,omitempty"`                                                                                       //获取将军信息详情
	XReportError                          *ReportError                          `protobuf:"bytes,264,opt,name=_report_error,json=ReportError" json:"_report_error,omitempty"`                                                                                    //上报错误
	XCreateGuildBuilding                  *CreateGuildBuilding                  `protobuf:"bytes,265,opt,name=_create_guild_building,json=CreateGuildBuilding" json:"_create_guild_building,omitempty"`                                                          //建造联盟建筑
	XReclaimGuildBuilding                 *ReclaimGuildBuilding                 `protobuf:"bytes,266,opt,name=_reclaim_guild_building,json=ReclaimGuildBuilding" json:"_reclaim_guild_building,omitempty"`                                                       //回收联盟建筑
	XSetSubcityAutoFight                  *SetSubcityAutoFight                  `protobuf:"bytes,267,opt,name=_set_subcity_auto_fight,json=SetSubcityAutoFight" json:"_set_subcity_auto_fight,omitempty"`                                                        //设置分城是否自动参与战斗
	XGetGuildTerritory                    *GetGuildTerritory                    `protobuf:"bytes,268,opt,name=_get_guild_territory,json=GetGuildTerritory" json:"_get_guild_territory,omitempty"`                                                                //获取联盟领地信息
	XReleaseImprisonGeneral               *ReleaseImprisonGeneral               `protobuf:"bytes,269,opt,name=_release_imprison_general,json=ReleaseImprisonGeneral" json:"_release_imprison_general,omitempty"`                                                 //释放俘虏将军
	XKillImprisonGeneral                  *KillImprisonGeneral                  `protobuf:"bytes,270,opt,name=_kill_imprison_general,json=KillImprisonGeneral" json:"_kill_imprison_general,omitempty"`                                                          //处决俘虏将军
	XStopReclaimGuildBuilding             *StopReclaimGuildBuilding             `protobuf:"bytes,271,opt,name=_stop_reclaim_guild_building,json=StopReclaimGuildBuilding" json:"_stop_reclaim_guild_building,omitempty"`                                         //停止回收联盟建筑
	XRedomImprisonGeneral                 *RedomImprisonGeneral                 `protobuf:"bytes,272,opt,name=_redom_imprison_general,json=RedomImprisonGeneral" json:"_redom_imprison_general,omitempty"`                                                       //赎回俘虏将军
	XSendInvitekey                        *SendInvitekey                        `protobuf:"bytes,273,opt,name=_SendInvitekey,json=SendInvitekey" json:"_SendInvitekey,omitempty"`                                                                                //发送邀请码
	XSendSnowball                         *SendSnowball                         `protobuf:"bytes,274,opt,name=_send_snowball,json=SendSnowball" json:"_send_snowball,omitempty"`                                                                                 //扔雪球
	XBuySkin                              *BuySkin                              `protobuf:"bytes,275,opt,name=_buy_skin,json=BuySkin" json:"_buy_skin,omitempty"`                                                                                                //购买装扮
	XSelectSkin                           *SelectSkin                           `protobuf:"bytes,276,opt,name=_select_skin,json=SelectSkin" json:"_select_skin,omitempty"`                                                                                       //选择装扮
	XFacebook_Invite                      *Facebook_Invite                      `protobuf:"bytes,277,opt,name=_Facebook_Invite,json=FacebookInvite" json:"_Facebook_Invite,omitempty"`                                                                           //facebook 邀请
	XGetGuildTerritoryLimit               *GetGuildTerritoryLimit               `protobuf:"bytes,278,opt,name=_get_guild_territory_limit,json=GetGuildTerritoryLimit" json:"_get_guild_territory_limit,omitempty"`                                               //获取联盟人数上限
	XGetCrossServerInfo                   *GetCrossServerInfo                   `protobuf:"bytes,279,opt,name=_get_cross_server_info,json=GetCrossServerInfo" json:"_get_cross_server_info,omitempty"`                                                           //获取跨服信息
	XRequestWorldmapNew                   *RequestMapinfoNew                    `protobuf:"bytes,280,opt,name=_request_worldmap_new,json=RequestWorldmapNew" json:"_request_worldmap_new,omitempty"`                                                             //获取地图信息
	XUpgradeSubcityColor                  *UpgradeSubcityColor                  `protobuf:"bytes,281,opt,name=_upgrade_subcity_color,json=UpgradeSubcityColor" json:"_upgrade_subcity_color,omitempty"`                                                          //升级分城品质
	XSetAllienceGiftPermission            *SetAllienceGiftPermission            `protobuf:"bytes,282,opt,name=_set_allience_gift_permission,json=SetAllienceGiftPermission" json:"_set_allience_gift_permission,omitempty"`                                      //设置c联盟礼物来源查看权限
	XAmbulanceSoldiers                    *AmbulanceSoldiers                    `protobuf:"bytes,283,opt,name=_ambulance_soldiers,json=AmbulanceSoldiers" json:"_ambulance_soldiers,omitempty"`                                                                  // 急救伤兵
	XUnity5                               *int32                                `protobuf:"varint,284,opt,name=_unity5,json=Unity5" json:"_unity5,omitempty"`                                                                                                    //1: unity5版本，0 unity4版本
	XBatchMailReward                      *BatchMailReward                      `protobuf:"bytes,285,opt,name=_batch_mail_reward,json=BatchMailReward" json:"_batch_mail_reward,omitempty"`                                                                      //批量收取邮件里面的附件
	XBatchWearEquip                       *BatchWearEquip                       `protobuf:"bytes,286,opt,name=_batch_wear_equip,json=BatchWearEquip" json:"_batch_wear_equip,omitempty"`                                                                         //批量穿装备 - 移除
	XGetCashcostAndGoldReward             *GetCashcostAndGoldReward             `protobuf:"bytes,287,opt,name=_get_cashcost_and_gold_reward,json=GetCashcostAndGoldReward" json:"_get_cashcost_and_gold_reward,omitempty"`                                       //获取现金预充值和钻石奖励数
	XGetPreRechargeReward                 *GetPreRechargeReward                 `protobuf:"bytes,288,opt,name=_get_pre_recharge_reward,json=GetPreRechargeReward" json:"_get_pre_recharge_reward,omitempty"`                                                     //领取预充值奖励
	XGetGameNotice                        *GetGameNotice                        `protobuf:"bytes,289,opt,name=_get_game_notice,json=GetGameNotice" json:"_get_game_notice,omitempty"`                                                                            //获取游戏公告
	XMarkReadGameNotice                   *MarkReadGameNotice                   `protobuf:"bytes,290,opt,name=_mark_read_game_notice,json=MarkReadGameNotice" json:"_mark_read_game_notice,omitempty"`                                                           //标记游戏公告已读
	XUpgradeGuildBuilding                 *UpgradeGuildBuilding                 `protobuf:"bytes,291,opt,name=_upgrade_guild_building,json=UpgradeGuildBuilding" json:"_upgrade_guild_building,omitempty"`                                                       //升级联盟城堡
	XSaveUserPrefs                        *SaveUserPrefs                        `protobuf:"bytes,292,opt,name=_save_user_prefs,json=SaveUserPrefs" json:"_save_user_prefs,omitempty"`                                                                            //保存本地设置信息
	XGetUserPrefs                         *GetUserPrefs                         `protobuf:"bytes,293,opt,name=_get_user_prefs,json=GetUserPrefs" json:"_get_user_prefs,omitempty"`                                                                               //获取本地设置信息
	XCancelUpgradeGuildBuilding           *CancelUpgradeGuildBuilding           `protobuf:"bytes,294,opt,name=_cancel_upgrade_guild_building,json=CancelUpgradeGuildBuilding" json:"_cancel_upgrade_guild_building,omitempty"`                                   //取消联盟建筑升级
	XGetWorldBossInfo                     *GetWorldBossInfo                     `protobuf:"bytes,295,opt,name=_get_world_boss_info,json=GetWorldBossInfo" json:"_get_world_boss_info,omitempty"`                                                                 //获取世界boss信息
	XBuyAttackBoss                        *BuyAttackBoss                        `protobuf:"bytes,296,opt,name=_buy_attack_boss,json=BuyAttackBoss" json:"_buy_attack_boss,omitempty"`                                                                            //购买打boss次数
	XGetCrossServerRank                   *GetCrossServerRank                   `protobuf:"bytes,297,opt,name=_get_cross_server_rank,json=GetCrossServerRank" json:"_get_cross_server_rank,omitempty"`                                                           //获取跨服战排行榜
	XRefineEquipment                      *RefineEquipment                      `protobuf:"bytes,298,opt,name=_refine_equipment,json=RefineEquipment" json:"_refine_equipment,omitempty"`                                                                        //装备精炼
	XUpdateSubcityWallData                *UpdateSubcityWallData                `protobuf:"bytes,299,opt,name=_update_subcity_wall_data,json=UpdateSubcityWallData" json:"_update_subcity_wall_data,omitempty"`                                                  //更新分城城墙信息
	XConfirmRefineEquipment               *ConfirmRefineEquipment               `protobuf:"bytes,300,opt,name=_confirm_refine_equipment,json=ConfirmRefineEquipment" json:"_confirm_refine_equipment,omitempty"`                                                 //确认装备精炼结果
	XSendEquipMessage                     *chatmessage.SendEquipMessage         `protobuf:"bytes,301,opt,name=_send_equip_message,json=SendEquipMessage" json:"_send_equip_message,omitempty"`                                                                   //发装备消息
	XClearWorkCd                          *ClearWorkCd                          `protobuf:"bytes,302,opt,name=_clear_work_cd,json=ClearWorkCd" json:"_clear_work_cd,omitempty"`                                                                                  //清除俘虏劳作的cd时间
	XRecommendGuildTech                   *RecommendGuildTech                   `protobuf:"bytes,303,opt,name=_recommend_guild_tech,json=RecommendGuildTech" json:"_recommend_guild_tech,omitempty"`                                                             //推荐联盟科技
	XDeletePvpMessage                     *chatmessage.DeletePvpMessage         `protobuf:"bytes,304,opt,name=_delete_pvp_message,json=DeletePvpMessage" json:"_delete_pvp_message,omitempty"`                                                                   //删除聊天会话记录
	XHitColorfulEgg                       *HitColorfulEgg                       `protobuf:"bytes,305,opt,name=_hit_colorful_egg,json=HitColorfulEgg" json:"_hit_colorful_egg,omitempty"`                                                                         //砸蛋
	XGetFightMaillist                     *GetFightMaillist                     `protobuf:"bytes,306,opt,name=_get_fight_maillist,json=GetFightMaillist" json:"_get_fight_maillist,omitempty"`                                                                   //获取战报邮件
	XProtectOther                         *ProtectOther                         `protobuf:"bytes,307,opt,name=_protect_other,json=ProtectOther" json:"_protect_other,omitempty"`                                                                                 //为盟友开启战争保护
	XRequestMapinfoBattlefield            *RequestMapinfoBattlefield            `protobuf:"bytes,308,opt,name=_request_mapinfo_battlefield,json=RequestMapinfoBattlefield" json:"_request_mapinfo_battlefield,omitempty"`                                        //获取战场地图信息
	XSynthesisItem                        *SynthesisItem                        `protobuf:"bytes,309,opt,name=_synthesis_item,json=SynthesisItem" json:"_synthesis_item,omitempty"`                                                                              //合成道具
	XComeInBattle                         *ComeInBattle                         `protobuf:"bytes,310,opt,name=_come_in_battle,json=ComeInBattle" json:"_come_in_battle,omitempty"`                                                                               //进入战场
	XGiveUpRuins                          *GiveUpRuins                          `protobuf:"bytes,311,opt,name=_give_up_ruins,json=GiveUpRuins" json:"_give_up_ruins,omitempty"`                                                                                  //遗弃遗迹
	XUpgradeSoldiers                      *UpgradeSoldiers                      `protobuf:"bytes,312,opt,name=_upgrade_soldiers,json=UpgradeSoldiers" json:"_upgrade_soldiers,omitempty"`                                                                        //升级士兵
	XGetArtReward                         *GetArtReward                         `protobuf:"bytes,313,opt,name=_get_art_reward,json=GetArtReward" json:"_get_art_reward,omitempty"`                                                                               //领取艺术大厅奖励
	XActivePet                            *ActivePet                            `protobuf:"bytes,314,opt,name=_active_pet,json=ActivePet" json:"_active_pet,omitempty"`                                                                                          //激活宠物
	XMakeMaterial                         *MakeMaterial                         `protobuf:"bytes,315,opt,name=_make_material,json=MakeMaterial" json:"_make_material,omitempty"`                                                                                 //材料生产
	XSpeedupMaterial                      *SpeedupMaterial                      `protobuf:"bytes,316,opt,name=_speedup_material,json=SpeedupMaterial" json:"_speedup_material,omitempty"`                                                                        //材料生产立即完成
	XDeleteMaterialQueue                  *DeleteMaterialQueue                  `protobuf:"bytes,317,opt,name=_delete_material_queue,json=DeleteMaterialQueue" json:"_delete_material_queue,omitempty"`                                                          //删除材料生产队列
	XUpgradePet                           *UpgradePet                           `protobuf:"bytes,318,opt,name=_upgrade_pet,json=UpgradePet" json:"_upgrade_pet,omitempty"`                                                                                       //宠物升品
	XGetTechTaskList                      *GetTechTaskList                      `protobuf:"bytes,319,opt,name=_get_tech_task_list,json=GetTechTaskList" json:"_get_tech_task_list,omitempty"`                                                                    //获取科技任务
	XGetTechTaskReward                    *GetTechTaskReward                    `protobuf:"bytes,320,opt,name=_get_tech_task_reward,json=GetTechTaskReward" json:"_get_tech_task_reward,omitempty"`                                                              //获取科技任务奖励
	XMakeTechStone                        *MakeTechStone                        `protobuf:"bytes,321,opt,name=_make_tech_stone,json=MakeTechStone" json:"_make_tech_stone,omitempty"`                                                                            //生产科研石
	XSpeedupTechStone                     *SpeedupTechStone                     `protobuf:"bytes,322,opt,name=_speedup_tech_stone,json=SpeedupTechStone" json:"_speedup_tech_stone,omitempty"`                                                                   //生产科研石立即完成
	XSignupBattlefield                    *SignupBattlefield                    `protobuf:"bytes,323,opt,name=_signup_battlefield,json=SignupBattlefield" json:"_signup_battlefield,omitempty"`                                                                  //战场报名
	XSetMembersBattlefield                *SetMembersBattlefield                `protobuf:"bytes,324,opt,name=_set_members_battlefield,json=SetMembersBattlefield" json:"_set_members_battlefield,omitempty"`                                                    //战场参战成员委任
	XGetBattlefieldRanklist               *GetBattlefieldRanklist               `protobuf:"bytes,325,opt,name=_get_battlefield_ranklist,json=GetBattlefieldRanklist" json:"_get_battlefield_ranklist,omitempty"`                                                 //获取战场分数排行
	XGetBattlefieldGuildrank              *GetBattlefieldGuildrank              `protobuf:"bytes,326,opt,name=_get_battlefield_guildrank,json=GetBattlefieldGuildrank" json:"_get_battlefield_guildrank,omitempty"`                                              //获取战场赛季积分排行
	XGetBattlefieldHistory                *GetBattlefieldHistory                `protobuf:"bytes,327,opt,name=_get_battlefield_history,json=GetBattlefieldHistory" json:"_get_battlefield_history,omitempty"`                                                    //获取联盟战场历史战绩
	XGetRankList                          *GetRankList                          `protobuf:"bytes,328,opt,name=_get_rank_list,json=GetRankList" json:"_get_rank_list,omitempty"`                                                                                  //获取各种排行榜
	XUpgradeGuildFarm                     *UpgradeGuildFarm                     `protobuf:"bytes,329,opt,name=_upgrade_guild_farm,json=UpgradeGuildFarm" json:"_upgrade_guild_farm,omitempty"`                                                                   //升级联盟城堡
	XQuitBattle                           *QuitBattle                           `protobuf:"bytes,330,opt,name=_quit_battle,json=QuitBattle" json:"_quit_battle,omitempty"`                                                                                       //离开战场
	XGetBattlefieldInfo                   *GetBattlefieldInfo                   `protobuf:"bytes,331,opt,name=_get_battlefield_info,json=GetBattlefieldInfo" json:"_get_battlefield_info,omitempty"`                                                             //获取战场信息
	XGetBattleGarrison                    *GetBattleGarrison                    `protobuf:"bytes,332,opt,name=_get_battle_garrison,json=GetBattleGarrison" json:"_get_battle_garrison,omitempty"`                                                                //获取战场建筑驻军详情
	XGetBattleData                        *GetBattleData                        `protobuf:"bytes,333,opt,name=_get_battle_data,json=GetBattleData" json:"_get_battle_data,omitempty"`                                                                            //获取战场数据
	XGetBattlefieldRecord                 *GetBattlefieldRecord                 `protobuf:"bytes,334,opt,name=_get_battlefield_record,json=GetBattlefieldRecord" json:"_get_battlefield_record,omitempty"`                                                       //获取战场记录
	XGetBattlefieldPersonalRankInfo       *GetBattlefieldPersonalRankInfo       `protobuf:"bytes,335,opt,name=_get_battlefield_personal_rank_info,json=GetBattlefieldPersonalRankInfo" json:"_get_battlefield_personal_rank_info,omitempty"`                     //获取战场个人排行
	XSetIdNumber                          *SetIdNumber                          `protobuf:"bytes,336,opt,name=_set_id_number,json=SetIdNumber" json:"_set_id_number,omitempty"`                                                                                  //实名认证
	XGetBattlefieldPersonalSeasonRankInfo *GetBattlefieldPersonalSeasonRankInfo `protobuf:"bytes,337,opt,name=_get_battlefield_personal_season_rank_info,json=GetBattlefieldPersonalSeasonRankInfo" json:"_get_battlefield_personal_season_rank_info,omitempty"` //获取战场个人赛季排行
	XSetDragonUnlock                      *SetDragonUnlock                      `protobuf:"bytes,338,opt,name=_set_dragon_unlock,json=SetDragonUnlock" json:"_set_dragon_unlock,omitempty"`                                                                      //解锁龙
	XSetDragonFeed                        *SetDragonFeed                        `protobuf:"bytes,339,opt,name=_set_dragon_feed,json=SetDragonFeed" json:"_set_dragon_feed,omitempty"`                                                                            //喂养龙
	XSetDragonActive                      *SetDragonActive                      `protobuf:"bytes,340,opt,name=_set_dragon_active,json=SetDragonActive" json:"_set_dragon_active,omitempty"`                                                                      //出战龙
	XRefreshDragonFood                    *RefreshDragonFood                    `protobuf:"bytes,341,opt,name=_refresh_dragon_food,json=RefreshDragonFood" json:"_refresh_dragon_food,omitempty"`                                                                //刷新龙的食谱
	XGetHonorList                         *GetHonorList                         `protobuf:"bytes,342,opt,name=_get_honor_list,json=GetHonorList" json:"_get_honor_list,omitempty"`                                                                               //获取荣耀列表
	XGetBattlefieldBoss                   *GetBattlefieldBoss                   `protobuf:"bytes,343,opt,name=_get_battlefield_boss,json=GetBattlefieldBoss" json:"_get_battlefield_boss,omitempty"`                                                             //获取战场2地图上的boss数据
	XSendGeneralMessage                   *chatmessage.SendGeneralMessage       `protobuf:"bytes,344,opt,name=_send_general_message,json=SendGeneralMessage" json:"_send_general_message,omitempty"`                                                             //分享将军消息
	XBattleMarketBuy                      *BattleMarketBuy                      `protobuf:"bytes,345,opt,name=_battle_market_buy,json=BattleMarketBuy" json:"_battle_market_buy,omitempty"`                                                                      //购买战场商品
	XBattleMarketRefresh                  *BattleMarketRefresh                  `protobuf:"bytes,346,opt,name=_battle_market_refresh,json=BattleMarketRefresh" json:"_battle_market_refresh,omitempty"`                                                          //刷新战场商店
	XGetFoundSubcity                      *GetFoundSubcity                      `protobuf:"bytes,347,opt,name=_get_found_subcity,json=GetFoundSubcity" json:"_get_found_subcity,omitempty"`                                                                      //分城活动数据
	XBetFoundSubcity                      *BetFoundSubcity                      `protobuf:"bytes,348,opt,name=_bet_found_subcity,json=BetFoundSubcity" json:"_bet_found_subcity,omitempty"`                                                                      //分城下注
	XReapSubcityItems                     *ReapSubcityItems                     `protobuf:"bytes,349,opt,name=_reap_subcity_items,json=ReapSubcityItems" json:"_reap_subcity_items,omitempty"`                                                                   //收取分城材料
	XOpenSubcityByItem                    *OpenSubcityByItem                    `protobuf:"bytes,350,opt,name=_open_subcity_by_item,json=OpenSubcityByItem" json:"_open_subcity_by_item,omitempty"`                                                              //使用道具开启分城
	XRefineDragon                         *RefineDragon                         `protobuf:"bytes,351,opt,name=_refine_dragon,json=RefineDragon" json:"_refine_dragon,omitempty"`                                                                                 //龙的精炼
	XConfirmRefineDragon                  *ConfirmRefineDragon                  `protobuf:"bytes,352,opt,name=_confirm_refine_dragon,json=ConfirmRefineDragon" json:"_confirm_refine_dragon,omitempty"`                                                          //确认龙的精炼结果
	XSetBuildingGovernmentGeneral         *SetBuildingGovernmentGeneral         `protobuf:"bytes,353,opt,name=_set_building_government_general,json=SetBuildingGovernmentGeneral" json:"_set_building_government_general,omitempty"`                             //给建筑增加官职将军
	XInviteRobbersMembers                 *InviteRobbersMembers                 `protobuf:"bytes,354,opt,name=_invite_robbers_members,json=InviteRobbersMembers" json:"_invite_robbers_members,omitempty"`                                                       //邀请盟友击杀大盗
	XGetRobbers                           *GetRobbers                           `protobuf:"bytes,355,opt,name=_get_robbers,json=GetRobbers" json:"_get_robbers,omitempty"`                                                                                       //获取宫廷大盗列表
	XGetRobbersReward                     *GetRobbersReward                     `protobuf:"bytes,356,opt,name=_get_robbers_reward,json=GetRobbersReward" json:"_get_robbers_reward,omitempty"`                                                                   //获取宫廷大盗奖励
	XGetVipPopularityRankList             *GetVipPopularityRankList             `protobuf:"bytes,357,opt,name=_get_vip_popularity_rank_list,json=GetVipPopularityRankList" json:"_get_vip_popularity_rank_list,omitempty"`                                       //获取荣誉爵位列表
	XGetMapinfoTriumph                    *GetMapinfoTriumph                    `protobuf:"bytes,358,opt,name=_get_mapinfo_triumph,json=GetMapinfoTriumph" json:"_get_mapinfo_triumph,omitempty"`                                                                //获取凯旋门榜单
	XGetMapinfoTriumphRecord              *GetMapinfoTriumphRecord              `protobuf:"bytes,359,opt,name=_get_mapinfo_triumph_record,json=GetMapinfoTriumphRecord" json:"_get_mapinfo_triumph_record,omitempty"`                                            //获取凯旋门入榜记录
	XGetMapinfoTriumphFlower              *GetMapinfoTriumphFlower              `protobuf:"bytes,360,opt,name=_get_mapinfo_triumph_flower,json=GetMapinfoTriumphFlower" json:"_get_mapinfo_triumph_flower,omitempty"`                                            //凯旋门发送送花请求
	XGetMapinfoTriumphFlowerrecord        *GetMapinfoTriumphFlowerrecord        `protobuf:"bytes,361,opt,name=_get_mapinfo_triumph_flowerrecord,json=GetMapinfoTriumphFlowerrecord" json:"_get_mapinfo_triumph_flowerrecord,omitempty"`                          //获取凯旋门送花记录
	XOverBattlefield                      *OverBattlefield                      `protobuf:"bytes,362,opt,name=_over_battlefield,json=OverBattlefield" json:"_over_battlefield,omitempty"`                                                                        //战场结束，客户端上报积分情况
	XDestructSkillBook                    *DestructSkillBook                    `protobuf:"bytes,363,opt,name=_destruct_skill_book,json=DestructSkillBook" json:"_destruct_skill_book,omitempty"`                                                                //分解技能书
	XSetAvatarFrame                       *SetAvatarFrame                       `protobuf:"bytes,364,opt,name=_set_avatar_frame,json=SetAvatarFrame" json:"_set_avatar_frame,omitempty"`                                                                         //修改头像框
	XGetAchievementList                   *GetAchievementList                   `protobuf:"bytes,365,opt,name=_get_achievement_list,json=GetAchievementList" json:"_get_achievement_list,omitempty"`                                                             //获取玩家解锁成就列表
	XGetHydraRank                         *GetHydraRank                         `protobuf:"bytes,366,opt,name=_get_hydra_rank,json=GetHydraRank" json:"_get_hydra_rank,omitempty"`                                                                               //获取海德拉排行
	XGetBattlefieldMaillist               *GetBattlefieldMaillist               `protobuf:"bytes,367,opt,name=_get_battlefield_maillist,json=GetBattlefieldMaillist" json:"_get_battlefield_maillist,omitempty"`                                                 //获取战场邮件
	XGetKingReturn                        *GetKingReturn                        `protobuf:"bytes,368,opt,name=_get_king_return,json=GetKingReturn" json:"_get_king_return,omitempty"`                                                                            //获取王者活动数据
	XGetPlayerCallback                    *GetPlayerCallback                    `protobuf:"bytes,369,opt,name=_get_player_callback,json=GetPlayerCallback" json:"_get_player_callback,omitempty"`                                                                //获取新手召回数据
	XGetKingReturnReward                  *GetKingReturnReward                  `protobuf:"bytes,370,opt,name=_get_king_return_reward,json=GetKingReturnReward" json:"_get_king_return_reward,omitempty"`                                                        //获取王者活动任务奖励
	XCallbackSoldiers                     *CallbackSoldiers                     `protobuf:"bytes,371,opt,name=_callback_soldiers,json=CallbackSoldiers" json:"_callback_soldiers,omitempty"`                                                                     //召回溃散士兵
	XReviveSoldiers                       *ReviveSoldiers                       `protobuf:"bytes,372,opt,name=_revive_soldiers,json=ReviveSoldiers" json:"_revive_soldiers,omitempty"`                                                                           //复活士兵
	XTeleportGuild                        *TeleportGuild                        `protobuf:"bytes,373,opt,name=_teleport_guild,json=TeleportGuild" json:"_teleport_guild,omitempty"`                                                                              //联盟迁城
	XGetTempleBuildingList                *GetTempleBuildingList                `protobuf:"bytes,374,opt,name=_get_temple_building_list,json=GetTempleBuildingList" json:"_get_temple_building_list,omitempty"`                                                  //跨服战建筑列表
	XGetGuildMonster                      *GetGuildMonster                      `protobuf:"bytes,375,opt,name=_get_guild_monster,json=GetGuildMonster" json:"_get_guild_monster,omitempty"`                                                                      //获取联盟召唤怪列表
	XOpenMonsterByItem                    *OpenMonsterByItem                    `protobuf:"bytes,376,opt,name=_open_monster_by_item,json=OpenMonsterByItem" json:"_open_monster_by_item,omitempty"`                                                              //使用道具召唤怪物
	XGetExchangeItem                      *GetExchangeItem                      `protobuf:"bytes,377,opt,name=_get_exchange_item,json=GetExchangeItem" json:"_get_exchange_item,omitempty"`                                                                      //获取兑换活动数据
	XGetExchangeReward                    *GetExchangeReward                    `protobuf:"bytes,378,opt,name=_get_exchange_reward,json=GetExchangeReward" json:"_get_exchange_reward,omitempty"`                                                                //兑换奖励
	XGetDailyRefreshTask                  *GetDailyRefreshTask                  `protobuf:"bytes,379,opt,name=_get_daily_refresh_task,json=GetDailyRefreshTask" json:"_get_daily_refresh_task,omitempty"`                                                        //单日刷新任务
	XGetKingBoxReward                     *GetKingBoxReward                     `protobuf:"bytes,380,opt,name=_get_king_box_reward,json=GetKingBoxReward" json:"_get_king_box_reward,omitempty"`                                                                 //获取王者归来累计宝箱奖励
	XGetActivityTaskRewardItems           *GetActivityTaskRewardItems           `protobuf:"bytes,381,opt,name=_get_activity_task_reward_items,json=GetActivityTaskRewardItems" json:"_get_activity_task_reward_items,omitempty"`                                 //获取活跃度奖励任务(单个任务道具奖励)
	XGetNewServerFund                     *GetNewServerFund                     `protobuf:"bytes,382,opt,name=_get_new_server_fund,json=GetNewServerFund" json:"_get_new_server_fund,omitempty"`                                                                 //获取新服基金活动数据
	XGetMilestoneList                     *GetMilestoneList                     `protobuf:"bytes,383,opt,name=_get_milestone_list,json=GetMilestoneList" json:"_get_milestone_list,omitempty"`                                                                   //获得里程碑任务列表
	XClaimMilestoneReward                 *ClaimMilestoneReward                 `protobuf:"bytes,384,opt,name=_claim_milestone_reward,json=ClaimMilestoneReward" json:"_claim_milestone_reward,omitempty"`                                                       //领取任务奖励
	XUpgradeStageReward                   *UpgradeStageReward                   `protobuf:"bytes,385,opt,name=_upgrade_stage_reward,json=UpgradeStageReward" json:"_upgrade_stage_reward,omitempty"`                                                             //阶段升级奖励记录
	XGetGaruaList                         *GetGaruaList                         `protobuf:"bytes,386,opt,name=_get_garua_list,json=GetGaruaList" json:"_get_garua_list,omitempty"`                                                                               //获得迦楼罗任务列表
	XSafeCode                             *SafeCode                             `protobuf:"bytes,387,opt,name=_safe_code,json=SafeCode" json:"_safe_code,omitempty"`                                                                                             //安全码操作接口
	XDestructItem                         *DestructItem                         `protobuf:"bytes,388,opt,name=_destruct_item,json=DestructItem" json:"_destruct_item,omitempty"`                                                                                 // 分解道具
	XDestructEquipmentBatch               *DestructEquipmentBatch               `protobuf:"bytes,389,opt,name=_destruct_equipment_batch,json=DestructEquipmentBatch" json:"_destruct_equipment_batch,omitempty"`                                                 // 批量分解装备
	XGetFoundFamouscity                   *GetFoundFamouscity                   `protobuf:"bytes,390,opt,name=_get_found_famouscity,json=GetFoundFamouscity" json:"_get_found_famouscity,omitempty"`                                                             //世界名城活动
	XBetFoundFamouscity                   *BetFoundFamouscity                   `protobuf:"bytes,391,opt,name=_bet_found_famouscity,json=BetFoundFamouscity" json:"_bet_found_famouscity,omitempty"`                                                             //世界名城下注
	XOpenFamouscityByItem                 *OpenFamouscityByItem                 `protobuf:"bytes,392,opt,name=_open_famouscity_by_item,json=OpenFamouscityByItem" json:"_open_famouscity_by_item,omitempty"`                                                     //开启世界名城
	XGetGuildFamouscityList               *GetGuildFamouscityList               `protobuf:"bytes,393,opt,name=_get_guild_famouscity_list,json=GetGuildFamouscityList" json:"_get_guild_famouscity_list,omitempty"`                                               //获取联盟世界名城列表
	XSummonViking                         *SummonViking                         `protobuf:"bytes,394,opt,name=_summon_viking,json=SummonViking" json:"_summon_viking,omitempty"`                                                                                 //召唤维京海盗
	XApplyViking                          *ApplyViking                          `protobuf:"bytes,395,opt,name=_apply_viking,json=ApplyViking" json:"_apply_viking,omitempty"`                                                                                    //求助击杀维京海盗
	XSelectVikingDifficulty               *SelectVikingDifficulty               `protobuf:"bytes,396,opt,name=_select_viking_difficulty,json=SelectVikingDifficulty" json:"_select_viking_difficulty,omitempty"`                                                 //选择维京勇士活动难度
	XGetAllFamouscity                     *GetAllFamouscity                     `protobuf:"bytes,397,opt,name=_get_all_famouscity,json=GetAllFamouscity" json:"_get_all_famouscity,omitempty"`                                                                   //获取小地图世界名城
	XGetGuildVikingList                   *GetGuildVikingList                   `protobuf:"bytes,398,opt,name=_get_guild_viking_list,json=GetGuildVikingList" json:"_get_guild_viking_list,omitempty"`                                                           //获取维京勇士盟友战况列表
	XGetVikingData                        *GetVikingData                        `protobuf:"bytes,399,opt,name=_get_viking_data,json=GetVikingData" json:"_get_viking_data,omitempty"`                                                                            //获取玩家维京勇士数据
	XClaimVikingReward                    *ClaimVikingReward                    `protobuf:"bytes,400,opt,name=_claim_viking_reward,json=ClaimVikingReward" json:"_claim_viking_reward,omitempty"`                                                                //领取维京勇士奖励
	XGetPlayoffMembers                    *GetPlayoffMembers                    `protobuf:"bytes,401,opt,name=_get_playoff_members,json=GetPlayoffMembers" json:"_get_playoff_members,omitempty"`                                                                //获得季后赛玩家列表
	XGetGuildTreasureData                 *GetGuildTreasureData                 `protobuf:"bytes,402,opt,name=_get_guild_treasure_data,json=GetGuildTreasureData" json:"_get_guild_treasure_data,omitempty"`                                                     //获取联盟珍宝数据
	XClaimGuildTreasure                   *ClaimGuildTreasure                   `protobuf:"bytes,403,opt,name=_claim_guild_treasure,json=ClaimGuildTreasure" json:"_claim_guild_treasure,omitempty"`                                                             //领取联盟珍宝
	XGetLimitServerCompetition            *GetLimitServerCompetition            `protobuf:"bytes,404,opt,name=_get_limit_server_competition,json=GetLimitServerCompetition" json:"_get_limit_server_competition,omitempty"`                                      //获得跨服争霸赛数据
	XGetPrivateTreasureList               *GetPrivateTreasureList               `protobuf:"bytes,405,opt,name=_get_private_treasure_list,json=GetPrivateTreasureList" json:"_get_private_treasure_list,omitempty"`                                               //获取可发送联盟珍宝列表
	XSendPrivateTreasure                  *SendPrivateTreasure                  `protobuf:"bytes,406,opt,name=_send_private_treasure,json=SendPrivateTreasure" json:"_send_private_treasure,omitempty"`                                                          //发送联盟珍宝
	XHonoursSoldiers                      *HonoursSoldiers                      `protobuf:"bytes,407,opt,name=_honours_soldiers,json=HonoursSoldiers" json:"_honours_soldiers,omitempty"`                                                                        //士兵授勋
	XRefineSoldiers                       *RefineSoldiers                       `protobuf:"bytes,408,opt,name=_refine_soldiers,json=RefineSoldiers" json:"_refine_soldiers,omitempty"`                                                                           //士兵特训
	XConfirmRefineSoldiers                *ConfirmRefineSoldiers                `protobuf:"bytes,409,opt,name=_confirm_refine_soldiers,json=ConfirmRefineSoldiers" json:"_confirm_refine_soldiers,omitempty"`                                                    //确认士兵特训结果
	XDeportUser                           *DeportUser                           `protobuf:"bytes,410,opt,name=_deport_user,json=DeportUser" json:"_deport_user,omitempty"`                                                                                       //驱逐玩家出联盟领地
	XGetDeportList                        *GetDeportList                        `protobuf:"bytes,411,opt,name=_get_deport_list,json=GetDeportList" json:"_get_deport_list,omitempty"`                                                                            //获取玩家驱逐列表
	XSpeedupBatch                         *SpeedupBatch                         `protobuf:"bytes,412,opt,name=_speedup_batch,json=SpeedupBatch" json:"_speedup_batch,omitempty"`                                                                                 // 一键加速
	XGetBattlepass                        *GetBattlepass                        `protobuf:"bytes,413,opt,name=_get_battlepass,json=GetBattlepass" json:"_get_battlepass,omitempty"`                                                                              // 获取battlepass
	XGetBattlepassReward                  *GetBattlepassReward                  `protobuf:"bytes,414,opt,name=_get_battlepass_reward,json=GetBattlepassReward" json:"_get_battlepass_reward,omitempty"`                                                          // 领取battlepass宝物奖励
	XGetUserData                          *GetUserData                          `protobuf:"bytes,415,opt,name=_get_user_data,json=GetUserData" json:"_get_user_data,omitempty"`                                                                                  //获取玩家数据
	XGetCommentedReward                   *GetCommentedReward                   `protobuf:"bytes,416,opt,name=_get_commented_reward,json=GetCommentedReward" json:"_get_commented_reward,omitempty"`                                                             //获取商店评论奖励
	XGetPuzzleReward                      *GetPuzzleReward                      `protobuf:"bytes,417,opt,name=_get_puzzle_reward,json=GetPuzzleReward" json:"_get_puzzle_reward,omitempty"`                                                                      //获取解谜奖励
	XGetPuzzleData                        *GetPuzzleData                        `protobuf:"bytes,418,opt,name=_get_puzzle_data,json=GetPuzzleData" json:"_get_puzzle_data,omitempty"`                                                                            //获取解谜状态
	XClaimFirstWeekGift                   *ClaimFirstWeekGift                   `protobuf:"bytes,419,opt,name=_claim_first_week_gift,json=ClaimFirstWeekGift" json:"_claim_first_week_gift,omitempty"`                                                           //领取首周7日礼包活动奖励
	XClaimFamousGeneral                   *ClaimFamousGeneral                   `protobuf:"bytes,420,opt,name=_claim_famous_general,json=ClaimFamousGeneral" json:"_claim_famous_general,omitempty"`                                                             //领取7日名将活动
	XSetMonthCardType                     *SetMonthCardType                     `protobuf:"bytes,421,opt,name=_set_month_card_type,json=SetMonthCardType" json:"_set_month_card_type,omitempty"`                                                                 //设置选择周卡月卡类型
	XClaimConsumerGemsReward              *ClaimConsumerGemsReward              `protobuf:"bytes,422,opt,name=_claim_consumer_gems_reward,json=ClaimConsumerGemsReward" json:"_claim_consumer_gems_reward,omitempty"`                                            //领取钻石消耗返利
	XGetConsumerGemsInfo                  *GetConsumerGemsInfo                  `protobuf:"bytes,423,opt,name=_get_consumer_gems_info,json=GetConsumerGemsInfo" json:"_get_consumer_gems_info,omitempty"`                                                        //获取钻石消耗返利活动数据
	XClaimInviteGift                      *ClaimInviteGift                      `protobuf:"bytes,424,opt,name=_claim_invite_gift,json=ClaimInviteGift" json:"_claim_invite_gift,omitempty"`                                                                      //领取邀请奖励
	XListInviteGift                       *ListInviteGift                       `protobuf:"bytes,425,opt,name=_list_invite_gift,json=ListInviteGift" json:"_list_invite_gift,omitempty"`                                                                         //邀请奖励列表
	XOpenBox                              *OpenBox                              `protobuf:"bytes,426,opt,name=_open_box,json=OpenBox" json:"_open_box,omitempty"`                                                                                                //开启宝箱
	XGetFreePackage                       *GetFreePackage                       `protobuf:"bytes,427,opt,name=_get_free_package,json=GetFreePackage" json:"_get_free_package,omitempty"`                                                                         //获取免费礼包内容
	XCrazyMarketList                      *CrazyMarketList                      `protobuf:"bytes,428,opt,name=_crazy_market_list,json=CrazyMarketList" json:"_crazy_market_list,omitempty"`                                                                      //疯狂抢购列表
	XCrazyMarketBuy                       *CrazyMarketBuy                       `protobuf:"bytes,429,opt,name=_crazy_market_buy,json=CrazyMarketBuy" json:"_crazy_market_buy,omitempty"`                                                                         //疯狂抢购购买
	XSetBuildingNamePermission            *SetBuildingNamePermission            `protobuf:"bytes,430,opt,name=_set_building_name_permission,json=SetBuildingNamePermission" json:"_set_building_name_permission,omitempty"`                                      //设置显示建筑名字权限
	XQuickSynthesisMaterial               *QuickSynthesisMaterial               `protobuf:"bytes,431,opt,name=_quick_synthesis_material,json=QuickSynthesisMaterial" json:"_quick_synthesis_material,omitempty"`                                                 // 快速合成材料
	XClaimShareGift                       *ClaimShareGift                       `protobuf:"bytes,432,opt,name=_claim_share_gift,json=ClaimShareGift" json:"_claim_share_gift,omitempty"`                                                                         //领取邀请奖励
	XClaimFreeGift                        *ClaimFreeGift                        `protobuf:"bytes,433,opt,name=_claim_free_gift,json=ClaimFreeGift" json:"_claim_free_gift,omitempty"`                                                                            //零元礼包活动领取
	XGetChapterTaskReward                 *GetChapterTaskReward                 `protobuf:"bytes,434,opt,name=_get_chapter_task_reward,json=GetChapterTaskReward" json:"_get_chapter_task_reward,omitempty"`                                                     //领取章节任务奖励
	XGetChapterTaskList                   *GetChapterTaskList                   `protobuf:"bytes,435,opt,name=_get_chapter_task_list,json=GetChapterTaskList" json:"_get_chapter_task_list,omitempty"`                                                           //获取章节任务列表
	XSendNpsResult                        *SendNpsResult                        `protobuf:"bytes,436,opt,name=_send_nps_result,json=SendNpsResult" json:"_send_nps_result,omitempty"`                                                                            //发送NPS结果
	XGetAdsReward                         *GetAdsReward                         `protobuf:"bytes,437,opt,name=_get_ads_reward,json=GetAdsReward" json:"_get_ads_reward,omitempty"`                                                                               // 获取广告箱子奖励
	XRequestSpecialGift                   *RequestSpecialGift                   `protobuf:"bytes,439,opt,name=_request_special_gift,json=RequestSpecialGift" json:"_request_special_gift,omitempty"`                                                             //领取特殊礼包
	XSignupSmallBattlefield               *SignupSmallBattlefield               `protobuf:"bytes,440,opt,name=_signup_small_battlefield,json=SignupSmallBattlefield" json:"_signup_small_battlefield,omitempty"`                                                 //小战场组队
	XInviteSmallBattlefield               *InviteSmallBattlefield               `protobuf:"bytes,441,opt,name=_invite_small_battlefield,json=InviteSmallBattlefield" json:"_invite_small_battlefield,omitempty"`                                                 //小战场邀请
	XMatchSmallBattlefield                *MatchSmallBattlefield                `protobuf:"bytes,442,opt,name=_match_small_battlefield,json=MatchSmallBattlefield" json:"_match_small_battlefield,omitempty"`                                                    //小战场匹配
	XStartSmallBattlefield                *StartSmallBattlefield                `protobuf:"bytes,443,opt,name=_start_small_battlefield,json=StartSmallBattlefield" json:"_start_small_battlefield,omitempty"`                                                    //小战场开启挑战
	XConfirmSmallBattlefield              *ConfirmSmallBattlefield              `protobuf:"bytes,444,opt,name=_confirm_small_battlefield,json=ConfirmSmallBattlefield" json:"_confirm_small_battlefield,omitempty"`                                              //同意小战场邀请
	XSelectSmallBattlefieldBuff           *SelectSmallBattlefieldBuff           `protobuf:"bytes,445,opt,name=_select_small_battlefield_buff,json=SelectSmallBattlefieldBuff" json:"_select_small_battlefield_buff,omitempty"`                                   //选择小战场buff
	XGetSmallBattlefieldInfo              *GetSmallBattlefieldInfo              `protobuf:"bytes,446,opt,name=_get_small_battlefield_info,json=GetSmallBattlefieldInfo" json:"_get_small_battlefield_info,omitempty"`                                            //获取小战场相关信息
	XGetSmallBattlefieldInvite            *GetSmallBattlefieldInvite            `protobuf:"bytes,447,opt,name=_get_small_battlefield_invite,json=GetSmallBattlefieldInvite" json:"_get_small_battlefield_invite,omitempty"`                                      //获取小战场可邀请玩家列表
	XReadySmallBattlefield                *ReadySmallBattlefield                `protobuf:"bytes,448,opt,name=_ready_small_battlefield,json=ReadySmallBattlefield" json:"_ready_small_battlefield,omitempty"`                                                    //小战场准备
	XGetActivityTaskRewardItemsBatch      *GetActivityTaskRewardItemsBatch      `protobuf:"bytes,449,opt,name=_get_activity_task_reward_items_batch,json=GetActivityTaskRewardItemsBatch" json:"_get_activity_task_reward_items_batch,omitempty"`                //获取活跃度奖励任务(批量任务道具奖励)
	XShareReward                          *ShareReward                          `protobuf:"bytes,450,opt,name=_share_reward,json=ShareReward" json:"_share_reward,omitempty"`                                                                                    //分享领取
	XQuitSmallBattlefield                 *QuitSmallBattlefield                 `protobuf:"bytes,451,opt,name=_quit_small_battlefield,json=QuitSmallBattlefield" json:"_quit_small_battlefield,omitempty"`                                                       //退出小战场
	XGetSmallBattlefieldInviteList        *GetSmallBattlefieldInviteList        `protobuf:"bytes,452,opt,name=_get_small_battlefield_invite_list,json=GetSmallBattlefieldInviteList" json:"_get_small_battlefield_invite_list,omitempty"`                        //小战场邀请列表
	XGetActiveEventTaskList               *GetActiveEventTaskList               `protobuf:"bytes,453,opt,name=_get_active_event_task_list,json=GetActiveEventTaskList" json:"_get_active_event_task_list,omitempty"`                                             //获取活动任务数据列表
	XClientTimestamp                      *int64                                `protobuf:"varint,454,opt,name=_client_timestamp,json=ClientTimestamp" json:"_client_timestamp,omitempty"`                                                                       //客户端时间戳
	XGetBattlefieldGuildrankSeason        *GetBattlefieldGuildrankSeason        `protobuf:"bytes,455,opt,name=_get_battlefield_guildrank_season,json=GetBattlefieldGuildrankSeason" json:"_get_battlefield_guildrank_season,omitempty"`                          //获取战场赛季4轮累计积分排行
	XChangeGiftPage                       *ChangeGiftPage                       `protobuf:"bytes,456,opt,name=_change_gift_page,json=ChangeGiftPage" json:"_change_gift_page,omitempty"`                                                                         //切换天赋页
	XGetGiftList                          *GetGiftList                          `protobuf:"bytes,457,opt,name=_get_gift_list,json=GetGiftList" json:"_get_gift_list,omitempty"`                                                                                  //获取天赋数据
	XSelectGuildBuildingSkin              *SelectGuildBuildingSkin              `protobuf:"bytes,458,opt,name=_select_guild_building_skin,json=SelectGuildBuildingSkin" json:"_select_guild_building_skin,omitempty"`                                            //设置联盟城堡装扮
	XGetHwAdsReward                       *GetHwAdsReward                       `protobuf:"bytes,459,opt,name=_get_hw_ads_reward,json=GetHwAdsReward" json:"_get_hw_ads_reward,omitempty"`                                                                       // 获取HW广告箱子奖励
	XNewRouletteTurn                      *NewRouletteTurn                      `protobuf:"bytes,460,opt,name=_new_roulette_turn,json=NewRouletteTurn" json:"_new_roulette_turn,omitempty"`                                                                      //新活动轮盘
	XNewRouletteAccumulateAwards          *NewRouletteAccumulateAwards          `protobuf:"bytes,461,opt,name=_new_roulette_accumulate_awards,json=NewRouletteAccumulateAwards" json:"_new_roulette_accumulate_awards,omitempty"`                                //领取活动轮盘累计奖励
	XGetMoreSocialMediaReward             *GetMoreSocialMediaReward             `protobuf:"bytes,462,opt,name=_get_more_social_media_reward,json=GetMoreSocialMediaReward" json:"_get_more_social_media_reward,omitempty"`                                       //获取更多社交媒体奖励
	XSecretRoomOperation                  *SecretRoomOperation                  `protobuf:"bytes,463,opt,name=_secret_room_operation,json=SecretRoomOperation" json:"_secret_room_operation,omitempty"`                                                          //遗迹密室操作
	XGetFireCoinsNumToday                 *GetFireCoinsNumToday                 `protobuf:"bytes,464,opt,name=_get_fire_coins_num_today,json=GetFireCoinsNumToday" json:"_get_fire_coins_num_today,omitempty"`                                                   //获取当日花火活动代币获得数量
	XGetGrowthFund                        *GetGrowthFund                        `protobuf:"bytes,465,opt,name=_get_growth_fund,json=GetGrowthFund" json:"_get_growth_fund,omitempty"`                                                                            //获取成长基金的数据
	XGetGrowthFundReward                  *GetGrowthFundReward                  `protobuf:"bytes,466,opt,name=_get_growth_fund_reward,json=GetGrowthFundReward" json:"_get_growth_fund_reward,omitempty"`                                                        //领取成长基金的奖励
	XGetWarLossReward                     *GetWarLossReward                     `protobuf:"bytes,467,opt,name=_get_war_loss_reward,json=GetWarLossReward" json:"_get_war_loss_reward,omitempty"`                                                                 //领取战损动画奖励
	XRewardMonthLogin                     *RewardMonthLogin                     `protobuf:"bytes,468,opt,name=_reward_month_login,json=RewardMonthLogin" json:"_reward_month_login,omitempty"`                                                                   //领取签到型月卡奖励
	XGhostTroops                          *GhostTroops                          `protobuf:"bytes,469,opt,name=_ghost_troops,json=GhostTroops" json:"_ghost_troops,omitempty"`                                                                                    //隐藏士兵
	XCancelGhostTroops                    *CancelGhostTroops                    `protobuf:"bytes,470,opt,name=_cancel_ghost_troops,json=CancelGhostTroops" json:"_cancel_ghost_troops,omitempty"`                                                                //取消隐藏士兵
	XSetDragonCliffShow                   *SetDragonCliffShow                   `protobuf:"bytes,471,opt,name=_set_dragon_cliff_show,json=SetDragonCliffShow" json:"_set_dragon_cliff_show,omitempty"`                                                           //龙崖显示龙
	XSetDragonTalentUpgrade               *SetDragonTalentUpgrade               `protobuf:"bytes,472,opt,name=_set_dragon_talent_upgrade,json=SetDragonTalentUpgrade" json:"_set_dragon_talent_upgrade,omitempty"`                                               //龙天赋与主动技
	XWearEmblem                           *WearEmblem                           `protobuf:"bytes,473,opt,name=_wear_emblem,json=WearEmblem" json:"_wear_emblem,omitempty"`                                                                                       // 玩家穿戴徽章
	XGetFameTaskList                      *GetFameTaskList                      `protobuf:"bytes,474,opt,name=_get_fame_task_list,json=GetFameTaskList" json:"_get_fame_task_list,omitempty"`                                                                    //获取成就任务列表
	XGetFameTaskReward                    *GetFameTaskReward                    `protobuf:"bytes,475,opt,name=_get_fame_task_reward,json=GetFameTaskReward" json:"_get_fame_task_reward,omitempty"`                                                              //获取成就任务奖励
	XGetFameProcessReward                 *GetFameProcessReward                 `protobuf:"bytes,476,opt,name=_get_fame_process_reward,json=GetFameProcessReward" json:"_get_fame_process_reward,omitempty"`                                                     //获取成就点数进度奖励
	XGetFameRankList                      *GetFameRankList                      `protobuf:"bytes,477,opt,name=_get_fame_rank_list,json=GetFameRankList" json:"_get_fame_rank_list,omitempty"`                                                                    //获取个人战力排行列表
	XLikeFame                             *LikeFame                             `protobuf:"bytes,478,opt,name=_like_fame,json=LikeFame" json:"_like_fame,omitempty"`                                                                                             //点赞成就
	XGetLikeFameInfo                      *GetLikeFameInfo                      `protobuf:"bytes,479,opt,name=_get_like_fame_info,json=GetLikeFameInfo" json:"_get_like_fame_info,omitempty"`                                                                    //获得点赞信息
	XGetMapBattleFlagInfoTest             *GetMapBattleFlagInfoTest             `protobuf:"bytes,480,opt,name=_get_map_battle_flag_info_test,json=GetMapBattleFlagInfoTest" json:"_get_map_battle_flag_info_test,omitempty"`                                     //获取地图战旗数据测试
	XGetGuildTerritoryRes                 *GetGuildTerritoryRes                 `protobuf:"bytes,481,opt,name=_get_guild_territory_res,json=GetGuildTerritoryRes" json:"_get_guild_territory_res,omitempty"`                                                     //获取联盟领地资源
	XSendFameMessage                      *chatmessage.SendFameMessage          `protobuf:"bytes,482,opt,name=_send_fame_message,json=SendFameMessage" json:"_send_fame_message,omitempty"`                                                                      //分享成就消息
	XGetPveRankList                       *GetPveRankList                       `protobuf:"bytes,483,opt,name=_get_pve_rank_list,json=GetPveRankList" json:"_get_pve_rank_list,omitempty"`                                                                       //获取赛pve战场排行榜
	XGetBarbarianRankList                 *GetBarbarianRankList                 `protobuf:"bytes,484,opt,name=_get_barbarian_rank_list,json=GetBarbarianRankList" json:"_get_barbarian_rank_list,omitempty"`                                                     //获取蛮族来袭活动排行
	XGetYounierRankList                   *GetYounierRankList                   `protobuf:"bytes,485,opt,name=_get_younier_rank_list,json=GetYounierRankList" json:"_get_younier_rank_list,omitempty"`                                                           //获取尤尼尔活动排行
	XGetPopularityRewardItems             *GetPopularityRewardItems             `protobuf:"bytes,486,opt,name=_get_popularity_reward_items,json=GetPopularityRewardItems" json:"_get_popularity_reward_items,omitempty"`                                         //领取声望阶段奖励
	XFreeMarchTeam                        *FreeMarchTeam                        `protobuf:"bytes,487,opt,name=_free_march_team,json=FreeMarchTeam" json:"_free_march_team,omitempty"`                                                                            //自由行军队伍相关接口
	XFreemarchRevive                      *FreemarchRevive                      `protobuf:"bytes,488,opt,name=_freemarch_revive,json=FreemarchRevive" json:"_freemarch_revive,omitempty"`                                                                        //使用急救包
	XGetTaskList                          *GetTaskList                          `protobuf:"bytes,489,opt,name=_get_task_list,json=GetTaskList" json:"_get_task_list,omitempty"`                                                                                  //获取任务列表
	XGetTask                              *GetTask                              `protobuf:"bytes,490,opt,name=_get_task,json=GetTask" json:"_get_task,omitempty"`                                                                                                //接取任务,（暂时放弃
	XDisTask                              *DisTask                              `protobuf:"bytes,491,opt,name=_dis_task,json=DisTask" json:"_dis_task,omitempty"`                                                                                                //放弃任务
	XSubTask                              *SubTask                              `protobuf:"bytes,492,opt,name=_sub_task,json=SubTask" json:"_sub_task,omitempty"`                                                                                                //提交任务,（暂时放弃
	XGetTaskReward                        *GetTaskReward                        `protobuf:"bytes,493,opt,name=_get_task_reward,json=GetTaskReward" json:"_get_task_reward,omitempty"`                                                                            //领取任务奖励
	XUnlockTempBagCell                    *UnlockTempBagCell                    `protobuf:"bytes,494,opt,name=_unlock_temp_bag_cell,json=UnlockTempBagCell" json:"_unlock_temp_bag_cell,omitempty"`                                                              //解锁临时背包格子
	XDisTempBagItem                       *DisTempBagItem                       `protobuf:"bytes,495,opt,name=_dis_temp_bag_item,json=DisTempBagItem" json:"_dis_temp_bag_item,omitempty"`                                                                       //丢弃
	XGetGuildTerritoryResUseRecord        *GetGuildTerritoryResUseRecord        `protobuf:"bytes,496,opt,name=_get_guild_territory_res_use_record,json=GetGuildTerritoryResUseRecord" json:"_get_guild_territory_res_use_record,omitempty"`                      //获取联盟资源使用记录
	XBuyGuildTerritoryRes                 *BuyGuildTerritoryRes                 `protobuf:"bytes,497,opt,name=_buy_guild_territory_res,json=BuyGuildTerritoryRes" json:"_buy_guild_territory_res,omitempty"`                                                     //联盟领地内购买资源
	XDistributeGuildTerritoryRes          *DistributeGuildTerritoryRes          `protobuf:"bytes,498,opt,name=_distribute_guild_territory_res,json=DistributeGuildTerritoryRes" json:"_distribute_guild_territory_res,omitempty"`                                //联盟资源分配
	XGuildDepotResource                   *GuildDepotResource                   `protobuf:"bytes,499,opt,name=_guild_depot_resource,json=GuildDepotResource" json:"_guild_depot_resource,omitempty"`                                                             //联盟仓库:获取联盟资源
	XGuildTransport                       *GuildTransport                       `protobuf:"bytes,500,opt,name=_guild_transport,json=GuildTransport" json:"_guild_transport,omitempty"`                                                                           //联盟运输
	XGuildTransportAsk                    *GuildTransportAsk                    `protobuf:"bytes,501,opt,name=_guild_transport_ask,json=GuildTransportAsk" json:"_guild_transport_ask,omitempty"`                                                                //联盟运输:请求
	XGuildTransportList                   *GuildTransportList                   `protobuf:"bytes,502,opt,name=_guild_transport_list,json=GuildTransportList" json:"_guild_transport_list,omitempty"`                                                             //联盟运输:列表
	XGuildTransportFind                   *GuildTransportFind                   `protobuf:"bytes,503,opt,name=_guild_transport_find,json=GuildTransportFind" json:"_guild_transport_find,omitempty"`                                                             //联盟运输:查找
	XCancelHealSoldiers                   *CancelHealSoldiers                   `protobuf:"bytes,504,opt,name=_cancel_heal_soldiers,json=CancelHealSoldiers" json:"_cancel_heal_soldiers,omitempty"`                                                             //取消治疗伤兵
	XTransportInfo                        *TransportInfo                        `protobuf:"bytes,505,opt,name=_transport_info,json=TransportInfo" json:"_transport_info,omitempty"`                                                                              //运输信息
	XProduceMedicineBag                   *ProduceMedicineBag                   `protobuf:"bytes,506,opt,name=_produce_medicine_bag,json=ProduceMedicineBag" json:"_produce_medicine_bag,omitempty"`                                                             //生产急救包
	XSpeedupMedicineBag                   *SpeedupMedicineBag                   `protobuf:"bytes,507,opt,name=_speedup_medicine_bag,json=SpeedupMedicineBag" json:"_speedup_medicine_bag,omitempty"`                                                             //加速生产急救包
	XChargeItem                           *ChargeItem                           `protobuf:"bytes,508,opt,name=_charge_item,json=ChargeItem" json:"_charge_item,omitempty"`                                                                                       //充能道具信息
	XModifyBuildingPosition               *ModifyBuildingPosition               `protobuf:"bytes,509,opt,name=_modify_building_position,json=ModifyBuildingPosition" json:"_modify_building_position,omitempty"`                                                 //移动建筑位置
	XPetTechUpgrade                       *PetTechUpgrade                       `protobuf:"bytes,510,opt,name=_pet_tech_upgrade,json=PetTechUpgrade" json:"_pet_tech_upgrade,omitempty"`                                                                         //饲养所 - 科技升级
	XSurrenderSoldiersFinish              *SurrenderSoldiersFinish              `protobuf:"bytes,511,opt,name=_surrender_soldiers_finish,json=SurrenderSoldiersFinish" json:"_surrender_soldiers_finish,omitempty"`                                              //劝隆士兵完成
	XSpeedupSurrenderSoldiers             *SpeedupSurrenderSoldiers             `protobuf:"bytes,512,opt,name=_speedup_surrender_soldiers,json=SpeedupSurrenderSoldiers" json:"_speedup_surrender_soldiers,omitempty"`                                           //钻石加速劝隆士兵
	XCancelSurrenderSoldiers              *CancelSurrenderSoldiers              `protobuf:"bytes,513,opt,name=_cancel_surrender_soldiers,json=CancelSurrenderSoldiers" json:"_cancel_surrender_soldiers,omitempty"`                                              //取消劝隆士兵
	XWorkFinish                           *WorkFinish                           `protobuf:"bytes,514,opt,name=_work_finish,json=WorkFinish" json:"_work_finish,omitempty"`                                                                                       //劳作完成
	XSpeedupWork                          *SpeedupWork                          `protobuf:"bytes,515,opt,name=_speedup_work,json=SpeedupWork" json:"_speedup_work,omitempty"`                                                                                    //钻石加速劳作
	XCancelWork                           *CancelWork                           `protobuf:"bytes,516,opt,name=_cancel_work,json=CancelWork" json:"_cancel_work,omitempty"`                                                                                       //取消劳作
	XInteraction                          *Interaction                          `protobuf:"bytes,517,opt,name=_interaction,json=Interaction" json:"_interaction,omitempty"`                                                                                      //互动
	XInteractionAsk                       *InteractionAsk                       `protobuf:"bytes,518,opt,name=_interaction_ask,json=InteractionAsk" json:"_interaction_ask,omitempty"`                                                                           //互动回答
	XProduceMedicineBagFinish             *ProduceMedicineBagFinish             `protobuf:"bytes,519,opt,name=_produce_medicine_bag_finish,json=ProduceMedicineBagFinish" json:"_produce_medicine_bag_finish,omitempty"`                                         //生产急救包完成
	XCancelProduceMedicineBag             *CancelProduceMedicineBag             `protobuf:"bytes,520,opt,name=_cancel_produce_medicine_bag,json=CancelProduceMedicineBag" json:"_cancel_produce_medicine_bag,omitempty"`                                         //取消生产急救包
	XModifyTroopAutoRelife                *ModifyTroopAutoRelife                `protobuf:"bytes,521,opt,name=_modify_troop_auto_relife,json=ModifyTroopAutoRelife" json:"_modify_troop_auto_relife,omitempty"`                                                  //修改出征队伍自动复活选项
	XPetTechUpgradeCancel                 *PetTechUpgradeCancel                 `protobuf:"bytes,522,opt,name=_pet_tech_upgrade_cancel,json=PetTechUpgradeCancel" json:"_pet_tech_upgrade_cancel,omitempty"`                                                     //饲养所 - 取消科技升级
	XPetTechUpgradeSpeedup                *PetTechUpgradeSpeedup                `protobuf:"bytes,523,opt,name=_pet_tech_upgrade_speedup,json=PetTechUpgradeSpeedup" json:"_pet_tech_upgrade_speedup,omitempty"`                                                  //饲养所 - 科技升级加速(钻石)
	XInitData                             *InitData                             `protobuf:"bytes,524,opt,name=_init_data,json=InitData" json:"_init_data,omitempty"`                                                                                             //游戏初始化数据
	XPetSummaryList                       *PetSummaryList                       `protobuf:"bytes,525,opt,name=_pet_summary_list,json=PetSummaryList" json:"_pet_summary_list,omitempty"`                                                                         // 获取战宠列表
	XEquipForge                           *EquipForge                           `protobuf:"bytes,526,opt,name=_equip_forge,json=EquipForge" json:"_equip_forge,omitempty"`                                                                                       // 装备锻造
	XEquipStreathen                       *EquipStreathen                       `protobuf:"bytes,527,opt,name=_equip_streathen,json=EquipStreathen" json:"_equip_streathen,omitempty"`                                                                           // 装备强化
	XEquipEnchanting                      *EquipEnchanting                      `protobuf:"bytes,528,opt,name=_equip_enchanting,json=EquipEnchanting" json:"_equip_enchanting,omitempty"`                                                                        // 装备附魔
	XEquipFuse                            *EquipFuse                            `protobuf:"bytes,529,opt,name=_equip_fuse,json=EquipFuse" json:"_equip_fuse,omitempty"`                                                                                          // 装备合成
	XEquipRefine                          *EquipRefine                          `protobuf:"bytes,530,opt,name=_equip_refine,json=EquipRefine" json:"_equip_refine,omitempty"`                                                                                    // 装备精炼
	XEquipTechUpgrad                      *EquipTechUpgrad                      `protobuf:"bytes,531,opt,name=_equip_tech_upgrad,json=EquipTechUpgrad" json:"_equip_tech_upgrad,omitempty"`                                                                      // 锻造科技
	XPetBindHero                          *PetBindHero                          `protobuf:"bytes,532,opt,name=_pet_bind_hero,json=PetBindHero" json:"_pet_bind_hero,omitempty"`                                                                                  // 战宠上阵下阵
	XPetMerge                             *PetMerge                             `protobuf:"bytes,533,opt,name=_pet_merge,json=PetMerge" json:"_pet_merge,omitempty"`                                                                                             // 战宠融合
	XVisit                                *Visit                                `protobuf:"bytes,534,opt,name=_visit,json=Visit" json:"_visit,omitempty"`                                                                                                        // 访问别人主城
	XDestructItemBatch                    *DestructItemBatch                    `protobuf:"bytes,535,opt,name=_destruct_item_batch,json=DestructItemBatch" json:"_destruct_item_batch,omitempty"`                                                                // 批量分解道具
	XEquipForgeFinish                     *EquipForgeFinish                     `protobuf:"bytes,536,opt,name=_equip_forge_finish,json=EquipForgeFinish" json:"_equip_forge_finish,omitempty"`                                                                   //锻造完成
	XWearTreasure                         *WearTreasure                         `protobuf:"bytes,537,opt,name=_wear_treasure,json=WearTreasure" json:"_wear_treasure,omitempty"`                                                                                 //宝物穿戴或卸下
	XBatchWearTreasure                    *BatchWearTreasure                    `protobuf:"bytes,538,opt,name=_batch_wear_treasure,json=BatchWearTreasure" json:"_batch_wear_treasure,omitempty"`                                                                //批量宝物穿戴或卸下
	XPlayerTreasureFuse                   *PlayerTreasureFuse                   `protobuf:"bytes,539,opt,name=_player_treasure_fuse,json=PlayerTreasureFuse" json:"_player_treasure_fuse,omitempty"`                                                             //宝物合成
	XDestructTreasure                     *DestructTreasure                     `protobuf:"bytes,540,opt,name=_destruct_treasure,json=DestructTreasure" json:"_destruct_treasure,omitempty"`                                                                     // 分解宝物
	XDestructTreasureBatch                *DestructTreasureBatch                `protobuf:"bytes,541,opt,name=_destruct_treasure_batch,json=DestructTreasureBatch" json:"_destruct_treasure_batch,omitempty"`                                                    // 分解宝物
	XTavernDraw                           *TavernDraw                           `protobuf:"bytes,542,opt,name=_tavern_draw,json=TavernDraw" json:"_tavern_draw,omitempty"`                                                                                       // 酒馆(克隆中心)抽奖
	XHeroTalentUpgrade                    *HeroTalentUpgrade                    `protobuf:"bytes,543,opt,name=_hero_talent_upgrade,json=HeroTalentUpgrade" json:"_hero_talent_upgrade,omitempty"`                                                                //英雄天赋 - 升级
	XHeroTalentReset                      *HeroTalentReset                      `protobuf:"bytes,544,opt,name=_hero_talent_reset,json=HeroTalentReset" json:"_hero_talent_reset,omitempty"`                                                                      //英雄天赋 - 重置
	XUsePlayerGift                        *UsePlayerGift                        `protobuf:"bytes,545,opt,name=_use_player_gift,json=UsePlayerGift" json:"_use_player_gift,omitempty"`                                                                            // 领主天赋主动技能使用
	XGetAllianceMaillist                  *GetAllianceMaillist                  `protobuf:"bytes,546,opt,name=_get_alliance_maillist,json=GetAllianceMaillist" json:"_get_alliance_maillist,omitempty"`                                                          // 邮件_联盟贡献排行榜
	XGetReportTabList                     *GetReportTabList                     `protobuf:"bytes,547,opt,name=_get_report_tab_list,json=GetReportTabList" json:"_get_report_tab_list,omitempty"`                                                                 // 邮件_获取报告页列表
	XTestProtocol                         *int32                                `protobuf:"varint,548,opt,name=_test_protocol,json=TestProtocol" json:"_test_protocol,omitempty"`                                                                                // 测试协议
	XBatchReadMail                        *BatchReadMail                        `protobuf:"bytes,549,opt,name=_batch_read_mail,json=BatchReadMail" json:"_batch_read_mail,omitempty"`                                                                            // 批量读取邮件
	XBatchGetReward                       *BatchGetReward                       `protobuf:"bytes,550,opt,name=_batch_get_reward,json=BatchGetReward" json:"_batch_get_reward,omitempty"`                                                                         // 批量收取奖励
	XPushMapinfoEmoji                     *PushMapinfoEmoji                     `protobuf:"bytes,551,opt,name=_push_mapinfo_emoji,json=PushMapinfoEmoji" json:"_push_mapinfo_emoji,omitempty"`                                                                   // 发送表情协议
	XAskEquipInfo                         *AskEquipInfo                         `protobuf:"bytes,552,opt,name=_ask_equip_info,json=AskEquipInfo" json:"_ask_equip_info,omitempty"`                                                                               // 获取单件装备详情
	XFpsFinishReward                      *FpsFinishReward                      `protobuf:"bytes,553,opt,name=_fps_finish_reward,json=FpsFinishReward" json:"_fps_finish_reward,omitempty"`                                                                      // fps结算奖励下发
	XFpsStart                             *FpsStart                             `protobuf:"bytes,554,opt,name=_fps_start,json=FpsStart" json:"_fps_start,omitempty"`                                                                                             // fps开始
	XFpsOut                               *FpsOut                               `protobuf:"bytes,555,opt,name=_fps_out,json=FpsOut" json:"_fps_out,omitempty"`                                                                                                   // fps退出
	XWorldSearch                          *WorldSearch                          `protobuf:"bytes,556,opt,name=_world_search,json=WorldSearch" json:"_world_search,omitempty"`                                                                                    //大地图搜索
	XAutoRally                            *AutoRally                            `protobuf:"bytes,557,opt,name=_auto_rally,json=AutoRally" json:"_auto_rally,omitempty"`                                                                                          //自动集结设置
	XSyncAutoRally                        *SyncAutoRally                        `protobuf:"bytes,558,opt,name=_sync_auto_rally,json=SyncAutoRally" json:"_sync_auto_rally,omitempty"`                                                                            //自动集结 同步
	XGuildSign                            *GuildSign                            `protobuf:"bytes,559,opt,name=_guild_sign,json=GuildSign" json:"_guild_sign,omitempty"`                                                                                          // 设置联盟标志
	XGuildSignInfo                        *GuildSignInfo                        `protobuf:"bytes,560,opt,name=_guild_sign_info,json=GuildSignInfo" json:"_guild_sign_info,omitempty"`                                                                            // 获取联盟标志详情
	XGuildSignComment                     *GuildSignComment                     `protobuf:"bytes,561,opt,name=_guild_sign_comment,json=GuildSignComment" json:"_guild_sign_comment,omitempty"`                                                                   // 联盟标志留言 新增 / 删除
	XGuildSignList                        *GuildSignList                        `protobuf:"bytes,562,opt,name=_guild_sign_list,json=GuildSignList" json:"_guild_sign_list,omitempty"`                                                                            // 联盟标记列表
	XSetFriendPlayerData                  *SetFriendPlayerData                  `protobuf:"bytes,563,opt,name=_set_friend_player_data,json=SetFriendPlayerData" json:"_set_friend_player_data,omitempty"`                                                        // 修改好友临时用户信息
	XOpenGiftBox                          *OpenGiftBox                          `protobuf:"bytes,564,opt,name=_open_gift_box,json=OpenGiftBox" json:"_open_gift_box,omitempty"`                                                                                  // 领取并开礼包
	XAutoPickupSetting                    *AutoPickupSetting                    `protobuf:"bytes,565,opt,name=_auto_pickup_setting,json=AutoPickupSetting" json:"_auto_pickup_setting,omitempty"`                                                                // 自动拾取设置
	XSaveNewUserGuideProgress             *SaveNewUserGuideProgress             `protobuf:"bytes,566,opt,name=_save_new_user_guide_progress,json=SaveNewUserGuideProgress" json:"_save_new_user_guide_progress,omitempty"`                                       // 新手引导设置
	XGetGmeAuth                           *GetGmeAuth                           `protobuf:"bytes,567,opt,name=_get_gme_auth,json=GetGmeAuth" json:"_get_gme_auth,omitempty"`                                                                                     // 获取gme授权
	XGetCosAuth                           *GetCosAuth                           `protobuf:"bytes,568,opt,name=_get_cos_auth,json=GetCosAuth" json:"_get_cos_auth,omitempty"`                                                                                     //  获取COS授权
	XGuideFps                             *GuideFps                             `protobuf:"bytes,569,opt,name=_guide_fps,json=GuideFps" json:"_guide_fps,omitempty"`                                                                                             //新手引导 区域解锁期间通过城内废墟fps关卡
	XSendTroopCastle                      *SendTroopCastle                      `protobuf:"bytes,570,opt,name=_send_troop_castle,json=SendTroopCastle" json:"_send_troop_castle,omitempty"`                                                                      // 新手引导 攻打slg建筑
	XIntelStrength                        *IntelStrength                        `protobuf:"bytes,571,opt,name=_intel_strength,json=IntelStrength" json:"_intel_strength,omitempty"`                                                                              // 情报实力升级
	XIntelTaskReward                      *IntelTaskReward                      `protobuf:"bytes,572,opt,name=_intel_task_reward,json=IntelTaskReward" json:"_intel_task_reward,omitempty"`                                                                      // 情报任务领取奖励
	XIntelTaskRefresh                     *IntelTaskRefresh                     `protobuf:"bytes,573,opt,name=_intel_task_refresh,json=IntelTaskRefresh" json:"_intel_task_refresh,omitempty"`                                                                   // 情报刷新
	XGetNewChapterTaskReward              *GetNewChapterTaskReward              `protobuf:"bytes,574,opt,name=_get_new_chapter_task_reward,json=GetNewChapterTaskReward" json:"_get_new_chapter_task_reward,omitempty"`                                          // 领取新章节任务奖励
	XCloudInfo                            *CloudInfo                            `protobuf:"bytes,575,opt,name=_cloud_info,json=CloudInfo" json:"_cloud_info,omitempty"`                                                                                          // 获取迷雾格子信息
	XGetGoodsList                         *GetGoodsList                         `protobuf:"bytes,576,opt,name=_get_goods_list,json=GetGoodsList" json:"_get_goods_list,omitempty"`                                                                               // 获取商品列表
	XGetGoodsFavoriteList                 *GetGoodsFavoriteList                 `protobuf:"bytes,577,opt,name=_get_goods_favorite_list,json=GetGoodsFavoriteList" json:"_get_goods_favorite_list,omitempty"`                                                     // 获取关注列表
	XGoodsFavorite                        *GoodsFavorite                        `protobuf:"bytes,578,opt,name=_goods_favorite,json=GoodsFavorite" json:"_goods_favorite,omitempty"`                                                                              // 商品关注/取消关注
	XGetGoodsHotList                      *GetGoodsHotList                      `protobuf:"bytes,579,opt,name=_get_goods_hot_list,json=GetGoodsHotList" json:"_get_goods_hot_list,omitempty"`                                                                    // 获取优选列表
	XGetGoodsSellList                     *GetGoodsSellList                     `protobuf:"bytes,580,opt,name=_get_goods_sell_list,json=GetGoodsSellList" json:"_get_goods_sell_list,omitempty"`                                                                 // 我的出售列表
	XGetGoodsDealList                     *GetGoodsDealList                     `protobuf:"bytes,581,opt,name=_get_goods_deal_list,json=GetGoodsDealList" json:"_get_goods_deal_list,omitempty"`                                                                 // 我的交易列表
	XGetGoodsBlockingList                 *GetGoodsBlockingList                 `protobuf:"bytes,582,opt,name=_get_goods_blocking_list,json=GetGoodsBlockingList" json:"_get_goods_blocking_list,omitempty"`                                                     // 冻结期列表
	XGoodsSale                            *GoodsSale                            `protobuf:"bytes,583,opt,name=_goods_sale,json=GoodsSale" json:"_goods_sale,omitempty"`                                                                                          // 商品上架
	XGoodsSaleAgain                       *GoodsSaleAgain                       `protobuf:"bytes,584,opt,name=_goods_sale_again,json=GoodsSaleAgain" json:"_goods_sale_again,omitempty"`                                                                         // 商品再次上架
	XSelectedGoodsSaleInfo                *SelectedGoodsSaleInfo                `protobuf:"bytes,585,opt,name=_selected_goods_sale_info,json=SelectedGoodsSaleInfo" json:"_selected_goods_sale_info,omitempty"`                                                  // 选择上架商品时：给最低价5个 摊位费 推荐价格
	XGoodsNotSale                         *GoodsNotSale                         `protobuf:"bytes,586,opt,name=_goods_not_sale,json=GoodsNotSale" json:"_goods_not_sale,omitempty"`                                                                               // 下架
	XGoodsPurchase                        *GoodsPurchase                        `protobuf:"bytes,587,opt,name=_goods_purchase,json=GoodsPurchase" json:"_goods_purchase,omitempty"`                                                                              // 购买
	XSetSearchRecord                      *SetSearchRecord                      `protobuf:"bytes,588,opt,name=_set_search_record,json=SetSearchRecord" json:"_set_search_record,omitempty"`                                                                      // 存储搜索记录
	XGetSearchList                        *GetSearchList                        `protobuf:"bytes,589,opt,name=_get_search_list,json=GetSearchList" json:"_get_search_list,omitempty"`                                                                            // 获取搜索列表
	XGetServerInfoList                    *GetServerInfoList                    `protobuf:"bytes,590,opt,name=_get_server_info_list,json=GetServerInfoList" json:"_get_server_info_list,omitempty"`                                                              // 获取服务器列表
	XSendGoodsMessage                     *chatmessage.SendGoodsMessage         `protobuf:"bytes,591,opt,name=_send_goods_message,json=SendGoodsMessage" json:"_send_goods_message,omitempty"`                                                                   //发送商品消息
	XSendPetMessage                       *chatmessage.SendPetMessage           `protobuf:"bytes,592,opt,name=_send_pet_message,json=SendPetMessage" json:"_send_pet_message,omitempty"`                                                                         //发送宠物信息
	XGetPetSummaryInfo                    *GetPetSummaryInfo                    `protobuf:"bytes,593,opt,name=_get_pet_summary_info,json=GetPetSummaryInfo" json:"_get_pet_summary_info,omitempty"`                                                              //获取宠物详情
}

func (x *UpMsg) Reset() {
	*x = UpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpMsg) ProtoMessage() {}

func (x *UpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpMsg.ProtoReflect.Descriptor instead.
func (*UpMsg) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{0}
}

func (x *UpMsg) GetXRepeat() uint32 {
	if x != nil && x.XRepeat != nil {
		return *x.XRepeat
	}
	return 0
}

func (x *UpMsg) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *UpMsg) GetXLogin() *Login {
	if x != nil {
		return x.XLogin
	}
	return nil
}

func (x *UpMsg) GetXRequestWorldmap() *RequestMapinfo {
	if x != nil {
		return x.XRequestWorldmap
	}
	return nil
}

func (x *UpMsg) GetXGetTimeReward() *GetTimeReward {
	if x != nil {
		return x.XGetTimeReward
	}
	return nil
}

func (x *UpMsg) GetXConfigVer() int32 {
	if x != nil && x.XConfigVer != nil {
		return *x.XConfigVer
	}
	return 0
}

func (x *UpMsg) GetXEquipSynthesis() *EquipSynthesis {
	if x != nil {
		return x.XEquipSynthesis
	}
	return nil
}

func (x *UpMsg) GetXWearEquip() *WearEquip {
	if x != nil {
		return x.XWearEquip
	}
	return nil
}

func (x *UpMsg) GetXConsumeItem() *ConsumeItem {
	if x != nil {
		return x.XConsumeItem
	}
	return nil
}

func (x *UpMsg) GetXRequireRewards() *RequireRewards {
	if x != nil {
		return x.XRequireRewards
	}
	return nil
}

func (x *UpMsg) GetXSetName() *SetName {
	if x != nil {
		return x.XSetName
	}
	return nil
}

func (x *UpMsg) GetXSetAvatar() *SetAvatar {
	if x != nil {
		return x.XSetAvatar
	}
	return nil
}

func (x *UpMsg) GetXAskDailyLogin() *AskDailyLogin {
	if x != nil {
		return x.XAskDailyLogin
	}
	return nil
}

func (x *UpMsg) GetXGetMaillist() *GetMaillist {
	if x != nil {
		return x.XGetMaillist
	}
	return nil
}

func (x *UpMsg) GetXReadMail() *ReadMail {
	if x != nil {
		return x.XReadMail
	}
	return nil
}

func (x *UpMsg) GetXGuild() *Guild {
	if x != nil {
		return x.XGuild
	}
	return nil
}

func (x *UpMsg) GetXTeleport() *Teleport {
	if x != nil {
		return x.XTeleport
	}
	return nil
}

func (x *UpMsg) GetXTeleportRandom() *TeleportRandom {
	if x != nil {
		return x.XTeleportRandom
	}
	return nil
}

func (x *UpMsg) GetXCreateBuilding() *CreateBuilding {
	if x != nil {
		return x.XCreateBuilding
	}
	return nil
}

func (x *UpMsg) GetXUpgradeBuilding() *UpgradeBuilding {
	if x != nil {
		return x.XUpgradeBuilding
	}
	return nil
}

func (x *UpMsg) GetXRemoveBuilding() *RemoveBuilding {
	if x != nil {
		return x.XRemoveBuilding
	}
	return nil
}

func (x *UpMsg) GetXSpeedupBuilding() *SpeedupBuilding {
	if x != nil {
		return x.XSpeedupBuilding
	}
	return nil
}

func (x *UpMsg) GetXTrainSoldiers() *TrainSoldiers {
	if x != nil {
		return x.XTrainSoldiers
	}
	return nil
}

func (x *UpMsg) GetXReapSoldiers() *ReapSoldiers {
	if x != nil {
		return x.XReapSoldiers
	}
	return nil
}

func (x *UpMsg) GetXSpeedupTrain() *SpeedupTrain {
	if x != nil {
		return x.XSpeedupTrain
	}
	return nil
}

func (x *UpMsg) GetXReapResource() *ReapResource {
	if x != nil {
		return x.XReapResource
	}
	return nil
}

func (x *UpMsg) GetXClaimQuestReward() *ClaimQuestReward {
	if x != nil {
		return x.XClaimQuestReward
	}
	return nil
}

func (x *UpMsg) GetXSendTroop() *SendTroop {
	if x != nil {
		return x.XSendTroop
	}
	return nil
}

func (x *UpMsg) GetXCheckMarch() *CheckMarch {
	if x != nil {
		return x.XCheckMarch
	}
	return nil
}

func (x *UpMsg) GetXReturnCastle() *ReturnCastle {
	if x != nil {
		return x.XReturnCastle
	}
	return nil
}

func (x *UpMsg) GetXSendTroopGarrison() *SendTroopGarrison {
	if x != nil {
		return x.XSendTroopGarrison
	}
	return nil
}

func (x *UpMsg) GetXBuyBuilder() *BuyBuilder {
	if x != nil {
		return x.XBuyBuilder
	}
	return nil
}

func (x *UpMsg) GetXUpgradeTech() *UpgradeTech {
	if x != nil {
		return x.XUpgradeTech
	}
	return nil
}

func (x *UpMsg) GetXGetServerList() *GetServerList {
	if x != nil {
		return x.XGetServerList
	}
	return nil
}

func (x *UpMsg) GetXSpeedupTech() *SpeedupTech {
	if x != nil {
		return x.XSpeedupTech
	}
	return nil
}

func (x *UpMsg) GetXBuyItem() *BuyItem {
	if x != nil {
		return x.XBuyItem
	}
	return nil
}

func (x *UpMsg) GetXHealSoldiers() *HealSoldiers {
	if x != nil {
		return x.XHealSoldiers
	}
	return nil
}

func (x *UpMsg) GetXSurrenderSoldiers() *SurrenderSoldiers {
	if x != nil {
		return x.XSurrenderSoldiers
	}
	return nil
}

func (x *UpMsg) GetXEquipReap() *EquipReap {
	if x != nil {
		return x.XEquipReap
	}
	return nil
}

func (x *UpMsg) GetXWork() *Work {
	if x != nil {
		return x.XWork
	}
	return nil
}

func (x *UpMsg) GetXCancelBuilding() *CancelBuilding {
	if x != nil {
		return x.XCancelBuilding
	}
	return nil
}

func (x *UpMsg) GetXCancelTrain() *CancelTrain {
	if x != nil {
		return x.XCancelTrain
	}
	return nil
}

func (x *UpMsg) GetXCancelTech() *CancelTech {
	if x != nil {
		return x.XCancelTech
	}
	return nil
}

func (x *UpMsg) GetXCancelEquip() *CancelEquip {
	if x != nil {
		return x.XCancelEquip
	}
	return nil
}

func (x *UpMsg) GetXUpgradeGift() *UpgradeGift {
	if x != nil {
		return x.XUpgradeGift
	}
	return nil
}

func (x *UpMsg) GetXPeaceShield() *PeaceShield {
	if x != nil {
		return x.XPeaceShield
	}
	return nil
}

func (x *UpMsg) GetXGetReportlist() *GetReportlist {
	if x != nil {
		return x.XGetReportlist
	}
	return nil
}

func (x *UpMsg) GetXDelMail() *DelMail {
	if x != nil {
		return x.XDelMail
	}
	return nil
}

func (x *UpMsg) GetXStartDailyTask() *StartDailyTask {
	if x != nil {
		return x.XStartDailyTask
	}
	return nil
}

func (x *UpMsg) GetXDailyTaskRewards() *DailyTaskRewards {
	if x != nil {
		return x.XDailyTaskRewards
	}
	return nil
}

func (x *UpMsg) GetXSacrifice() *Sacrifice {
	if x != nil {
		return x.XSacrifice
	}
	return nil
}

func (x *UpMsg) GetXTaxes() *Taxes {
	if x != nil {
		return x.XTaxes
	}
	return nil
}

func (x *UpMsg) GetXFavoriteMail() *FavoriteMail {
	if x != nil {
		return x.XFavoriteMail
	}
	return nil
}

func (x *UpMsg) GetXGetFavoritelist() *GetFavoritelist {
	if x != nil {
		return x.XGetFavoritelist
	}
	return nil
}

func (x *UpMsg) GetXGetSysmaillist() *GetSysmaillist {
	if x != nil {
		return x.XGetSysmaillist
	}
	return nil
}

func (x *UpMsg) GetXSendMail() *SendMail {
	if x != nil {
		return x.XSendMail
	}
	return nil
}

func (x *UpMsg) GetXSendTextMessage() *chatmessage.SendTextMessage {
	if x != nil {
		return x.XSendTextMessage
	}
	return nil
}

func (x *UpMsg) GetXChatHistoryFecth() *ChatHistoryFecth {
	if x != nil {
		return x.XChatHistoryFecth
	}
	return nil
}

func (x *UpMsg) GetXSendVoiceMessage() *chatmessage.SendVoiceMessage {
	if x != nil {
		return x.XSendVoiceMessage
	}
	return nil
}

func (x *UpMsg) GetXSyncTaxInfo() *SyncTaxInfo {
	if x != nil {
		return x.XSyncTaxInfo
	}
	return nil
}

func (x *UpMsg) GetXPushToken() *PushToken {
	if x != nil {
		return x.XPushToken
	}
	return nil
}

func (x *UpMsg) GetXContactGetList() *ContactGetList {
	if x != nil {
		return x.XContactGetList
	}
	return nil
}

func (x *UpMsg) GetXContactAddUser() *ContactAddUser {
	if x != nil {
		return x.XContactAddUser
	}
	return nil
}

func (x *UpMsg) GetXContactRemoveUser() *ContactRemoveUser {
	if x != nil {
		return x.XContactRemoveUser
	}
	return nil
}

func (x *UpMsg) GetXDismissSoldiers() *DismissSoldiers {
	if x != nil {
		return x.XDismissSoldiers
	}
	return nil
}

func (x *UpMsg) GetXSetLanguage() *SetLanguage {
	if x != nil {
		return x.XSetLanguage
	}
	return nil
}

func (x *UpMsg) GetXReturnCastleByItem() *ReturnCastleByItem {
	if x != nil {
		return x.XReturnCastleByItem
	}
	return nil
}

func (x *UpMsg) GetXSpeedupMarch() *SpeedupMarch {
	if x != nil {
		return x.XSpeedupMarch
	}
	return nil
}

func (x *UpMsg) GetXSetPush() *SetPush {
	if x != nil {
		return x.XSetPush
	}
	return nil
}

func (x *UpMsg) GetXGetPopularityRankList() *GetPopularityRankList {
	if x != nil {
		return x.XGetPopularityRankList
	}
	return nil
}

func (x *UpMsg) GetXGetRouletteList() *GetRouletteList {
	if x != nil {
		return x.XGetRouletteList
	}
	return nil
}

func (x *UpMsg) GetXAbandonTreasureBox() *AbandonTreasureBox {
	if x != nil {
		return x.XAbandonTreasureBox
	}
	return nil
}

func (x *UpMsg) GetXRefreshRoulette() *RefreshRoulette {
	if x != nil {
		return x.XRefreshRoulette
	}
	return nil
}

func (x *UpMsg) GetXStartRoulette() *StartRoulette {
	if x != nil {
		return x.XStartRoulette
	}
	return nil
}

func (x *UpMsg) GetXOpenTreasureBox() *OpenTreasureBox {
	if x != nil {
		return x.XOpenTreasureBox
	}
	return nil
}

func (x *UpMsg) GetXBlackMarketRefresh() *BlackMarketRefresh {
	if x != nil {
		return x.XBlackMarketRefresh
	}
	return nil
}

func (x *UpMsg) GetXBlackMarketBuy() *BlackMarketBuy {
	if x != nil {
		return x.XBlackMarketBuy
	}
	return nil
}

func (x *UpMsg) GetXGetMailReward() *GetMailReward {
	if x != nil {
		return x.XGetMailReward
	}
	return nil
}

func (x *UpMsg) GetXBuyRouletteCredits() *BuyRouletteCredits {
	if x != nil {
		return x.XBuyRouletteCredits
	}
	return nil
}

func (x *UpMsg) GetXVersion() int32 {
	if x != nil && x.XVersion != nil {
		return *x.XVersion
	}
	return 0
}

func (x *UpMsg) GetXHealWall() *HealWall {
	if x != nil {
		return x.XHealWall
	}
	return nil
}

func (x *UpMsg) GetXCancelHealWall() *CancelHealWall {
	if x != nil {
		return x.XCancelHealWall
	}
	return nil
}

func (x *UpMsg) GetXBuildingFinish() *BuildingFinish {
	if x != nil {
		return x.XBuildingFinish
	}
	return nil
}

func (x *UpMsg) GetXTechnologyFinish() *TechnologyFinish {
	if x != nil {
		return x.XTechnologyFinish
	}
	return nil
}

func (x *UpMsg) GetXSavePlayerSteps() *SavePlayerSteps {
	if x != nil {
		return x.XSavePlayerSteps
	}
	return nil
}

func (x *UpMsg) GetXHealFinish() *HealFinish {
	if x != nil {
		return x.XHealFinish
	}
	return nil
}

func (x *UpMsg) GetXSynthesisFinish() *SynthesisFinish {
	if x != nil {
		return x.XSynthesisFinish
	}
	return nil
}

func (x *UpMsg) GetXGetUserDetails() *GetUserDetails {
	if x != nil {
		return x.XGetUserDetails
	}
	return nil
}

func (x *UpMsg) GetXBattleGuideFinished() *BattleGuideFinished {
	if x != nil {
		return x.XBattleGuideFinished
	}
	return nil
}

func (x *UpMsg) GetXGetDailyTaskList() *GetDailyTaskList {
	if x != nil {
		return x.XGetDailyTaskList
	}
	return nil
}

func (x *UpMsg) GetXBuyFromStore() *BuyFromStore {
	if x != nil {
		return x.XBuyFromStore
	}
	return nil
}

func (x *UpMsg) GetXRefreshDailyTask() *RefreshDailyTask {
	if x != nil {
		return x.XRefreshDailyTask
	}
	return nil
}

func (x *UpMsg) GetXGetIapList() *GetIapList {
	if x != nil {
		return x.XGetIapList
	}
	return nil
}

func (x *UpMsg) GetXGetRuinsList() *GetRuinsList {
	if x != nil {
		return x.XGetRuinsList
	}
	return nil
}

func (x *UpMsg) GetXOpenRuins() *OpenRuins {
	if x != nil {
		return x.XOpenRuins
	}
	return nil
}

func (x *UpMsg) GetXGetKingCastleInfo() *GetKingCastleInfo {
	if x != nil {
		return x.XGetKingCastleInfo
	}
	return nil
}

func (x *UpMsg) GetXActiveSubCity() *ActiveSubCity {
	if x != nil {
		return x.XActiveSubCity
	}
	return nil
}

func (x *UpMsg) GetXModifySubCity() *ModifySubCity {
	if x != nil {
		return x.XModifySubCity
	}
	return nil
}

func (x *UpMsg) GetXTavernRefresh() *TavernRefresh {
	if x != nil {
		return x.XTavernRefresh
	}
	return nil
}

func (x *UpMsg) GetXTavernBuy() *TavernBuy {
	if x != nil {
		return x.XTavernBuy
	}
	return nil
}

func (x *UpMsg) GetXGeneral() *General {
	if x != nil {
		return x.XGeneral
	}
	return nil
}

func (x *UpMsg) GetXSacrificeReliveGeneral() *SacrificeReliveGeneral {
	if x != nil {
		return x.XSacrificeReliveGeneral
	}
	return nil
}

func (x *UpMsg) GetXSubCityBuyBuilder() *SubCityBuyBuilder {
	if x != nil {
		return x.XSubCityBuyBuilder
	}
	return nil
}

func (x *UpMsg) GetXSubCityUpgradeTimes() *SubCityUpgradeTimes {
	if x != nil {
		return x.XSubCityUpgradeTimes
	}
	return nil
}

func (x *UpMsg) GetXSubCitySpeedupBuilding() *SubCitySpeedupBuilding {
	if x != nil {
		return x.XSubCitySpeedupBuilding
	}
	return nil
}

func (x *UpMsg) GetXSubCityBuyTroop() *SubCityBuyTroop {
	if x != nil {
		return x.XSubCityBuyTroop
	}
	return nil
}

func (x *UpMsg) GetXAbandonSubCity() *AbandonSubCity {
	if x != nil {
		return x.XAbandonSubCity
	}
	return nil
}

func (x *UpMsg) GetXGetActivityTaskReward() *GetActivityTaskReward {
	if x != nil {
		return x.XGetActivityTaskReward
	}
	return nil
}

func (x *UpMsg) GetXChangeKingPlayer() *ChangeKingPlayer {
	if x != nil {
		return x.XChangeKingPlayer
	}
	return nil
}

func (x *UpMsg) GetXSetguildplayerkingcastlejob() *SetGuildPlayerKingCastleJob {
	if x != nil {
		return x.XSetguildplayerkingcastlejob
	}
	return nil
}

func (x *UpMsg) GetXGeneralSkillRefresh() *GeneralSkillRefresh {
	if x != nil {
		return x.XGeneralSkillRefresh
	}
	return nil
}

func (x *UpMsg) GetXGeneralSkillBuy() *GeneralSkillBuy {
	if x != nil {
		return x.XGeneralSkillBuy
	}
	return nil
}

func (x *UpMsg) GetXGetChatConfig() *GetChatConfig {
	if x != nil {
		return x.XGetChatConfig
	}
	return nil
}

func (x *UpMsg) GetXChangeEvony() *ChangeEvony {
	if x != nil {
		return x.XChangeEvony
	}
	return nil
}

func (x *UpMsg) GetXDestructEquipment() *DestructEquipment {
	if x != nil {
		return x.XDestructEquipment
	}
	return nil
}

func (x *UpMsg) GetXDewelSynthesis() *DewelSynthesis {
	if x != nil {
		return x.XDewelSynthesis
	}
	return nil
}

func (x *UpMsg) GetXResetLordGift() *ResetLordGift {
	if x != nil {
		return x.XResetLordGift
	}
	return nil
}

func (x *UpMsg) GetXSetKingNameLanguage() *SetKingNameLanguage {
	if x != nil {
		return x.XSetKingNameLanguage
	}
	return nil
}

func (x *UpMsg) GetXGetGuildTechData() *GetGuildTechData {
	if x != nil {
		return x.XGetGuildTechData
	}
	return nil
}

func (x *UpMsg) GetXCallBackKingCastleArmy() *CallBackKingCastleArmy {
	if x != nil {
		return x.XCallBackKingCastleArmy
	}
	return nil
}

func (x *UpMsg) GetXGetServerInfo() *GetServerInfo {
	if x != nil {
		return x.XGetServerInfo
	}
	return nil
}

func (x *UpMsg) GetXSearchUser() *SearchUser {
	if x != nil {
		return x.XSearchUser
	}
	return nil
}

func (x *UpMsg) GetXGetWheelList() *GetWheelList {
	if x != nil {
		return x.XGetWheelList
	}
	return nil
}

func (x *UpMsg) GetXPlayWheel() *PlayWheel {
	if x != nil {
		return x.XPlayWheel
	}
	return nil
}

func (x *UpMsg) GetXCollectWheelData() *CollectWheelData {
	if x != nil {
		return x.XCollectWheelData
	}
	return nil
}

func (x *UpMsg) GetXSetWheelVipPlay() *SetWheelVipPlay {
	if x != nil {
		return x.XSetWheelVipPlay
	}
	return nil
}

func (x *UpMsg) GetXGetWheelVipPlayList() *GetWheelVipPlayList {
	if x != nil {
		return x.XGetWheelVipPlayList
	}
	return nil
}

func (x *UpMsg) GetXGetWheelCredits() *GetWheelCredits {
	if x != nil {
		return x.XGetWheelCredits
	}
	return nil
}

func (x *UpMsg) GetXClientLog() *ClientLog {
	if x != nil {
		return x.XClientLog
	}
	return nil
}

func (x *UpMsg) GetXSetDefendGeneral() *SetDefendGeneral {
	if x != nil {
		return x.XSetDefendGeneral
	}
	return nil
}

func (x *UpMsg) GetXGetKindomInfo() *GetKindomInfo {
	if x != nil {
		return x.XGetKindomInfo
	}
	return nil
}

func (x *UpMsg) GetXGetKindomJobTitleUsers() *GetKindomJobTitleUsers {
	if x != nil {
		return x.XGetKindomJobTitleUsers
	}
	return nil
}

func (x *UpMsg) GetXGetKindomHistoryKings() *GetKindomHistoryKings {
	if x != nil {
		return x.XGetKindomHistoryKings
	}
	return nil
}

func (x *UpMsg) GetXGetKindomMarchList() *GetKindomMarchList {
	if x != nil {
		return x.XGetKindomMarchList
	}
	return nil
}

func (x *UpMsg) GetXSetKindomPlayerJobTitle() *SetKindomPlayerJobTitle {
	if x != nil {
		return x.XSetKindomPlayerJobTitle
	}
	return nil
}

func (x *UpMsg) GetXGetKindomArmySupport() *GetKindomArmySupport {
	if x != nil {
		return x.XGetKindomArmySupport
	}
	return nil
}

func (x *UpMsg) GetXSpeedupHealSoldiers() *SpeedupHealSoldiers {
	if x != nil {
		return x.XSpeedupHealSoldiers
	}
	return nil
}

func (x *UpMsg) GetXSubCityHealWall() *SubCityHealWall {
	if x != nil {
		return x.XSubCityHealWall
	}
	return nil
}

func (x *UpMsg) GetXSpeedupEquipSynthesis() *SpeedupEquipSynthesis {
	if x != nil {
		return x.XSpeedupEquipSynthesis
	}
	return nil
}

func (x *UpMsg) GetXGiftExchange() *GiftExchange {
	if x != nil {
		return x.XGiftExchange
	}
	return nil
}

func (x *UpMsg) GetXSetUserInfoPermission() *SetUserInfoPermission {
	if x != nil {
		return x.XSetUserInfoPermission
	}
	return nil
}

func (x *UpMsg) GetXDismissSubcitySoldiers() *DismissSubcitySoldiers {
	if x != nil {
		return x.XDismissSubcitySoldiers
	}
	return nil
}

func (x *UpMsg) GetXGetHistoryWarList() *GetHistoryWarList {
	if x != nil {
		return x.XGetHistoryWarList
	}
	return nil
}

func (x *UpMsg) GetXSendGuildWarImmediately() *SendGuildWarImmediately {
	if x != nil {
		return x.XSendGuildWarImmediately
	}
	return nil
}

func (x *UpMsg) GetXGetKillRankList() *GetKillRankList {
	if x != nil {
		return x.XGetKillRankList
	}
	return nil
}

func (x *UpMsg) GetXSetVipPermission() *SetVipPermission {
	if x != nil {
		return x.XSetVipPermission
	}
	return nil
}

func (x *UpMsg) GetXAddFriend() *AddFriend {
	if x != nil {
		return x.XAddFriend
	}
	return nil
}

func (x *UpMsg) GetXDelFriend() *DelFriend {
	if x != nil {
		return x.XDelFriend
	}
	return nil
}

func (x *UpMsg) GetXAddUserToBlacklist() *AddUserToBlacklist {
	if x != nil {
		return x.XAddUserToBlacklist
	}
	return nil
}

func (x *UpMsg) GetXDelUserFromBlacklist() *DelUserFromBlacklist {
	if x != nil {
		return x.XDelUserFromBlacklist
	}
	return nil
}

func (x *UpMsg) GetXConfirmAddFriend() *ConfirmAddFriend {
	if x != nil {
		return x.XConfirmAddFriend
	}
	return nil
}

func (x *UpMsg) GetXGetMailReportDetail() *GetMailReportDetail {
	if x != nil {
		return x.XGetMailReportDetail
	}
	return nil
}

func (x *UpMsg) GetXBuyResource() *BuyResource {
	if x != nil {
		return x.XBuyResource
	}
	return nil
}

func (x *UpMsg) GetXRefuseAddFriend() *RefuseAddFriend {
	if x != nil {
		return x.XRefuseAddFriend
	}
	return nil
}

func (x *UpMsg) GetXFavoriteFriend() *FavoriteFriend {
	if x != nil {
		return x.XFavoriteFriend
	}
	return nil
}

func (x *UpMsg) GetXUnfavoriteFriend() *UnfavoriteFriend {
	if x != nil {
		return x.XUnfavoriteFriend
	}
	return nil
}

func (x *UpMsg) GetXSuggestFriends() *SuggestFriends {
	if x != nil {
		return x.XSuggestFriends
	}
	return nil
}

func (x *UpMsg) GetXSendCoordMessage() *chatmessage.SendCoordMessage {
	if x != nil {
		return x.XSendCoordMessage
	}
	return nil
}

func (x *UpMsg) GetXSendPhotoMessage() *chatmessage.SendPhotoMessage {
	if x != nil {
		return x.XSendPhotoMessage
	}
	return nil
}

func (x *UpMsg) GetXSendMailMessage() *chatmessage.SendMailMessage {
	if x != nil {
		return x.XSendMailMessage
	}
	return nil
}

func (x *UpMsg) GetXMarkReadChannel() *chatmessage.MarkReadChannel {
	if x != nil {
		return x.XMarkReadChannel
	}
	return nil
}

func (x *UpMsg) GetXClaimMembershipReward() *ClaimMembershipReward {
	if x != nil {
		return x.XClaimMembershipReward
	}
	return nil
}

func (x *UpMsg) GetXKingdomAwardPlayer() *KingdomAwardPlayer {
	if x != nil {
		return x.XKingdomAwardPlayer
	}
	return nil
}

func (x *UpMsg) GetXReportMessage() *ReportMessage {
	if x != nil {
		return x.XReportMessage
	}
	return nil
}

func (x *UpMsg) GetXChatHistoryWholeFetch() *ChatHistoryWholeFetch {
	if x != nil {
		return x.XChatHistoryWholeFetch
	}
	return nil
}

func (x *UpMsg) GetXOutfireWall() *OutfireWall {
	if x != nil {
		return x.XOutfireWall
	}
	return nil
}

func (x *UpMsg) GetXOnWallOutlife() *OnWallOutlife {
	if x != nil {
		return x.XOnWallOutlife
	}
	return nil
}

func (x *UpMsg) GetXGetRewardmaillist() *GetRewardmaillist {
	if x != nil {
		return x.XGetRewardmaillist
	}
	return nil
}

func (x *UpMsg) GetXClaimConsumerReward() *ClaimConsumerReward {
	if x != nil {
		return x.XClaimConsumerReward
	}
	return nil
}

func (x *UpMsg) GetXRefreshPatrol() *RefreshPatrol {
	if x != nil {
		return x.XRefreshPatrol
	}
	return nil
}

func (x *UpMsg) GetXCollectPatrolAward() *CollectPatrolAward {
	if x != nil {
		return x.XCollectPatrolAward
	}
	return nil
}

func (x *UpMsg) GetXAutoPatrol() *AutoPatrol {
	if x != nil {
		return x.XAutoPatrol
	}
	return nil
}

func (x *UpMsg) GetXGetServerActiveReward() *GetServerActiveReward {
	if x != nil {
		return x.XGetServerActiveReward
	}
	return nil
}

func (x *UpMsg) GetXAllianceUseGift() *AllianceUseGift {
	if x != nil {
		return x.XAllianceUseGift
	}
	return nil
}

func (x *UpMsg) GetXKingUseGift() *KingUseGift {
	if x != nil {
		return x.XKingUseGift
	}
	return nil
}

func (x *UpMsg) GetXServerActive() *ServerActive {
	if x != nil {
		return x.XServerActive
	}
	return nil
}

func (x *UpMsg) GetXCompileType() int32 {
	if x != nil && x.XCompileType != nil {
		return *x.XCompileType
	}
	return 0
}

func (x *UpMsg) GetXDeleteMessage() *chatmessage.DeleteMessage {
	if x != nil {
		return x.XDeleteMessage
	}
	return nil
}

func (x *UpMsg) GetXGetKingGift() *GetKingGift {
	if x != nil {
		return x.XGetKingGift
	}
	return nil
}

func (x *UpMsg) GetXGetFriendsList() *GetFriendsList {
	if x != nil {
		return x.XGetFriendsList
	}
	return nil
}

func (x *UpMsg) GetXGetAllianceRankList() *GetAllianceRankList {
	if x != nil {
		return x.XGetAllianceRankList
	}
	return nil
}

func (x *UpMsg) GetXGetAllianceKillRankList() *GetAllianceKillRankList {
	if x != nil {
		return x.XGetAllianceKillRankList
	}
	return nil
}

func (x *UpMsg) GetXGetPowerRankList() *GetPowerRankList {
	if x != nil {
		return x.XGetPowerRankList
	}
	return nil
}

func (x *UpMsg) GetXChangeServerCastle() *ChangeServerCastle {
	if x != nil {
		return x.XChangeServerCastle
	}
	return nil
}

func (x *UpMsg) GetXGetServerKingdomList() *GetServerKingdomList {
	if x != nil {
		return x.XGetServerKingdomList
	}
	return nil
}

func (x *UpMsg) GetXGetServerKingdom() *GetServerKingdom {
	if x != nil {
		return x.XGetServerKingdom
	}
	return nil
}

func (x *UpMsg) GetXCheckBuff() *CheckBuff {
	if x != nil {
		return x.XCheckBuff
	}
	return nil
}

func (x *UpMsg) GetXCheckRotary() *CheckRotary {
	if x != nil {
		return x.XCheckRotary
	}
	return nil
}

func (x *UpMsg) GetXGetActivitymaillist() *GetActivitymaillist {
	if x != nil {
		return x.XGetActivitymaillist
	}
	return nil
}

func (x *UpMsg) GetXCheckRotaryAdvance() *CheckRotaryAdvance {
	if x != nil {
		return x.XCheckRotaryAdvance
	}
	return nil
}

func (x *UpMsg) GetXWhiteWalkerActiveStart() *WhiteWalkerActiveStart {
	if x != nil {
		return x.XWhiteWalkerActiveStart
	}
	return nil
}

func (x *UpMsg) GetXGetLordHourGift() *GetLordHourGift {
	if x != nil {
		return x.XGetLordHourGift
	}
	return nil
}

func (x *UpMsg) GetXRepatriateWarMember() *RepatriateWarMember {
	if x != nil {
		return x.XRepatriateWarMember
	}
	return nil
}

func (x *UpMsg) GetXGetTarvenStamina() *GetTarvenStamina {
	if x != nil {
		return x.XGetTarvenStamina
	}
	return nil
}

func (x *UpMsg) GetXAddFavoriteCoord() *AddFavoriteCoord {
	if x != nil {
		return x.XAddFavoriteCoord
	}
	return nil
}

func (x *UpMsg) GetXGetFavoriteCoordList() *GetFavoriteCoordList {
	if x != nil {
		return x.XGetFavoriteCoordList
	}
	return nil
}

func (x *UpMsg) GetXAskGeneral() *AskGeneral {
	if x != nil {
		return x.XAskGeneral
	}
	return nil
}

func (x *UpMsg) GetXReportError() *ReportError {
	if x != nil {
		return x.XReportError
	}
	return nil
}

func (x *UpMsg) GetXCreateGuildBuilding() *CreateGuildBuilding {
	if x != nil {
		return x.XCreateGuildBuilding
	}
	return nil
}

func (x *UpMsg) GetXReclaimGuildBuilding() *ReclaimGuildBuilding {
	if x != nil {
		return x.XReclaimGuildBuilding
	}
	return nil
}

func (x *UpMsg) GetXSetSubcityAutoFight() *SetSubcityAutoFight {
	if x != nil {
		return x.XSetSubcityAutoFight
	}
	return nil
}

func (x *UpMsg) GetXGetGuildTerritory() *GetGuildTerritory {
	if x != nil {
		return x.XGetGuildTerritory
	}
	return nil
}

func (x *UpMsg) GetXReleaseImprisonGeneral() *ReleaseImprisonGeneral {
	if x != nil {
		return x.XReleaseImprisonGeneral
	}
	return nil
}

func (x *UpMsg) GetXKillImprisonGeneral() *KillImprisonGeneral {
	if x != nil {
		return x.XKillImprisonGeneral
	}
	return nil
}

func (x *UpMsg) GetXStopReclaimGuildBuilding() *StopReclaimGuildBuilding {
	if x != nil {
		return x.XStopReclaimGuildBuilding
	}
	return nil
}

func (x *UpMsg) GetXRedomImprisonGeneral() *RedomImprisonGeneral {
	if x != nil {
		return x.XRedomImprisonGeneral
	}
	return nil
}

func (x *UpMsg) GetXSendInvitekey() *SendInvitekey {
	if x != nil {
		return x.XSendInvitekey
	}
	return nil
}

func (x *UpMsg) GetXSendSnowball() *SendSnowball {
	if x != nil {
		return x.XSendSnowball
	}
	return nil
}

func (x *UpMsg) GetXBuySkin() *BuySkin {
	if x != nil {
		return x.XBuySkin
	}
	return nil
}

func (x *UpMsg) GetXSelectSkin() *SelectSkin {
	if x != nil {
		return x.XSelectSkin
	}
	return nil
}

func (x *UpMsg) GetXFacebook_Invite() *Facebook_Invite {
	if x != nil {
		return x.XFacebook_Invite
	}
	return nil
}

func (x *UpMsg) GetXGetGuildTerritoryLimit() *GetGuildTerritoryLimit {
	if x != nil {
		return x.XGetGuildTerritoryLimit
	}
	return nil
}

func (x *UpMsg) GetXGetCrossServerInfo() *GetCrossServerInfo {
	if x != nil {
		return x.XGetCrossServerInfo
	}
	return nil
}

func (x *UpMsg) GetXRequestWorldmapNew() *RequestMapinfoNew {
	if x != nil {
		return x.XRequestWorldmapNew
	}
	return nil
}

func (x *UpMsg) GetXUpgradeSubcityColor() *UpgradeSubcityColor {
	if x != nil {
		return x.XUpgradeSubcityColor
	}
	return nil
}

func (x *UpMsg) GetXSetAllienceGiftPermission() *SetAllienceGiftPermission {
	if x != nil {
		return x.XSetAllienceGiftPermission
	}
	return nil
}

func (x *UpMsg) GetXAmbulanceSoldiers() *AmbulanceSoldiers {
	if x != nil {
		return x.XAmbulanceSoldiers
	}
	return nil
}

func (x *UpMsg) GetXUnity5() int32 {
	if x != nil && x.XUnity5 != nil {
		return *x.XUnity5
	}
	return 0
}

func (x *UpMsg) GetXBatchMailReward() *BatchMailReward {
	if x != nil {
		return x.XBatchMailReward
	}
	return nil
}

func (x *UpMsg) GetXBatchWearEquip() *BatchWearEquip {
	if x != nil {
		return x.XBatchWearEquip
	}
	return nil
}

func (x *UpMsg) GetXGetCashcostAndGoldReward() *GetCashcostAndGoldReward {
	if x != nil {
		return x.XGetCashcostAndGoldReward
	}
	return nil
}

func (x *UpMsg) GetXGetPreRechargeReward() *GetPreRechargeReward {
	if x != nil {
		return x.XGetPreRechargeReward
	}
	return nil
}

func (x *UpMsg) GetXGetGameNotice() *GetGameNotice {
	if x != nil {
		return x.XGetGameNotice
	}
	return nil
}

func (x *UpMsg) GetXMarkReadGameNotice() *MarkReadGameNotice {
	if x != nil {
		return x.XMarkReadGameNotice
	}
	return nil
}

func (x *UpMsg) GetXUpgradeGuildBuilding() *UpgradeGuildBuilding {
	if x != nil {
		return x.XUpgradeGuildBuilding
	}
	return nil
}

func (x *UpMsg) GetXSaveUserPrefs() *SaveUserPrefs {
	if x != nil {
		return x.XSaveUserPrefs
	}
	return nil
}

func (x *UpMsg) GetXGetUserPrefs() *GetUserPrefs {
	if x != nil {
		return x.XGetUserPrefs
	}
	return nil
}

func (x *UpMsg) GetXCancelUpgradeGuildBuilding() *CancelUpgradeGuildBuilding {
	if x != nil {
		return x.XCancelUpgradeGuildBuilding
	}
	return nil
}

func (x *UpMsg) GetXGetWorldBossInfo() *GetWorldBossInfo {
	if x != nil {
		return x.XGetWorldBossInfo
	}
	return nil
}

func (x *UpMsg) GetXBuyAttackBoss() *BuyAttackBoss {
	if x != nil {
		return x.XBuyAttackBoss
	}
	return nil
}

func (x *UpMsg) GetXGetCrossServerRank() *GetCrossServerRank {
	if x != nil {
		return x.XGetCrossServerRank
	}
	return nil
}

func (x *UpMsg) GetXRefineEquipment() *RefineEquipment {
	if x != nil {
		return x.XRefineEquipment
	}
	return nil
}

func (x *UpMsg) GetXUpdateSubcityWallData() *UpdateSubcityWallData {
	if x != nil {
		return x.XUpdateSubcityWallData
	}
	return nil
}

func (x *UpMsg) GetXConfirmRefineEquipment() *ConfirmRefineEquipment {
	if x != nil {
		return x.XConfirmRefineEquipment
	}
	return nil
}

func (x *UpMsg) GetXSendEquipMessage() *chatmessage.SendEquipMessage {
	if x != nil {
		return x.XSendEquipMessage
	}
	return nil
}

func (x *UpMsg) GetXClearWorkCd() *ClearWorkCd {
	if x != nil {
		return x.XClearWorkCd
	}
	return nil
}

func (x *UpMsg) GetXRecommendGuildTech() *RecommendGuildTech {
	if x != nil {
		return x.XRecommendGuildTech
	}
	return nil
}

func (x *UpMsg) GetXDeletePvpMessage() *chatmessage.DeletePvpMessage {
	if x != nil {
		return x.XDeletePvpMessage
	}
	return nil
}

func (x *UpMsg) GetXHitColorfulEgg() *HitColorfulEgg {
	if x != nil {
		return x.XHitColorfulEgg
	}
	return nil
}

func (x *UpMsg) GetXGetFightMaillist() *GetFightMaillist {
	if x != nil {
		return x.XGetFightMaillist
	}
	return nil
}

func (x *UpMsg) GetXProtectOther() *ProtectOther {
	if x != nil {
		return x.XProtectOther
	}
	return nil
}

func (x *UpMsg) GetXRequestMapinfoBattlefield() *RequestMapinfoBattlefield {
	if x != nil {
		return x.XRequestMapinfoBattlefield
	}
	return nil
}

func (x *UpMsg) GetXSynthesisItem() *SynthesisItem {
	if x != nil {
		return x.XSynthesisItem
	}
	return nil
}

func (x *UpMsg) GetXComeInBattle() *ComeInBattle {
	if x != nil {
		return x.XComeInBattle
	}
	return nil
}

func (x *UpMsg) GetXGiveUpRuins() *GiveUpRuins {
	if x != nil {
		return x.XGiveUpRuins
	}
	return nil
}

func (x *UpMsg) GetXUpgradeSoldiers() *UpgradeSoldiers {
	if x != nil {
		return x.XUpgradeSoldiers
	}
	return nil
}

func (x *UpMsg) GetXGetArtReward() *GetArtReward {
	if x != nil {
		return x.XGetArtReward
	}
	return nil
}

func (x *UpMsg) GetXActivePet() *ActivePet {
	if x != nil {
		return x.XActivePet
	}
	return nil
}

func (x *UpMsg) GetXMakeMaterial() *MakeMaterial {
	if x != nil {
		return x.XMakeMaterial
	}
	return nil
}

func (x *UpMsg) GetXSpeedupMaterial() *SpeedupMaterial {
	if x != nil {
		return x.XSpeedupMaterial
	}
	return nil
}

func (x *UpMsg) GetXDeleteMaterialQueue() *DeleteMaterialQueue {
	if x != nil {
		return x.XDeleteMaterialQueue
	}
	return nil
}

func (x *UpMsg) GetXUpgradePet() *UpgradePet {
	if x != nil {
		return x.XUpgradePet
	}
	return nil
}

func (x *UpMsg) GetXGetTechTaskList() *GetTechTaskList {
	if x != nil {
		return x.XGetTechTaskList
	}
	return nil
}

func (x *UpMsg) GetXGetTechTaskReward() *GetTechTaskReward {
	if x != nil {
		return x.XGetTechTaskReward
	}
	return nil
}

func (x *UpMsg) GetXMakeTechStone() *MakeTechStone {
	if x != nil {
		return x.XMakeTechStone
	}
	return nil
}

func (x *UpMsg) GetXSpeedupTechStone() *SpeedupTechStone {
	if x != nil {
		return x.XSpeedupTechStone
	}
	return nil
}

func (x *UpMsg) GetXSignupBattlefield() *SignupBattlefield {
	if x != nil {
		return x.XSignupBattlefield
	}
	return nil
}

func (x *UpMsg) GetXSetMembersBattlefield() *SetMembersBattlefield {
	if x != nil {
		return x.XSetMembersBattlefield
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldRanklist() *GetBattlefieldRanklist {
	if x != nil {
		return x.XGetBattlefieldRanklist
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldGuildrank() *GetBattlefieldGuildrank {
	if x != nil {
		return x.XGetBattlefieldGuildrank
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldHistory() *GetBattlefieldHistory {
	if x != nil {
		return x.XGetBattlefieldHistory
	}
	return nil
}

func (x *UpMsg) GetXGetRankList() *GetRankList {
	if x != nil {
		return x.XGetRankList
	}
	return nil
}

func (x *UpMsg) GetXUpgradeGuildFarm() *UpgradeGuildFarm {
	if x != nil {
		return x.XUpgradeGuildFarm
	}
	return nil
}

func (x *UpMsg) GetXQuitBattle() *QuitBattle {
	if x != nil {
		return x.XQuitBattle
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldInfo() *GetBattlefieldInfo {
	if x != nil {
		return x.XGetBattlefieldInfo
	}
	return nil
}

func (x *UpMsg) GetXGetBattleGarrison() *GetBattleGarrison {
	if x != nil {
		return x.XGetBattleGarrison
	}
	return nil
}

func (x *UpMsg) GetXGetBattleData() *GetBattleData {
	if x != nil {
		return x.XGetBattleData
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldRecord() *GetBattlefieldRecord {
	if x != nil {
		return x.XGetBattlefieldRecord
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldPersonalRankInfo() *GetBattlefieldPersonalRankInfo {
	if x != nil {
		return x.XGetBattlefieldPersonalRankInfo
	}
	return nil
}

func (x *UpMsg) GetXSetIdNumber() *SetIdNumber {
	if x != nil {
		return x.XSetIdNumber
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldPersonalSeasonRankInfo() *GetBattlefieldPersonalSeasonRankInfo {
	if x != nil {
		return x.XGetBattlefieldPersonalSeasonRankInfo
	}
	return nil
}

func (x *UpMsg) GetXSetDragonUnlock() *SetDragonUnlock {
	if x != nil {
		return x.XSetDragonUnlock
	}
	return nil
}

func (x *UpMsg) GetXSetDragonFeed() *SetDragonFeed {
	if x != nil {
		return x.XSetDragonFeed
	}
	return nil
}

func (x *UpMsg) GetXSetDragonActive() *SetDragonActive {
	if x != nil {
		return x.XSetDragonActive
	}
	return nil
}

func (x *UpMsg) GetXRefreshDragonFood() *RefreshDragonFood {
	if x != nil {
		return x.XRefreshDragonFood
	}
	return nil
}

func (x *UpMsg) GetXGetHonorList() *GetHonorList {
	if x != nil {
		return x.XGetHonorList
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldBoss() *GetBattlefieldBoss {
	if x != nil {
		return x.XGetBattlefieldBoss
	}
	return nil
}

func (x *UpMsg) GetXSendGeneralMessage() *chatmessage.SendGeneralMessage {
	if x != nil {
		return x.XSendGeneralMessage
	}
	return nil
}

func (x *UpMsg) GetXBattleMarketBuy() *BattleMarketBuy {
	if x != nil {
		return x.XBattleMarketBuy
	}
	return nil
}

func (x *UpMsg) GetXBattleMarketRefresh() *BattleMarketRefresh {
	if x != nil {
		return x.XBattleMarketRefresh
	}
	return nil
}

func (x *UpMsg) GetXGetFoundSubcity() *GetFoundSubcity {
	if x != nil {
		return x.XGetFoundSubcity
	}
	return nil
}

func (x *UpMsg) GetXBetFoundSubcity() *BetFoundSubcity {
	if x != nil {
		return x.XBetFoundSubcity
	}
	return nil
}

func (x *UpMsg) GetXReapSubcityItems() *ReapSubcityItems {
	if x != nil {
		return x.XReapSubcityItems
	}
	return nil
}

func (x *UpMsg) GetXOpenSubcityByItem() *OpenSubcityByItem {
	if x != nil {
		return x.XOpenSubcityByItem
	}
	return nil
}

func (x *UpMsg) GetXRefineDragon() *RefineDragon {
	if x != nil {
		return x.XRefineDragon
	}
	return nil
}

func (x *UpMsg) GetXConfirmRefineDragon() *ConfirmRefineDragon {
	if x != nil {
		return x.XConfirmRefineDragon
	}
	return nil
}

func (x *UpMsg) GetXSetBuildingGovernmentGeneral() *SetBuildingGovernmentGeneral {
	if x != nil {
		return x.XSetBuildingGovernmentGeneral
	}
	return nil
}

func (x *UpMsg) GetXInviteRobbersMembers() *InviteRobbersMembers {
	if x != nil {
		return x.XInviteRobbersMembers
	}
	return nil
}

func (x *UpMsg) GetXGetRobbers() *GetRobbers {
	if x != nil {
		return x.XGetRobbers
	}
	return nil
}

func (x *UpMsg) GetXGetRobbersReward() *GetRobbersReward {
	if x != nil {
		return x.XGetRobbersReward
	}
	return nil
}

func (x *UpMsg) GetXGetVipPopularityRankList() *GetVipPopularityRankList {
	if x != nil {
		return x.XGetVipPopularityRankList
	}
	return nil
}

func (x *UpMsg) GetXGetMapinfoTriumph() *GetMapinfoTriumph {
	if x != nil {
		return x.XGetMapinfoTriumph
	}
	return nil
}

func (x *UpMsg) GetXGetMapinfoTriumphRecord() *GetMapinfoTriumphRecord {
	if x != nil {
		return x.XGetMapinfoTriumphRecord
	}
	return nil
}

func (x *UpMsg) GetXGetMapinfoTriumphFlower() *GetMapinfoTriumphFlower {
	if x != nil {
		return x.XGetMapinfoTriumphFlower
	}
	return nil
}

func (x *UpMsg) GetXGetMapinfoTriumphFlowerrecord() *GetMapinfoTriumphFlowerrecord {
	if x != nil {
		return x.XGetMapinfoTriumphFlowerrecord
	}
	return nil
}

func (x *UpMsg) GetXOverBattlefield() *OverBattlefield {
	if x != nil {
		return x.XOverBattlefield
	}
	return nil
}

func (x *UpMsg) GetXDestructSkillBook() *DestructSkillBook {
	if x != nil {
		return x.XDestructSkillBook
	}
	return nil
}

func (x *UpMsg) GetXSetAvatarFrame() *SetAvatarFrame {
	if x != nil {
		return x.XSetAvatarFrame
	}
	return nil
}

func (x *UpMsg) GetXGetAchievementList() *GetAchievementList {
	if x != nil {
		return x.XGetAchievementList
	}
	return nil
}

func (x *UpMsg) GetXGetHydraRank() *GetHydraRank {
	if x != nil {
		return x.XGetHydraRank
	}
	return nil
}

func (x *UpMsg) GetXGetBattlefieldMaillist() *GetBattlefieldMaillist {
	if x != nil {
		return x.XGetBattlefieldMaillist
	}
	return nil
}

func (x *UpMsg) GetXGetKingReturn() *GetKingReturn {
	if x != nil {
		return x.XGetKingReturn
	}
	return nil
}

func (x *UpMsg) GetXGetPlayerCallback() *GetPlayerCallback {
	if x != nil {
		return x.XGetPlayerCallback
	}
	return nil
}

func (x *UpMsg) GetXGetKingReturnReward() *GetKingReturnReward {
	if x != nil {
		return x.XGetKingReturnReward
	}
	return nil
}

func (x *UpMsg) GetXCallbackSoldiers() *CallbackSoldiers {
	if x != nil {
		return x.XCallbackSoldiers
	}
	return nil
}

func (x *UpMsg) GetXReviveSoldiers() *ReviveSoldiers {
	if x != nil {
		return x.XReviveSoldiers
	}
	return nil
}

func (x *UpMsg) GetXTeleportGuild() *TeleportGuild {
	if x != nil {
		return x.XTeleportGuild
	}
	return nil
}

func (x *UpMsg) GetXGetTempleBuildingList() *GetTempleBuildingList {
	if x != nil {
		return x.XGetTempleBuildingList
	}
	return nil
}

func (x *UpMsg) GetXGetGuildMonster() *GetGuildMonster {
	if x != nil {
		return x.XGetGuildMonster
	}
	return nil
}

func (x *UpMsg) GetXOpenMonsterByItem() *OpenMonsterByItem {
	if x != nil {
		return x.XOpenMonsterByItem
	}
	return nil
}

func (x *UpMsg) GetXGetExchangeItem() *GetExchangeItem {
	if x != nil {
		return x.XGetExchangeItem
	}
	return nil
}

func (x *UpMsg) GetXGetExchangeReward() *GetExchangeReward {
	if x != nil {
		return x.XGetExchangeReward
	}
	return nil
}

func (x *UpMsg) GetXGetDailyRefreshTask() *GetDailyRefreshTask {
	if x != nil {
		return x.XGetDailyRefreshTask
	}
	return nil
}

func (x *UpMsg) GetXGetKingBoxReward() *GetKingBoxReward {
	if x != nil {
		return x.XGetKingBoxReward
	}
	return nil
}

func (x *UpMsg) GetXGetActivityTaskRewardItems() *GetActivityTaskRewardItems {
	if x != nil {
		return x.XGetActivityTaskRewardItems
	}
	return nil
}

func (x *UpMsg) GetXGetNewServerFund() *GetNewServerFund {
	if x != nil {
		return x.XGetNewServerFund
	}
	return nil
}

func (x *UpMsg) GetXGetMilestoneList() *GetMilestoneList {
	if x != nil {
		return x.XGetMilestoneList
	}
	return nil
}

func (x *UpMsg) GetXClaimMilestoneReward() *ClaimMilestoneReward {
	if x != nil {
		return x.XClaimMilestoneReward
	}
	return nil
}

func (x *UpMsg) GetXUpgradeStageReward() *UpgradeStageReward {
	if x != nil {
		return x.XUpgradeStageReward
	}
	return nil
}

func (x *UpMsg) GetXGetGaruaList() *GetGaruaList {
	if x != nil {
		return x.XGetGaruaList
	}
	return nil
}

func (x *UpMsg) GetXSafeCode() *SafeCode {
	if x != nil {
		return x.XSafeCode
	}
	return nil
}

func (x *UpMsg) GetXDestructItem() *DestructItem {
	if x != nil {
		return x.XDestructItem
	}
	return nil
}

func (x *UpMsg) GetXDestructEquipmentBatch() *DestructEquipmentBatch {
	if x != nil {
		return x.XDestructEquipmentBatch
	}
	return nil
}

func (x *UpMsg) GetXGetFoundFamouscity() *GetFoundFamouscity {
	if x != nil {
		return x.XGetFoundFamouscity
	}
	return nil
}

func (x *UpMsg) GetXBetFoundFamouscity() *BetFoundFamouscity {
	if x != nil {
		return x.XBetFoundFamouscity
	}
	return nil
}

func (x *UpMsg) GetXOpenFamouscityByItem() *OpenFamouscityByItem {
	if x != nil {
		return x.XOpenFamouscityByItem
	}
	return nil
}

func (x *UpMsg) GetXGetGuildFamouscityList() *GetGuildFamouscityList {
	if x != nil {
		return x.XGetGuildFamouscityList
	}
	return nil
}

func (x *UpMsg) GetXSummonViking() *SummonViking {
	if x != nil {
		return x.XSummonViking
	}
	return nil
}

func (x *UpMsg) GetXApplyViking() *ApplyViking {
	if x != nil {
		return x.XApplyViking
	}
	return nil
}

func (x *UpMsg) GetXSelectVikingDifficulty() *SelectVikingDifficulty {
	if x != nil {
		return x.XSelectVikingDifficulty
	}
	return nil
}

func (x *UpMsg) GetXGetAllFamouscity() *GetAllFamouscity {
	if x != nil {
		return x.XGetAllFamouscity
	}
	return nil
}

func (x *UpMsg) GetXGetGuildVikingList() *GetGuildVikingList {
	if x != nil {
		return x.XGetGuildVikingList
	}
	return nil
}

func (x *UpMsg) GetXGetVikingData() *GetVikingData {
	if x != nil {
		return x.XGetVikingData
	}
	return nil
}

func (x *UpMsg) GetXClaimVikingReward() *ClaimVikingReward {
	if x != nil {
		return x.XClaimVikingReward
	}
	return nil
}

func (x *UpMsg) GetXGetPlayoffMembers() *GetPlayoffMembers {
	if x != nil {
		return x.XGetPlayoffMembers
	}
	return nil
}

func (x *UpMsg) GetXGetGuildTreasureData() *GetGuildTreasureData {
	if x != nil {
		return x.XGetGuildTreasureData
	}
	return nil
}

func (x *UpMsg) GetXClaimGuildTreasure() *ClaimGuildTreasure {
	if x != nil {
		return x.XClaimGuildTreasure
	}
	return nil
}

func (x *UpMsg) GetXGetLimitServerCompetition() *GetLimitServerCompetition {
	if x != nil {
		return x.XGetLimitServerCompetition
	}
	return nil
}

func (x *UpMsg) GetXGetPrivateTreasureList() *GetPrivateTreasureList {
	if x != nil {
		return x.XGetPrivateTreasureList
	}
	return nil
}

func (x *UpMsg) GetXSendPrivateTreasure() *SendPrivateTreasure {
	if x != nil {
		return x.XSendPrivateTreasure
	}
	return nil
}

func (x *UpMsg) GetXHonoursSoldiers() *HonoursSoldiers {
	if x != nil {
		return x.XHonoursSoldiers
	}
	return nil
}

func (x *UpMsg) GetXRefineSoldiers() *RefineSoldiers {
	if x != nil {
		return x.XRefineSoldiers
	}
	return nil
}

func (x *UpMsg) GetXConfirmRefineSoldiers() *ConfirmRefineSoldiers {
	if x != nil {
		return x.XConfirmRefineSoldiers
	}
	return nil
}

func (x *UpMsg) GetXDeportUser() *DeportUser {
	if x != nil {
		return x.XDeportUser
	}
	return nil
}

func (x *UpMsg) GetXGetDeportList() *GetDeportList {
	if x != nil {
		return x.XGetDeportList
	}
	return nil
}

func (x *UpMsg) GetXSpeedupBatch() *SpeedupBatch {
	if x != nil {
		return x.XSpeedupBatch
	}
	return nil
}

func (x *UpMsg) GetXGetBattlepass() *GetBattlepass {
	if x != nil {
		return x.XGetBattlepass
	}
	return nil
}

func (x *UpMsg) GetXGetBattlepassReward() *GetBattlepassReward {
	if x != nil {
		return x.XGetBattlepassReward
	}
	return nil
}

func (x *UpMsg) GetXGetUserData() *GetUserData {
	if x != nil {
		return x.XGetUserData
	}
	return nil
}

func (x *UpMsg) GetXGetCommentedReward() *GetCommentedReward {
	if x != nil {
		return x.XGetCommentedReward
	}
	return nil
}

func (x *UpMsg) GetXGetPuzzleReward() *GetPuzzleReward {
	if x != nil {
		return x.XGetPuzzleReward
	}
	return nil
}

func (x *UpMsg) GetXGetPuzzleData() *GetPuzzleData {
	if x != nil {
		return x.XGetPuzzleData
	}
	return nil
}

func (x *UpMsg) GetXClaimFirstWeekGift() *ClaimFirstWeekGift {
	if x != nil {
		return x.XClaimFirstWeekGift
	}
	return nil
}

func (x *UpMsg) GetXClaimFamousGeneral() *ClaimFamousGeneral {
	if x != nil {
		return x.XClaimFamousGeneral
	}
	return nil
}

func (x *UpMsg) GetXSetMonthCardType() *SetMonthCardType {
	if x != nil {
		return x.XSetMonthCardType
	}
	return nil
}

func (x *UpMsg) GetXClaimConsumerGemsReward() *ClaimConsumerGemsReward {
	if x != nil {
		return x.XClaimConsumerGemsReward
	}
	return nil
}

func (x *UpMsg) GetXGetConsumerGemsInfo() *GetConsumerGemsInfo {
	if x != nil {
		return x.XGetConsumerGemsInfo
	}
	return nil
}

func (x *UpMsg) GetXClaimInviteGift() *ClaimInviteGift {
	if x != nil {
		return x.XClaimInviteGift
	}
	return nil
}

func (x *UpMsg) GetXListInviteGift() *ListInviteGift {
	if x != nil {
		return x.XListInviteGift
	}
	return nil
}

func (x *UpMsg) GetXOpenBox() *OpenBox {
	if x != nil {
		return x.XOpenBox
	}
	return nil
}

func (x *UpMsg) GetXGetFreePackage() *GetFreePackage {
	if x != nil {
		return x.XGetFreePackage
	}
	return nil
}

func (x *UpMsg) GetXCrazyMarketList() *CrazyMarketList {
	if x != nil {
		return x.XCrazyMarketList
	}
	return nil
}

func (x *UpMsg) GetXCrazyMarketBuy() *CrazyMarketBuy {
	if x != nil {
		return x.XCrazyMarketBuy
	}
	return nil
}

func (x *UpMsg) GetXSetBuildingNamePermission() *SetBuildingNamePermission {
	if x != nil {
		return x.XSetBuildingNamePermission
	}
	return nil
}

func (x *UpMsg) GetXQuickSynthesisMaterial() *QuickSynthesisMaterial {
	if x != nil {
		return x.XQuickSynthesisMaterial
	}
	return nil
}

func (x *UpMsg) GetXClaimShareGift() *ClaimShareGift {
	if x != nil {
		return x.XClaimShareGift
	}
	return nil
}

func (x *UpMsg) GetXClaimFreeGift() *ClaimFreeGift {
	if x != nil {
		return x.XClaimFreeGift
	}
	return nil
}

func (x *UpMsg) GetXGetChapterTaskReward() *GetChapterTaskReward {
	if x != nil {
		return x.XGetChapterTaskReward
	}
	return nil
}

func (x *UpMsg) GetXGetChapterTaskList() *GetChapterTaskList {
	if x != nil {
		return x.XGetChapterTaskList
	}
	return nil
}

func (x *UpMsg) GetXSendNpsResult() *SendNpsResult {
	if x != nil {
		return x.XSendNpsResult
	}
	return nil
}

func (x *UpMsg) GetXGetAdsReward() *GetAdsReward {
	if x != nil {
		return x.XGetAdsReward
	}
	return nil
}

func (x *UpMsg) GetXRequestSpecialGift() *RequestSpecialGift {
	if x != nil {
		return x.XRequestSpecialGift
	}
	return nil
}

func (x *UpMsg) GetXSignupSmallBattlefield() *SignupSmallBattlefield {
	if x != nil {
		return x.XSignupSmallBattlefield
	}
	return nil
}

func (x *UpMsg) GetXInviteSmallBattlefield() *InviteSmallBattlefield {
	if x != nil {
		return x.XInviteSmallBattlefield
	}
	return nil
}

func (x *UpMsg) GetXMatchSmallBattlefield() *MatchSmallBattlefield {
	if x != nil {
		return x.XMatchSmallBattlefield
	}
	return nil
}

func (x *UpMsg) GetXStartSmallBattlefield() *StartSmallBattlefield {
	if x != nil {
		return x.XStartSmallBattlefield
	}
	return nil
}

func (x *UpMsg) GetXConfirmSmallBattlefield() *ConfirmSmallBattlefield {
	if x != nil {
		return x.XConfirmSmallBattlefield
	}
	return nil
}

func (x *UpMsg) GetXSelectSmallBattlefieldBuff() *SelectSmallBattlefieldBuff {
	if x != nil {
		return x.XSelectSmallBattlefieldBuff
	}
	return nil
}

func (x *UpMsg) GetXGetSmallBattlefieldInfo() *GetSmallBattlefieldInfo {
	if x != nil {
		return x.XGetSmallBattlefieldInfo
	}
	return nil
}

func (x *UpMsg) GetXGetSmallBattlefieldInvite() *GetSmallBattlefieldInvite {
	if x != nil {
		return x.XGetSmallBattlefieldInvite
	}
	return nil
}

func (x *UpMsg) GetXReadySmallBattlefield() *ReadySmallBattlefield {
	if x != nil {
		return x.XReadySmallBattlefield
	}
	return nil
}

func (x *UpMsg) GetXGetActivityTaskRewardItemsBatch() *GetActivityTaskRewardItemsBatch {
	if x != nil {
		return x.XGetActivityTaskRewardItemsBatch
	}
	return nil
}

func (x *UpMsg) GetXShareReward() *ShareReward {
	if x != nil {
		return x.XShareReward
	}
	return nil
}

func (x *UpMsg) GetXQuitSmallBattlefield() *QuitSmallBattlefield {
	if x != nil {
		return x.XQuitSmallBattlefield
	}
	return nil
}

func (x *UpMsg) GetXGetSmallBattlefieldInviteList() *GetSmallBattlefieldInviteList {
	if x != nil {
		return x.XGetSmallBattlefieldInviteList
	}
	return nil
}

func (x *UpMsg) GetXGetActiveEventTaskList() *GetActiveEventTaskList {
	if x != nil {
		return x.XGetActiveEventTaskList
	}
	return nil
}

func (x *UpMsg) GetXClientTimestamp() int64 {
	if x != nil && x.XClientTimestamp != nil {
		return *x.XClientTimestamp
	}
	return 0
}

func (x *UpMsg) GetXGetBattlefieldGuildrankSeason() *GetBattlefieldGuildrankSeason {
	if x != nil {
		return x.XGetBattlefieldGuildrankSeason
	}
	return nil
}

func (x *UpMsg) GetXChangeGiftPage() *ChangeGiftPage {
	if x != nil {
		return x.XChangeGiftPage
	}
	return nil
}

func (x *UpMsg) GetXGetGiftList() *GetGiftList {
	if x != nil {
		return x.XGetGiftList
	}
	return nil
}

func (x *UpMsg) GetXSelectGuildBuildingSkin() *SelectGuildBuildingSkin {
	if x != nil {
		return x.XSelectGuildBuildingSkin
	}
	return nil
}

func (x *UpMsg) GetXGetHwAdsReward() *GetHwAdsReward {
	if x != nil {
		return x.XGetHwAdsReward
	}
	return nil
}

func (x *UpMsg) GetXNewRouletteTurn() *NewRouletteTurn {
	if x != nil {
		return x.XNewRouletteTurn
	}
	return nil
}

func (x *UpMsg) GetXNewRouletteAccumulateAwards() *NewRouletteAccumulateAwards {
	if x != nil {
		return x.XNewRouletteAccumulateAwards
	}
	return nil
}

func (x *UpMsg) GetXGetMoreSocialMediaReward() *GetMoreSocialMediaReward {
	if x != nil {
		return x.XGetMoreSocialMediaReward
	}
	return nil
}

func (x *UpMsg) GetXSecretRoomOperation() *SecretRoomOperation {
	if x != nil {
		return x.XSecretRoomOperation
	}
	return nil
}

func (x *UpMsg) GetXGetFireCoinsNumToday() *GetFireCoinsNumToday {
	if x != nil {
		return x.XGetFireCoinsNumToday
	}
	return nil
}

func (x *UpMsg) GetXGetGrowthFund() *GetGrowthFund {
	if x != nil {
		return x.XGetGrowthFund
	}
	return nil
}

func (x *UpMsg) GetXGetGrowthFundReward() *GetGrowthFundReward {
	if x != nil {
		return x.XGetGrowthFundReward
	}
	return nil
}

func (x *UpMsg) GetXGetWarLossReward() *GetWarLossReward {
	if x != nil {
		return x.XGetWarLossReward
	}
	return nil
}

func (x *UpMsg) GetXRewardMonthLogin() *RewardMonthLogin {
	if x != nil {
		return x.XRewardMonthLogin
	}
	return nil
}

func (x *UpMsg) GetXGhostTroops() *GhostTroops {
	if x != nil {
		return x.XGhostTroops
	}
	return nil
}

func (x *UpMsg) GetXCancelGhostTroops() *CancelGhostTroops {
	if x != nil {
		return x.XCancelGhostTroops
	}
	return nil
}

func (x *UpMsg) GetXSetDragonCliffShow() *SetDragonCliffShow {
	if x != nil {
		return x.XSetDragonCliffShow
	}
	return nil
}

func (x *UpMsg) GetXSetDragonTalentUpgrade() *SetDragonTalentUpgrade {
	if x != nil {
		return x.XSetDragonTalentUpgrade
	}
	return nil
}

func (x *UpMsg) GetXWearEmblem() *WearEmblem {
	if x != nil {
		return x.XWearEmblem
	}
	return nil
}

func (x *UpMsg) GetXGetFameTaskList() *GetFameTaskList {
	if x != nil {
		return x.XGetFameTaskList
	}
	return nil
}

func (x *UpMsg) GetXGetFameTaskReward() *GetFameTaskReward {
	if x != nil {
		return x.XGetFameTaskReward
	}
	return nil
}

func (x *UpMsg) GetXGetFameProcessReward() *GetFameProcessReward {
	if x != nil {
		return x.XGetFameProcessReward
	}
	return nil
}

func (x *UpMsg) GetXGetFameRankList() *GetFameRankList {
	if x != nil {
		return x.XGetFameRankList
	}
	return nil
}

func (x *UpMsg) GetXLikeFame() *LikeFame {
	if x != nil {
		return x.XLikeFame
	}
	return nil
}

func (x *UpMsg) GetXGetLikeFameInfo() *GetLikeFameInfo {
	if x != nil {
		return x.XGetLikeFameInfo
	}
	return nil
}

func (x *UpMsg) GetXGetMapBattleFlagInfoTest() *GetMapBattleFlagInfoTest {
	if x != nil {
		return x.XGetMapBattleFlagInfoTest
	}
	return nil
}

func (x *UpMsg) GetXGetGuildTerritoryRes() *GetGuildTerritoryRes {
	if x != nil {
		return x.XGetGuildTerritoryRes
	}
	return nil
}

func (x *UpMsg) GetXSendFameMessage() *chatmessage.SendFameMessage {
	if x != nil {
		return x.XSendFameMessage
	}
	return nil
}

func (x *UpMsg) GetXGetPveRankList() *GetPveRankList {
	if x != nil {
		return x.XGetPveRankList
	}
	return nil
}

func (x *UpMsg) GetXGetBarbarianRankList() *GetBarbarianRankList {
	if x != nil {
		return x.XGetBarbarianRankList
	}
	return nil
}

func (x *UpMsg) GetXGetYounierRankList() *GetYounierRankList {
	if x != nil {
		return x.XGetYounierRankList
	}
	return nil
}

func (x *UpMsg) GetXGetPopularityRewardItems() *GetPopularityRewardItems {
	if x != nil {
		return x.XGetPopularityRewardItems
	}
	return nil
}

func (x *UpMsg) GetXFreeMarchTeam() *FreeMarchTeam {
	if x != nil {
		return x.XFreeMarchTeam
	}
	return nil
}

func (x *UpMsg) GetXFreemarchRevive() *FreemarchRevive {
	if x != nil {
		return x.XFreemarchRevive
	}
	return nil
}

func (x *UpMsg) GetXGetTaskList() *GetTaskList {
	if x != nil {
		return x.XGetTaskList
	}
	return nil
}

func (x *UpMsg) GetXGetTask() *GetTask {
	if x != nil {
		return x.XGetTask
	}
	return nil
}

func (x *UpMsg) GetXDisTask() *DisTask {
	if x != nil {
		return x.XDisTask
	}
	return nil
}

func (x *UpMsg) GetXSubTask() *SubTask {
	if x != nil {
		return x.XSubTask
	}
	return nil
}

func (x *UpMsg) GetXGetTaskReward() *GetTaskReward {
	if x != nil {
		return x.XGetTaskReward
	}
	return nil
}

func (x *UpMsg) GetXUnlockTempBagCell() *UnlockTempBagCell {
	if x != nil {
		return x.XUnlockTempBagCell
	}
	return nil
}

func (x *UpMsg) GetXDisTempBagItem() *DisTempBagItem {
	if x != nil {
		return x.XDisTempBagItem
	}
	return nil
}

func (x *UpMsg) GetXGetGuildTerritoryResUseRecord() *GetGuildTerritoryResUseRecord {
	if x != nil {
		return x.XGetGuildTerritoryResUseRecord
	}
	return nil
}

func (x *UpMsg) GetXBuyGuildTerritoryRes() *BuyGuildTerritoryRes {
	if x != nil {
		return x.XBuyGuildTerritoryRes
	}
	return nil
}

func (x *UpMsg) GetXDistributeGuildTerritoryRes() *DistributeGuildTerritoryRes {
	if x != nil {
		return x.XDistributeGuildTerritoryRes
	}
	return nil
}

func (x *UpMsg) GetXGuildDepotResource() *GuildDepotResource {
	if x != nil {
		return x.XGuildDepotResource
	}
	return nil
}

func (x *UpMsg) GetXGuildTransport() *GuildTransport {
	if x != nil {
		return x.XGuildTransport
	}
	return nil
}

func (x *UpMsg) GetXGuildTransportAsk() *GuildTransportAsk {
	if x != nil {
		return x.XGuildTransportAsk
	}
	return nil
}

func (x *UpMsg) GetXGuildTransportList() *GuildTransportList {
	if x != nil {
		return x.XGuildTransportList
	}
	return nil
}

func (x *UpMsg) GetXGuildTransportFind() *GuildTransportFind {
	if x != nil {
		return x.XGuildTransportFind
	}
	return nil
}

func (x *UpMsg) GetXCancelHealSoldiers() *CancelHealSoldiers {
	if x != nil {
		return x.XCancelHealSoldiers
	}
	return nil
}

func (x *UpMsg) GetXTransportInfo() *TransportInfo {
	if x != nil {
		return x.XTransportInfo
	}
	return nil
}

func (x *UpMsg) GetXProduceMedicineBag() *ProduceMedicineBag {
	if x != nil {
		return x.XProduceMedicineBag
	}
	return nil
}

func (x *UpMsg) GetXSpeedupMedicineBag() *SpeedupMedicineBag {
	if x != nil {
		return x.XSpeedupMedicineBag
	}
	return nil
}

func (x *UpMsg) GetXChargeItem() *ChargeItem {
	if x != nil {
		return x.XChargeItem
	}
	return nil
}

func (x *UpMsg) GetXModifyBuildingPosition() *ModifyBuildingPosition {
	if x != nil {
		return x.XModifyBuildingPosition
	}
	return nil
}

func (x *UpMsg) GetXPetTechUpgrade() *PetTechUpgrade {
	if x != nil {
		return x.XPetTechUpgrade
	}
	return nil
}

func (x *UpMsg) GetXSurrenderSoldiersFinish() *SurrenderSoldiersFinish {
	if x != nil {
		return x.XSurrenderSoldiersFinish
	}
	return nil
}

func (x *UpMsg) GetXSpeedupSurrenderSoldiers() *SpeedupSurrenderSoldiers {
	if x != nil {
		return x.XSpeedupSurrenderSoldiers
	}
	return nil
}

func (x *UpMsg) GetXCancelSurrenderSoldiers() *CancelSurrenderSoldiers {
	if x != nil {
		return x.XCancelSurrenderSoldiers
	}
	return nil
}

func (x *UpMsg) GetXWorkFinish() *WorkFinish {
	if x != nil {
		return x.XWorkFinish
	}
	return nil
}

func (x *UpMsg) GetXSpeedupWork() *SpeedupWork {
	if x != nil {
		return x.XSpeedupWork
	}
	return nil
}

func (x *UpMsg) GetXCancelWork() *CancelWork {
	if x != nil {
		return x.XCancelWork
	}
	return nil
}

func (x *UpMsg) GetXInteraction() *Interaction {
	if x != nil {
		return x.XInteraction
	}
	return nil
}

func (x *UpMsg) GetXInteractionAsk() *InteractionAsk {
	if x != nil {
		return x.XInteractionAsk
	}
	return nil
}

func (x *UpMsg) GetXProduceMedicineBagFinish() *ProduceMedicineBagFinish {
	if x != nil {
		return x.XProduceMedicineBagFinish
	}
	return nil
}

func (x *UpMsg) GetXCancelProduceMedicineBag() *CancelProduceMedicineBag {
	if x != nil {
		return x.XCancelProduceMedicineBag
	}
	return nil
}

func (x *UpMsg) GetXModifyTroopAutoRelife() *ModifyTroopAutoRelife {
	if x != nil {
		return x.XModifyTroopAutoRelife
	}
	return nil
}

func (x *UpMsg) GetXPetTechUpgradeCancel() *PetTechUpgradeCancel {
	if x != nil {
		return x.XPetTechUpgradeCancel
	}
	return nil
}

func (x *UpMsg) GetXPetTechUpgradeSpeedup() *PetTechUpgradeSpeedup {
	if x != nil {
		return x.XPetTechUpgradeSpeedup
	}
	return nil
}

func (x *UpMsg) GetXInitData() *InitData {
	if x != nil {
		return x.XInitData
	}
	return nil
}

func (x *UpMsg) GetXPetSummaryList() *PetSummaryList {
	if x != nil {
		return x.XPetSummaryList
	}
	return nil
}

func (x *UpMsg) GetXEquipForge() *EquipForge {
	if x != nil {
		return x.XEquipForge
	}
	return nil
}

func (x *UpMsg) GetXEquipStreathen() *EquipStreathen {
	if x != nil {
		return x.XEquipStreathen
	}
	return nil
}

func (x *UpMsg) GetXEquipEnchanting() *EquipEnchanting {
	if x != nil {
		return x.XEquipEnchanting
	}
	return nil
}

func (x *UpMsg) GetXEquipFuse() *EquipFuse {
	if x != nil {
		return x.XEquipFuse
	}
	return nil
}

func (x *UpMsg) GetXEquipRefine() *EquipRefine {
	if x != nil {
		return x.XEquipRefine
	}
	return nil
}

func (x *UpMsg) GetXEquipTechUpgrad() *EquipTechUpgrad {
	if x != nil {
		return x.XEquipTechUpgrad
	}
	return nil
}

func (x *UpMsg) GetXPetBindHero() *PetBindHero {
	if x != nil {
		return x.XPetBindHero
	}
	return nil
}

func (x *UpMsg) GetXPetMerge() *PetMerge {
	if x != nil {
		return x.XPetMerge
	}
	return nil
}

func (x *UpMsg) GetXVisit() *Visit {
	if x != nil {
		return x.XVisit
	}
	return nil
}

func (x *UpMsg) GetXDestructItemBatch() *DestructItemBatch {
	if x != nil {
		return x.XDestructItemBatch
	}
	return nil
}

func (x *UpMsg) GetXEquipForgeFinish() *EquipForgeFinish {
	if x != nil {
		return x.XEquipForgeFinish
	}
	return nil
}

func (x *UpMsg) GetXWearTreasure() *WearTreasure {
	if x != nil {
		return x.XWearTreasure
	}
	return nil
}

func (x *UpMsg) GetXBatchWearTreasure() *BatchWearTreasure {
	if x != nil {
		return x.XBatchWearTreasure
	}
	return nil
}

func (x *UpMsg) GetXPlayerTreasureFuse() *PlayerTreasureFuse {
	if x != nil {
		return x.XPlayerTreasureFuse
	}
	return nil
}

func (x *UpMsg) GetXDestructTreasure() *DestructTreasure {
	if x != nil {
		return x.XDestructTreasure
	}
	return nil
}

func (x *UpMsg) GetXDestructTreasureBatch() *DestructTreasureBatch {
	if x != nil {
		return x.XDestructTreasureBatch
	}
	return nil
}

func (x *UpMsg) GetXTavernDraw() *TavernDraw {
	if x != nil {
		return x.XTavernDraw
	}
	return nil
}

func (x *UpMsg) GetXHeroTalentUpgrade() *HeroTalentUpgrade {
	if x != nil {
		return x.XHeroTalentUpgrade
	}
	return nil
}

func (x *UpMsg) GetXHeroTalentReset() *HeroTalentReset {
	if x != nil {
		return x.XHeroTalentReset
	}
	return nil
}

func (x *UpMsg) GetXUsePlayerGift() *UsePlayerGift {
	if x != nil {
		return x.XUsePlayerGift
	}
	return nil
}

func (x *UpMsg) GetXGetAllianceMaillist() *GetAllianceMaillist {
	if x != nil {
		return x.XGetAllianceMaillist
	}
	return nil
}

func (x *UpMsg) GetXGetReportTabList() *GetReportTabList {
	if x != nil {
		return x.XGetReportTabList
	}
	return nil
}

func (x *UpMsg) GetXTestProtocol() int32 {
	if x != nil && x.XTestProtocol != nil {
		return *x.XTestProtocol
	}
	return 0
}

func (x *UpMsg) GetXBatchReadMail() *BatchReadMail {
	if x != nil {
		return x.XBatchReadMail
	}
	return nil
}

func (x *UpMsg) GetXBatchGetReward() *BatchGetReward {
	if x != nil {
		return x.XBatchGetReward
	}
	return nil
}

func (x *UpMsg) GetXPushMapinfoEmoji() *PushMapinfoEmoji {
	if x != nil {
		return x.XPushMapinfoEmoji
	}
	return nil
}

func (x *UpMsg) GetXAskEquipInfo() *AskEquipInfo {
	if x != nil {
		return x.XAskEquipInfo
	}
	return nil
}

func (x *UpMsg) GetXFpsFinishReward() *FpsFinishReward {
	if x != nil {
		return x.XFpsFinishReward
	}
	return nil
}

func (x *UpMsg) GetXFpsStart() *FpsStart {
	if x != nil {
		return x.XFpsStart
	}
	return nil
}

func (x *UpMsg) GetXFpsOut() *FpsOut {
	if x != nil {
		return x.XFpsOut
	}
	return nil
}

func (x *UpMsg) GetXWorldSearch() *WorldSearch {
	if x != nil {
		return x.XWorldSearch
	}
	return nil
}

func (x *UpMsg) GetXAutoRally() *AutoRally {
	if x != nil {
		return x.XAutoRally
	}
	return nil
}

func (x *UpMsg) GetXSyncAutoRally() *SyncAutoRally {
	if x != nil {
		return x.XSyncAutoRally
	}
	return nil
}

func (x *UpMsg) GetXGuildSign() *GuildSign {
	if x != nil {
		return x.XGuildSign
	}
	return nil
}

func (x *UpMsg) GetXGuildSignInfo() *GuildSignInfo {
	if x != nil {
		return x.XGuildSignInfo
	}
	return nil
}

func (x *UpMsg) GetXGuildSignComment() *GuildSignComment {
	if x != nil {
		return x.XGuildSignComment
	}
	return nil
}

func (x *UpMsg) GetXGuildSignList() *GuildSignList {
	if x != nil {
		return x.XGuildSignList
	}
	return nil
}

func (x *UpMsg) GetXSetFriendPlayerData() *SetFriendPlayerData {
	if x != nil {
		return x.XSetFriendPlayerData
	}
	return nil
}

func (x *UpMsg) GetXOpenGiftBox() *OpenGiftBox {
	if x != nil {
		return x.XOpenGiftBox
	}
	return nil
}

func (x *UpMsg) GetXAutoPickupSetting() *AutoPickupSetting {
	if x != nil {
		return x.XAutoPickupSetting
	}
	return nil
}

func (x *UpMsg) GetXSaveNewUserGuideProgress() *SaveNewUserGuideProgress {
	if x != nil {
		return x.XSaveNewUserGuideProgress
	}
	return nil
}

func (x *UpMsg) GetXGetGmeAuth() *GetGmeAuth {
	if x != nil {
		return x.XGetGmeAuth
	}
	return nil
}

func (x *UpMsg) GetXGetCosAuth() *GetCosAuth {
	if x != nil {
		return x.XGetCosAuth
	}
	return nil
}

func (x *UpMsg) GetXGuideFps() *GuideFps {
	if x != nil {
		return x.XGuideFps
	}
	return nil
}

func (x *UpMsg) GetXSendTroopCastle() *SendTroopCastle {
	if x != nil {
		return x.XSendTroopCastle
	}
	return nil
}

func (x *UpMsg) GetXIntelStrength() *IntelStrength {
	if x != nil {
		return x.XIntelStrength
	}
	return nil
}

func (x *UpMsg) GetXIntelTaskReward() *IntelTaskReward {
	if x != nil {
		return x.XIntelTaskReward
	}
	return nil
}

func (x *UpMsg) GetXIntelTaskRefresh() *IntelTaskRefresh {
	if x != nil {
		return x.XIntelTaskRefresh
	}
	return nil
}

func (x *UpMsg) GetXGetNewChapterTaskReward() *GetNewChapterTaskReward {
	if x != nil {
		return x.XGetNewChapterTaskReward
	}
	return nil
}

func (x *UpMsg) GetXCloudInfo() *CloudInfo {
	if x != nil {
		return x.XCloudInfo
	}
	return nil
}

func (x *UpMsg) GetXGetGoodsList() *GetGoodsList {
	if x != nil {
		return x.XGetGoodsList
	}
	return nil
}

func (x *UpMsg) GetXGetGoodsFavoriteList() *GetGoodsFavoriteList {
	if x != nil {
		return x.XGetGoodsFavoriteList
	}
	return nil
}

func (x *UpMsg) GetXGoodsFavorite() *GoodsFavorite {
	if x != nil {
		return x.XGoodsFavorite
	}
	return nil
}

func (x *UpMsg) GetXGetGoodsHotList() *GetGoodsHotList {
	if x != nil {
		return x.XGetGoodsHotList
	}
	return nil
}

func (x *UpMsg) GetXGetGoodsSellList() *GetGoodsSellList {
	if x != nil {
		return x.XGetGoodsSellList
	}
	return nil
}

func (x *UpMsg) GetXGetGoodsDealList() *GetGoodsDealList {
	if x != nil {
		return x.XGetGoodsDealList
	}
	return nil
}

func (x *UpMsg) GetXGetGoodsBlockingList() *GetGoodsBlockingList {
	if x != nil {
		return x.XGetGoodsBlockingList
	}
	return nil
}

func (x *UpMsg) GetXGoodsSale() *GoodsSale {
	if x != nil {
		return x.XGoodsSale
	}
	return nil
}

func (x *UpMsg) GetXGoodsSaleAgain() *GoodsSaleAgain {
	if x != nil {
		return x.XGoodsSaleAgain
	}
	return nil
}

func (x *UpMsg) GetXSelectedGoodsSaleInfo() *SelectedGoodsSaleInfo {
	if x != nil {
		return x.XSelectedGoodsSaleInfo
	}
	return nil
}

func (x *UpMsg) GetXGoodsNotSale() *GoodsNotSale {
	if x != nil {
		return x.XGoodsNotSale
	}
	return nil
}

func (x *UpMsg) GetXGoodsPurchase() *GoodsPurchase {
	if x != nil {
		return x.XGoodsPurchase
	}
	return nil
}

func (x *UpMsg) GetXSetSearchRecord() *SetSearchRecord {
	if x != nil {
		return x.XSetSearchRecord
	}
	return nil
}

func (x *UpMsg) GetXGetSearchList() *GetSearchList {
	if x != nil {
		return x.XGetSearchList
	}
	return nil
}

func (x *UpMsg) GetXGetServerInfoList() *GetServerInfoList {
	if x != nil {
		return x.XGetServerInfoList
	}
	return nil
}

func (x *UpMsg) GetXSendGoodsMessage() *chatmessage.SendGoodsMessage {
	if x != nil {
		return x.XSendGoodsMessage
	}
	return nil
}

func (x *UpMsg) GetXSendPetMessage() *chatmessage.SendPetMessage {
	if x != nil {
		return x.XSendPetMessage
	}
	return nil
}

func (x *UpMsg) GetXGetPetSummaryInfo() *GetPetSummaryInfo {
	if x != nil {
		return x.XGetPetSummaryInfo
	}
	return nil
}

//领取签到型月卡奖励
type RewardMonthLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDays *int32 `protobuf:"varint,1,req,name=_days,json=Days" json:"_days,omitempty"` //领取第几天的奖励
	XId   *int32 `protobuf:"varint,2,req,name=_id,json=Id" json:"_id,omitempty"`       //第28天奖励的具体道具id
}

func (x *RewardMonthLogin) Reset() {
	*x = RewardMonthLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardMonthLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardMonthLogin) ProtoMessage() {}

func (x *RewardMonthLogin) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardMonthLogin.ProtoReflect.Descriptor instead.
func (*RewardMonthLogin) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{1}
}

func (x *RewardMonthLogin) GetXDays() int32 {
	if x != nil && x.XDays != nil {
		return *x.XDays
	}
	return 0
}

func (x *RewardMonthLogin) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

// 自动拾取设置
type AutoPickupSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAutoPickupSetting *pb.AutoPickupSetting `protobuf:"bytes,1,req,name=_auto_pickup_setting,json=AutoPickupSetting" json:"_auto_pickup_setting,omitempty"` //
}

func (x *AutoPickupSetting) Reset() {
	*x = AutoPickupSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoPickupSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoPickupSetting) ProtoMessage() {}

func (x *AutoPickupSetting) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoPickupSetting.ProtoReflect.Descriptor instead.
func (*AutoPickupSetting) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{2}
}

func (x *AutoPickupSetting) GetXAutoPickupSetting() *pb.AutoPickupSetting {
	if x != nil {
		return x.XAutoPickupSetting
	}
	return nil
}

// 新手引导进度保存
type SaveNewUserGuideProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XNewUserGuideProgress *pb.NewUserGuideProgress `protobuf:"bytes,1,req,name=_new_user_guide_progress,json=NewUserGuideProgress" json:"_new_user_guide_progress,omitempty"` //
}

func (x *SaveNewUserGuideProgress) Reset() {
	*x = SaveNewUserGuideProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveNewUserGuideProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveNewUserGuideProgress) ProtoMessage() {}

func (x *SaveNewUserGuideProgress) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveNewUserGuideProgress.ProtoReflect.Descriptor instead.
func (*SaveNewUserGuideProgress) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{3}
}

func (x *SaveNewUserGuideProgress) GetXNewUserGuideProgress() *pb.NewUserGuideProgress {
	if x != nil {
		return x.XNewUserGuideProgress
	}
	return nil
}

// 获取gme授权
type GetGmeAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //
}

func (x *GetGmeAuth) Reset() {
	*x = GetGmeAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGmeAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGmeAuth) ProtoMessage() {}

func (x *GetGmeAuth) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGmeAuth.ProtoReflect.Descriptor instead.
func (*GetGmeAuth) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{4}
}

func (x *GetGmeAuth) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 获取cos授权
type GetCosAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //
}

func (x *GetCosAuth) Reset() {
	*x = GetCosAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosAuth) ProtoMessage() {}

func (x *GetCosAuth) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosAuth.ProtoReflect.Descriptor instead.
func (*GetCosAuth) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{5}
}

func (x *GetCosAuth) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 获取搜索列表
type GetSearchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`
}

func (x *GetSearchList) Reset() {
	*x = GetSearchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchList) ProtoMessage() {}

func (x *GetSearchList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchList.ProtoReflect.Descriptor instead.
func (*GetSearchList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{6}
}

func (x *GetSearchList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 存储搜索记录
type SetSearchRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`
}

func (x *SetSearchRecord) Reset() {
	*x = SetSearchRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSearchRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSearchRecord) ProtoMessage() {}

func (x *SetSearchRecord) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSearchRecord.ProtoReflect.Descriptor instead.
func (*SetSearchRecord) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{7}
}

func (x *SetSearchRecord) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

// 购买
type GoodsPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSku *string `protobuf:"bytes,1,req,name=_sku,json=Sku" json:"_sku,omitempty"`
	XNum *int32  `protobuf:"varint,2,req,name=_num,json=Num" json:"_num,omitempty"`
}

func (x *GoodsPurchase) Reset() {
	*x = GoodsPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsPurchase) ProtoMessage() {}

func (x *GoodsPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsPurchase.ProtoReflect.Descriptor instead.
func (*GoodsPurchase) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{8}
}

func (x *GoodsPurchase) GetXSku() string {
	if x != nil && x.XSku != nil {
		return *x.XSku
	}
	return ""
}

func (x *GoodsPurchase) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

// 下架
type GoodsNotSale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSku *string `protobuf:"bytes,1,req,name=_sku,json=Sku" json:"_sku,omitempty"`
}

func (x *GoodsNotSale) Reset() {
	*x = GoodsNotSale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsNotSale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsNotSale) ProtoMessage() {}

func (x *GoodsNotSale) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsNotSale.ProtoReflect.Descriptor instead.
func (*GoodsNotSale) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{9}
}

func (x *GoodsNotSale) GetXSku() string {
	if x != nil && x.XSku != nil {
		return *x.XSku
	}
	return ""
}

// 选择上架商品时：给最低价5个 摊位费 推荐价格
type SelectedGoodsSaleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`
}

func (x *SelectedGoodsSaleInfo) Reset() {
	*x = SelectedGoodsSaleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectedGoodsSaleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectedGoodsSaleInfo) ProtoMessage() {}

func (x *SelectedGoodsSaleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectedGoodsSaleInfo.ProtoReflect.Descriptor instead.
func (*SelectedGoodsSaleInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{10}
}

func (x *SelectedGoodsSaleInfo) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

// 商品再次上架
type GoodsSaleAgain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGoodsSaleInfo *pb.GoodsInfo `protobuf:"bytes,1,req,name=_goods_sale_info,json=GoodsSaleInfo" json:"_goods_sale_info,omitempty"` // 包含sku
}

func (x *GoodsSaleAgain) Reset() {
	*x = GoodsSaleAgain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsSaleAgain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsSaleAgain) ProtoMessage() {}

func (x *GoodsSaleAgain) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsSaleAgain.ProtoReflect.Descriptor instead.
func (*GoodsSaleAgain) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{11}
}

func (x *GoodsSaleAgain) GetXGoodsSaleInfo() *pb.GoodsInfo {
	if x != nil {
		return x.XGoodsSaleInfo
	}
	return nil
}

// 商品上架
type GoodsSale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGoodsSaleInfo *pb.GoodsInfo `protobuf:"bytes,1,req,name=_goods_sale_info,json=GoodsSaleInfo" json:"_goods_sale_info,omitempty"` // 不含sku
}

func (x *GoodsSale) Reset() {
	*x = GoodsSale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsSale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsSale) ProtoMessage() {}

func (x *GoodsSale) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsSale.ProtoReflect.Descriptor instead.
func (*GoodsSale) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{12}
}

func (x *GoodsSale) GetXGoodsSaleInfo() *pb.GoodsInfo {
	if x != nil {
		return x.XGoodsSaleInfo
	}
	return nil
}

// 获取交易商品列表
type GetGoodsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId          *int32  `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`       //
	XRegionId        *int32  `protobuf:"varint,2,req,name=_region_id,json=RegionId" json:"_region_id,omitempty"` // 区ID
	XServerId        *int32  `protobuf:"varint,3,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`
	XDealRange       *int32  `protobuf:"varint,4,opt,name=_deal_range,json=DealRange" json:"_deal_range,omitempty"`                     // 市场类型  废弃
	XBigTypeId       *int32  `protobuf:"varint,5,opt,name=_big_type_id,json=BigTypeId" json:"_big_type_id,omitempty"`                   // 交易大类编号
	XSubTypeId       *int32  `protobuf:"varint,6,opt,name=_sub_type_id,json=SubTypeId" json:"_sub_type_id,omitempty"`                   // 交易子类编号
	XFilteredGroupId *int32  `protobuf:"varint,7,opt,name=_filtered_group_id,json=FilteredGroupId" json:"_filtered_group_id,omitempty"` // 筛选组ID
	XPage            *int32  `protobuf:"varint,8,opt,name=_page,json=Page" json:"_page,omitempty"`                                      // 页码
	XListType        *int32  `protobuf:"varint,9,req,name=_list_type,json=ListType" json:"_list_type,omitempty"`                        // 列表类型 0商品列表 1公示列表
	XSortPrice       *int32  `protobuf:"varint,10,req,name=_sort_price,json=SortPrice" json:"_sort_price,omitempty"`                    // 价格排序 0正序 1倒序
	XItemId          *int32  `protobuf:"varint,11,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                             // 物品ID
	XHotSku          *string `protobuf:"bytes,12,opt,name=_hot_sku,json=HotSku" json:"_hot_sku,omitempty"`                              // SKU
	XSkuSource       *int32  `protobuf:"varint,13,opt,name=_sku_source,json=SkuSource" json:"_sku_source,omitempty"`                    // sku来源 0优选 1分享
}

func (x *GetGoodsList) Reset() {
	*x = GetGoodsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsList) ProtoMessage() {}

func (x *GetGoodsList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsList.ProtoReflect.Descriptor instead.
func (*GetGoodsList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{13}
}

func (x *GetGoodsList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GetGoodsList) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *GetGoodsList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *GetGoodsList) GetXDealRange() int32 {
	if x != nil && x.XDealRange != nil {
		return *x.XDealRange
	}
	return 0
}

func (x *GetGoodsList) GetXBigTypeId() int32 {
	if x != nil && x.XBigTypeId != nil {
		return *x.XBigTypeId
	}
	return 0
}

func (x *GetGoodsList) GetXSubTypeId() int32 {
	if x != nil && x.XSubTypeId != nil {
		return *x.XSubTypeId
	}
	return 0
}

func (x *GetGoodsList) GetXFilteredGroupId() int32 {
	if x != nil && x.XFilteredGroupId != nil {
		return *x.XFilteredGroupId
	}
	return 0
}

func (x *GetGoodsList) GetXPage() int32 {
	if x != nil && x.XPage != nil {
		return *x.XPage
	}
	return 0
}

func (x *GetGoodsList) GetXListType() int32 {
	if x != nil && x.XListType != nil {
		return *x.XListType
	}
	return 0
}

func (x *GetGoodsList) GetXSortPrice() int32 {
	if x != nil && x.XSortPrice != nil {
		return *x.XSortPrice
	}
	return 0
}

func (x *GetGoodsList) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *GetGoodsList) GetXHotSku() string {
	if x != nil && x.XHotSku != nil {
		return *x.XHotSku
	}
	return ""
}

func (x *GetGoodsList) GetXSkuSource() int32 {
	if x != nil && x.XSkuSource != nil {
		return *x.XSkuSource
	}
	return 0
}

// 获取关注商品列表
type GetGoodsFavoriteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId        *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`                        //
	XRegionId      *int32 `protobuf:"varint,2,opt,name=_region_id,json=RegionId" json:"_region_id,omitempty"`                  // 区ID 跨服(包含跨服)时传0
	XServerId      *int32 `protobuf:"varint,3,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                  // 服ID 跨服(包含跨服)时传0
	XGoodsSaleType *int32 `protobuf:"varint,4,opt,name=_goods_sale_type,json=GoodsSaleType" json:"_goods_sale_type,omitempty"` // 上架类型 0本服上架 1跨服上架
}

func (x *GetGoodsFavoriteList) Reset() {
	*x = GetGoodsFavoriteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsFavoriteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsFavoriteList) ProtoMessage() {}

func (x *GetGoodsFavoriteList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsFavoriteList.ProtoReflect.Descriptor instead.
func (*GetGoodsFavoriteList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{14}
}

func (x *GetGoodsFavoriteList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GetGoodsFavoriteList) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *GetGoodsFavoriteList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *GetGoodsFavoriteList) GetXGoodsSaleType() int32 {
	if x != nil && x.XGoodsSaleType != nil {
		return *x.XGoodsSaleType
	}
	return 0
}

// 关注/取消关注
type GoodsFavorite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId   *int32  `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`       //
	XSku      *string `protobuf:"bytes,2,req,name=_sku,json=Sku" json:"_sku,omitempty"`                   //
	XRegionId *int32  `protobuf:"varint,3,req,name=_region_id,json=RegionId" json:"_region_id,omitempty"` // 区ID  SKU所在区
	XServerId *int32  `protobuf:"varint,4,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 服ID  SKU所在服
}

func (x *GoodsFavorite) Reset() {
	*x = GoodsFavorite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsFavorite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsFavorite) ProtoMessage() {}

func (x *GoodsFavorite) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsFavorite.ProtoReflect.Descriptor instead.
func (*GoodsFavorite) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{15}
}

func (x *GoodsFavorite) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GoodsFavorite) GetXSku() string {
	if x != nil && x.XSku != nil {
		return *x.XSku
	}
	return ""
}

func (x *GoodsFavorite) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *GoodsFavorite) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

// 获取每日优选列表
type GetGoodsHotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //
}

func (x *GetGoodsHotList) Reset() {
	*x = GetGoodsHotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsHotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsHotList) ProtoMessage() {}

func (x *GetGoodsHotList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsHotList.ProtoReflect.Descriptor instead.
func (*GetGoodsHotList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{16}
}

func (x *GetGoodsHotList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 我的出售列表
type GetGoodsSellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //
}

func (x *GetGoodsSellList) Reset() {
	*x = GetGoodsSellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsSellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsSellList) ProtoMessage() {}

func (x *GetGoodsSellList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsSellList.ProtoReflect.Descriptor instead.
func (*GetGoodsSellList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{17}
}

func (x *GetGoodsSellList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 我的交易列表
type GetGoodsDealList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //
}

func (x *GetGoodsDealList) Reset() {
	*x = GetGoodsDealList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsDealList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsDealList) ProtoMessage() {}

func (x *GetGoodsDealList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsDealList.ProtoReflect.Descriptor instead.
func (*GetGoodsDealList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{18}
}

func (x *GetGoodsDealList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 冻结期列表
type GetGoodsBlockingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //
}

func (x *GetGoodsBlockingList) Reset() {
	*x = GetGoodsBlockingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsBlockingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsBlockingList) ProtoMessage() {}

func (x *GetGoodsBlockingList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsBlockingList.ProtoReflect.Descriptor instead.
func (*GetGoodsBlockingList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{19}
}

func (x *GetGoodsBlockingList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//
type GetServerInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //
}

func (x *GetServerInfoList) Reset() {
	*x = GetServerInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoList) ProtoMessage() {}

func (x *GetServerInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoList.ProtoReflect.Descriptor instead.
func (*GetServerInfoList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{20}
}

func (x *GetServerInfoList) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//获取更多社交媒体奖励
type GetMoreSocialMediaReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId   *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`       //1 Facebook关注，2 Twitter关注，3 Instagram关注，4 Youtube关注，5 Discord关注，6 Reddit关注
	XType *int32 `protobuf:"varint,2,req,name=_type,json=Type" json:"_type,omitempty"` //0:更新进度,1:领取
}

func (x *GetMoreSocialMediaReward) Reset() {
	*x = GetMoreSocialMediaReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoreSocialMediaReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoreSocialMediaReward) ProtoMessage() {}

func (x *GetMoreSocialMediaReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoreSocialMediaReward.ProtoReflect.Descriptor instead.
func (*GetMoreSocialMediaReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{21}
}

func (x *GetMoreSocialMediaReward) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GetMoreSocialMediaReward) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

type CrazyMarketBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType   *int32 `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"`         //场次id
	XOrder  *int32 `protobuf:"varint,2,req,name=_order,json=Order" json:"_order,omitempty"`      //序号
	XItemId *int32 `protobuf:"varint,3,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //道具id
}

func (x *CrazyMarketBuy) Reset() {
	*x = CrazyMarketBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrazyMarketBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrazyMarketBuy) ProtoMessage() {}

func (x *CrazyMarketBuy) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrazyMarketBuy.ProtoReflect.Descriptor instead.
func (*CrazyMarketBuy) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{22}
}

func (x *CrazyMarketBuy) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *CrazyMarketBuy) GetXOrder() int32 {
	if x != nil && x.XOrder != nil {
		return *x.XOrder
	}
	return 0
}

func (x *CrazyMarketBuy) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

type CrazyMarketList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *CrazyMarketList) Reset() {
	*x = CrazyMarketList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrazyMarketList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrazyMarketList) ProtoMessage() {}

func (x *CrazyMarketList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrazyMarketList.ProtoReflect.Descriptor instead.
func (*CrazyMarketList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{23}
}

func (x *CrazyMarketList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type GetFreePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *int32 `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"` //0:查看,1:领取
}

func (x *GetFreePackage) Reset() {
	*x = GetFreePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFreePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreePackage) ProtoMessage() {}

func (x *GetFreePackage) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreePackage.ProtoReflect.Descriptor instead.
func (*GetFreePackage) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{24}
}

func (x *GetFreePackage) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

type OpenBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,req,name=_flag,json=Flag" json:"_flag,omitempty"` //0:免费,1:用钥匙
}

func (x *OpenBox) Reset() {
	*x = OpenBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBox) ProtoMessage() {}

func (x *OpenBox) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBox.ProtoReflect.Descriptor instead.
func (*OpenBox) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{25}
}

func (x *OpenBox) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type ClaimInviteGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //配置表id
}

func (x *ClaimInviteGift) Reset() {
	*x = ClaimInviteGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimInviteGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimInviteGift) ProtoMessage() {}

func (x *ClaimInviteGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimInviteGift.ProtoReflect.Descriptor instead.
func (*ClaimInviteGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{26}
}

func (x *ClaimInviteGift) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//分享领取
type ShareReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`           //配置表id
	XSubId *string `protobuf:"bytes,2,req,name=_sub_id,json=SubId" json:"_sub_id,omitempty"` //类型不同传递不同子类型id
}

func (x *ShareReward) Reset() {
	*x = ShareReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareReward) ProtoMessage() {}

func (x *ShareReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareReward.ProtoReflect.Descriptor instead.
func (*ShareReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{27}
}

func (x *ShareReward) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ShareReward) GetXSubId() string {
	if x != nil && x.XSubId != nil {
		return *x.XSubId
	}
	return ""
}

type ClaimShareGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *ClaimShareGift) Reset() {
	*x = ClaimShareGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimShareGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimShareGift) ProtoMessage() {}

func (x *ClaimShareGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimShareGift.ProtoReflect.Descriptor instead.
func (*ClaimShareGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{28}
}

func (x *ClaimShareGift) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type ListInviteGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *ListInviteGift) Reset() {
	*x = ListInviteGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInviteGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInviteGift) ProtoMessage() {}

func (x *ListInviteGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInviteGift.ProtoReflect.Descriptor instead.
func (*ListInviteGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{29}
}

func (x *ListInviteGift) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//城墙修复
type HealWall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWallHealthOld *int32 `protobuf:"varint,1,req,name=_wall_health_old,json=WallHealthOld" json:"_wall_health_old,omitempty"` //城墙生命值
	XWallHealth    *int64 `protobuf:"varint,2,req,name=_wall_health,json=WallHealth" json:"_wall_health,omitempty"`            //城墙生命值
}

func (x *HealWall) Reset() {
	*x = HealWall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealWall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealWall) ProtoMessage() {}

func (x *HealWall) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealWall.ProtoReflect.Descriptor instead.
func (*HealWall) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{30}
}

func (x *HealWall) GetXWallHealthOld() int32 {
	if x != nil && x.XWallHealthOld != nil {
		return *x.XWallHealthOld
	}
	return 0
}

func (x *HealWall) GetXWallHealth() int64 {
	if x != nil && x.XWallHealth != nil {
		return *x.XWallHealth
	}
	return 0
}

//城墙取消修复
type CancelHealWall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWallHealth *int32 `protobuf:"varint,1,req,name=_wall_health,json=WallHealth" json:"_wall_health,omitempty"` //城墙生命值
}

func (x *CancelHealWall) Reset() {
	*x = CancelHealWall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelHealWall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelHealWall) ProtoMessage() {}

func (x *CancelHealWall) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelHealWall.ProtoReflect.Descriptor instead.
func (*CancelHealWall) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{31}
}

func (x *CancelHealWall) GetXWallHealth() int32 {
	if x != nil && x.XWallHealth != nil {
		return *x.XWallHealth
	}
	return 0
}

//城墙灭火
type OutfireWall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWallHealthOld *int32 `protobuf:"varint,1,req,name=_wall_health_old,json=WallHealthOld" json:"_wall_health_old,omitempty"` //城墙生命值
	XWallHealth    *int64 `protobuf:"varint,2,req,name=_wall_health,json=WallHealth" json:"_wall_health,omitempty"`            //城墙生命值
}

func (x *OutfireWall) Reset() {
	*x = OutfireWall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutfireWall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutfireWall) ProtoMessage() {}

func (x *OutfireWall) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutfireWall.ProtoReflect.Descriptor instead.
func (*OutfireWall) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{32}
}

func (x *OutfireWall) GetXWallHealthOld() int32 {
	if x != nil && x.XWallHealthOld != nil {
		return *x.XWallHealthOld
	}
	return 0
}

func (x *OutfireWall) GetXWallHealth() int64 {
	if x != nil && x.XWallHealth != nil {
		return *x.XWallHealth
	}
	return 0
}

//城墙生命值燃烧完,在线的情况下,要求服务器刷新位置
type OnWallOutlife struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *OnWallOutlife) Reset() {
	*x = OnWallOutlife{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnWallOutlife) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnWallOutlife) ProtoMessage() {}

func (x *OnWallOutlife) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnWallOutlife.ProtoReflect.Descriptor instead.
func (*OnWallOutlife) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{33}
}

func (x *OnWallOutlife) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//装备合成
type EquipSynthesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId  *int32        `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`      // 建筑位置
	XItemId      *int32        `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                  // 道具id
	XType        *pb.ForgeType `protobuf:"varint,3,req,name=_type,json=Type,enum=Msg.ForgeType,def=4" json:"_type,omitempty"` // 锻造类型
	XImmediately *int32        `protobuf:"varint,4,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"`     // 是否马上完成
	XAmount      *int32        `protobuf:"varint,5,opt,name=_amount,json=Amount" json:"_amount,omitempty"`                    // 合成的数量
	XGeneralId   *int32        `protobuf:"varint,6,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`         //将军id
	XId          *int64        `protobuf:"varint,7,opt,name=_id,json=Id" json:"_id,omitempty"`                                // 装备唯一id
}

// Default values for EquipSynthesis fields.
const (
	Default_EquipSynthesis_XType = pb.ForgeType(4) // pb.ForgeType_synthesis
)

func (x *EquipSynthesis) Reset() {
	*x = EquipSynthesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipSynthesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipSynthesis) ProtoMessage() {}

func (x *EquipSynthesis) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipSynthesis.ProtoReflect.Descriptor instead.
func (*EquipSynthesis) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{34}
}

func (x *EquipSynthesis) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *EquipSynthesis) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *EquipSynthesis) GetXType() pb.ForgeType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_EquipSynthesis_XType
}

func (x *EquipSynthesis) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

func (x *EquipSynthesis) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

func (x *EquipSynthesis) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *EquipSynthesis) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//快速合成材料
type QuickSynthesisMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCells []*SynthesisMaterialCell `protobuf:"bytes,1,rep,name=_cells,json=Cells" json:"_cells,omitempty"` //合成总列表
}

func (x *QuickSynthesisMaterial) Reset() {
	*x = QuickSynthesisMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickSynthesisMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickSynthesisMaterial) ProtoMessage() {}

func (x *QuickSynthesisMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickSynthesisMaterial.ProtoReflect.Descriptor instead.
func (*QuickSynthesisMaterial) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{35}
}

func (x *QuickSynthesisMaterial) GetXCells() []*SynthesisMaterialCell {
	if x != nil {
		return x.XCells
	}
	return nil
}

type SynthesisMaterialCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XParentItemInfo *ItemInfo   `protobuf:"bytes,1,opt,name=_parent_item_info,json=ParentItemInfo" json:"_parent_item_info,omitempty"` // 需要合成道具的id,与数量。
	XChildItemId    []*ItemInfo `protobuf:"bytes,2,rep,name=_child_item_id,json=ChildItemId" json:"_child_item_id,omitempty"`          // 合成道具的各下级id,与数量。
}

func (x *SynthesisMaterialCell) Reset() {
	*x = SynthesisMaterialCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesisMaterialCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisMaterialCell) ProtoMessage() {}

func (x *SynthesisMaterialCell) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisMaterialCell.ProtoReflect.Descriptor instead.
func (*SynthesisMaterialCell) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{36}
}

func (x *SynthesisMaterialCell) GetXParentItemInfo() *ItemInfo {
	if x != nil {
		return x.XParentItemInfo
	}
	return nil
}

func (x *SynthesisMaterialCell) GetXChildItemId() []*ItemInfo {
	if x != nil {
		return x.XChildItemId
	}
	return nil
}

//锻造装备金币加速
type SpeedupEquipSynthesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId    *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` //建筑位置
	XItemId        *int32 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             // 道具id
	XGold          *int64 `protobuf:"varint,3,req,name=_gold,json=Gold" json:"_gold,omitempty"`                     //客户端计算的金币消耗数量
	XStartTime     *int64 `protobuf:"varint,4,req,name=_start_time,json=StartTime" json:"_start_time,omitempty"`
	XRealStartTime *int64 `protobuf:"varint,5,req,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"`
	XClientTime    *int64 `protobuf:"varint,6,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`
	XLeftTime      *int64 `protobuf:"varint,7,req,name=_left_time,json=LeftTime" json:"_left_time,omitempty"`
}

func (x *SpeedupEquipSynthesis) Reset() {
	*x = SpeedupEquipSynthesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupEquipSynthesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupEquipSynthesis) ProtoMessage() {}

func (x *SpeedupEquipSynthesis) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupEquipSynthesis.ProtoReflect.Descriptor instead.
func (*SpeedupEquipSynthesis) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{37}
}

func (x *SpeedupEquipSynthesis) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SpeedupEquipSynthesis) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SpeedupEquipSynthesis) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SpeedupEquipSynthesis) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *SpeedupEquipSynthesis) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

func (x *SpeedupEquipSynthesis) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SpeedupEquipSynthesis) GetXLeftTime() int64 {
	if x != nil && x.XLeftTime != nil {
		return *x.XLeftTime
	}
	return 0
}

//宝物升品
type DewelSynthesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPos          *pb.WearPosition `protobuf:"varint,1,req,name=_pos,json=Pos,enum=Msg.WearPosition" json:"_pos,omitempty"`        //装备位置
	XItemId       *int32           `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                   //对应的itemid
	XBagNum       *int32           `protobuf:"varint,3,req,name=_bag_num,json=BagNum" json:"_bag_num,omitempty"`                   //包裹中的数量
	XSynthesisNum *int32           `protobuf:"varint,4,opt,name=_synthesis_num,json=SynthesisNum" json:"_synthesis_num,omitempty"` //宝物合成数量
	XIsWear       *int32           `protobuf:"varint,5,opt,name=_isWear,json=IsWear" json:"_isWear,omitempty"`                     //是否穿上 0：穿上 1：不穿
}

func (x *DewelSynthesis) Reset() {
	*x = DewelSynthesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DewelSynthesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DewelSynthesis) ProtoMessage() {}

func (x *DewelSynthesis) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DewelSynthesis.ProtoReflect.Descriptor instead.
func (*DewelSynthesis) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{38}
}

func (x *DewelSynthesis) GetXPos() pb.WearPosition {
	if x != nil && x.XPos != nil {
		return *x.XPos
	}
	return pb.WearPosition(1)
}

func (x *DewelSynthesis) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *DewelSynthesis) GetXBagNum() int32 {
	if x != nil && x.XBagNum != nil {
		return *x.XBagNum
	}
	return 0
}

func (x *DewelSynthesis) GetXSynthesisNum() int32 {
	if x != nil && x.XSynthesisNum != nil {
		return *x.XSynthesisNum
	}
	return 0
}

func (x *DewelSynthesis) GetXIsWear() int32 {
	if x != nil && x.XIsWear != nil {
		return *x.XIsWear
	}
	return 0
}

//装备收取
type EquipReap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId         *int32        `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`                             // 建筑位置
	XItemId             *int32        `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                                         // 道具id
	XType               *pb.ForgeType `protobuf:"varint,3,req,name=_type,json=Type,enum=Msg.ForgeType,def=4" json:"_type,omitempty"`                        // 锻造类型
	XClientTime         *int64        `protobuf:"varint,4,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`                             //客户端调整后的时间
	XCsDeltaTime        *int64        `protobuf:"varint,5,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`                        //客户端服务端时间差
	XForgeStartTime     *int64        `protobuf:"varint,6,opt,name=_forge_start_time,json=ForgeStartTime" json:"_forge_start_time,omitempty"`               //客户端的锻造开始时间
	XForgeRealStartTime *int64        `protobuf:"varint,7,opt,name=_forge_real_start_time,json=ForgeRealStartTime" json:"_forge_real_start_time,omitempty"` //客户端的锻造开始时间
}

// Default values for EquipReap fields.
const (
	Default_EquipReap_XType = pb.ForgeType(4) // pb.ForgeType_synthesis
)

func (x *EquipReap) Reset() {
	*x = EquipReap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipReap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipReap) ProtoMessage() {}

func (x *EquipReap) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipReap.ProtoReflect.Descriptor instead.
func (*EquipReap) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{39}
}

func (x *EquipReap) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *EquipReap) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *EquipReap) GetXType() pb.ForgeType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_EquipReap_XType
}

func (x *EquipReap) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *EquipReap) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *EquipReap) GetXForgeStartTime() int64 {
	if x != nil && x.XForgeStartTime != nil {
		return *x.XForgeStartTime
	}
	return 0
}

func (x *EquipReap) GetXForgeRealStartTime() int64 {
	if x != nil && x.XForgeRealStartTime != nil {
		return *x.XForgeRealStartTime
	}
	return 0
}

// 请求奖励
type RequireRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    optional uint32 _line = 1;  // 任务线ID
	XId        *uint32  `protobuf:"varint,2,req,name=_id,json=Id" json:"_id,omitempty"`                          // 任务ID
	XFlag      *int32   `protobuf:"varint,3,opt,name=_flag,json=Flag" json:"_flag,omitempty"`                    //是否启用一键领取
	XOneKeyIds []uint32 `protobuf:"varint,4,rep,name=_one_key_ids,json=OneKeyIds" json:"_one_key_ids,omitempty"` //一键任务ID
}

func (x *RequireRewards) Reset() {
	*x = RequireRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireRewards) ProtoMessage() {}

func (x *RequireRewards) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireRewards.ProtoReflect.Descriptor instead.
func (*RequireRewards) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{40}
}

func (x *RequireRewards) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *RequireRewards) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *RequireRewards) GetXOneKeyIds() []uint32 {
	if x != nil {
		return x.XOneKeyIds
	}
	return nil
}

// 设置玩家名字
type SetName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *SetNameSetType `protobuf:"varint,1,req,name=_type,json=Type,enum=MsgUp.SetNameSetType" json:"_type,omitempty"`
	XName *string         `protobuf:"bytes,2,req,name=_name,json=Name" json:"_name,omitempty"`
}

func (x *SetName) Reset() {
	*x = SetName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetName) ProtoMessage() {}

func (x *SetName) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetName.ProtoReflect.Descriptor instead.
func (*SetName) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{41}
}

func (x *SetName) GetXType() SetNameSetType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return SetName_free
}

func (x *SetName) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

// 设置头像
type SetAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAvatar          *int32  `protobuf:"varint,1,req,name=_avatar,json=Avatar" json:"_avatar,omitempty"`                                //头像ID
	XItemId          *uint32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                              //如果是使用物品
	XGold            *int64  `protobuf:"varint,3,opt,name=_gold,json=Gold" json:"_gold,omitempty"`                                      //如果是使用金币
	XFamousGeneralId *int64  `protobuf:"varint,4,opt,name=_famous_general_id,json=FamousGeneralId" json:"_famous_general_id,omitempty"` //名将配置表ID
}

func (x *SetAvatar) Reset() {
	*x = SetAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAvatar) ProtoMessage() {}

func (x *SetAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAvatar.ProtoReflect.Descriptor instead.
func (*SetAvatar) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{42}
}

func (x *SetAvatar) GetXAvatar() int32 {
	if x != nil && x.XAvatar != nil {
		return *x.XAvatar
	}
	return 0
}

func (x *SetAvatar) GetXItemId() uint32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SetAvatar) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SetAvatar) GetXFamousGeneralId() int64 {
	if x != nil && x.XFamousGeneralId != nil {
		return *x.XFamousGeneralId
	}
	return 0
}

//获取计时奖励
type GetTimeReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTimes *int32 `protobuf:"varint,1,req,name=_times,json=Times" json:"_times,omitempty"`
}

func (x *GetTimeReward) Reset() {
	*x = GetTimeReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeReward) ProtoMessage() {}

func (x *GetTimeReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeReward.ProtoReflect.Descriptor instead.
func (*GetTimeReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{43}
}

func (x *GetTimeReward) GetXTimes() int32 {
	if x != nil && x.XTimes != nil {
		return *x.XTimes
	}
	return 0
}

//获取广告视频奖励
type GetAdsReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTimes *int32 `protobuf:"varint,1,req,name=_times,json=Times" json:"_times,omitempty"` //三个箱子1,2,3
}

func (x *GetAdsReward) Reset() {
	*x = GetAdsReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdsReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdsReward) ProtoMessage() {}

func (x *GetAdsReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdsReward.ProtoReflect.Descriptor instead.
func (*GetAdsReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{44}
}

func (x *GetAdsReward) GetXTimes() int32 {
	if x != nil && x.XTimes != nil {
		return *x.XTimes
	}
	return 0
}

//获取HW广告视频奖励
type GetHwAdsReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` //箱子id
}

func (x *GetHwAdsReward) Reset() {
	*x = GetHwAdsReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHwAdsReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHwAdsReward) ProtoMessage() {}

func (x *GetHwAdsReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHwAdsReward.ProtoReflect.Descriptor instead.
func (*GetHwAdsReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{45}
}

func (x *GetHwAdsReward) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

//每日登陆
type AskDailyLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XStatus *AskDailyLoginStatus `protobuf:"varint,1,req,name=_status,json=Status,enum=MsgUp.AskDailyLoginStatus" json:"_status,omitempty"`
}

func (x *AskDailyLogin) Reset() {
	*x = AskDailyLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskDailyLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskDailyLogin) ProtoMessage() {}

func (x *AskDailyLogin) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskDailyLogin.ProtoReflect.Descriptor instead.
func (*AskDailyLogin) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{46}
}

func (x *AskDailyLogin) GetXStatus() AskDailyLoginStatus {
	if x != nil && x.XStatus != nil {
		return *x.XStatus
	}
	return AskDailyLogin_all
}

type SendMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid          *uint32     `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"`
	XTitle        *string     `protobuf:"bytes,2,req,name=_title,json=Title" json:"_title,omitempty"`                       //邮件标题
	XContent      *string     `protobuf:"bytes,3,req,name=_content,json=Content" json:"_content,omitempty"`                 //邮件内容
	XMtype        *pb.Mtype   `protobuf:"varint,4,opt,name=_mtype,json=Mtype,enum=Msg.Mtype,def=2" json:"_mtype,omitempty"` //邮件类型
	XUname        *string     `protobuf:"bytes,5,opt,name=_uname,json=Uname" json:"_uname,omitempty"`
	XSendIds      []uint32    `protobuf:"varint,6,rep,name=_send_ids,json=SendIds" json:"_send_ids,omitempty"`                   //群发用户id
	XItem         []*ItemInfo `protobuf:"bytes,7,rep,name=_item,json=Item" json:"_item,omitempty"`                               //赠送道具
	XItemId       *int32      `protobuf:"varint,8,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                      //密函道具ID
	XParentId     *int32      `protobuf:"varint,9,opt,name=_parent_id,json=ParentId" json:"_parent_id,omitempty"`                //母邮件ID
	XSendGuildIds []uint32    `protobuf:"varint,10,rep,name=_send_guild_ids,json=SendGuildIds" json:"_send_guild_ids,omitempty"` //国王邮件联盟id
}

// Default values for SendMail fields.
const (
	Default_SendMail_XMtype = pb.Mtype(2) // pb.Mtype_private_mail
)

func (x *SendMail) Reset() {
	*x = SendMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMail) ProtoMessage() {}

func (x *SendMail) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMail.ProtoReflect.Descriptor instead.
func (*SendMail) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{47}
}

func (x *SendMail) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

func (x *SendMail) GetXTitle() string {
	if x != nil && x.XTitle != nil {
		return *x.XTitle
	}
	return ""
}

func (x *SendMail) GetXContent() string {
	if x != nil && x.XContent != nil {
		return *x.XContent
	}
	return ""
}

func (x *SendMail) GetXMtype() pb.Mtype {
	if x != nil && x.XMtype != nil {
		return *x.XMtype
	}
	return Default_SendMail_XMtype
}

func (x *SendMail) GetXUname() string {
	if x != nil && x.XUname != nil {
		return *x.XUname
	}
	return ""
}

func (x *SendMail) GetXSendIds() []uint32 {
	if x != nil {
		return x.XSendIds
	}
	return nil
}

func (x *SendMail) GetXItem() []*ItemInfo {
	if x != nil {
		return x.XItem
	}
	return nil
}

func (x *SendMail) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SendMail) GetXParentId() int32 {
	if x != nil && x.XParentId != nil {
		return *x.XParentId
	}
	return 0
}

func (x *SendMail) GetXSendGuildIds() []uint32 {
	if x != nil {
		return x.XSendGuildIds
	}
	return nil
}

type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId        *int64 `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                         //唯一id
	ItemId     *int32 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`             //道具配置ID
	ItemAmount *int32 `protobuf:"varint,3,opt,name=item_amount,json=itemAmount" json:"item_amount,omitempty"` //道具数量
	XObjectId  *int32 `protobuf:"varint,4,opt,name=_object_id,json=ObjectId" json:"_object_id,omitempty"`     //道具使用对象id，建筑id||部队id
}

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{48}
}

func (x *ItemInfo) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ItemInfo) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *ItemInfo) GetItemAmount() int32 {
	if x != nil && x.ItemAmount != nil {
		return *x.ItemAmount
	}
	return 0
}

func (x *ItemInfo) GetXObjectId() int32 {
	if x != nil && x.XObjectId != nil {
		return *x.XObjectId
	}
	return 0
}

//世界地图,迁移需要使用一个高级迁城，如果没有迁城符，则用gems
type Teleport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32                `protobuf:"varint,1,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                   //目标的服务器id.
	XWx       *int32                `protobuf:"varint,2,req,name=_wx,json=Wx" json:"_wx,omitempty"`                                       //地图格子的横坐标
	XWy       *int32                `protobuf:"varint,3,req,name=_wy,json=Wy" json:"_wy,omitempty"`                                       //地图格子的纵坐标
	XMode     *TeleportTeleportMode `protobuf:"varint,4,opt,name=_mode,json=Mode,enum=MsgUp.TeleportTeleportMode" json:"_mode,omitempty"` //是否使用金币，如果不传或者传0，表示使用道具，如果传1，表示使用金币
	XItemId   *int32                `protobuf:"varint,5,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                         //迁城符道具ID
	XFieldId  *int32                `protobuf:"varint,6,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"`                      //战场id，0代表不是战场迁城
}

func (x *Teleport) Reset() {
	*x = Teleport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Teleport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Teleport) ProtoMessage() {}

func (x *Teleport) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Teleport.ProtoReflect.Descriptor instead.
func (*Teleport) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{49}
}

func (x *Teleport) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *Teleport) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *Teleport) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *Teleport) GetXMode() TeleportTeleportMode {
	if x != nil && x.XMode != nil {
		return *x.XMode
	}
	return Teleport_use_item
}

func (x *Teleport) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *Teleport) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//世界地图随机迁移，使用一个随机迁城符
type TeleportRandom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *TeleportRandom) Reset() {
	*x = TeleportRandom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeleportRandom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeleportRandom) ProtoMessage() {}

func (x *TeleportRandom) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeleportRandom.ProtoReflect.Descriptor instead.
func (*TeleportRandom) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{50}
}

func (x *TeleportRandom) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//联盟迁城
type TeleportGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //迁城符道具ID
}

func (x *TeleportGuild) Reset() {
	*x = TeleportGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeleportGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeleportGuild) ProtoMessage() {}

func (x *TeleportGuild) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeleportGuild.ProtoReflect.Descriptor instead.
func (*TeleportGuild) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{51}
}

func (x *TeleportGuild) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

type CreateBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId        *uint32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                        //建筑类型
	XPositionId    *uint32 `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`            //建筑位置
	XImmediately   *uint32 `protobuf:"varint,3,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"`           //是否马上完成
	XResA          *int64  `protobuf:"varint,4,req,name=_resA,json=ResA" json:"_resA,omitempty"`                                //客户端计算的resA消耗数量
	XResB          *int64  `protobuf:"varint,5,req,name=_resB,json=ResB" json:"_resB,omitempty"`                                //客户端计算的resB消耗数量
	XResC          *int64  `protobuf:"varint,6,req,name=_resC,json=ResC" json:"_resC,omitempty"`                                //客户端计算的resC消耗数量
	XResD          *int64  `protobuf:"varint,7,req,name=_resD,json=ResD" json:"_resD,omitempty"`                                //客户端计算的resD消耗数量
	XGold          *int64  `protobuf:"varint,8,req,name=_gold,json=Gold" json:"_gold,omitempty"`                                //客户端计算的金币消耗数量
	XNewPositionId *int32  `protobuf:"varint,9,req,name=_new_position_id,json=NewPositionId" json:"_new_position_id,omitempty"` //新的位置
}

func (x *CreateBuilding) Reset() {
	*x = CreateBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuilding) ProtoMessage() {}

func (x *CreateBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuilding.ProtoReflect.Descriptor instead.
func (*CreateBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{52}
}

func (x *CreateBuilding) GetXTypeId() uint32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *CreateBuilding) GetXPositionId() uint32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *CreateBuilding) GetXImmediately() uint32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

func (x *CreateBuilding) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *CreateBuilding) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *CreateBuilding) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *CreateBuilding) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *CreateBuilding) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *CreateBuilding) GetXNewPositionId() int32 {
	if x != nil && x.XNewPositionId != nil {
		return *x.XNewPositionId
	}
	return 0
}

type UpgradeBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId   *uint32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`       //建筑位置
	XImmediately  *uint32 `protobuf:"varint,2,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"`      //是否马上完成
	XCurrentLevel *uint32 `protobuf:"varint,3,req,name=_current_level,json=CurrentLevel" json:"_current_level,omitempty"` //建筑当前等级 0:代表新手修复建筑阶段
	XResA         *int64  `protobuf:"varint,4,req,name=_resA,json=ResA" json:"_resA,omitempty"`                           //客户端计算的resA消耗数量
	XResB         *int64  `protobuf:"varint,5,req,name=_resB,json=ResB" json:"_resB,omitempty"`                           //客户端计算的resB消耗数量
	XResC         *int64  `protobuf:"varint,6,req,name=_resC,json=ResC" json:"_resC,omitempty"`                           //客户端计算的resC消耗数量
	XResD         *int64  `protobuf:"varint,7,req,name=_resD,json=ResD" json:"_resD,omitempty"`                           //客户端计算的resD消耗数量
	XGold         *int64  `protobuf:"varint,8,req,name=_gold,json=Gold" json:"_gold,omitempty"`                           //客户端计算的金币消耗数量
}

func (x *UpgradeBuilding) Reset() {
	*x = UpgradeBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeBuilding) ProtoMessage() {}

func (x *UpgradeBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeBuilding.ProtoReflect.Descriptor instead.
func (*UpgradeBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{53}
}

func (x *UpgradeBuilding) GetXPositionId() uint32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *UpgradeBuilding) GetXImmediately() uint32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

func (x *UpgradeBuilding) GetXCurrentLevel() uint32 {
	if x != nil && x.XCurrentLevel != nil {
		return *x.XCurrentLevel
	}
	return 0
}

func (x *UpgradeBuilding) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *UpgradeBuilding) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *UpgradeBuilding) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *UpgradeBuilding) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *UpgradeBuilding) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

type RemoveBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
}

func (x *RemoveBuilding) Reset() {
	*x = RemoveBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBuilding) ProtoMessage() {}

func (x *RemoveBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBuilding.ProtoReflect.Descriptor instead.
func (*RemoveBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{54}
}

func (x *RemoveBuilding) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

type SpeedupBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId            *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`                                      //建筑位置
	XCurrentLevel          *int32 `protobuf:"varint,2,req,name=_current_level,json=CurrentLevel" json:"_current_level,omitempty"`                                //建筑当前等级
	XGold                  *int32 `protobuf:"varint,3,req,name=_gold,json=Gold" json:"_gold,omitempty"`                                                          //客户端计算的金币消耗数量
	XClientTime            *int64 `protobuf:"varint,4,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`                                      //客户端调整后的时间
	XCsDeltaTime           *int64 `protobuf:"varint,5,req,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`                                 //客户端服务端时间差
	XBuildingStartTime     *int64 `protobuf:"varint,6,req,name=_building_start_time,json=BuildingStartTime" json:"_building_start_time,omitempty"`               //客户端的建筑开始时间
	XBuildingReslStartTime *int64 `protobuf:"varint,7,req,name=_building_resl_start_time,json=BuildingReslStartTime" json:"_building_resl_start_time,omitempty"` //客户端的建筑开始时间
}

func (x *SpeedupBuilding) Reset() {
	*x = SpeedupBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupBuilding) ProtoMessage() {}

func (x *SpeedupBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupBuilding.ProtoReflect.Descriptor instead.
func (*SpeedupBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{55}
}

func (x *SpeedupBuilding) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SpeedupBuilding) GetXCurrentLevel() int32 {
	if x != nil && x.XCurrentLevel != nil {
		return *x.XCurrentLevel
	}
	return 0
}

func (x *SpeedupBuilding) GetXGold() int32 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SpeedupBuilding) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SpeedupBuilding) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *SpeedupBuilding) GetXBuildingStartTime() int64 {
	if x != nil && x.XBuildingStartTime != nil {
		return *x.XBuildingStartTime
	}
	return 0
}

func (x *SpeedupBuilding) GetXBuildingReslStartTime() int64 {
	if x != nil && x.XBuildingReslStartTime != nil {
		return *x.XBuildingReslStartTime
	}
	return 0
}

type TrainSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId      *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`              //兵种id
	XNum         *int32 `protobuf:"varint,2,req,name=_num,json=Num" json:"_num,omitempty"`                         //造兵个数
	XPositionId  *int32 `protobuf:"varint,3,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`  //建筑位置
	XImmediately *int32 `protobuf:"varint,4,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"` //是否马上完成
	XResA        *int64 `protobuf:"varint,5,req,name=_resA,json=ResA" json:"_resA,omitempty"`                      //客户端计算的resA消耗数量
	XResB        *int64 `protobuf:"varint,6,req,name=_resB,json=ResB" json:"_resB,omitempty"`                      //客户端计算的resB消耗数量
	XResC        *int64 `protobuf:"varint,7,req,name=_resC,json=ResC" json:"_resC,omitempty"`                      //客户端计算的resC消耗数量
	XResD        *int64 `protobuf:"varint,8,req,name=_resD,json=ResD" json:"_resD,omitempty"`                      //客户端计算的resD消耗数量
	XGold        *int64 `protobuf:"varint,9,req,name=_gold,json=Gold" json:"_gold,omitempty"`                      //客户端计算的金币消耗数量
	XResE        *int64 `protobuf:"varint,10,req,name=_resE,json=ResE" json:"_resE,omitempty"`                     //客户端计算的resE消耗数量
}

func (x *TrainSoldiers) Reset() {
	*x = TrainSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainSoldiers) ProtoMessage() {}

func (x *TrainSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainSoldiers.ProtoReflect.Descriptor instead.
func (*TrainSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{56}
}

func (x *TrainSoldiers) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *TrainSoldiers) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *TrainSoldiers) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *TrainSoldiers) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

func (x *TrainSoldiers) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *TrainSoldiers) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *TrainSoldiers) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *TrainSoldiers) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *TrainSoldiers) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *TrainSoldiers) GetXResE() int64 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

type ReapSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId         *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`                             //建筑位置
	XTypeId             *int32 `protobuf:"varint,2,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                                         //兵种id
	XNum                *int32 `protobuf:"varint,3,req,name=_num,json=Num" json:"_num,omitempty"`                                                    //造兵个数
	XClientTime         *int64 `protobuf:"varint,4,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`                             //客户端调整后的时间
	XCsDeltaTime        *int64 `protobuf:"varint,5,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`                        //客户端服务端时间差
	XTrainStartTime     *int64 `protobuf:"varint,6,opt,name=_train_start_time,json=TrainStartTime" json:"_train_start_time,omitempty"`               //客户端的训练开始时间
	XTrainRealStartTime *int64 `protobuf:"varint,7,opt,name=_train_real_start_time,json=TrainRealStartTime" json:"_train_real_start_time,omitempty"` //客户端训练开始时间
}

func (x *ReapSoldiers) Reset() {
	*x = ReapSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReapSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReapSoldiers) ProtoMessage() {}

func (x *ReapSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReapSoldiers.ProtoReflect.Descriptor instead.
func (*ReapSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{57}
}

func (x *ReapSoldiers) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *ReapSoldiers) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *ReapSoldiers) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *ReapSoldiers) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *ReapSoldiers) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *ReapSoldiers) GetXTrainStartTime() int64 {
	if x != nil && x.XTrainStartTime != nil {
		return *x.XTrainStartTime
	}
	return 0
}

func (x *ReapSoldiers) GetXTrainRealStartTime() int64 {
	if x != nil && x.XTrainRealStartTime != nil {
		return *x.XTrainRealStartTime
	}
	return 0
}

type SpeedupTrain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId    *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` //建筑位置
	XTypeId        *int32 `protobuf:"varint,2,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`             //兵种id
	XNum           *int32 `protobuf:"varint,3,req,name=_num,json=Num" json:"_num,omitempty"`                        //造兵个数
	XGold          *int64 `protobuf:"varint,4,req,name=_gold,json=Gold" json:"_gold,omitempty"`                     //客户端计算的金币消耗数量
	XStartTime     *int64 `protobuf:"varint,5,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"`
	XRealStartTime *int64 `protobuf:"varint,6,opt,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"`
	XClientTime    *int64 `protobuf:"varint,7,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`
	XCsDeltaTime   *int64 `protobuf:"varint,8,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`
}

func (x *SpeedupTrain) Reset() {
	*x = SpeedupTrain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupTrain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupTrain) ProtoMessage() {}

func (x *SpeedupTrain) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupTrain.ProtoReflect.Descriptor instead.
func (*SpeedupTrain) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{58}
}

func (x *SpeedupTrain) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SpeedupTrain) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *SpeedupTrain) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *SpeedupTrain) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SpeedupTrain) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *SpeedupTrain) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

func (x *SpeedupTrain) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SpeedupTrain) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

//获取邮件列表
type GetMaillist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //邮件id
}

func (x *GetMaillist) Reset() {
	*x = GetMaillist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaillist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaillist) ProtoMessage() {}

func (x *GetMaillist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaillist.ProtoReflect.Descriptor instead.
func (*GetMaillist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{59}
}

func (x *GetMaillist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取系统邮件列表
type GetSysmaillist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetSysmaillist) Reset() {
	*x = GetSysmaillist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSysmaillist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSysmaillist) ProtoMessage() {}

func (x *GetSysmaillist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSysmaillist.ProtoReflect.Descriptor instead.
func (*GetSysmaillist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{60}
}

func (x *GetSysmaillist) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取奖励邮件列表
type GetRewardmaillist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //邮件ID
}

func (x *GetRewardmaillist) Reset() {
	*x = GetRewardmaillist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardmaillist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardmaillist) ProtoMessage() {}

func (x *GetRewardmaillist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardmaillist.ProtoReflect.Descriptor instead.
func (*GetRewardmaillist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{61}
}

func (x *GetRewardmaillist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取奖励邮件列表
type GetActivitymaillist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //邮件ID
}

func (x *GetActivitymaillist) Reset() {
	*x = GetActivitymaillist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivitymaillist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivitymaillist) ProtoMessage() {}

func (x *GetActivitymaillist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivitymaillist.ProtoReflect.Descriptor instead.
func (*GetActivitymaillist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{62}
}

func (x *GetActivitymaillist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取战报邮件列表
type GetFightMaillist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //邮件ID
}

func (x *GetFightMaillist) Reset() {
	*x = GetFightMaillist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFightMaillist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFightMaillist) ProtoMessage() {}

func (x *GetFightMaillist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFightMaillist.ProtoReflect.Descriptor instead.
func (*GetFightMaillist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{63}
}

func (x *GetFightMaillist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取势力邮件列表
type GetAllianceMaillist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId       *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                     //邮件ID
	XReportId *uint32 `protobuf:"varint,2,opt,name=_report_id,json=ReportId" json:"_report_id,omitempty"` //报告ID
}

func (x *GetAllianceMaillist) Reset() {
	*x = GetAllianceMaillist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllianceMaillist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllianceMaillist) ProtoMessage() {}

func (x *GetAllianceMaillist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllianceMaillist.ProtoReflect.Descriptor instead.
func (*GetAllianceMaillist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{64}
}

func (x *GetAllianceMaillist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GetAllianceMaillist) GetXReportId() uint32 {
	if x != nil && x.XReportId != nil {
		return *x.XReportId
	}
	return 0
}

//获取战场邮件列表
type GetBattlefieldMaillist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //邮件ID
}

func (x *GetBattlefieldMaillist) Reset() {
	*x = GetBattlefieldMaillist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldMaillist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldMaillist) ProtoMessage() {}

func (x *GetBattlefieldMaillist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldMaillist.ProtoReflect.Descriptor instead.
func (*GetBattlefieldMaillist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{65}
}

func (x *GetBattlefieldMaillist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取报告列表
type GetReportlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                            // 邮件id
	XNotContainFight *uint32 `protobuf:"varint,2,opt,name=_not_contain_fight,json=NotContainFight" json:"_not_contain_fight,omitempty"` //0 包含 1 不包含
}

func (x *GetReportlist) Reset() {
	*x = GetReportlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportlist) ProtoMessage() {}

func (x *GetReportlist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportlist.ProtoReflect.Descriptor instead.
func (*GetReportlist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{66}
}

func (x *GetReportlist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GetReportlist) GetXNotContainFight() uint32 {
	if x != nil && x.XNotContainFight != nil {
		return *x.XNotContainFight
	}
	return 0
}

//获取报告页的列表
type GetReportTabList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` // 邮件id
}

func (x *GetReportTabList) Reset() {
	*x = GetReportTabList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportTabList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportTabList) ProtoMessage() {}

func (x *GetReportTabList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportTabList.ProtoReflect.Descriptor instead.
func (*GetReportTabList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{67}
}

func (x *GetReportTabList) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//读邮件
type ReadMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *uint32         `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                                           // 邮件ID
	XMailType    *pb.Mtype       `protobuf:"varint,2,opt,name=_mail_type,json=MailType,enum=Msg.Mtype,def=1" json:"_mail_type,omitempty"`                  // 系统邮件或者私人邮件
	XIds         []uint32        `protobuf:"varint,3,rep,name=_ids,json=Ids" json:"_ids,omitempty"`                                                        // 多封邮件
	XType        *pb.MailType    `protobuf:"varint,4,opt,name=_type,json=Type,enum=Msg.MailType,def=0" json:"_type,omitempty"`                             //多封邮件的类型
	XMailTabType *pb.MailTabType `protobuf:"varint,5,opt,name=_mail_tab_type,json=MailTabType,enum=Msg.MailTabType,def=0" json:"_mail_tab_type,omitempty"` // 邮件页签类型
	XConfigId    *int32          `protobuf:"varint,6,opt,name=_config_id,json=ConfigId" json:"_config_id,omitempty"`                                       // 模板id
}

// Default values for ReadMail fields.
const (
	Default_ReadMail_XMailType    = pb.Mtype(1)       // pb.Mtype_system_mail
	Default_ReadMail_XType        = pb.MailType(0)    // pb.MailType_system
	Default_ReadMail_XMailTabType = pb.MailTabType(0) // pb.MailTabType_unknow_mail_tab_type
)

func (x *ReadMail) Reset() {
	*x = ReadMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMail) ProtoMessage() {}

func (x *ReadMail) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMail.ProtoReflect.Descriptor instead.
func (*ReadMail) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{68}
}

func (x *ReadMail) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ReadMail) GetXMailType() pb.Mtype {
	if x != nil && x.XMailType != nil {
		return *x.XMailType
	}
	return Default_ReadMail_XMailType
}

func (x *ReadMail) GetXIds() []uint32 {
	if x != nil {
		return x.XIds
	}
	return nil
}

func (x *ReadMail) GetXType() pb.MailType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_ReadMail_XType
}

func (x *ReadMail) GetXMailTabType() pb.MailTabType {
	if x != nil && x.XMailTabType != nil {
		return *x.XMailTabType
	}
	return Default_ReadMail_XMailTabType
}

func (x *ReadMail) GetXConfigId() int32 {
	if x != nil && x.XConfigId != nil {
		return *x.XConfigId
	}
	return 0
}

//收取邮件中的奖励
type GetMailReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMailId      *uint32         `protobuf:"varint,1,req,name=_mail_id,json=MailId" json:"_mail_id,omitempty"`                                             //邮件ID
	XMailTabType *pb.MailTabType `protobuf:"varint,2,opt,name=_mail_tab_type,json=MailTabType,enum=Msg.MailTabType,def=0" json:"_mail_tab_type,omitempty"` // 邮件页签类型
}

// Default values for GetMailReward fields.
const (
	Default_GetMailReward_XMailTabType = pb.MailTabType(0) // pb.MailTabType_unknow_mail_tab_type
)

func (x *GetMailReward) Reset() {
	*x = GetMailReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMailReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailReward) ProtoMessage() {}

func (x *GetMailReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailReward.ProtoReflect.Descriptor instead.
func (*GetMailReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{69}
}

func (x *GetMailReward) GetXMailId() uint32 {
	if x != nil && x.XMailId != nil {
		return *x.XMailId
	}
	return 0
}

func (x *GetMailReward) GetXMailTabType() pb.MailTabType {
	if x != nil && x.XMailTabType != nil {
		return *x.XMailTabType
	}
	return Default_GetMailReward_XMailTabType
}

//批量收取邮件中的奖励
type BatchMailReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XIds []uint32 `protobuf:"varint,1,rep,name=_ids,json=Ids" json:"_ids,omitempty"` //多封邮件
}

func (x *BatchMailReward) Reset() {
	*x = BatchMailReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMailReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMailReward) ProtoMessage() {}

func (x *BatchMailReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMailReward.ProtoReflect.Descriptor instead.
func (*BatchMailReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{70}
}

func (x *BatchMailReward) GetXIds() []uint32 {
	if x != nil {
		return x.XIds
	}
	return nil
}

//收割资源
type ReapResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XReapResourceData []*ReapResourceData `protobuf:"bytes,1,rep,name=_reap_resource_data,json=ReapResourceData" json:"_reap_resource_data,omitempty"` //资源信息
	XIsReapAll        *int32              `protobuf:"varint,2,req,name=_is_reap_all,json=IsReapAll" json:"_is_reap_all,omitempty"`                     //是否一键收取全部资源。0 false ，1 true
	XNewClient        *int32              `protobuf:"varint,3,opt,name=_new_client,json=NewClient" json:"_new_client,omitempty"`                       //是否需要服务器返回资源数据
}

func (x *ReapResource) Reset() {
	*x = ReapResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReapResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReapResource) ProtoMessage() {}

func (x *ReapResource) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReapResource.ProtoReflect.Descriptor instead.
func (*ReapResource) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{71}
}

func (x *ReapResource) GetXReapResourceData() []*ReapResourceData {
	if x != nil {
		return x.XReapResourceData
	}
	return nil
}

func (x *ReapResource) GetXIsReapAll() int32 {
	if x != nil && x.XIsReapAll != nil {
		return *x.XIsReapAll
	}
	return 0
}

func (x *ReapResource) GetXNewClient() int32 {
	if x != nil && x.XNewClient != nil {
		return *x.XNewClient
	}
	return 0
}

//资源数据
type ReapResourceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId   *int32                `protobuf:"varint,1,opt,name=_position_id,json=PositionId" json:"_position_id,omitempty"`                                       //建筑位置
	XResourceType *ReapResourceDataType `protobuf:"varint,2,req,name=_resource_type,json=ResourceType,enum=MsgUp.ReapResourceDataType" json:"_resource_type,omitempty"` //资源类型
	XNum          *int64                `protobuf:"varint,3,req,name=_num,json=Num" json:"_num,omitempty"`                                                              //资源数量
	Speed         *string               `protobuf:"bytes,4,opt,name=speed" json:"speed,omitempty"`                                                                      //客户端计算的speed信息。用来调试
	XSubCityId    *int32                `protobuf:"varint,5,opt,name=_sub_city_id,json=SubCityId" json:"_sub_city_id,omitempty"`                                        //分城id
}

func (x *ReapResourceData) Reset() {
	*x = ReapResourceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReapResourceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReapResourceData) ProtoMessage() {}

func (x *ReapResourceData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReapResourceData.ProtoReflect.Descriptor instead.
func (*ReapResourceData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{72}
}

func (x *ReapResourceData) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *ReapResourceData) GetXResourceType() ReapResourceDataType {
	if x != nil && x.XResourceType != nil {
		return *x.XResourceType
	}
	return ReapResourceData_resA
}

func (x *ReapResourceData) GetXNum() int64 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *ReapResourceData) GetSpeed() string {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return ""
}

func (x *ReapResourceData) GetXSubCityId() int32 {
	if x != nil && x.XSubCityId != nil {
		return *x.XSubCityId
	}
	return 0
}

//领取任务奖励
type ClaimQuestReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XQuestId *int32 `protobuf:"varint,1,req,name=_quest_id,json=QuestId" json:"_quest_id,omitempty"` //任务id
}

func (x *ClaimQuestReward) Reset() {
	*x = ClaimQuestReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimQuestReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimQuestReward) ProtoMessage() {}

func (x *ClaimQuestReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimQuestReward.ProtoReflect.Descriptor instead.
func (*ClaimQuestReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{73}
}

func (x *ClaimQuestReward) GetXQuestId() int32 {
	if x != nil && x.XQuestId != nil {
		return *x.XQuestId
	}
	return 0
}

//出征
type SendTroop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop               []*pb.Troop      `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                                                 //出兵各兵种
	XType                *pb.MarchType    `protobuf:"varint,2,req,name=_type,json=Type,enum=Msg.MarchType" json:"_type,omitempty"`                                //出兵类型
	XTargetWx            *int32           `protobuf:"varint,3,req,name=_target_wx,json=TargetWx" json:"_target_wx,omitempty"`                                     //目标的横坐标
	XTargetWy            *int32           `protobuf:"varint,4,req,name=_target_wy,json=TargetWy" json:"_target_wy,omitempty"`                                     //目标的纵坐标
	XTargetType          *pb.MapinfoType  `protobuf:"varint,5,req,name=_target_type,json=TargetType,enum=Msg.MapinfoType" json:"_target_type,omitempty"`          //目标类型，玩家或怪物或资源采集点 | 任务npc
	XTargetSubtype       *int32           `protobuf:"varint,6,opt,name=_target_subtype,json=TargetSubtype" json:"_target_subtype,omitempty"`                      //目标子类型，玩家不需要 | 任务npc配置id
	XTargetLevel         *int32           `protobuf:"varint,7,opt,name=_target_level,json=TargetLevel" json:"_target_level,omitempty"`                            //目标等级，玩家不需要
	XTargetUserId        *uint32          `protobuf:"varint,8,opt,name=_target_user_id,json=TargetUserId" json:"_target_user_id,omitempty"`                       //目标玩家id，如果目标有玩家属性需要填写（如攻打其他玩家正在采集的资源点）
	XTargetTroopId       *uint32          `protobuf:"varint,9,opt,name=_target_troop_id,json=TargetTroopId" json:"_target_troop_id,omitempty"`                    //目标部队id，如果目标有部队属性需要填写（如攻打其他玩家正在采集的资源点，需要精确到是哪一支部队在采集，以免打错）
	XResource            *pb.ResourceInfo `protobuf:"bytes,10,opt,name=_resource,json=Resource" json:"_resource,omitempty"`                                       //运输的资源数据
	XShieldConfirm       *int32           `protobuf:"varint,11,opt,name=_shield_confirm,json=ShieldConfirm" json:"_shield_confirm,omitempty"`                     //判断是否是破盾的确认.
	XGeneralId           *int32           `protobuf:"varint,12,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                                 //带兵将军ID
	XSubcitys            []int32          `protobuf:"varint,13,rep,name=_subcitys,json=Subcitys" json:"_subcitys,omitempty"`                                      //分城
	XRallyTime           *int32           `protobuf:"varint,14,opt,name=_rally_time,json=RallyTime" json:"_rally_time,omitempty"`                                 //集结时间
	XServerId            *int32           `protobuf:"varint,15,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                                    //目标的服务器id，会跟玩家城堡所在的服务器id比较，不相等就会出兵失败
	XFieldId             *int32           `protobuf:"varint,16,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"`                                       //所在战场id
	XAssistantId         *int32           `protobuf:"varint,17,opt,name=_assistant_id,json=AssistantId" json:"_assistant_id,omitempty"`                           //副将ID
	XTroopType           *int32           `protobuf:"varint,18,req,name=_troop_type,json=TroopType,def=0" json:"_troop_type,omitempty"`                           //出兵类型,1-自由行军,0-常规类型
	XTroopIndex          *int32           `protobuf:"varint,19,req,name=_troop_index,json=TroopIndex" json:"_troop_index,omitempty"`                              //出兵编号,客户端用
	XItems               []*pb.ComItem    `protobuf:"bytes,20,rep,name=_items,json=Items" json:"_items,omitempty"`                                                //携带的背包
	XTaskAction          *int32           `protobuf:"varint,21,opt,name=_task_action,json=TaskAction" json:"_task_action,omitempty"`                              //大地图任务-动作:1-接取,2-丢弃,3-提交
	XTaskTagType         *int32           `protobuf:"varint,22,opt,name=_task_tag_type,json=TaskTagType" json:"_task_tag_type,omitempty"`                         //大地图任务-类型：1-线性配置表，2-环任务组配置表，3-随机组配置表
	XTaskTagId           *int32           `protobuf:"varint,23,opt,name=_task_tag_id,json=TaskTagId" json:"_task_tag_id,omitempty"`                               //大地图任务-类型-配置id：线性配置表id,环任务组配置表id,随机组配置表id
	XTaskId              *int64           `protobuf:"varint,24,opt,name=_task_id,json=TaskId" json:"_task_id,omitempty"`                                          //大地图任务-数据id
	XTaskItems           []*pb.ComItem    `protobuf:"bytes,25,rep,name=_task_items,json=TaskItems" json:"_task_items,omitempty"`                                  //大地图任务-提交的任务物品
	XAutoRelifeSolider   *int32           `protobuf:"varint,26,opt,name=_auto_relife_solider,json=AutoRelifeSolider" json:"_auto_relife_solider,omitempty"`       //自动使用急救包道具0自动使用 1不自动使用
	XAutoRelifeApparatus *int32           `protobuf:"varint,27,opt,name=_auto_relife_apparatus,json=AutoRelifeApparatus" json:"_auto_relife_apparatus,omitempty"` //自动使用钻石修复攻城器械0自动使用 1不自动使用
	XArriveActionType    *int32           `protobuf:"varint,28,opt,name=_arrive_action_type,json=ArriveActionType" json:"_arrive_action_type,omitempty"`          //到达后行动，1-回城，2-驻军
	XTroopId             *uint32          `protobuf:"varint,29,opt,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"`                                       //军队id
	XTaskNpcTargetWx     *int32           `protobuf:"varint,30,opt,name=_task_npc_target_wx,json=TaskNpcTargetWx" json:"_task_npc_target_wx,omitempty"`           //大地图任务-任务NPC目标的横坐标
	XTaskNpcTargetWy     *int32           `protobuf:"varint,31,opt,name=_task_npc_target_wy,json=TaskNpcTargetWy" json:"_task_npc_target_wy,omitempty"`           //大地图任务-任务NPC目标的纵坐标
}

// Default values for SendTroop fields.
const (
	Default_SendTroop_XTroopType = int32(0)
)

func (x *SendTroop) Reset() {
	*x = SendTroop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTroop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTroop) ProtoMessage() {}

func (x *SendTroop) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTroop.ProtoReflect.Descriptor instead.
func (*SendTroop) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{74}
}

func (x *SendTroop) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *SendTroop) GetXType() pb.MarchType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return pb.MarchType(1)
}

func (x *SendTroop) GetXTargetWx() int32 {
	if x != nil && x.XTargetWx != nil {
		return *x.XTargetWx
	}
	return 0
}

func (x *SendTroop) GetXTargetWy() int32 {
	if x != nil && x.XTargetWy != nil {
		return *x.XTargetWy
	}
	return 0
}

func (x *SendTroop) GetXTargetType() pb.MapinfoType {
	if x != nil && x.XTargetType != nil {
		return *x.XTargetType
	}
	return pb.MapinfoType(0)
}

func (x *SendTroop) GetXTargetSubtype() int32 {
	if x != nil && x.XTargetSubtype != nil {
		return *x.XTargetSubtype
	}
	return 0
}

func (x *SendTroop) GetXTargetLevel() int32 {
	if x != nil && x.XTargetLevel != nil {
		return *x.XTargetLevel
	}
	return 0
}

func (x *SendTroop) GetXTargetUserId() uint32 {
	if x != nil && x.XTargetUserId != nil {
		return *x.XTargetUserId
	}
	return 0
}

func (x *SendTroop) GetXTargetTroopId() uint32 {
	if x != nil && x.XTargetTroopId != nil {
		return *x.XTargetTroopId
	}
	return 0
}

func (x *SendTroop) GetXResource() *pb.ResourceInfo {
	if x != nil {
		return x.XResource
	}
	return nil
}

func (x *SendTroop) GetXShieldConfirm() int32 {
	if x != nil && x.XShieldConfirm != nil {
		return *x.XShieldConfirm
	}
	return 0
}

func (x *SendTroop) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *SendTroop) GetXSubcitys() []int32 {
	if x != nil {
		return x.XSubcitys
	}
	return nil
}

func (x *SendTroop) GetXRallyTime() int32 {
	if x != nil && x.XRallyTime != nil {
		return *x.XRallyTime
	}
	return 0
}

func (x *SendTroop) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *SendTroop) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

func (x *SendTroop) GetXAssistantId() int32 {
	if x != nil && x.XAssistantId != nil {
		return *x.XAssistantId
	}
	return 0
}

func (x *SendTroop) GetXTroopType() int32 {
	if x != nil && x.XTroopType != nil {
		return *x.XTroopType
	}
	return Default_SendTroop_XTroopType
}

func (x *SendTroop) GetXTroopIndex() int32 {
	if x != nil && x.XTroopIndex != nil {
		return *x.XTroopIndex
	}
	return 0
}

func (x *SendTroop) GetXItems() []*pb.ComItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

func (x *SendTroop) GetXTaskAction() int32 {
	if x != nil && x.XTaskAction != nil {
		return *x.XTaskAction
	}
	return 0
}

func (x *SendTroop) GetXTaskTagType() int32 {
	if x != nil && x.XTaskTagType != nil {
		return *x.XTaskTagType
	}
	return 0
}

func (x *SendTroop) GetXTaskTagId() int32 {
	if x != nil && x.XTaskTagId != nil {
		return *x.XTaskTagId
	}
	return 0
}

func (x *SendTroop) GetXTaskId() int64 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *SendTroop) GetXTaskItems() []*pb.ComItem {
	if x != nil {
		return x.XTaskItems
	}
	return nil
}

func (x *SendTroop) GetXAutoRelifeSolider() int32 {
	if x != nil && x.XAutoRelifeSolider != nil {
		return *x.XAutoRelifeSolider
	}
	return 0
}

func (x *SendTroop) GetXAutoRelifeApparatus() int32 {
	if x != nil && x.XAutoRelifeApparatus != nil {
		return *x.XAutoRelifeApparatus
	}
	return 0
}

func (x *SendTroop) GetXArriveActionType() int32 {
	if x != nil && x.XArriveActionType != nil {
		return *x.XArriveActionType
	}
	return 0
}

func (x *SendTroop) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

func (x *SendTroop) GetXTaskNpcTargetWx() int32 {
	if x != nil && x.XTaskNpcTargetWx != nil {
		return *x.XTaskNpcTargetWx
	}
	return 0
}

func (x *SendTroop) GetXTaskNpcTargetWy() int32 {
	if x != nil && x.XTaskNpcTargetWy != nil {
		return *x.XTaskNpcTargetWy
	}
	return 0
}

//装备穿，或者脱装备.
type WearEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XActionId  *pb.WearActionType `protobuf:"varint,1,req,name=_action_id,json=ActionId,enum=Msg.WearActionType" json:"_action_id,omitempty"` //1表示穿装备，2表示脱装备
	XItemPos   *pb.WearPosition   `protobuf:"varint,2,req,name=_item_pos,json=ItemPos,enum=Msg.WearPosition" json:"_item_pos,omitempty"`      //要穿的装备位：1 - 8
	XItemId    *int32             `protobuf:"varint,3,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                               //装备的id.如果脱装备,传0.
	XGeneralId *int32             `protobuf:"varint,4,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                      //将军的ID
	XId        *int64             `protobuf:"varint,5,opt,name=_id,json=Id" json:"_id,omitempty"`                                             //装备唯一id
}

func (x *WearEquip) Reset() {
	*x = WearEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearEquip) ProtoMessage() {}

func (x *WearEquip) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearEquip.ProtoReflect.Descriptor instead.
func (*WearEquip) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{75}
}

func (x *WearEquip) GetXActionId() pb.WearActionType {
	if x != nil && x.XActionId != nil {
		return *x.XActionId
	}
	return pb.WearActionType(1)
}

func (x *WearEquip) GetXItemPos() pb.WearPosition {
	if x != nil && x.XItemPos != nil {
		return *x.XItemPos
	}
	return pb.WearPosition(1)
}

func (x *WearEquip) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *WearEquip) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *WearEquip) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//穿宝物或脱宝物
type WearTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XActionId         *pb.WearActionType `protobuf:"varint,1,req,name=_action_id,json=ActionId,enum=Msg.WearActionType" json:"_action_id,omitempty"`   //1表示穿宝物，2表示脱宝物
	XPlayerTreasureId *int64             `protobuf:"varint,5,opt,name=_player_treasure_id,json=PlayerTreasureId" json:"_player_treasure_id,omitempty"` //宝物唯一id
}

func (x *WearTreasure) Reset() {
	*x = WearTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearTreasure) ProtoMessage() {}

func (x *WearTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearTreasure.ProtoReflect.Descriptor instead.
func (*WearTreasure) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{76}
}

func (x *WearTreasure) GetXActionId() pb.WearActionType {
	if x != nil && x.XActionId != nil {
		return *x.XActionId
	}
	return pb.WearActionType(1)
}

func (x *WearTreasure) GetXPlayerTreasureId() int64 {
	if x != nil && x.XPlayerTreasureId != nil {
		return *x.XPlayerTreasureId
	}
	return 0
}

type WearEmblem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XActionId *pb.WearActionType `protobuf:"varint,1,req,name=_action_id,json=ActionId,enum=Msg.WearActionType" json:"_action_id,omitempty"` //1表示穿，2表示脱
	XEmblemId *int32             `protobuf:"varint,2,req,name=_emblem_id,json=EmblemId" json:"_emblem_id,omitempty"`
}

func (x *WearEmblem) Reset() {
	*x = WearEmblem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearEmblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearEmblem) ProtoMessage() {}

func (x *WearEmblem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearEmblem.ProtoReflect.Descriptor instead.
func (*WearEmblem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{77}
}

func (x *WearEmblem) GetXActionId() pb.WearActionType {
	if x != nil && x.XActionId != nil {
		return *x.XActionId
	}
	return pb.WearActionType(1)
}

func (x *WearEmblem) GetXEmblemId() int32 {
	if x != nil && x.XEmblemId != nil {
		return *x.XEmblemId
	}
	return 0
}

//检查行军状态
type CheckMarch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroopId *uint32 `protobuf:"varint,1,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"` //军队id
}

func (x *CheckMarch) Reset() {
	*x = CheckMarch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMarch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMarch) ProtoMessage() {}

func (x *CheckMarch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMarch.ProtoReflect.Descriptor instead.
func (*CheckMarch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{78}
}

func (x *CheckMarch) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

//行军返回
type ReturnCastle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroopId *uint32 `protobuf:"varint,1,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"` //军队id
}

func (x *ReturnCastle) Reset() {
	*x = ReturnCastle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnCastle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnCastle) ProtoMessage() {}

func (x *ReturnCastle) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnCastle.ProtoReflect.Descriptor instead.
func (*ReturnCastle) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{79}
}

func (x *ReturnCastle) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

//使用道具行军返回
type ReturnCastleByItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroopId  *uint32 `protobuf:"varint,1,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"`    //军队id
	XItemId   *int32  `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`       //道具id
	XGems     *int32  `protobuf:"varint,3,opt,name=_gems,json=Gems" json:"_gems,omitempty"`               //使用钻石
	XServerId *int32  `protobuf:"varint,4,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *ReturnCastleByItem) Reset() {
	*x = ReturnCastleByItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnCastleByItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnCastleByItem) ProtoMessage() {}

func (x *ReturnCastleByItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnCastleByItem.ProtoReflect.Descriptor instead.
func (*ReturnCastleByItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{80}
}

func (x *ReturnCastleByItem) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

func (x *ReturnCastleByItem) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *ReturnCastleByItem) GetXGems() int32 {
	if x != nil && x.XGems != nil {
		return *x.XGems
	}
	return 0
}

func (x *ReturnCastleByItem) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//从驻军出征
type SendTroopGarrison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroopId          *uint32         `protobuf:"varint,1,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"`                               //军队id
	XType             *pb.MarchType   `protobuf:"varint,2,req,name=_type,json=Type,enum=Msg.MarchType" json:"_type,omitempty"`                       //出兵类型
	XTargetWx         *int32          `protobuf:"varint,3,req,name=_target_wx,json=TargetWx" json:"_target_wx,omitempty"`                            //目标的横坐标
	XTargetWy         *int32          `protobuf:"varint,4,req,name=_target_wy,json=TargetWy" json:"_target_wy,omitempty"`                            //目标的纵坐标
	XTargetType       *pb.MapinfoType `protobuf:"varint,5,req,name=_target_type,json=TargetType,enum=Msg.MapinfoType" json:"_target_type,omitempty"` //目标类型，玩家或怪物或资源采集点 | 任务npc
	XTargetSubtype    *uint32         `protobuf:"varint,6,opt,name=_target_subtype,json=TargetSubtype" json:"_target_subtype,omitempty"`             //目标子类型，玩家不需要 | 任务npc配置id
	XTargetLevel      *int32          `protobuf:"varint,7,opt,name=_target_level,json=TargetLevel" json:"_target_level,omitempty"`                   //目标等级，玩家不需要
	XTargetUserId     *uint32         `protobuf:"varint,8,opt,name=_target_user_id,json=TargetUserId" json:"_target_user_id,omitempty"`              //目标玩家id，如果目标有玩家属性需要填写（如攻打其他玩家正在采集的资源点）
	XTargetTroopId    *uint32         `protobuf:"varint,9,opt,name=_target_troop_id,json=TargetTroopId" json:"_target_troop_id,omitempty"`           //目标部队id，如果目标有部队属性需要填写（如攻打其他玩家正在采集的资源点，需要精确到是哪一支部队在采集，以免打错）
	XFieldId          *int32          `protobuf:"varint,10,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"`                              //战场id
	XUniqId           *int64          `protobuf:"varint,11,opt,name=_uniq_id,json=UniqId" json:"_uniq_id,omitempty"`                                 //唯一id
	XTaskAction       *int32          `protobuf:"varint,12,opt,name=_task_action,json=TaskAction" json:"_task_action,omitempty"`                     //大地图任务-动作:1-接取,2-丢弃,3-提交
	XTaskTagType      *int32          `protobuf:"varint,13,opt,name=_task_tag_type,json=TaskTagType" json:"_task_tag_type,omitempty"`                //大地图任务-类型：1-线性配置表，2-环任务组配置表，3-随机组配置表
	XTaskTagId        *int32          `protobuf:"varint,14,opt,name=_task_tag_id,json=TaskTagId" json:"_task_tag_id,omitempty"`                      //大地图任务-类型-配置id：线性配置表id,环任务组配置表id,随机组配置表id
	XTaskId           *int64          `protobuf:"varint,15,opt,name=_task_id,json=TaskId" json:"_task_id,omitempty"`                                 //大地图任务-数据id
	XTaskItems        []*pb.ComItem   `protobuf:"bytes,16,rep,name=_task_items,json=TaskItems" json:"_task_items,omitempty"`                         //大地图任务-提交的任务物品
	XArriveActionType *int32          `protobuf:"varint,17,opt,name=_arrive_action_type,json=ArriveActionType" json:"_arrive_action_type,omitempty"` //到达后行动，1-回城，2-驻军
	XTaskNpcTargetWx  *int32          `protobuf:"varint,18,opt,name=_task_npc_target_wx,json=TaskNpcTargetWx" json:"_task_npc_target_wx,omitempty"`  //大地图任务-任务NPC目标的横坐标
	XTaskNpcTargetWy  *int32          `protobuf:"varint,19,opt,name=_task_npc_target_wy,json=TaskNpcTargetWy" json:"_task_npc_target_wy,omitempty"`  //大地图任务-任务NPC目标的纵坐标
}

func (x *SendTroopGarrison) Reset() {
	*x = SendTroopGarrison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTroopGarrison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTroopGarrison) ProtoMessage() {}

func (x *SendTroopGarrison) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTroopGarrison.ProtoReflect.Descriptor instead.
func (*SendTroopGarrison) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{81}
}

func (x *SendTroopGarrison) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

func (x *SendTroopGarrison) GetXType() pb.MarchType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return pb.MarchType(1)
}

func (x *SendTroopGarrison) GetXTargetWx() int32 {
	if x != nil && x.XTargetWx != nil {
		return *x.XTargetWx
	}
	return 0
}

func (x *SendTroopGarrison) GetXTargetWy() int32 {
	if x != nil && x.XTargetWy != nil {
		return *x.XTargetWy
	}
	return 0
}

func (x *SendTroopGarrison) GetXTargetType() pb.MapinfoType {
	if x != nil && x.XTargetType != nil {
		return *x.XTargetType
	}
	return pb.MapinfoType(0)
}

func (x *SendTroopGarrison) GetXTargetSubtype() uint32 {
	if x != nil && x.XTargetSubtype != nil {
		return *x.XTargetSubtype
	}
	return 0
}

func (x *SendTroopGarrison) GetXTargetLevel() int32 {
	if x != nil && x.XTargetLevel != nil {
		return *x.XTargetLevel
	}
	return 0
}

func (x *SendTroopGarrison) GetXTargetUserId() uint32 {
	if x != nil && x.XTargetUserId != nil {
		return *x.XTargetUserId
	}
	return 0
}

func (x *SendTroopGarrison) GetXTargetTroopId() uint32 {
	if x != nil && x.XTargetTroopId != nil {
		return *x.XTargetTroopId
	}
	return 0
}

func (x *SendTroopGarrison) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

func (x *SendTroopGarrison) GetXUniqId() int64 {
	if x != nil && x.XUniqId != nil {
		return *x.XUniqId
	}
	return 0
}

func (x *SendTroopGarrison) GetXTaskAction() int32 {
	if x != nil && x.XTaskAction != nil {
		return *x.XTaskAction
	}
	return 0
}

func (x *SendTroopGarrison) GetXTaskTagType() int32 {
	if x != nil && x.XTaskTagType != nil {
		return *x.XTaskTagType
	}
	return 0
}

func (x *SendTroopGarrison) GetXTaskTagId() int32 {
	if x != nil && x.XTaskTagId != nil {
		return *x.XTaskTagId
	}
	return 0
}

func (x *SendTroopGarrison) GetXTaskId() int64 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *SendTroopGarrison) GetXTaskItems() []*pb.ComItem {
	if x != nil {
		return x.XTaskItems
	}
	return nil
}

func (x *SendTroopGarrison) GetXArriveActionType() int32 {
	if x != nil && x.XArriveActionType != nil {
		return *x.XArriveActionType
	}
	return 0
}

func (x *SendTroopGarrison) GetXTaskNpcTargetWx() int32 {
	if x != nil && x.XTaskNpcTargetWx != nil {
		return *x.XTaskNpcTargetWx
	}
	return 0
}

func (x *SendTroopGarrison) GetXTaskNpcTargetWy() int32 {
	if x != nil && x.XTaskNpcTargetWy != nil {
		return *x.XTaskNpcTargetWy
	}
	return 0
}

//购买建筑队列
type BuyBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag      *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XBuilderId *int32 `protobuf:"varint,2,opt,name=_builder_id,json=BuilderId" json:"_builder_id,omitempty"` //购买建筑队列的id，有两个可以付费的建筑队列1，2
}

func (x *BuyBuilder) Reset() {
	*x = BuyBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyBuilder) ProtoMessage() {}

func (x *BuyBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyBuilder.ProtoReflect.Descriptor instead.
func (*BuyBuilder) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{82}
}

func (x *BuyBuilder) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *BuyBuilder) GetXBuilderId() int32 {
	if x != nil && x.XBuilderId != nil {
		return *x.XBuilderId
	}
	return 0
}

//升级科技
type UpgradeTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId  *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`  //建筑位置
	XTypeId      *int32 `protobuf:"varint,2,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`              //科技id
	XImmediately *int32 `protobuf:"varint,3,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"` //是否立即升级
	CurrentLevel *int32 `protobuf:"varint,4,req,name=current_level,json=currentLevel" json:"current_level,omitempty"`
	XResA        *int64 `protobuf:"varint,5,req,name=_resA,json=ResA" json:"_resA,omitempty"`  //客户端计算的resA消耗数量
	XResB        *int64 `protobuf:"varint,6,req,name=_resB,json=ResB" json:"_resB,omitempty"`  //客户端计算的resB消耗数量
	XResC        *int64 `protobuf:"varint,7,req,name=_resC,json=ResC" json:"_resC,omitempty"`  //客户端计算的resC消耗数量
	XResD        *int64 `protobuf:"varint,8,req,name=_resD,json=ResD" json:"_resD,omitempty"`  //客户端计算的resD消耗数量
	XGold        *int64 `protobuf:"varint,9,req,name=_gold,json=Gold" json:"_gold,omitempty"`  //客户端计算的金币消耗数量
	XResE        *int64 `protobuf:"varint,10,req,name=_resE,json=ResE" json:"_resE,omitempty"` //客户端计算的resE消耗的数量
}

func (x *UpgradeTech) Reset() {
	*x = UpgradeTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeTech) ProtoMessage() {}

func (x *UpgradeTech) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeTech.ProtoReflect.Descriptor instead.
func (*UpgradeTech) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{83}
}

func (x *UpgradeTech) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *UpgradeTech) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *UpgradeTech) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

func (x *UpgradeTech) GetCurrentLevel() int32 {
	if x != nil && x.CurrentLevel != nil {
		return *x.CurrentLevel
	}
	return 0
}

func (x *UpgradeTech) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *UpgradeTech) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *UpgradeTech) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *UpgradeTech) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *UpgradeTech) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *UpgradeTech) GetXResE() int64 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

//升级天赋
type UpgradeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"` //天赋id
	XLevel  *int32 `protobuf:"varint,2,opt,name=_level,json=Level" json:"_level,omitempty"`      //升级数
	XPage   *int32 `protobuf:"varint,3,opt,name=_page,json=Page" json:"_page,omitempty"`         //对应天赋页
}

func (x *UpgradeGift) Reset() {
	*x = UpgradeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeGift) ProtoMessage() {}

func (x *UpgradeGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeGift.ProtoReflect.Descriptor instead.
func (*UpgradeGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{84}
}

func (x *UpgradeGift) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *UpgradeGift) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *UpgradeGift) GetXPage() int32 {
	if x != nil && x.XPage != nil {
		return *x.XPage
	}
	return 0
}

//切换天赋页
type ChangeGiftPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPage *int32 `protobuf:"varint,1,req,name=_page,json=Page" json:"_page,omitempty"` //要切换的天赋页码
	XGem  *int32 `protobuf:"varint,2,opt,name=_gem,json=Gem" json:"_gem,omitempty"`    //花费钻石数
}

func (x *ChangeGiftPage) Reset() {
	*x = ChangeGiftPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGiftPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGiftPage) ProtoMessage() {}

func (x *ChangeGiftPage) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGiftPage.ProtoReflect.Descriptor instead.
func (*ChangeGiftPage) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{85}
}

func (x *ChangeGiftPage) GetXPage() int32 {
	if x != nil && x.XPage != nil {
		return *x.XPage
	}
	return 0
}

func (x *ChangeGiftPage) GetXGem() int32 {
	if x != nil && x.XGem != nil {
		return *x.XGem
	}
	return 0
}

//获取天赋数据
type GetGiftList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPage *int32 `protobuf:"varint,1,opt,name=_page,json=Page" json:"_page,omitempty"` //天赋页码
}

func (x *GetGiftList) Reset() {
	*x = GetGiftList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGiftList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGiftList) ProtoMessage() {}

func (x *GetGiftList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGiftList.ProtoReflect.Descriptor instead.
func (*GetGiftList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{86}
}

func (x *GetGiftList) GetXPage() int32 {
	if x != nil && x.XPage != nil {
		return *x.XPage
	}
	return 0
}

//获取 王国 列表 (弃用)
type GetServerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetServerList) Reset() {
	*x = GetServerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerList) ProtoMessage() {}

func (x *GetServerList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerList.ProtoReflect.Descriptor instead.
func (*GetServerList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{87}
}

func (x *GetServerList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取各个服的王城信息
type GetServerKingdomList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetServerKingdomList) Reset() {
	*x = GetServerKingdomList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerKingdomList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerKingdomList) ProtoMessage() {}

func (x *GetServerKingdomList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerKingdomList.ProtoReflect.Descriptor instead.
func (*GetServerKingdomList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{88}
}

func (x *GetServerKingdomList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取指定服的网城信息
type GetServerKingdom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32 `protobuf:"varint,1,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"`
}

func (x *GetServerKingdom) Reset() {
	*x = GetServerKingdom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerKingdom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerKingdom) ProtoMessage() {}

func (x *GetServerKingdom) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerKingdom.ProtoReflect.Descriptor instead.
func (*GetServerKingdom) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{89}
}

func (x *GetServerKingdom) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//用户登录
type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId   *int32  `protobuf:"varint,1,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`       // 服务器id
	XDeviceId   *string `protobuf:"bytes,2,opt,name=_device_id,json=DeviceId" json:"_device_id,omitempty"`        // 设备id
	XSeq        *int32  `protobuf:"varint,3,req,name=_seq,json=Seq" json:"_seq,omitempty"`                        // Login序号，0代表程序首次Login
	XClientTime *int64  `protobuf:"varint,4,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"` //客户端时间
	XEvony      *int32  `protobuf:"varint,5,opt,name=_evony,json=Evony" json:"_evony,omitempty"`                  //用户选的文明,如果不选不传
	XIcp        *int32  `protobuf:"varint,6,opt,name=_icp,json=Icp,def=0" json:"_icp,omitempty"`                  //0: 非国内上架版本， 1: 国内上架版本
}

// Default values for Login fields.
const (
	Default_Login_XIcp = int32(0)
)

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{90}
}

func (x *Login) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *Login) GetXDeviceId() string {
	if x != nil && x.XDeviceId != nil {
		return *x.XDeviceId
	}
	return ""
}

func (x *Login) GetXSeq() int32 {
	if x != nil && x.XSeq != nil {
		return *x.XSeq
	}
	return 0
}

func (x *Login) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *Login) GetXEvony() int32 {
	if x != nil && x.XEvony != nil {
		return *x.XEvony
	}
	return 0
}

func (x *Login) GetXIcp() int32 {
	if x != nil && x.XIcp != nil {
		return *x.XIcp
	}
	return Default_Login_XIcp
}

type RequestMapinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32 `protobuf:"varint,1,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //地图所在的服务器
	XWx       *int32 `protobuf:"varint,2,req,name=_wx,json=Wx" json:"_wx,omitempty"`                     //地图的横坐标
	XWy       *int32 `protobuf:"varint,3,req,name=_wy,json=Wy" json:"_wy,omitempty"`                     //地图的纵坐标
	XWidth    *int32 `protobuf:"varint,4,opt,name=_width,json=Width" json:"_width,omitempty"`            //获取地图的宽度，即横行的格子数量
}

func (x *RequestMapinfo) Reset() {
	*x = RequestMapinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMapinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMapinfo) ProtoMessage() {}

func (x *RequestMapinfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMapinfo.ProtoReflect.Descriptor instead.
func (*RequestMapinfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{91}
}

func (x *RequestMapinfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *RequestMapinfo) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *RequestMapinfo) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *RequestMapinfo) GetXWidth() int32 {
	if x != nil && x.XWidth != nil {
		return *x.XWidth
	}
	return 0
}

type PushMapinfoEmoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId      *int32 `protobuf:"varint,1,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                  //地图所在的服务器
	XWx            *int32 `protobuf:"varint,2,req,name=_wx,json=Wx" json:"_wx,omitempty"`                                      //地图的横坐标
	XWy            *int32 `protobuf:"varint,3,req,name=_wy,json=Wy" json:"_wy,omitempty"`                                      //地图的纵坐标
	XWidth         *int32 `protobuf:"varint,4,opt,name=_width,json=Width" json:"_width,omitempty"`                             //获取地图的宽度，即横行的格子数量 不用传
	XEmojiId       *int32 `protobuf:"varint,5,opt,name=_emoji_id,json=EmojiId" json:"_emoji_id,omitempty"`                     // 表情ID
	XPlayerMarchId *int32 `protobuf:"varint,6,opt,name=_player_march_id,json=PlayerMarchId" json:"_player_march_id,omitempty"` // 军队主键ID
}

func (x *PushMapinfoEmoji) Reset() {
	*x = PushMapinfoEmoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMapinfoEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMapinfoEmoji) ProtoMessage() {}

func (x *PushMapinfoEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMapinfoEmoji.ProtoReflect.Descriptor instead.
func (*PushMapinfoEmoji) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{92}
}

func (x *PushMapinfoEmoji) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *PushMapinfoEmoji) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *PushMapinfoEmoji) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *PushMapinfoEmoji) GetXWidth() int32 {
	if x != nil && x.XWidth != nil {
		return *x.XWidth
	}
	return 0
}

func (x *PushMapinfoEmoji) GetXEmojiId() int32 {
	if x != nil && x.XEmojiId != nil {
		return *x.XEmojiId
	}
	return 0
}

func (x *PushMapinfoEmoji) GetXPlayerMarchId() int32 {
	if x != nil && x.XPlayerMarchId != nil {
		return *x.XPlayerMarchId
	}
	return 0
}

type RequestMapinfoNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId   *int32          `protobuf:"varint,1,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"`      //地图所在的服务器
	XMainRegion *pb.MapRegion   `protobuf:"bytes,2,req,name=_main_region,json=MainRegion" json:"_main_region,omitempty"` //主刷新区域
	XSubRegions []*pb.MapRegion `protobuf:"bytes,3,rep,name=_sub_regions,json=SubRegions" json:"_sub_regions,omitempty"` // 从个子刷新区域
}

func (x *RequestMapinfoNew) Reset() {
	*x = RequestMapinfoNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMapinfoNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMapinfoNew) ProtoMessage() {}

func (x *RequestMapinfoNew) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMapinfoNew.ProtoReflect.Descriptor instead.
func (*RequestMapinfoNew) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{93}
}

func (x *RequestMapinfoNew) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *RequestMapinfoNew) GetXMainRegion() *pb.MapRegion {
	if x != nil {
		return x.XMainRegion
	}
	return nil
}

func (x *RequestMapinfoNew) GetXSubRegions() []*pb.MapRegion {
	if x != nil {
		return x.XSubRegions
	}
	return nil
}

type RequestMapinfoBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFieldId *int32 `protobuf:"varint,1,req,name=_field_id,json=FieldId" json:"_field_id,omitempty"` //战场id
	XWx      *int32 `protobuf:"varint,2,req,name=_wx,json=Wx" json:"_wx,omitempty"`                  //地图的横坐标
	XWy      *int32 `protobuf:"varint,3,req,name=_wy,json=Wy" json:"_wy,omitempty"`                  //地图的纵坐标
	XWidth   *int32 `protobuf:"varint,4,opt,name=_width,json=Width" json:"_width,omitempty"`         //获取地图的宽度，即横行的格子数量
}

func (x *RequestMapinfoBattlefield) Reset() {
	*x = RequestMapinfoBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMapinfoBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMapinfoBattlefield) ProtoMessage() {}

func (x *RequestMapinfoBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMapinfoBattlefield.ProtoReflect.Descriptor instead.
func (*RequestMapinfoBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{94}
}

func (x *RequestMapinfoBattlefield) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

func (x *RequestMapinfoBattlefield) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *RequestMapinfoBattlefield) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *RequestMapinfoBattlefield) GetXWidth() int32 {
	if x != nil && x.XWidth != nil {
		return *x.XWidth
	}
	return 0
}

// 使用物品
// 对应的物品仅仅针对可以主动使用的道具
type ConsumeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XNewItemId    *ItemInfo `protobuf:"bytes,1,req,name=_new_item_id,json=NewItemId" json:"_new_item_id,omitempty"`         //使用道具的id,与数量。
	XCooldownType *int32    `protobuf:"varint,2,opt,name=_cooldown_type,json=CooldownType" json:"_cooldown_type,omitempty"` //使用加速道具时的加速类型
	XName         *string   `protobuf:"bytes,3,opt,name=_name,json=Name" json:"_name,omitempty"`                            //使用通缉令的时候传名字
	XOwnNum       *int32    `protobuf:"varint,4,opt,name=_own_num,json=OwnNum" json:"_own_num,omitempty"`                   //客户端拥有道具的数量 用于校验
	XLeftTime     *int32    `protobuf:"varint,5,opt,name=_left_time,json=LeftTime" json:"_left_time,omitempty"`             //加速道具使用前 对象剩余的时间
	XAfterLevel   *int32    `protobuf:"varint,6,opt,name=_after_level,json=AfterLevel" json:"_after_level,omitempty"`       //使用完道具以后 对象的等级
	XEqualItemId  *int32    `protobuf:"varint,7,opt,name=_equal_item_id,json=EqualItemId" json:"_equal_item_id,omitempty"`  //选中的将军令道具id 只有使用自选将军令时有效
	XNewLeftTime  *int64    `protobuf:"varint,8,opt,name=_new_left_time,json=NewLeftTime" json:"_new_left_time,omitempty"`  //40级版本64位校正 加速道具使用前 对象剩余的时间
	XIsFromBuy    *int32    `protobuf:"varint,9,opt,name=_is_from_buy,json=IsFromBuy" json:"_is_from_buy,omitempty"`        //是否是购买并使用  0表示否  大于0表示购买并使用所消耗的钻石,此时只需要扣钻石 不需要去扣道具
}

func (x *ConsumeItem) Reset() {
	*x = ConsumeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeItem) ProtoMessage() {}

func (x *ConsumeItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeItem.ProtoReflect.Descriptor instead.
func (*ConsumeItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{95}
}

func (x *ConsumeItem) GetXNewItemId() *ItemInfo {
	if x != nil {
		return x.XNewItemId
	}
	return nil
}

func (x *ConsumeItem) GetXCooldownType() int32 {
	if x != nil && x.XCooldownType != nil {
		return *x.XCooldownType
	}
	return 0
}

func (x *ConsumeItem) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *ConsumeItem) GetXOwnNum() int32 {
	if x != nil && x.XOwnNum != nil {
		return *x.XOwnNum
	}
	return 0
}

func (x *ConsumeItem) GetXLeftTime() int32 {
	if x != nil && x.XLeftTime != nil {
		return *x.XLeftTime
	}
	return 0
}

func (x *ConsumeItem) GetXAfterLevel() int32 {
	if x != nil && x.XAfterLevel != nil {
		return *x.XAfterLevel
	}
	return 0
}

func (x *ConsumeItem) GetXEqualItemId() int32 {
	if x != nil && x.XEqualItemId != nil {
		return *x.XEqualItemId
	}
	return 0
}

func (x *ConsumeItem) GetXNewLeftTime() int64 {
	if x != nil && x.XNewLeftTime != nil {
		return *x.XNewLeftTime
	}
	return 0
}

func (x *ConsumeItem) GetXIsFromBuy() int32 {
	if x != nil && x.XIsFromBuy != nil {
		return *x.XIsFromBuy
	}
	return 0
}

// 一键加速
type SpeedupBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XNewItemId    []*ItemInfo `protobuf:"bytes,1,rep,name=_new_item_id,json=NewItemId" json:"_new_item_id,omitempty"`         // 使用道具的id,与数量。
	XCooldownType *int32      `protobuf:"varint,2,opt,name=_cooldown_type,json=CooldownType" json:"_cooldown_type,omitempty"` // 使用加速道具时的加速类型
	XLeftTime     *int32      `protobuf:"varint,3,opt,name=_left_time,json=LeftTime" json:"_left_time,omitempty"`             // 加速道具使用前 对象剩余的时间
	XNewLeftTime  *int64      `protobuf:"varint,4,opt,name=_new_left_time,json=NewLeftTime" json:"_new_left_time,omitempty"`  // 64位校正 加速道具使用前 对象剩余的时间
}

func (x *SpeedupBatch) Reset() {
	*x = SpeedupBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupBatch) ProtoMessage() {}

func (x *SpeedupBatch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupBatch.ProtoReflect.Descriptor instead.
func (*SpeedupBatch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{96}
}

func (x *SpeedupBatch) GetXNewItemId() []*ItemInfo {
	if x != nil {
		return x.XNewItemId
	}
	return nil
}

func (x *SpeedupBatch) GetXCooldownType() int32 {
	if x != nil && x.XCooldownType != nil {
		return *x.XCooldownType
	}
	return 0
}

func (x *SpeedupBatch) GetXLeftTime() int32 {
	if x != nil && x.XLeftTime != nil {
		return *x.XLeftTime
	}
	return 0
}

func (x *SpeedupBatch) GetXNewLeftTime() int64 {
	if x != nil && x.XNewLeftTime != nil {
		return *x.XNewLeftTime
	}
	return 0
}

type SpeedupTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId    *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`       // 建筑位置
	XTypeId        *int32 `protobuf:"varint,2,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                   // 科技id
	XCurrentLevel  *int32 `protobuf:"varint,3,req,name=_current_level,json=CurrentLevel" json:"_current_level,omitempty"` //当前等级
	XGold          *int64 `protobuf:"varint,4,req,name=_gold,json=Gold" json:"_gold,omitempty"`                           //客户端计算的金币消耗数量
	XStartTime     *int64 `protobuf:"varint,5,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"`
	XRealStartTime *int64 `protobuf:"varint,6,opt,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"`
	XClientTime    *int64 `protobuf:"varint,7,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`
	XCsDeltaTime   *int64 `protobuf:"varint,8,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`
	XCostTime      *int32 `protobuf:"varint,9,opt,name=_cost_time,json=CostTime" json:"_cost_time,omitempty"`
}

func (x *SpeedupTech) Reset() {
	*x = SpeedupTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupTech) ProtoMessage() {}

func (x *SpeedupTech) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupTech.ProtoReflect.Descriptor instead.
func (*SpeedupTech) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{97}
}

func (x *SpeedupTech) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SpeedupTech) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *SpeedupTech) GetXCurrentLevel() int32 {
	if x != nil && x.XCurrentLevel != nil {
		return *x.XCurrentLevel
	}
	return 0
}

func (x *SpeedupTech) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SpeedupTech) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *SpeedupTech) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

func (x *SpeedupTech) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SpeedupTech) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *SpeedupTech) GetXCostTime() int32 {
	if x != nil && x.XCostTime != nil {
		return *x.XCostTime
	}
	return 0
}

//从对应的随机出现的商品铺中购买。
type ShopConsume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSid    *uint32 `protobuf:"varint,1,req,name=_sid,json=Sid" json:"_sid,omitempty"`          // shop的id
	XSlotid *uint32 `protobuf:"varint,2,req,name=_slotid,json=Slotid" json:"_slotid,omitempty"` // 背包格子的id.
	XAmount *int32  `protobuf:"varint,3,req,name=_amount,json=Amount" json:"_amount,omitempty"` // 要买的物品数量
}

func (x *ShopConsume) Reset() {
	*x = ShopConsume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopConsume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopConsume) ProtoMessage() {}

func (x *ShopConsume) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopConsume.ProtoReflect.Descriptor instead.
func (*ShopConsume) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{98}
}

func (x *ShopConsume) GetXSid() uint32 {
	if x != nil && x.XSid != nil {
		return *x.XSid
	}
	return 0
}

func (x *ShopConsume) GetXSlotid() uint32 {
	if x != nil && x.XSlotid != nil {
		return *x.XSlotid
	}
	return 0
}

func (x *ShopConsume) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

type BuyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XNewItenId *ItemInfo `protobuf:"bytes,1,req,name=_new_iten_id,json=NewItenId" json:"_new_iten_id,omitempty"` //购买的item id与数量
	XFromStore *int32    `protobuf:"varint,2,opt,name=_from_store,json=FromStore" json:"_from_store,omitempty"`  //从付费商店中购买
}

func (x *BuyItem) Reset() {
	*x = BuyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyItem) ProtoMessage() {}

func (x *BuyItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyItem.ProtoReflect.Descriptor instead.
func (*BuyItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{99}
}

func (x *BuyItem) GetXNewItenId() *ItemInfo {
	if x != nil {
		return x.XNewItenId
	}
	return nil
}

func (x *BuyItem) GetXFromStore() int32 {
	if x != nil && x.XFromStore != nil {
		return *x.XFromStore
	}
	return 0
}

type HealSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop       []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                    // 伤兵各兵种
	XPositionId  *int32      `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`  // 建筑位置
	XImmediately *int32      `protobuf:"varint,3,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"` // 是否马上完成
	XResA        *int64      `protobuf:"varint,4,req,name=_resA,json=ResA" json:"_resA,omitempty"`                      //客户端计算的resA消耗数量
	XResB        *int64      `protobuf:"varint,5,req,name=_resB,json=ResB" json:"_resB,omitempty"`                      //客户端计算的resB消耗数量
	XResC        *int64      `protobuf:"varint,6,req,name=_resC,json=ResC" json:"_resC,omitempty"`                      //客户端计算的resC消耗数量
	XResD        *int64      `protobuf:"varint,7,req,name=_resD,json=ResD" json:"_resD,omitempty"`                      //客户端计算的resD消耗数量
	XGold        *int64      `protobuf:"varint,8,req,name=_gold,json=Gold" json:"_gold,omitempty"`                      //客户端计算的金币消耗数量
	XCostTime    *int32      `protobuf:"varint,9,req,name=_cost_time,json=CostTime" json:"_cost_time,omitempty"`        //客户端计算的耗时
	XResE        *int64      `protobuf:"varint,10,req,name=_resE,json=ResE" json:"_resE,omitempty"`                     //客户端计算的resE消耗数量
	XHealType    *int32      `protobuf:"varint,11,opt,name=_heal_type,json=HealType" json:"_heal_type,omitempty"`       // 治疗类型 0：治疗伤兵 1：修复器械
}

func (x *HealSoldiers) Reset() {
	*x = HealSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealSoldiers) ProtoMessage() {}

func (x *HealSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealSoldiers.ProtoReflect.Descriptor instead.
func (*HealSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{100}
}

func (x *HealSoldiers) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *HealSoldiers) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *HealSoldiers) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

func (x *HealSoldiers) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *HealSoldiers) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *HealSoldiers) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *HealSoldiers) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *HealSoldiers) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *HealSoldiers) GetXCostTime() int32 {
	if x != nil && x.XCostTime != nil {
		return *x.XCostTime
	}
	return 0
}

func (x *HealSoldiers) GetXResE() int64 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

func (x *HealSoldiers) GetXHealType() int32 {
	if x != nil && x.XHealType != nil {
		return *x.XHealType
	}
	return 0
}

type AmbulanceSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop          []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                               // 伤兵各兵种
	XPositionId     *int32      `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`             // 建筑位置
	XItem           *ItemInfo   `protobuf:"bytes,3,req,name=_item,json=Item" json:"_item,omitempty"`                                  // 使用道具的id,与数量。
	XAmbulanceTimes *int32      `protobuf:"varint,4,req,name=_ambulance_times,json=AmbulanceTimes" json:"_ambulance_times,omitempty"` // 急救次数
}

func (x *AmbulanceSoldiers) Reset() {
	*x = AmbulanceSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmbulanceSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmbulanceSoldiers) ProtoMessage() {}

func (x *AmbulanceSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmbulanceSoldiers.ProtoReflect.Descriptor instead.
func (*AmbulanceSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{101}
}

func (x *AmbulanceSoldiers) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *AmbulanceSoldiers) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *AmbulanceSoldiers) GetXItem() *ItemInfo {
	if x != nil {
		return x.XItem
	}
	return nil
}

func (x *AmbulanceSoldiers) GetXAmbulanceTimes() int32 {
	if x != nil && x.XAmbulanceTimes != nil {
		return *x.XAmbulanceTimes
	}
	return 0
}

type CallbackSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"` // 伤兵各兵种
}

func (x *CallbackSoldiers) Reset() {
	*x = CallbackSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackSoldiers) ProtoMessage() {}

func (x *CallbackSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackSoldiers.ProtoReflect.Descriptor instead.
func (*CallbackSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{102}
}

func (x *CallbackSoldiers) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

type ReviveSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"` // 伤兵各兵种
}

func (x *ReviveSoldiers) Reset() {
	*x = ReviveSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviveSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviveSoldiers) ProtoMessage() {}

func (x *ReviveSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviveSoldiers.ProtoReflect.Descriptor instead.
func (*ReviveSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{103}
}

func (x *ReviveSoldiers) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

type SpeedupHealSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId    *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` //建筑位置
	XGold          *int64 `protobuf:"varint,2,req,name=_gold,json=Gold" json:"_gold,omitempty"`                     //客户端计算的金币消耗数量
	XStartTime     *int64 `protobuf:"varint,3,req,name=_start_time,json=StartTime" json:"_start_time,omitempty"`
	XRealStartTime *int64 `protobuf:"varint,4,req,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"`
	XClientTime    *int64 `protobuf:"varint,5,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`
	XLeftTime      *int64 `protobuf:"varint,7,req,name=_left_time,json=LeftTime" json:"_left_time,omitempty"`
}

func (x *SpeedupHealSoldiers) Reset() {
	*x = SpeedupHealSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupHealSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupHealSoldiers) ProtoMessage() {}

func (x *SpeedupHealSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupHealSoldiers.ProtoReflect.Descriptor instead.
func (*SpeedupHealSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{104}
}

func (x *SpeedupHealSoldiers) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SpeedupHealSoldiers) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SpeedupHealSoldiers) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *SpeedupHealSoldiers) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

func (x *SpeedupHealSoldiers) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SpeedupHealSoldiers) GetXLeftTime() int64 {
	if x != nil && x.XLeftTime != nil {
		return *x.XLeftTime
	}
	return 0
}

type SurrenderSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop      []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                   // 俘虏各兵种
	XPositionId *int32      `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
	XUseGold    *int64      `protobuf:"varint,3,req,name=_use_gold,json=UseGold" json:"_use_gold,omitempty"`          // 是否金币招降
	XGold       *int64      `protobuf:"varint,4,opt,name=_gold,json=Gold" json:"_gold,omitempty"`                     // 消耗钻石
}

func (x *SurrenderSoldiers) Reset() {
	*x = SurrenderSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurrenderSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderSoldiers) ProtoMessage() {}

func (x *SurrenderSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderSoldiers.ProtoReflect.Descriptor instead.
func (*SurrenderSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{105}
}

func (x *SurrenderSoldiers) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *SurrenderSoldiers) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SurrenderSoldiers) GetXUseGold() int64 {
	if x != nil && x.XUseGold != nil {
		return *x.XUseGold
	}
	return 0
}

func (x *SurrenderSoldiers) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

type Work struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop      []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                   // 俘虏各兵种
	XPositionId *int32      `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
	XFree       *int32      `protobuf:"varint,3,opt,name=_free,json=Free,def=0" json:"_free,omitempty"`               // 释放
	XUseGold    *int64      `protobuf:"varint,4,req,name=_use_gold,json=UseGold" json:"_use_gold,omitempty"`          // 是否金币招降
}

// Default values for Work fields.
const (
	Default_Work_XFree = int32(0)
)

func (x *Work) Reset() {
	*x = Work{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Work) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work) ProtoMessage() {}

func (x *Work) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work.ProtoReflect.Descriptor instead.
func (*Work) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{106}
}

func (x *Work) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *Work) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *Work) GetXFree() int32 {
	if x != nil && x.XFree != nil {
		return *x.XFree
	}
	return Default_Work_XFree
}

func (x *Work) GetXUseGold() int64 {
	if x != nil && x.XUseGold != nil {
		return *x.XUseGold
	}
	return 0
}

type CancelBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
}

func (x *CancelBuilding) Reset() {
	*x = CancelBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBuilding) ProtoMessage() {}

func (x *CancelBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBuilding.ProtoReflect.Descriptor instead.
func (*CancelBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{107}
}

func (x *CancelBuilding) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

type CancelTrain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
}

func (x *CancelTrain) Reset() {
	*x = CancelTrain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTrain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTrain) ProtoMessage() {}

func (x *CancelTrain) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTrain.ProtoReflect.Descriptor instead.
func (*CancelTrain) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{108}
}

func (x *CancelTrain) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

type CancelTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId   *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`       // 建筑位置
	XTypeId       *int32 `protobuf:"varint,2,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                   //科技类型
	XCurrentLevel *int32 `protobuf:"varint,3,req,name=_current_level,json=CurrentLevel" json:"_current_level,omitempty"` //当前等级
	XResA         *int64 `protobuf:"varint,4,req,name=_resA,json=ResA" json:"_resA,omitempty"`                           //客户端计算的resA返回数量
	XResB         *int64 `protobuf:"varint,5,req,name=_resB,json=ResB" json:"_resB,omitempty"`                           //客户端计算的resB返回数量
	XResC         *int64 `protobuf:"varint,6,req,name=_resC,json=ResC" json:"_resC,omitempty"`                           //客户端计算的resC返回数量
	XResD         *int64 `protobuf:"varint,7,req,name=_resD,json=ResD" json:"_resD,omitempty"`                           //客户端计算的resD返回数量
	XResE         *int64 `protobuf:"varint,8,req,name=_resE,json=ResE" json:"_resE,omitempty"`                           //客户端计算的resE返回数量
}

func (x *CancelTech) Reset() {
	*x = CancelTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTech) ProtoMessage() {}

func (x *CancelTech) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTech.ProtoReflect.Descriptor instead.
func (*CancelTech) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{109}
}

func (x *CancelTech) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *CancelTech) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *CancelTech) GetXCurrentLevel() int32 {
	if x != nil && x.XCurrentLevel != nil {
		return *x.XCurrentLevel
	}
	return 0
}

func (x *CancelTech) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *CancelTech) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *CancelTech) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *CancelTech) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *CancelTech) GetXResE() int64 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

type CancelEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
	XItemId     *int32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             // 装备id
}

func (x *CancelEquip) Reset() {
	*x = CancelEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelEquip) ProtoMessage() {}

func (x *CancelEquip) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelEquip.ProtoReflect.Descriptor instead.
func (*CancelEquip) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{110}
}

func (x *CancelEquip) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *CancelEquip) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//设置push通知
type SetPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSwitchType       *pb.PushSwitchType       `protobuf:"varint,1,req,name=_switch_type,json=SwitchType,enum=Msg.PushSwitchType" json:"_switch_type,omitempty"`                         //push开关类型
	XNotificationType *pb.PushNotificationType `protobuf:"varint,2,req,name=_notification_type,json=NotificationType,enum=Msg.PushNotificationType" json:"_notification_type,omitempty"` //push通知的种类
}

func (x *SetPush) Reset() {
	*x = SetPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPush) ProtoMessage() {}

func (x *SetPush) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPush.ProtoReflect.Descriptor instead.
func (*SetPush) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{111}
}

func (x *SetPush) GetXSwitchType() pb.PushSwitchType {
	if x != nil && x.XSwitchType != nil {
		return *x.XSwitchType
	}
	return pb.PushSwitchType(0)
}

func (x *SetPush) GetXNotificationType() pb.PushNotificationType {
	if x != nil && x.XNotificationType != nil {
		return *x.XNotificationType
	}
	return pb.PushNotificationType(0)
}

//兑换礼包
type GiftExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XConversionCode *string `protobuf:"bytes,1,opt,name=_conversion_code,json=ConversionCode" json:"_conversion_code,omitempty"` //兑换码
}

func (x *GiftExchange) Reset() {
	*x = GiftExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftExchange) ProtoMessage() {}

func (x *GiftExchange) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftExchange.ProtoReflect.Descriptor instead.
func (*GiftExchange) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{112}
}

func (x *GiftExchange) GetXConversionCode() string {
	if x != nil && x.XConversionCode != nil {
		return *x.XConversionCode
	}
	return ""
}

type PeaceShield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //物品ID
}

func (x *PeaceShield) Reset() {
	*x = PeaceShield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeaceShield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeaceShield) ProtoMessage() {}

func (x *PeaceShield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeaceShield.ProtoReflect.Descriptor instead.
func (*PeaceShield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{113}
}

func (x *PeaceShield) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

// 删邮件
type DelMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          []uint32        `protobuf:"varint,1,rep,name=_id,json=Id" json:"_id,omitempty"`                                                           // 邮件ID
	XMailType    *pb.MailType    `protobuf:"varint,2,opt,name=_mail_type,json=MailType,enum=Msg.MailType,def=0" json:"_mail_type,omitempty"`               // 系统邮件或者私人邮件
	XMailTabType *pb.MailTabType `protobuf:"varint,3,opt,name=_mail_tab_type,json=MailTabType,enum=Msg.MailTabType,def=0" json:"_mail_tab_type,omitempty"` // 邮件页签类型
}

// Default values for DelMail fields.
const (
	Default_DelMail_XMailType    = pb.MailType(0)    // pb.MailType_system
	Default_DelMail_XMailTabType = pb.MailTabType(0) // pb.MailTabType_unknow_mail_tab_type
)

func (x *DelMail) Reset() {
	*x = DelMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMail) ProtoMessage() {}

func (x *DelMail) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMail.ProtoReflect.Descriptor instead.
func (*DelMail) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{114}
}

func (x *DelMail) GetXId() []uint32 {
	if x != nil {
		return x.XId
	}
	return nil
}

func (x *DelMail) GetXMailType() pb.MailType {
	if x != nil && x.XMailType != nil {
		return *x.XMailType
	}
	return Default_DelMail_XMailType
}

func (x *DelMail) GetXMailTabType() pb.MailTabType {
	if x != nil && x.XMailTabType != nil {
		return *x.XMailTabType
	}
	return Default_DelMail_XMailTabType
}

//开始一个每日任务
type StartDailyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId        *int32  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                        // 每日任务ID
	XLine      *uint32 `protobuf:"varint,2,req,name=_line,json=Line" json:"_line,omitempty"`                  // 任务线
	XInstantly *uint32 `protobuf:"varint,3,opt,name=_instantly,json=Instantly" json:"_instantly,omitempty"`   //是否立即完成
	XGeneralId *int32  `protobuf:"varint,4,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //指派的将军id
}

func (x *StartDailyTask) Reset() {
	*x = StartDailyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDailyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDailyTask) ProtoMessage() {}

func (x *StartDailyTask) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDailyTask.ProtoReflect.Descriptor instead.
func (*StartDailyTask) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{115}
}

func (x *StartDailyTask) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *StartDailyTask) GetXLine() uint32 {
	if x != nil && x.XLine != nil {
		return *x.XLine
	}
	return 0
}

func (x *StartDailyTask) GetXInstantly() uint32 {
	if x != nil && x.XInstantly != nil {
		return *x.XInstantly
	}
	return 0
}

func (x *StartDailyTask) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

//获取每日任务奖励
type DailyTaskRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId   *int32  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`       // 每日任务ID
	XLine *uint32 `protobuf:"varint,2,req,name=_line,json=Line" json:"_line,omitempty"` // 任务线
}

func (x *DailyTaskRewards) Reset() {
	*x = DailyTaskRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTaskRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTaskRewards) ProtoMessage() {}

func (x *DailyTaskRewards) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTaskRewards.ProtoReflect.Descriptor instead.
func (*DailyTaskRewards) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{116}
}

func (x *DailyTaskRewards) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *DailyTaskRewards) GetXLine() uint32 {
	if x != nil && x.XLine != nil {
		return *x.XLine
	}
	return 0
}

// 献祭接口
type Sacrifice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`          //祭祀配置表中的ID
	XOrder *int32  `protobuf:"varint,2,req,name=_order,json=Order" json:"_order,omitempty"` //祭祀配置表中的位置 1 2 3
	XGold  *uint32 `protobuf:"varint,3,req,name=_gold,json=Gold" json:"_gold,omitempty"`    //是否使用金币 0否 1是
	XTimes *int32  `protobuf:"varint,4,opt,name=_times,json=Times" json:"_times,omitempty"` //当前次数
	XNum   *int32  `protobuf:"varint,5,opt,name=_num,json=Num" json:"_num,omitempty"`       //一次性祭祀次数
}

func (x *Sacrifice) Reset() {
	*x = Sacrifice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sacrifice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sacrifice) ProtoMessage() {}

func (x *Sacrifice) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sacrifice.ProtoReflect.Descriptor instead.
func (*Sacrifice) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{117}
}

func (x *Sacrifice) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *Sacrifice) GetXOrder() int32 {
	if x != nil && x.XOrder != nil {
		return *x.XOrder
	}
	return 0
}

func (x *Sacrifice) GetXGold() uint32 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *Sacrifice) GetXTimes() int32 {
	if x != nil && x.XTimes != nil {
		return *x.XTimes
	}
	return 0
}

func (x *Sacrifice) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

// 收税接口
type Taxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType           *pb.ItemResourceType `protobuf:"varint,1,req,name=_type,json=Type,enum=Msg.ItemResourceType,def=1" json:"_type,omitempty"`      //收税的资源类型
	XTimes          *uint32              `protobuf:"varint,2,req,name=_times,json=Times" json:"_times,omitempty"`                                   //当天收税的次数
	XGold           *int64               `protobuf:"varint,3,req,name=_gold,json=Gold" json:"_gold,omitempty"`                                      //对应次数使用的金币数量。
	XTransportLevel *uint32              `protobuf:"varint,4,req,name=_transport_level,json=TransportLevel" json:"_transport_level,omitempty"`      //建筑等级
	XBaseNum        *uint32              `protobuf:"varint,5,opt,name=_base_num,json=BaseNum" json:"_base_num,omitempty"`                           //该次收税的基础数据
	XFreeColectAll  *int32               `protobuf:"varint,6,opt,name=_free_colect_all,json=FreeColectAll,def=0" json:"_free_colect_all,omitempty"` //1: 一键征收，0： 普通征收
	XNewVer         *int32               `protobuf:"varint,7,opt,name=_new_ver,json=NewVer,def=0" json:"_new_ver,omitempty"`                        //0: 老的金币征收策略，1：新的金币征收策略
	XTaxNum         *int32               `protobuf:"varint,8,opt,name=_tax_num,json=TaxNum" json:"_tax_num,omitempty"`                              //连续收税的次数
}

// Default values for Taxes fields.
const (
	Default_Taxes_XType          = pb.ItemResourceType(1) // pb.ItemResourceType_resA
	Default_Taxes_XFreeColectAll = int32(0)
	Default_Taxes_XNewVer        = int32(0)
)

func (x *Taxes) Reset() {
	*x = Taxes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxes) ProtoMessage() {}

func (x *Taxes) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxes.ProtoReflect.Descriptor instead.
func (*Taxes) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{118}
}

func (x *Taxes) GetXType() pb.ItemResourceType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_Taxes_XType
}

func (x *Taxes) GetXTimes() uint32 {
	if x != nil && x.XTimes != nil {
		return *x.XTimes
	}
	return 0
}

func (x *Taxes) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *Taxes) GetXTransportLevel() uint32 {
	if x != nil && x.XTransportLevel != nil {
		return *x.XTransportLevel
	}
	return 0
}

func (x *Taxes) GetXBaseNum() uint32 {
	if x != nil && x.XBaseNum != nil {
		return *x.XBaseNum
	}
	return 0
}

func (x *Taxes) GetXFreeColectAll() int32 {
	if x != nil && x.XFreeColectAll != nil {
		return *x.XFreeColectAll
	}
	return Default_Taxes_XFreeColectAll
}

func (x *Taxes) GetXNewVer() int32 {
	if x != nil && x.XNewVer != nil {
		return *x.XNewVer
	}
	return Default_Taxes_XNewVer
}

func (x *Taxes) GetXTaxNum() int32 {
	if x != nil && x.XTaxNum != nil {
		return *x.XTaxNum
	}
	return 0
}

type FavoriteMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *uint32         `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                                           // 邮件id
	XMailType    *pb.MailType    `protobuf:"varint,2,opt,name=_mail_type,json=MailType,enum=Msg.MailType,def=0" json:"_mail_type,omitempty"`               // 系统邮件或者私人邮件
	XFavorite    *int32          `protobuf:"varint,3,req,name=_favorite,json=Favorite" json:"_favorite,omitempty"`                                         // 0. 取消, 1. 收藏
	XMailTabType *pb.MailTabType `protobuf:"varint,4,opt,name=_mail_tab_type,json=MailTabType,enum=Msg.MailTabType,def=0" json:"_mail_tab_type,omitempty"` // 邮件页签类型
}

// Default values for FavoriteMail fields.
const (
	Default_FavoriteMail_XMailType    = pb.MailType(0)    // pb.MailType_system
	Default_FavoriteMail_XMailTabType = pb.MailTabType(0) // pb.MailTabType_unknow_mail_tab_type
)

func (x *FavoriteMail) Reset() {
	*x = FavoriteMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteMail) ProtoMessage() {}

func (x *FavoriteMail) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteMail.ProtoReflect.Descriptor instead.
func (*FavoriteMail) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{119}
}

func (x *FavoriteMail) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *FavoriteMail) GetXMailType() pb.MailType {
	if x != nil && x.XMailType != nil {
		return *x.XMailType
	}
	return Default_FavoriteMail_XMailType
}

func (x *FavoriteMail) GetXFavorite() int32 {
	if x != nil && x.XFavorite != nil {
		return *x.XFavorite
	}
	return 0
}

func (x *FavoriteMail) GetXMailTabType() pb.MailTabType {
	if x != nil && x.XMailTabType != nil {
		return *x.XMailTabType
	}
	return Default_FavoriteMail_XMailTabType
}

type GetFavoritelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                 *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                                     // 邮件id (字段已废弃,随便传个值)
	XReportId           *uint32 `protobuf:"varint,2,req,name=_report_id,json=ReportId" json:"_report_id,omitempty"`                                 // 报告id (字段已废弃,随便传个值)
	XFavoriteTime       *int64  `protobuf:"varint,3,opt,name=_favorite_time,json=FavoriteTime" json:"_favorite_time,omitempty"`                     //收藏时间(普通邮件)
	XReportFavoriteTime *int64  `protobuf:"varint,4,opt,name=_report_favorite_time,json=ReportFavoriteTime" json:"_report_favorite_time,omitempty"` //收藏时间(报告邮件)
}

func (x *GetFavoritelist) Reset() {
	*x = GetFavoritelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoritelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoritelist) ProtoMessage() {}

func (x *GetFavoritelist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoritelist.ProtoReflect.Descriptor instead.
func (*GetFavoritelist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{120}
}

func (x *GetFavoritelist) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GetFavoritelist) GetXReportId() uint32 {
	if x != nil && x.XReportId != nil {
		return *x.XReportId
	}
	return 0
}

func (x *GetFavoritelist) GetXFavoriteTime() int64 {
	if x != nil && x.XFavoriteTime != nil {
		return *x.XFavoriteTime
	}
	return 0
}

func (x *GetFavoritelist) GetXReportFavoriteTime() int64 {
	if x != nil && x.XReportFavoriteTime != nil {
		return *x.XReportFavoriteTime
	}
	return 0
}

type ChatHistoryFecth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChatHistoryFecth *chatmessage.ChatHistoryFecth `protobuf:"bytes,1,req,name=_chat_history_fecth,json=ChatHistoryFecth" json:"_chat_history_fecth,omitempty"` //获取聊天历史记录
}

func (x *ChatHistoryFecth) Reset() {
	*x = ChatHistoryFecth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryFecth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryFecth) ProtoMessage() {}

func (x *ChatHistoryFecth) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryFecth.ProtoReflect.Descriptor instead.
func (*ChatHistoryFecth) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{121}
}

func (x *ChatHistoryFecth) GetXChatHistoryFecth() *chatmessage.ChatHistoryFecth {
	if x != nil {
		return x.XChatHistoryFecth
	}
	return nil
}

type ReportMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XReportMessage *chatmessage.ReportMessage `protobuf:"bytes,1,req,name=_report_message,json=ReportMessage" json:"_report_message,omitempty"` //举报消息
}

func (x *ReportMessage) Reset() {
	*x = ReportMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessage) ProtoMessage() {}

func (x *ReportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessage.ProtoReflect.Descriptor instead.
func (*ReportMessage) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{122}
}

func (x *ReportMessage) GetXReportMessage() *chatmessage.ReportMessage {
	if x != nil {
		return x.XReportMessage
	}
	return nil
}

type ApplyHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType       *pb.HelpType `protobuf:"varint,1,req,name=_type,json=Type,enum=Msg.HelpType" json:"_type,omitempty"`   // 帮助类型
	XPositionId *int32       `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
	XGuildId    *uint32      `protobuf:"varint,3,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`          // 联盟id
}

func (x *ApplyHelp) Reset() {
	*x = ApplyHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyHelp) ProtoMessage() {}

func (x *ApplyHelp) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyHelp.ProtoReflect.Descriptor instead.
func (*ApplyHelp) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{123}
}

func (x *ApplyHelp) GetXType() pb.HelpType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return pb.HelpType(0)
}

func (x *ApplyHelp) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *ApplyHelp) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

type GetHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` // 联盟id
}

func (x *GetHelp) Reset() {
	*x = GetHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHelp) ProtoMessage() {}

func (x *GetHelp) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHelp.ProtoReflect.Descriptor instead.
func (*GetHelp) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{124}
}

func (x *GetHelp) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

type ProvideHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` // 联盟id
	XHelpId  *uint32 `protobuf:"varint,2,req,name=_help_id,json=HelpId" json:"_help_id,omitempty"`    // 帮助id 0代表帮助所有
}

func (x *ProvideHelp) Reset() {
	*x = ProvideHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvideHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideHelp) ProtoMessage() {}

func (x *ProvideHelp) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideHelp.ProtoReflect.Descriptor instead.
func (*ProvideHelp) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{125}
}

func (x *ProvideHelp) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *ProvideHelp) GetXHelpId() uint32 {
	if x != nil && x.XHelpId != nil {
		return *x.XHelpId
	}
	return 0
}

type SyncTaxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *uint32 `protobuf:"varint,1,req,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *SyncTaxInfo) Reset() {
	*x = SyncTaxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTaxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTaxInfo) ProtoMessage() {}

func (x *SyncTaxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTaxInfo.ProtoReflect.Descriptor instead.
func (*SyncTaxInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{126}
}

func (x *SyncTaxInfo) GetXFlag() uint32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//向联盟玩家提供资源援助
type ResourceTransport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId  *uint32          `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`    //联盟ID
	XUserId   *uint32          `protobuf:"varint,2,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`       //用户ID
	XTargetWx *int32           `protobuf:"varint,3,req,name=_target_wx,json=TargetWx" json:"_target_wx,omitempty"` //目标的横坐标
	XTargetWy *int32           `protobuf:"varint,4,req,name=_target_wy,json=TargetWy" json:"_target_wy,omitempty"` //目标的纵坐标
	XResource *pb.ResourceInfo `protobuf:"bytes,5,req,name=_resource,json=Resource" json:"_resource,omitempty"`    //运输的资源数据
}

func (x *ResourceTransport) Reset() {
	*x = ResourceTransport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTransport) ProtoMessage() {}

func (x *ResourceTransport) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTransport.ProtoReflect.Descriptor instead.
func (*ResourceTransport) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{127}
}

func (x *ResourceTransport) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *ResourceTransport) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *ResourceTransport) GetXTargetWx() int32 {
	if x != nil && x.XTargetWx != nil {
		return *x.XTargetWx
	}
	return 0
}

func (x *ResourceTransport) GetXTargetWy() int32 {
	if x != nil && x.XTargetWy != nil {
		return *x.XTargetWy
	}
	return 0
}

func (x *ResourceTransport) GetXResource() *pb.ResourceInfo {
	if x != nil {
		return x.XResource
	}
	return nil
}

//获得军事援助列表
type GetArmySupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GetArmySupport) Reset() {
	*x = GetArmySupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArmySupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArmySupport) ProtoMessage() {}

func (x *GetArmySupport) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArmySupport.ProtoReflect.Descriptor instead.
func (*GetArmySupport) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{128}
}

func (x *GetArmySupport) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//遣返驻军
type RepatriateArmySupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId       *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`                   //联盟ID
	XTroopId       *uint32 `protobuf:"varint,2,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"`                   //驻军ID，为0时全部遣返
	XKingcastle    *int32  `protobuf:"varint,3,opt,name=_kingcastle,json=Kingcastle" json:"_kingcastle,omitempty"`            //0:联盟支援的驻军，1：王城驻军 2：联盟城市的驻军
	XGuildBuilding *int32  `protobuf:"varint,4,opt,name=_guild_building,json=GuildBuilding" json:"_guild_building,omitempty"` //联盟建筑id
	XServerId      *int32  `protobuf:"varint,5,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                //操作的服务器id
}

func (x *RepatriateArmySupport) Reset() {
	*x = RepatriateArmySupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepatriateArmySupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepatriateArmySupport) ProtoMessage() {}

func (x *RepatriateArmySupport) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepatriateArmySupport.ProtoReflect.Descriptor instead.
func (*RepatriateArmySupport) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{129}
}

func (x *RepatriateArmySupport) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *RepatriateArmySupport) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

func (x *RepatriateArmySupport) GetXKingcastle() int32 {
	if x != nil && x.XKingcastle != nil {
		return *x.XKingcastle
	}
	return 0
}

func (x *RepatriateArmySupport) GetXGuildBuilding() int32 {
	if x != nil && x.XGuildBuilding != nil {
		return *x.XGuildBuilding
	}
	return 0
}

func (x *RepatriateArmySupport) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//发起联盟合战请求
type CreateUnionWar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId  *uint32     `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`    //联盟ID
	XWaitTime *uint32     `protobuf:"varint,2,req,name=_wait_time,json=WaitTime" json:"_wait_time,omitempty"` //等待时间(秒)
	XTroop    []*pb.Troop `protobuf:"bytes,3,rep,name=_troop,json=Troop" json:"_troop,omitempty"`             //参与的部队
}

func (x *CreateUnionWar) Reset() {
	*x = CreateUnionWar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUnionWar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnionWar) ProtoMessage() {}

func (x *CreateUnionWar) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnionWar.ProtoReflect.Descriptor instead.
func (*CreateUnionWar) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{130}
}

func (x *CreateUnionWar) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *CreateUnionWar) GetXWaitTime() uint32 {
	if x != nil && x.XWaitTime != nil {
		return *x.XWaitTime
	}
	return 0
}

func (x *CreateUnionWar) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

//加入联盟合战
type JoinUnionWar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32     `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
	XWarId   *uint32     `protobuf:"varint,2,req,name=_war_id,json=WarId" json:"_war_id,omitempty"`       //合战的ID
	XTroop   []*pb.Troop `protobuf:"bytes,3,rep,name=_troop,json=Troop" json:"_troop,omitempty"`          //参与的部队
}

func (x *JoinUnionWar) Reset() {
	*x = JoinUnionWar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinUnionWar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinUnionWar) ProtoMessage() {}

func (x *JoinUnionWar) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinUnionWar.ProtoReflect.Descriptor instead.
func (*JoinUnionWar) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{131}
}

func (x *JoinUnionWar) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *JoinUnionWar) GetXWarId() uint32 {
	if x != nil && x.XWarId != nil {
		return *x.XWarId
	}
	return 0
}

func (x *JoinUnionWar) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

//取消合战
type CancelUnionWar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWarId *uint32 `protobuf:"varint,1,req,name=_war_id,json=WarId" json:"_war_id,omitempty"` //合战的ID
}

func (x *CancelUnionWar) Reset() {
	*x = CancelUnionWar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUnionWar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUnionWar) ProtoMessage() {}

func (x *CancelUnionWar) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUnionWar.ProtoReflect.Descriptor instead.
func (*CancelUnionWar) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{132}
}

func (x *CancelUnionWar) GetXWarId() uint32 {
	if x != nil && x.XWarId != nil {
		return *x.XWarId
	}
	return 0
}

//退出联盟合战
type QuitUnionWar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWarId *uint32 `protobuf:"varint,1,req,name=_war_id,json=WarId" json:"_war_id,omitempty"` //合战的ID
}

func (x *QuitUnionWar) Reset() {
	*x = QuitUnionWar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitUnionWar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitUnionWar) ProtoMessage() {}

func (x *QuitUnionWar) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitUnionWar.ProtoReflect.Descriptor instead.
func (*QuitUnionWar) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{133}
}

func (x *QuitUnionWar) GetXWarId() uint32 {
	if x != nil && x.XWarId != nil {
		return *x.XWarId
	}
	return 0
}

//获取联盟战争列表
type GuildWarList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
	XFieldId *int32  `protobuf:"varint,2,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"` //不填或者0 不在战场
}

func (x *GuildWarList) Reset() {
	*x = GuildWarList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildWarList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildWarList) ProtoMessage() {}

func (x *GuildWarList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildWarList.ProtoReflect.Descriptor instead.
func (*GuildWarList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{134}
}

func (x *GuildWarList) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GuildWarList) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//同步push token
type PushToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType          *PushTokenType `protobuf:"varint,1,req,name=_type,json=Type,enum=MsgUp.PushTokenType" json:"_type,omitempty"` //token类型
	XToken         *string        `protobuf:"bytes,2,opt,name=_token,json=Token" json:"_token,omitempty"`
	XDeviceid      *string        `protobuf:"bytes,3,opt,name=_deviceid,json=Deviceid" json:"_deviceid,omitempty"`
	XGetuiClientId *string        `protobuf:"bytes,4,opt,name=_getui_client_id,json=GetuiClientId" json:"_getui_client_id,omitempty"`
}

func (x *PushToken) Reset() {
	*x = PushToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToken) ProtoMessage() {}

func (x *PushToken) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToken.ProtoReflect.Descriptor instead.
func (*PushToken) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{135}
}

func (x *PushToken) GetXType() PushTokenType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return PushToken_ios
}

func (x *PushToken) GetXToken() string {
	if x != nil && x.XToken != nil {
		return *x.XToken
	}
	return ""
}

func (x *PushToken) GetXDeviceid() string {
	if x != nil && x.XDeviceid != nil {
		return *x.XDeviceid
	}
	return ""
}

func (x *PushToken) GetXGetuiClientId() string {
	if x != nil && x.XGetuiClientId != nil {
		return *x.XGetuiClientId
	}
	return ""
}

//获得杀敌排行榜列表
type GetKillRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`               //
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
}

func (x *GetKillRankList) Reset() {
	*x = GetKillRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKillRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKillRankList) ProtoMessage() {}

func (x *GetKillRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKillRankList.ProtoReflect.Descriptor instead.
func (*GetKillRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{136}
}

func (x *GetKillRankList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetKillRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获得联盟战力排行榜列表
type GetAllianceRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
}

func (x *GetAllianceRankList) Reset() {
	*x = GetAllianceRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllianceRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllianceRankList) ProtoMessage() {}

func (x *GetAllianceRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllianceRankList.ProtoReflect.Descriptor instead.
func (*GetAllianceRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{137}
}

func (x *GetAllianceRankList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetAllianceRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获得联盟杀敌排行榜列表
type GetAllianceKillRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
}

func (x *GetAllianceKillRankList) Reset() {
	*x = GetAllianceKillRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllianceKillRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllianceKillRankList) ProtoMessage() {}

func (x *GetAllianceKillRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllianceKillRankList.ProtoReflect.Descriptor instead.
func (*GetAllianceKillRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{138}
}

func (x *GetAllianceKillRankList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetAllianceKillRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获得个人战力排行榜列表
type GetPowerRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
}

func (x *GetPowerRankList) Reset() {
	*x = GetPowerRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRankList) ProtoMessage() {}

func (x *GetPowerRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRankList.ProtoReflect.Descriptor instead.
func (*GetPowerRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{139}
}

func (x *GetPowerRankList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetPowerRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获得个人成就排行榜列表
type GetFameRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
}

func (x *GetFameRankList) Reset() {
	*x = GetFameRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFameRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFameRankList) ProtoMessage() {}

func (x *GetFameRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFameRankList.ProtoReflect.Descriptor instead.
func (*GetFameRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{140}
}

func (x *GetFameRankList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetFameRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

// 联盟接口信息
type Guild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCreate                   *GuildCreate            `protobuf:"bytes,1,opt,name=_create,json=Create" json:"_create,omitempty"`                                                              //创建联盟
	XDismiss                  *GuildDismiss           `protobuf:"bytes,2,opt,name=_dismiss,json=Dismiss" json:"_dismiss,omitempty"`                                                           //解散联盟
	XList                     *GuildList              `protobuf:"bytes,3,opt,name=_list,json=List" json:"_list,omitempty"`                                                                    //获取联盟列表
	XSearch                   *GuildSearch            `protobuf:"bytes,4,opt,name=_search,json=Search" json:"_search,omitempty"`                                                              //按条件查询联盟
	XJoin                     *GuildJoin              `protobuf:"bytes,5,opt,name=_join,json=Join" json:"_join,omitempty"`                                                                    //加入联盟
	XJoinConfirm              *GuildJoinConfirm       `protobuf:"bytes,6,opt,name=_join_confirm,json=JoinConfirm" json:"_join_confirm,omitempty"`                                             //确认加入联盟
	XJoinRefuse               *GuildJoinRefuse        `protobuf:"bytes,7,opt,name=_join_refuse,json=JoinRefuse" json:"_join_refuse,omitempty"`                                                //拒绝加入联盟
	XLeave                    *GuildLeave             `protobuf:"bytes,8,opt,name=_leave,json=Leave" json:"_leave,omitempty"`                                                                 //离开联盟
	XKick                     *GuildKick              `protobuf:"bytes,9,opt,name=_kick,json=Kick" json:"_kick,omitempty"`                                                                    //踢出联盟
	XSetAvatar                *GuildSetAvatar         `protobuf:"bytes,10,opt,name=_set_avatar,json=SetAvatar" json:"_set_avatar,omitempty"`                                                  //设置联盟头像
	XSetName                  *GuildSetName           `protobuf:"bytes,11,opt,name=_set_name,json=SetName" json:"_set_name,omitempty"`                                                        //设置联盟名字
	XSetShortName             *GuildSetShortName      `protobuf:"bytes,12,opt,name=_set_short_name,json=SetShortName" json:"_set_short_name,omitempty"`                                       //设置联盟简称
	XSetJoinType              *GuildSetJoinType       `protobuf:"bytes,13,opt,name=_set_join_type,json=SetJoinType" json:"_set_join_type,omitempty"`                                          //设置联盟加入类型
	XSetSlogan                *GuildSetSlogan         `protobuf:"bytes,14,opt,name=_set_slogan,json=SetSlogan" json:"_set_slogan,omitempty"`                                                  //设置联盟宣言
	XSetLan                   *GuildSetLan            `protobuf:"bytes,15,opt,name=_set_lan,json=SetLan" json:"_set_lan,omitempty"`                                                           //设置联盟语言
	XOpenPannel               *GuildOpenPannel        `protobuf:"bytes,16,opt,name=_open_pannel,json=OpenPannel" json:"_open_pannel,omitempty"`                                               //打开联盟面板
	XMembers                  *GuildMembers           `protobuf:"bytes,17,opt,name=_members,json=Members" json:"_members,omitempty"`                                                          //联盟成员列表
	XQuery                    *GuildQuery             `protobuf:"bytes,18,opt,name=_query,json=Query" json:"_query,omitempty"`                                                                //联盟信息查询
	XApplyHelp                *ApplyHelp              `protobuf:"bytes,19,opt,name=_apply_help,json=ApplyHelp" json:"_apply_help,omitempty"`                                                  //申请联盟帮助
	XGetHelp                  *GetHelp                `protobuf:"bytes,20,opt,name=_get_help,json=GetHelp" json:"_get_help,omitempty"`                                                        //获得联盟帮助列表
	XProvideHelp              *ProvideHelp            `protobuf:"bytes,21,opt,name=_provide_help,json=ProvideHelp" json:"_provide_help,omitempty"`                                            //提供帮助
	XTransport                *ResourceTransport      `protobuf:"bytes,22,opt,name=_transport,json=Transport" json:"_transport,omitempty"`                                                    //联盟资源援助
	XGetArmySupport           *GetArmySupport         `protobuf:"bytes,23,opt,name=_get_army_support,json=GetArmySupport" json:"_get_army_support,omitempty"`                                 //获得联盟驻军列表
	XCreateUnionWar           *CreateUnionWar         `protobuf:"bytes,24,opt,name=_create_union_war,json=CreateUnionWar" json:"_create_union_war,omitempty"`                                 //发起联盟合战
	XJoinUnionWar             *JoinUnionWar           `protobuf:"bytes,25,opt,name=_join_union_war,json=JoinUnionWar" json:"_join_union_war,omitempty"`                                       //加入联盟合战
	XCancelUnionWar           *CancelUnionWar         `protobuf:"bytes,26,opt,name=_cancel_union_war,json=CancelUnionWar" json:"_cancel_union_war,omitempty"`                                 //取消合战
	XQuitUnionWar             *QuitUnionWar           `protobuf:"bytes,27,opt,name=_quit_union_war,json=QuitUnionWar" json:"_quit_union_war,omitempty"`                                       //退出合战
	XGuildWarList             *GuildWarList           `protobuf:"bytes,28,opt,name=_guild_war_list,json=GuildWarList" json:"_guild_war_list,omitempty"`                                       //获取联盟战列表
	XApplyMembers             *GuildApplyMembers      `protobuf:"bytes,29,opt,name=_apply_members,json=ApplyMembers" json:"_apply_members,omitempty"`                                         //申请加入联盟的成员列表
	XRepatriateArmy           *RepatriateArmySupport  `protobuf:"bytes,30,opt,name=_repatriate_army,json=RepatriateArmy" json:"_repatriate_army,omitempty"`                                   //遣返援军
	XMyQuery                  *GuildMyQuery           `protobuf:"bytes,31,opt,name=_my_query,json=MyQuery" json:"_my_query,omitempty"`                                                        //查询自己的联盟信息
	XInviterMembers           *GuildInviteMembers     `protobuf:"bytes,32,opt,name=_inviter_members,json=InviterMembers" json:"_inviter_members,omitempty"`                                   //查看邀请入盟的成员列表
	XSetAuthTitle             *GuildSetAuthTitle      `protobuf:"bytes,33,opt,name=_set_auth_title,json=SetAuthTitle" json:"_set_auth_title,omitempty"`                                       //设置联盟阶级称谓
	XInviteMember             *GuildInviteMember      `protobuf:"bytes,34,opt,name=_invite_member,json=InviteMember" json:"_invite_member,omitempty"`                                         //邀请用户加入联盟
	XChangeMemberLevel        *GuildChangeMemberLevel `protobuf:"bytes,35,opt,name=_change_member_level,json=ChangeMemberLevel" json:"_change_member_level,omitempty"`                        //改变联盟成员阶级等级
	XTransfer                 *GuildTransfer          `protobuf:"bytes,36,opt,name=_transfer,json=Transfer" json:"_transfer,omitempty"`                                                       //联盟转让
	XInviteConfirm            *GuildInviteConfirm     `protobuf:"bytes,37,opt,name=_invite_confirm,json=InviteConfirm" json:"_invite_confirm,omitempty"`                                      //同意邀请
	XInviteRefuse             *GuildInviteRefuse      `protobuf:"bytes,38,opt,name=_invite_refuse,json=InviteRefuse" json:"_invite_refuse,omitempty"`                                         //拒绝邀请
	XElectOwner               *GuildElectOwner        `protobuf:"bytes,39,opt,name=_elect_owner,json=ElectOwner" json:"_elect_owner,omitempty"`                                               //竞选盟主
	XDonateTech               *GuildDonateTech        `protobuf:"bytes,40,opt,name=_donate_tech,json=DonateTech" json:"_donate_tech,omitempty"`                                               //捐献科技
	XStoreBuy                 *GuildStoreBuy          `protobuf:"bytes,41,opt,name=_store_buy,json=StoreBuy" json:"_store_buy,omitempty"`                                                     //购买联盟物品
	XGuildSetHeadline         *GuildSetHeadline       `protobuf:"bytes,42,opt,name=_guild_set_headline,json=GuildSetHeadline" json:"_guild_set_headline,omitempty"`                           //设置联盟头条
	XGuildSetBuilding         *GuildSetBuilding       `protobuf:"bytes,43,opt,name=_guild_set_building,json=GuildSetBuilding" json:"_guild_set_building,omitempty"`                           //设置联盟建筑
	XGuildGetLog              *GuildGetLog            `protobuf:"bytes,44,opt,name=_guild_get_log,json=GuildGetLog" json:"_guild_get_log,omitempty"`                                          //获取联盟log
	XGetbackFromStore         *GetbackFromStore       `protobuf:"bytes,45,opt,name=_getback_from_store,json=GetbackFromStore" json:"_getback_from_store,omitempty"`                           //取回资源
	XGuildJoinConfirmPitch    *GuildJoinConfirmPitch  `protobuf:"bytes,46,opt,name=_guild_join_confirm_pitch,json=GuildJoinConfirmPitch" json:"_guild_join_confirm_pitch,omitempty"`          //批量同意加入联盟
	XGuildJoinRefusePitch     *GuildJoinRefusePitch   `protobuf:"bytes,47,opt,name=_guild_join_refuse_pitch,json=GuildJoinRefusePitch" json:"_guild_join_refuse_pitch,omitempty"`             //批量拒绝加入联盟
	XGuildMembersHonour       *GuildMembers           `protobuf:"bytes,48,opt,name=_guild_members_honour,json=GuildMembersHonour" json:"_guild_members_honour,omitempty"`                     //联盟成员荣誉列表
	XGuildMembersDonateHonour *GuildMembers           `protobuf:"bytes,49,opt,name=_guild_members_donate_honour,json=GuildMembersDonateHonour" json:"_guild_members_donate_honour,omitempty"` //联盟成员捐献荣誉列表
	XGuildTechClearCd         *GuildTechClearCd       `protobuf:"bytes,50,opt,name=_guild_tech_clear_cd,json=GuildTechClearCd" json:"_guild_tech_clear_cd,omitempty"`                         //联盟科技清除CD
	XGuildCampSignup          *GuildCampSignup        `protobuf:"bytes,51,opt,name=_guild_camp_signup,json=GuildCampSignup" json:"_guild_camp_signup,omitempty"`                              //联盟竞选:报名
	XGuildCampList            *GuildCampList          `protobuf:"bytes,52,opt,name=_guild_camp_list,json=GuildCampList" json:"_guild_camp_list,omitempty"`                                    //联盟竞选:列表
	XGuildCampVote            *GuildCampVote          `protobuf:"bytes,53,opt,name=_guild_camp_vote,json=GuildCampVote" json:"_guild_camp_vote,omitempty"`                                    //联盟竞选:投票
	XGuildMergeApply          *GuildMergeApply        `protobuf:"bytes,54,opt,name=_guild_merge_apply,json=GuildMergeApply" json:"_guild_merge_apply,omitempty"`                              //联盟合并:主动申请合并
	XGuildMergeList           *GuildMergeList         `protobuf:"bytes,55,opt,name=_guild_merge_list,json=GuildMergeList" json:"_guild_merge_list,omitempty"`                                 //联盟合并:列表
	XGuildMergeAgree          *GuildMergeAgree        `protobuf:"bytes,56,opt,name=_guild_merge_agree,json=GuildMergeAgree" json:"_guild_merge_agree,omitempty"`                              //联盟合并:同意
	XGuildMergeReject         *GuildMergeReject       `protobuf:"bytes,57,opt,name=_guild_merge_reject,json=GuildMergeReject" json:"_guild_merge_reject,omitempty"`                           //联盟合并:拒绝
	XGuildMigrate             *GuildMigrate           `protobuf:"bytes,58,opt,name=_guild_migrate,json=GuildMigrate" json:"_guild_migrate,omitempty"`                                         //联盟:移民
	XGuildSetMasterCity       *GuildSetMasterCity     `protobuf:"bytes,59,opt,name=_guild_set_master_city,json=GuildSetMasterCity" json:"_guild_set_master_city,omitempty"`                   //联盟:设置联盟都城
	XGuildBoxList             *GuildBoxList           `protobuf:"bytes,60,opt,name=_guild_box_list,json=GuildBoxList" json:"_guild_box_list,omitempty"`                                       //联盟宝箱:列表
	XGuildBoxOpen             *GuildBoxOpen           `protobuf:"bytes,61,opt,name=_guild_box_open,json=GuildBoxOpen" json:"_guild_box_open,omitempty"`                                       //联盟宝箱:打开
	XGuildBoxOpenAll          *GuildBoxOpenAll        `protobuf:"bytes,62,opt,name=_guild_box_open_all,json=GuildBoxOpenAll" json:"_guild_box_open_all,omitempty"`                            //联盟宝箱:全部
	XGuildTechCancel          *GuildTechCancel        `protobuf:"bytes,63,opt,name=_guild_tech_cancel,json=GuildTechCancel" json:"_guild_tech_cancel,omitempty"`                              //联盟科技:取消推荐
	XGuildMergeCancel         *GuildMergeCancel       `protobuf:"bytes,64,opt,name=_guild_merge_cancel,json=GuildMergeCancel" json:"_guild_merge_cancel,omitempty"`                           //联盟合并:撤消申请
	XGuildBoxAnonymity        *GuildBoxAnonymity      `protobuf:"bytes,65,opt,name=_guild_box_anonymity,json=GuildBoxAnonymity" json:"_guild_box_anonymity,omitempty"`                        //联盟宝箱:设置匿名
	XGuildBoxAnonyCancel      *GuildBoxAnonyCancel    `protobuf:"bytes,66,opt,name=_guild_box_anony_cancel,json=GuildBoxAnonyCancel" json:"_guild_box_anony_cancel,omitempty"`                //联盟宝箱:取消匿名
	XGuildTechDonateRanking   *GuildTechDonateRanking `protobuf:"bytes,67,opt,name=_guild_tech_donate_ranking,json=GuildTechDonateRanking" json:"_guild_tech_donate_ranking,omitempty"`       //联盟科技捐献排行榜(总榜)
	XGuildTechDailyRanking    *GuildTechDonateRanking `protobuf:"bytes,68,opt,name=_guild_tech_daily_ranking,json=GuildTechDailyRanking" json:"_guild_tech_daily_ranking,omitempty"`          //联盟科技捐献排行榜(日榜)
	XGuildTechWeeklyRanking   *GuildTechDonateRanking `protobuf:"bytes,69,opt,name=_guild_tech_weekly_ranking,json=GuildTechWeeklyRanking" json:"_guild_tech_weekly_ranking,omitempty"`       //联盟科技捐献排行榜(周榜)
	XGuildTechDonateAward     *GuildTechDonateAward   `protobuf:"bytes,70,opt,name=_guild_tech_donate_award,json=GuildTechDonateAward" json:"_guild_tech_donate_award,omitempty"`             //联盟科技捐献奖励
	XGuildBuildingCityList    *GuildBuildingCityList  `protobuf:"bytes,71,opt,name=_guild_building_city_list,json=GuildBuildingCityList" json:"_guild_building_city_list,omitempty"`          //联盟建筑:城市列表(已废弃,改为使用_get_guild_territory)
	XGuildBuildingSetCover    *GuildBuildingSetCover  `protobuf:"bytes,72,opt,name=_guild_building_set_cover,json=GuildBuildingSetCover" json:"_guild_building_set_cover,omitempty"`          //联盟建筑:设置都城保护罩
}

func (x *Guild) Reset() {
	*x = Guild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guild) ProtoMessage() {}

func (x *Guild) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guild.ProtoReflect.Descriptor instead.
func (*Guild) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{141}
}

func (x *Guild) GetXCreate() *GuildCreate {
	if x != nil {
		return x.XCreate
	}
	return nil
}

func (x *Guild) GetXDismiss() *GuildDismiss {
	if x != nil {
		return x.XDismiss
	}
	return nil
}

func (x *Guild) GetXList() *GuildList {
	if x != nil {
		return x.XList
	}
	return nil
}

func (x *Guild) GetXSearch() *GuildSearch {
	if x != nil {
		return x.XSearch
	}
	return nil
}

func (x *Guild) GetXJoin() *GuildJoin {
	if x != nil {
		return x.XJoin
	}
	return nil
}

func (x *Guild) GetXJoinConfirm() *GuildJoinConfirm {
	if x != nil {
		return x.XJoinConfirm
	}
	return nil
}

func (x *Guild) GetXJoinRefuse() *GuildJoinRefuse {
	if x != nil {
		return x.XJoinRefuse
	}
	return nil
}

func (x *Guild) GetXLeave() *GuildLeave {
	if x != nil {
		return x.XLeave
	}
	return nil
}

func (x *Guild) GetXKick() *GuildKick {
	if x != nil {
		return x.XKick
	}
	return nil
}

func (x *Guild) GetXSetAvatar() *GuildSetAvatar {
	if x != nil {
		return x.XSetAvatar
	}
	return nil
}

func (x *Guild) GetXSetName() *GuildSetName {
	if x != nil {
		return x.XSetName
	}
	return nil
}

func (x *Guild) GetXSetShortName() *GuildSetShortName {
	if x != nil {
		return x.XSetShortName
	}
	return nil
}

func (x *Guild) GetXSetJoinType() *GuildSetJoinType {
	if x != nil {
		return x.XSetJoinType
	}
	return nil
}

func (x *Guild) GetXSetSlogan() *GuildSetSlogan {
	if x != nil {
		return x.XSetSlogan
	}
	return nil
}

func (x *Guild) GetXSetLan() *GuildSetLan {
	if x != nil {
		return x.XSetLan
	}
	return nil
}

func (x *Guild) GetXOpenPannel() *GuildOpenPannel {
	if x != nil {
		return x.XOpenPannel
	}
	return nil
}

func (x *Guild) GetXMembers() *GuildMembers {
	if x != nil {
		return x.XMembers
	}
	return nil
}

func (x *Guild) GetXQuery() *GuildQuery {
	if x != nil {
		return x.XQuery
	}
	return nil
}

func (x *Guild) GetXApplyHelp() *ApplyHelp {
	if x != nil {
		return x.XApplyHelp
	}
	return nil
}

func (x *Guild) GetXGetHelp() *GetHelp {
	if x != nil {
		return x.XGetHelp
	}
	return nil
}

func (x *Guild) GetXProvideHelp() *ProvideHelp {
	if x != nil {
		return x.XProvideHelp
	}
	return nil
}

func (x *Guild) GetXTransport() *ResourceTransport {
	if x != nil {
		return x.XTransport
	}
	return nil
}

func (x *Guild) GetXGetArmySupport() *GetArmySupport {
	if x != nil {
		return x.XGetArmySupport
	}
	return nil
}

func (x *Guild) GetXCreateUnionWar() *CreateUnionWar {
	if x != nil {
		return x.XCreateUnionWar
	}
	return nil
}

func (x *Guild) GetXJoinUnionWar() *JoinUnionWar {
	if x != nil {
		return x.XJoinUnionWar
	}
	return nil
}

func (x *Guild) GetXCancelUnionWar() *CancelUnionWar {
	if x != nil {
		return x.XCancelUnionWar
	}
	return nil
}

func (x *Guild) GetXQuitUnionWar() *QuitUnionWar {
	if x != nil {
		return x.XQuitUnionWar
	}
	return nil
}

func (x *Guild) GetXGuildWarList() *GuildWarList {
	if x != nil {
		return x.XGuildWarList
	}
	return nil
}

func (x *Guild) GetXApplyMembers() *GuildApplyMembers {
	if x != nil {
		return x.XApplyMembers
	}
	return nil
}

func (x *Guild) GetXRepatriateArmy() *RepatriateArmySupport {
	if x != nil {
		return x.XRepatriateArmy
	}
	return nil
}

func (x *Guild) GetXMyQuery() *GuildMyQuery {
	if x != nil {
		return x.XMyQuery
	}
	return nil
}

func (x *Guild) GetXInviterMembers() *GuildInviteMembers {
	if x != nil {
		return x.XInviterMembers
	}
	return nil
}

func (x *Guild) GetXSetAuthTitle() *GuildSetAuthTitle {
	if x != nil {
		return x.XSetAuthTitle
	}
	return nil
}

func (x *Guild) GetXInviteMember() *GuildInviteMember {
	if x != nil {
		return x.XInviteMember
	}
	return nil
}

func (x *Guild) GetXChangeMemberLevel() *GuildChangeMemberLevel {
	if x != nil {
		return x.XChangeMemberLevel
	}
	return nil
}

func (x *Guild) GetXTransfer() *GuildTransfer {
	if x != nil {
		return x.XTransfer
	}
	return nil
}

func (x *Guild) GetXInviteConfirm() *GuildInviteConfirm {
	if x != nil {
		return x.XInviteConfirm
	}
	return nil
}

func (x *Guild) GetXInviteRefuse() *GuildInviteRefuse {
	if x != nil {
		return x.XInviteRefuse
	}
	return nil
}

func (x *Guild) GetXElectOwner() *GuildElectOwner {
	if x != nil {
		return x.XElectOwner
	}
	return nil
}

func (x *Guild) GetXDonateTech() *GuildDonateTech {
	if x != nil {
		return x.XDonateTech
	}
	return nil
}

func (x *Guild) GetXStoreBuy() *GuildStoreBuy {
	if x != nil {
		return x.XStoreBuy
	}
	return nil
}

func (x *Guild) GetXGuildSetHeadline() *GuildSetHeadline {
	if x != nil {
		return x.XGuildSetHeadline
	}
	return nil
}

func (x *Guild) GetXGuildSetBuilding() *GuildSetBuilding {
	if x != nil {
		return x.XGuildSetBuilding
	}
	return nil
}

func (x *Guild) GetXGuildGetLog() *GuildGetLog {
	if x != nil {
		return x.XGuildGetLog
	}
	return nil
}

func (x *Guild) GetXGetbackFromStore() *GetbackFromStore {
	if x != nil {
		return x.XGetbackFromStore
	}
	return nil
}

func (x *Guild) GetXGuildJoinConfirmPitch() *GuildJoinConfirmPitch {
	if x != nil {
		return x.XGuildJoinConfirmPitch
	}
	return nil
}

func (x *Guild) GetXGuildJoinRefusePitch() *GuildJoinRefusePitch {
	if x != nil {
		return x.XGuildJoinRefusePitch
	}
	return nil
}

func (x *Guild) GetXGuildMembersHonour() *GuildMembers {
	if x != nil {
		return x.XGuildMembersHonour
	}
	return nil
}

func (x *Guild) GetXGuildMembersDonateHonour() *GuildMembers {
	if x != nil {
		return x.XGuildMembersDonateHonour
	}
	return nil
}

func (x *Guild) GetXGuildTechClearCd() *GuildTechClearCd {
	if x != nil {
		return x.XGuildTechClearCd
	}
	return nil
}

func (x *Guild) GetXGuildCampSignup() *GuildCampSignup {
	if x != nil {
		return x.XGuildCampSignup
	}
	return nil
}

func (x *Guild) GetXGuildCampList() *GuildCampList {
	if x != nil {
		return x.XGuildCampList
	}
	return nil
}

func (x *Guild) GetXGuildCampVote() *GuildCampVote {
	if x != nil {
		return x.XGuildCampVote
	}
	return nil
}

func (x *Guild) GetXGuildMergeApply() *GuildMergeApply {
	if x != nil {
		return x.XGuildMergeApply
	}
	return nil
}

func (x *Guild) GetXGuildMergeList() *GuildMergeList {
	if x != nil {
		return x.XGuildMergeList
	}
	return nil
}

func (x *Guild) GetXGuildMergeAgree() *GuildMergeAgree {
	if x != nil {
		return x.XGuildMergeAgree
	}
	return nil
}

func (x *Guild) GetXGuildMergeReject() *GuildMergeReject {
	if x != nil {
		return x.XGuildMergeReject
	}
	return nil
}

func (x *Guild) GetXGuildMigrate() *GuildMigrate {
	if x != nil {
		return x.XGuildMigrate
	}
	return nil
}

func (x *Guild) GetXGuildSetMasterCity() *GuildSetMasterCity {
	if x != nil {
		return x.XGuildSetMasterCity
	}
	return nil
}

func (x *Guild) GetXGuildBoxList() *GuildBoxList {
	if x != nil {
		return x.XGuildBoxList
	}
	return nil
}

func (x *Guild) GetXGuildBoxOpen() *GuildBoxOpen {
	if x != nil {
		return x.XGuildBoxOpen
	}
	return nil
}

func (x *Guild) GetXGuildBoxOpenAll() *GuildBoxOpenAll {
	if x != nil {
		return x.XGuildBoxOpenAll
	}
	return nil
}

func (x *Guild) GetXGuildTechCancel() *GuildTechCancel {
	if x != nil {
		return x.XGuildTechCancel
	}
	return nil
}

func (x *Guild) GetXGuildMergeCancel() *GuildMergeCancel {
	if x != nil {
		return x.XGuildMergeCancel
	}
	return nil
}

func (x *Guild) GetXGuildBoxAnonymity() *GuildBoxAnonymity {
	if x != nil {
		return x.XGuildBoxAnonymity
	}
	return nil
}

func (x *Guild) GetXGuildBoxAnonyCancel() *GuildBoxAnonyCancel {
	if x != nil {
		return x.XGuildBoxAnonyCancel
	}
	return nil
}

func (x *Guild) GetXGuildTechDonateRanking() *GuildTechDonateRanking {
	if x != nil {
		return x.XGuildTechDonateRanking
	}
	return nil
}

func (x *Guild) GetXGuildTechDailyRanking() *GuildTechDonateRanking {
	if x != nil {
		return x.XGuildTechDailyRanking
	}
	return nil
}

func (x *Guild) GetXGuildTechWeeklyRanking() *GuildTechDonateRanking {
	if x != nil {
		return x.XGuildTechWeeklyRanking
	}
	return nil
}

func (x *Guild) GetXGuildTechDonateAward() *GuildTechDonateAward {
	if x != nil {
		return x.XGuildTechDonateAward
	}
	return nil
}

func (x *Guild) GetXGuildBuildingCityList() *GuildBuildingCityList {
	if x != nil {
		return x.XGuildBuildingCityList
	}
	return nil
}

func (x *Guild) GetXGuildBuildingSetCover() *GuildBuildingSetCover {
	if x != nil {
		return x.XGuildBuildingSetCover
	}
	return nil
}

// 获取联盟成员列表
type GuildMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`
}

func (x *GuildMembers) Reset() {
	*x = GuildMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMembers) ProtoMessage() {}

func (x *GuildMembers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMembers.ProtoReflect.Descriptor instead.
func (*GuildMembers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{142}
}

func (x *GuildMembers) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

// 创建联盟
type GuildCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XName      *string     `protobuf:"bytes,1,req,name=_name,json=Name" json:"_name,omitempty"`                  //联盟名称
	XShortName *string     `protobuf:"bytes,2,req,name=_short_name,json=ShortName" json:"_short_name,omitempty"` //联盟简称
	XSlogan    *string     `protobuf:"bytes,3,req,name=_slogan,json=Slogan" json:"_slogan,omitempty"`            //联盟宣言
	XLan       *pb.LanType `protobuf:"varint,4,req,name=_lan,json=Lan,enum=Msg.LanType" json:"_lan,omitempty"`   //联盟语言, 根据配置表中设置的语言类型对应不同的语言
}

func (x *GuildCreate) Reset() {
	*x = GuildCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCreate) ProtoMessage() {}

func (x *GuildCreate) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCreate.ProtoReflect.Descriptor instead.
func (*GuildCreate) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{143}
}

func (x *GuildCreate) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *GuildCreate) GetXShortName() string {
	if x != nil && x.XShortName != nil {
		return *x.XShortName
	}
	return ""
}

func (x *GuildCreate) GetXSlogan() string {
	if x != nil && x.XSlogan != nil {
		return *x.XSlogan
	}
	return ""
}

func (x *GuildCreate) GetXLan() pb.LanType {
	if x != nil && x.XLan != nil {
		return *x.XLan
	}
	return pb.LanType(0)
}

// 解散联盟
type GuildDismiss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GuildDismiss) Reset() {
	*x = GuildDismiss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDismiss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDismiss) ProtoMessage() {}

func (x *GuildDismiss) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDismiss.ProtoReflect.Descriptor instead.
func (*GuildDismiss) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{144}
}

func (x *GuildDismiss) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

// 获取联盟列表
type GuildList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAreaId   *int32 `protobuf:"varint,1,req,name=_area_id,json=AreaId" json:"_area_id,omitempty"`       //玩家所在大地图区域ID
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //联盟列表所在服id,不填或者0代表自己原服
	XNewVer   *int32 `protobuf:"varint,3,opt,name=_new_ver,json=NewVer,def=0" json:"_new_ver,omitempty"` //0:兼容老版本, 1:新版本,返回5条数据
}

// Default values for GuildList fields.
const (
	Default_GuildList_XNewVer = int32(0)
)

func (x *GuildList) Reset() {
	*x = GuildList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildList) ProtoMessage() {}

func (x *GuildList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildList.ProtoReflect.Descriptor instead.
func (*GuildList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{145}
}

func (x *GuildList) GetXAreaId() int32 {
	if x != nil && x.XAreaId != nil {
		return *x.XAreaId
	}
	return 0
}

func (x *GuildList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *GuildList) GetXNewVer() int32 {
	if x != nil && x.XNewVer != nil {
		return *x.XNewVer
	}
	return Default_GuildList_XNewVer
}

// 联盟搜索
type GuildSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XName     *string `protobuf:"bytes,1,req,name=_name,json=Name" json:"_name,omitempty"`
	XServerId *int32  `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //联盟搜索所在服id 不填或者0 代表自己原服
	XAreaId   *int32  `protobuf:"varint,3,opt,name=_area_id,json=AreaId" json:"_area_id,omitempty"`       //玩家所在大地图区域ID
}

func (x *GuildSearch) Reset() {
	*x = GuildSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSearch) ProtoMessage() {}

func (x *GuildSearch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSearch.ProtoReflect.Descriptor instead.
func (*GuildSearch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{146}
}

func (x *GuildSearch) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *GuildSearch) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *GuildSearch) GetXAreaId() int32 {
	if x != nil && x.XAreaId != nil {
		return *x.XAreaId
	}
	return 0
}

// 加入联盟
type GuildJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`
}

func (x *GuildJoin) Reset() {
	*x = GuildJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildJoin) ProtoMessage() {}

func (x *GuildJoin) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildJoin.ProtoReflect.Descriptor instead.
func (*GuildJoin) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{147}
}

func (x *GuildJoin) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

// 批准加入联盟请求
type GuildJoinConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid     *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"`               //同意加入的玩家uid
	XGuildId *uint32 `protobuf:"varint,2,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GuildJoinConfirm) Reset() {
	*x = GuildJoinConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildJoinConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildJoinConfirm) ProtoMessage() {}

func (x *GuildJoinConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildJoinConfirm.ProtoReflect.Descriptor instead.
func (*GuildJoinConfirm) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{148}
}

func (x *GuildJoinConfirm) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

func (x *GuildJoinConfirm) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

// 拒绝加入联盟请求
type GuildJoinRefuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid     *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"`               //拒绝加入的玩家uid
	XGuildId *uint32 `protobuf:"varint,2,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GuildJoinRefuse) Reset() {
	*x = GuildJoinRefuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildJoinRefuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildJoinRefuse) ProtoMessage() {}

func (x *GuildJoinRefuse) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildJoinRefuse.ProtoReflect.Descriptor instead.
func (*GuildJoinRefuse) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{149}
}

func (x *GuildJoinRefuse) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

func (x *GuildJoinRefuse) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//批量同意玩家加入联盟
type GuildJoinConfirmPitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUids []uint32 `protobuf:"varint,1,rep,name=_uids,json=Uids" json:"_uids,omitempty"` //同意加入的玩家uid
}

func (x *GuildJoinConfirmPitch) Reset() {
	*x = GuildJoinConfirmPitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildJoinConfirmPitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildJoinConfirmPitch) ProtoMessage() {}

func (x *GuildJoinConfirmPitch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildJoinConfirmPitch.ProtoReflect.Descriptor instead.
func (*GuildJoinConfirmPitch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{150}
}

func (x *GuildJoinConfirmPitch) GetXUids() []uint32 {
	if x != nil {
		return x.XUids
	}
	return nil
}

//批量拒绝玩家加入联盟
type GuildJoinRefusePitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUids []uint32 `protobuf:"varint,1,rep,name=_uids,json=Uids" json:"_uids,omitempty"` //拒绝加入的玩家
}

func (x *GuildJoinRefusePitch) Reset() {
	*x = GuildJoinRefusePitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildJoinRefusePitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildJoinRefusePitch) ProtoMessage() {}

func (x *GuildJoinRefusePitch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildJoinRefusePitch.ProtoReflect.Descriptor instead.
func (*GuildJoinRefusePitch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{151}
}

func (x *GuildJoinRefusePitch) GetXUids() []uint32 {
	if x != nil {
		return x.XUids
	}
	return nil
}

//离开联盟
type GuildLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GuildLeave) Reset() {
	*x = GuildLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildLeave) ProtoMessage() {}

func (x *GuildLeave) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildLeave.ProtoReflect.Descriptor instead.
func (*GuildLeave) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{152}
}

func (x *GuildLeave) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

// 联盟踢人
type GuildKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //被踢玩家uid
}

func (x *GuildKick) Reset() {
	*x = GuildKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildKick) ProtoMessage() {}

func (x *GuildKick) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildKick.ProtoReflect.Descriptor instead.
func (*GuildKick) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{153}
}

func (x *GuildKick) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

// 设置联盟头像
type GuildSetAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAvatar *int32 `protobuf:"varint,1,req,name=_avatar,json=Avatar" json:"_avatar,omitempty"` //联盟头像
}

func (x *GuildSetAvatar) Reset() {
	*x = GuildSetAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetAvatar) ProtoMessage() {}

func (x *GuildSetAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetAvatar.ProtoReflect.Descriptor instead.
func (*GuildSetAvatar) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{154}
}

func (x *GuildSetAvatar) GetXAvatar() int32 {
	if x != nil && x.XAvatar != nil {
		return *x.XAvatar
	}
	return 0
}

// 设置联盟名字
type GuildSetName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XName *string `protobuf:"bytes,1,req,name=_name,json=Name" json:"_name,omitempty"`
}

func (x *GuildSetName) Reset() {
	*x = GuildSetName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetName) ProtoMessage() {}

func (x *GuildSetName) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetName.ProtoReflect.Descriptor instead.
func (*GuildSetName) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{155}
}

func (x *GuildSetName) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

// 设置联盟简称
type GuildSetShortName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XShortName *string `protobuf:"bytes,1,req,name=_short_name,json=ShortName" json:"_short_name,omitempty"`
}

func (x *GuildSetShortName) Reset() {
	*x = GuildSetShortName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetShortName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetShortName) ProtoMessage() {}

func (x *GuildSetShortName) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetShortName.ProtoReflect.Descriptor instead.
func (*GuildSetShortName) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{156}
}

func (x *GuildSetShortName) GetXShortName() string {
	if x != nil && x.XShortName != nil {
		return *x.XShortName
	}
	return ""
}

// 设置联盟加入类型
type GuildSetJoinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XJoinType *pb.GuildJoinType `protobuf:"varint,1,req,name=_join_type,json=JoinType,enum=Msg.GuildJoinType" json:"_join_type,omitempty"`
}

func (x *GuildSetJoinType) Reset() {
	*x = GuildSetJoinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetJoinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetJoinType) ProtoMessage() {}

func (x *GuildSetJoinType) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetJoinType.ProtoReflect.Descriptor instead.
func (*GuildSetJoinType) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{157}
}

func (x *GuildSetJoinType) GetXJoinType() pb.GuildJoinType {
	if x != nil && x.XJoinType != nil {
		return *x.XJoinType
	}
	return pb.GuildJoinType(1)
}

// 设置联盟宣言
type GuildSetSlogan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSlogan *string `protobuf:"bytes,1,req,name=_slogan,json=Slogan" json:"_slogan,omitempty"`
}

func (x *GuildSetSlogan) Reset() {
	*x = GuildSetSlogan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetSlogan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetSlogan) ProtoMessage() {}

func (x *GuildSetSlogan) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetSlogan.ProtoReflect.Descriptor instead.
func (*GuildSetSlogan) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{158}
}

func (x *GuildSetSlogan) GetXSlogan() string {
	if x != nil && x.XSlogan != nil {
		return *x.XSlogan
	}
	return ""
}

//设置联盟头条
type GuildSetHeadline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XHeadLine *string `protobuf:"bytes,1,req,name=_head_line,json=HeadLine" json:"_head_line,omitempty"`
}

func (x *GuildSetHeadline) Reset() {
	*x = GuildSetHeadline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetHeadline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetHeadline) ProtoMessage() {}

func (x *GuildSetHeadline) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetHeadline.ProtoReflect.Descriptor instead.
func (*GuildSetHeadline) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{159}
}

func (x *GuildSetHeadline) GetXHeadLine() string {
	if x != nil && x.XHeadLine != nil {
		return *x.XHeadLine
	}
	return ""
}

//设置联盟建筑
type GuildSetBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMapinfoType  *pb.MapinfoType `protobuf:"varint,1,req,name=_mapinfo_type,json=MapinfoType,enum=Msg.MapinfoType" json:"_mapinfo_type,omitempty"` //建筑类型(联盟城市、联盟哨塔)
	XGuildId      *int32          `protobuf:"varint,2,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`                                  //联盟id
	XWx           *int32          `protobuf:"varint,3,req,name=_wx,json=Wx" json:"_wx,omitempty"`                                                   //目标的横坐标
	XWy           *int32          `protobuf:"varint,4,req,name=_wy,json=Wy" json:"_wy,omitempty"`                                                   //目标的纵坐标
	XResourceType *int32          `protobuf:"varint,5,opt,name=_resource_type,json=ResourceType" json:"_resource_type,omitempty"`                   //联盟资源点资源类型;建战旗消耗类型(0资源,1钻石)
}

func (x *GuildSetBuilding) Reset() {
	*x = GuildSetBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetBuilding) ProtoMessage() {}

func (x *GuildSetBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetBuilding.ProtoReflect.Descriptor instead.
func (*GuildSetBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{160}
}

func (x *GuildSetBuilding) GetXMapinfoType() pb.MapinfoType {
	if x != nil && x.XMapinfoType != nil {
		return *x.XMapinfoType
	}
	return pb.MapinfoType(0)
}

func (x *GuildSetBuilding) GetXGuildId() int32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GuildSetBuilding) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *GuildSetBuilding) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *GuildSetBuilding) GetXResourceType() int32 {
	if x != nil && x.XResourceType != nil {
		return *x.XResourceType
	}
	return 0
}

type GuildGetLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId   *int32  `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`       //联盟id
	XLogGroups []int32 `protobuf:"varint,2,rep,name=_log_groups,json=LogGroups" json:"_log_groups,omitempty"` //获取类型组
	XLastLogid *int32  `protobuf:"varint,3,req,name=_last_logid,json=LastLogid" json:"_last_logid,omitempty"` //上次获取的id
}

func (x *GuildGetLog) Reset() {
	*x = GuildGetLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildGetLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildGetLog) ProtoMessage() {}

func (x *GuildGetLog) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildGetLog.ProtoReflect.Descriptor instead.
func (*GuildGetLog) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{161}
}

func (x *GuildGetLog) GetXGuildId() int32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GuildGetLog) GetXLogGroups() []int32 {
	if x != nil {
		return x.XLogGroups
	}
	return nil
}

func (x *GuildGetLog) GetXLastLogid() int32 {
	if x != nil && x.XLastLogid != nil {
		return *x.XLastLogid
	}
	return 0
}

// 设置联盟语言
type GuildSetLan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLan *pb.LanType `protobuf:"varint,1,req,name=_lan,json=Lan,enum=Msg.LanType" json:"_lan,omitempty"`
}

func (x *GuildSetLan) Reset() {
	*x = GuildSetLan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetLan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetLan) ProtoMessage() {}

func (x *GuildSetLan) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetLan.ProtoReflect.Descriptor instead.
func (*GuildSetLan) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{162}
}

func (x *GuildSetLan) GetXLan() pb.LanType {
	if x != nil && x.XLan != nil {
		return *x.XLan
	}
	return pb.LanType(0)
}

// 获取联盟信息
type GuildQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuild *uint32 `protobuf:"varint,1,req,name=_guild,json=Guild" json:"_guild,omitempty"`
}

func (x *GuildQuery) Reset() {
	*x = GuildQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildQuery) ProtoMessage() {}

func (x *GuildQuery) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildQuery.ProtoReflect.Descriptor instead.
func (*GuildQuery) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{163}
}

func (x *GuildQuery) GetXGuild() uint32 {
	if x != nil && x.XGuild != nil {
		return *x.XGuild
	}
	return 0
}

// 获取自己的联盟信息
type GuildMyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GuildMyQuery) Reset() {
	*x = GuildMyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMyQuery) ProtoMessage() {}

func (x *GuildMyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMyQuery.ProtoReflect.Descriptor instead.
func (*GuildMyQuery) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{164}
}

func (x *GuildMyQuery) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type GuildOpenPannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GuildOpenPannel) Reset() {
	*x = GuildOpenPannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildOpenPannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildOpenPannel) ProtoMessage() {}

func (x *GuildOpenPannel) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildOpenPannel.ProtoReflect.Descriptor instead.
func (*GuildOpenPannel) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{165}
}

func (x *GuildOpenPannel) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

// 盟主查看入盟申请人员
type GuildApplyMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GuildApplyMembers) Reset() {
	*x = GuildApplyMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildApplyMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildApplyMembers) ProtoMessage() {}

func (x *GuildApplyMembers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildApplyMembers.ProtoReflect.Descriptor instead.
func (*GuildApplyMembers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{166}
}

func (x *GuildApplyMembers) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

// 查看邀请入盟的成员列表
type GuildInviteMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XStartPos   *uint32 `protobuf:"varint,1,req,name=_start_pos,json=StartPos" json:"_start_pos,omitempty"`              //获取的起始位置，第一次传0，然后每次传服务器返回的值，服务器返回的值为0，则表明load more结束
	XRequireNum *uint32 `protobuf:"varint,2,req,name=_require_num,json=RequireNum,def=20" json:"_require_num,omitempty"` //每次请求返回的人数，默认20人
	XRandom     *uint32 `protobuf:"varint,3,opt,name=_random,json=Random,def=0" json:"_random,omitempty"`                //1： 随机出，0： 兼容老版本的按序出
}

// Default values for GuildInviteMembers fields.
const (
	Default_GuildInviteMembers_XRequireNum = uint32(20)
	Default_GuildInviteMembers_XRandom     = uint32(0)
)

func (x *GuildInviteMembers) Reset() {
	*x = GuildInviteMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInviteMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInviteMembers) ProtoMessage() {}

func (x *GuildInviteMembers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInviteMembers.ProtoReflect.Descriptor instead.
func (*GuildInviteMembers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{167}
}

func (x *GuildInviteMembers) GetXStartPos() uint32 {
	if x != nil && x.XStartPos != nil {
		return *x.XStartPos
	}
	return 0
}

func (x *GuildInviteMembers) GetXRequireNum() uint32 {
	if x != nil && x.XRequireNum != nil {
		return *x.XRequireNum
	}
	return Default_GuildInviteMembers_XRequireNum
}

func (x *GuildInviteMembers) GetXRandom() uint32 {
	if x != nil && x.XRandom != nil {
		return *x.XRandom
	}
	return Default_GuildInviteMembers_XRandom
}

//获取联系人列表
type ContactGetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *ContactGetList) Reset() {
	*x = ContactGetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactGetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactGetList) ProtoMessage() {}

func (x *ContactGetList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactGetList.ProtoReflect.Descriptor instead.
func (*ContactGetList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{168}
}

func (x *ContactGetList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//将一个用户加入联系人列表
type ContactAddUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *uint32 `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (x *ContactAddUser) Reset() {
	*x = ContactAddUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactAddUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactAddUser) ProtoMessage() {}

func (x *ContactAddUser) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactAddUser.ProtoReflect.Descriptor instead.
func (*ContactAddUser) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{169}
}

func (x *ContactAddUser) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

//将一个用户从联系人列表中删除
type ContactRemoveUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *uint32 `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (x *ContactRemoveUser) Reset() {
	*x = ContactRemoveUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactRemoveUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactRemoveUser) ProtoMessage() {}

func (x *ContactRemoveUser) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactRemoveUser.ProtoReflect.Descriptor instead.
func (*ContactRemoveUser) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{170}
}

func (x *ContactRemoveUser) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

//设置联盟阶级称谓
//称谓字符长度0-10个字符，最大上限查看配置表guild_auth_max_length
type GuildSetAuthTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XListTitle []string `protobuf:"bytes,1,rep,name=_list_title,json=ListTitle" json:"_list_title,omitempty"` //从R5到R1的称谓数组
}

func (x *GuildSetAuthTitle) Reset() {
	*x = GuildSetAuthTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetAuthTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetAuthTitle) ProtoMessage() {}

func (x *GuildSetAuthTitle) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetAuthTitle.ProtoReflect.Descriptor instead.
func (*GuildSetAuthTitle) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{171}
}

func (x *GuildSetAuthTitle) GetXListTitle() []string {
	if x != nil {
		return x.XListTitle
	}
	return nil
}

//邀请玩家入盟
type GuildInviteMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`
}

func (x *GuildInviteMember) Reset() {
	*x = GuildInviteMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInviteMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInviteMember) ProtoMessage() {}

func (x *GuildInviteMember) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInviteMember.ProtoReflect.Descriptor instead.
func (*GuildInviteMember) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{172}
}

func (x *GuildInviteMember) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//同意联盟邀请
type GuildInviteConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GId     *uint32 `protobuf:"varint,1,req,name=g_id,json=gId" json:"g_id,omitempty"` //同意加入的公会ID
	XMailId *uint32 `protobuf:"varint,2,req,name=_mail_id,json=MailId" json:"_mail_id,omitempty"`
}

func (x *GuildInviteConfirm) Reset() {
	*x = GuildInviteConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInviteConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInviteConfirm) ProtoMessage() {}

func (x *GuildInviteConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInviteConfirm.ProtoReflect.Descriptor instead.
func (*GuildInviteConfirm) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{173}
}

func (x *GuildInviteConfirm) GetGId() uint32 {
	if x != nil && x.GId != nil {
		return *x.GId
	}
	return 0
}

func (x *GuildInviteConfirm) GetXMailId() uint32 {
	if x != nil && x.XMailId != nil {
		return *x.XMailId
	}
	return 0
}

//拒绝联盟邀请
type GuildInviteRefuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GId     *uint32 `protobuf:"varint,1,req,name=g_id,json=gId" json:"g_id,omitempty"` //拒绝加入的公会ID
	XMailId *uint32 `protobuf:"varint,2,req,name=_mail_id,json=MailId" json:"_mail_id,omitempty"`
}

func (x *GuildInviteRefuse) Reset() {
	*x = GuildInviteRefuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInviteRefuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInviteRefuse) ProtoMessage() {}

func (x *GuildInviteRefuse) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInviteRefuse.ProtoReflect.Descriptor instead.
func (*GuildInviteRefuse) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{174}
}

func (x *GuildInviteRefuse) GetGId() uint32 {
	if x != nil && x.GId != nil {
		return *x.GId
	}
	return 0
}

func (x *GuildInviteRefuse) GetXMailId() uint32 {
	if x != nil && x.XMailId != nil {
		return *x.XMailId
	}
	return 0
}

//改变玩家联盟阶级
type GuildChangeMemberLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLevel  *pb.GuildMemAuthority `protobuf:"varint,1,req,name=_level,json=Level,enum=Msg.GuildMemAuthority" json:"_level,omitempty"`
	XUserId *uint32               `protobuf:"varint,2,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`
}

func (x *GuildChangeMemberLevel) Reset() {
	*x = GuildChangeMemberLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildChangeMemberLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildChangeMemberLevel) ProtoMessage() {}

func (x *GuildChangeMemberLevel) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildChangeMemberLevel.ProtoReflect.Descriptor instead.
func (*GuildChangeMemberLevel) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{175}
}

func (x *GuildChangeMemberLevel) GetXLevel() pb.GuildMemAuthority {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return pb.GuildMemAuthority(1)
}

func (x *GuildChangeMemberLevel) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//联盟转让
type GuildTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`
}

func (x *GuildTransfer) Reset() {
	*x = GuildTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTransfer) ProtoMessage() {}

func (x *GuildTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTransfer.ProtoReflect.Descriptor instead.
func (*GuildTransfer) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{176}
}

func (x *GuildTransfer) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//解散士兵
type DismissSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop   *pb.Troop `protobuf:"bytes,1,req,name=_troop,json=Troop" json:"_troop,omitempty"` //兵种数据
	Building *int32    `protobuf:"varint,2,opt,name=building" json:"building,omitempty"`       //0:user  1:hospital  2:战车工厂 3:圣殿召回 4:圣殿复活
}

func (x *DismissSoldiers) Reset() {
	*x = DismissSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissSoldiers) ProtoMessage() {}

func (x *DismissSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissSoldiers.ProtoReflect.Descriptor instead.
func (*DismissSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{177}
}

func (x *DismissSoldiers) GetXTroop() *pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *DismissSoldiers) GetBuilding() int32 {
	if x != nil && x.Building != nil {
		return *x.Building
	}
	return 0
}

//设置用户语言
type SetLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLan *pb.LanType `protobuf:"varint,1,req,name=_lan,json=Lan,enum=Msg.LanType" json:"_lan,omitempty"`
}

func (x *SetLanguage) Reset() {
	*x = SetLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLanguage) ProtoMessage() {}

func (x *SetLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLanguage.ProtoReflect.Descriptor instead.
func (*SetLanguage) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{178}
}

func (x *SetLanguage) GetXLan() pb.LanType {
	if x != nil && x.XLan != nil {
		return *x.XLan
	}
	return pb.LanType(0)
}

//竞选盟主
type GuildElectOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GuildElectOwner) Reset() {
	*x = GuildElectOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildElectOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildElectOwner) ProtoMessage() {}

func (x *GuildElectOwner) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildElectOwner.ProtoReflect.Descriptor instead.
func (*GuildElectOwner) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{179}
}

func (x *GuildElectOwner) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//联盟捐献
type GuildDonateTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId  *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`
	XClearCd *int32 `protobuf:"varint,2,opt,name=_clear_cd,json=ClearCd" json:"_clear_cd,omitempty"` //0 false,1 true
	XGold    *int64 `protobuf:"varint,3,opt,name=_gold,json=Gold" json:"_gold,omitempty"`            //清cd 客户端计算的金币消耗数量
}

func (x *GuildDonateTech) Reset() {
	*x = GuildDonateTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDonateTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDonateTech) ProtoMessage() {}

func (x *GuildDonateTech) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDonateTech.ProtoReflect.Descriptor instead.
func (*GuildDonateTech) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{180}
}

func (x *GuildDonateTech) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *GuildDonateTech) GetXClearCd() int32 {
	if x != nil && x.XClearCd != nil {
		return *x.XClearCd
	}
	return 0
}

func (x *GuildDonateTech) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

//联盟商店购买
type GuildStoreBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`
	XAmount *int32 `protobuf:"varint,2,req,name=_amount,json=Amount" json:"_amount,omitempty"`
}

func (x *GuildStoreBuy) Reset() {
	*x = GuildStoreBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildStoreBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildStoreBuy) ProtoMessage() {}

func (x *GuildStoreBuy) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildStoreBuy.ProtoReflect.Descriptor instead.
func (*GuildStoreBuy) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{181}
}

func (x *GuildStoreBuy) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *GuildStoreBuy) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

//联盟科技清除CD
type GuildTechClearCd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *GuildTechClearCd) Reset() {
	*x = GuildTechClearCd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTechClearCd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTechClearCd) ProtoMessage() {}

func (x *GuildTechClearCd) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTechClearCd.ProtoReflect.Descriptor instead.
func (*GuildTechClearCd) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{182}
}

func (x *GuildTechClearCd) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//联盟竞选:报名
type GuildCampSignup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
	XIntro  *string `protobuf:"bytes,2,req,name=_intro,json=Intro" json:"_intro,omitempty"`       //竞选宣言
}

func (x *GuildCampSignup) Reset() {
	*x = GuildCampSignup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCampSignup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCampSignup) ProtoMessage() {}

func (x *GuildCampSignup) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCampSignup.ProtoReflect.Descriptor instead.
func (*GuildCampSignup) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{183}
}

func (x *GuildCampSignup) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildCampSignup) GetXIntro() string {
	if x != nil && x.XIntro != nil {
		return *x.XIntro
	}
	return ""
}

//联盟竞选:列表
type GuildCampList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *GuildCampList) Reset() {
	*x = GuildCampList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCampList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCampList) ProtoMessage() {}

func (x *GuildCampList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCampList.ProtoReflect.Descriptor instead.
func (*GuildCampList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{184}
}

func (x *GuildCampList) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//联盟竞选:投票
type GuildCampVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid     *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"`               //被投票玩家ID
	XItemNum *uint32 `protobuf:"varint,2,req,name=_item_num,json=ItemNum" json:"_item_num,omitempty"` //投票数量
}

func (x *GuildCampVote) Reset() {
	*x = GuildCampVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCampVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCampVote) ProtoMessage() {}

func (x *GuildCampVote) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCampVote.ProtoReflect.Descriptor instead.
func (*GuildCampVote) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{185}
}

func (x *GuildCampVote) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

func (x *GuildCampVote) GetXItemNum() uint32 {
	if x != nil && x.XItemNum != nil {
		return *x.XItemNum
	}
	return 0
}

//联盟合并:申请
type GuildMergeApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //合并联盟ID
}

func (x *GuildMergeApply) Reset() {
	*x = GuildMergeApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMergeApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMergeApply) ProtoMessage() {}

func (x *GuildMergeApply) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMergeApply.ProtoReflect.Descriptor instead.
func (*GuildMergeApply) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{186}
}

func (x *GuildMergeApply) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟合并:撤消申请
type GuildMergeCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //合并联盟ID
}

func (x *GuildMergeCancel) Reset() {
	*x = GuildMergeCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMergeCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMergeCancel) ProtoMessage() {}

func (x *GuildMergeCancel) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMergeCancel.ProtoReflect.Descriptor instead.
func (*GuildMergeCancel) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{187}
}

func (x *GuildMergeCancel) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟宝箱:设置匿名
type GuildBoxAnonymity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *GuildBoxAnonymity) Reset() {
	*x = GuildBoxAnonymity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxAnonymity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxAnonymity) ProtoMessage() {}

func (x *GuildBoxAnonymity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxAnonymity.ProtoReflect.Descriptor instead.
func (*GuildBoxAnonymity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{188}
}

func (x *GuildBoxAnonymity) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//联盟宝箱:取消匿名
type GuildBoxAnonyCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *GuildBoxAnonyCancel) Reset() {
	*x = GuildBoxAnonyCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxAnonyCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxAnonyCancel) ProtoMessage() {}

func (x *GuildBoxAnonyCancel) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxAnonyCancel.ProtoReflect.Descriptor instead.
func (*GuildBoxAnonyCancel) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{189}
}

func (x *GuildBoxAnonyCancel) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//联盟科技:捐献排行榜
type GuildTechDonateRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
	XPage    *uint32 `protobuf:"varint,2,opt,name=_page,json=Page" json:"_page,omitempty"`            //页码:第一页0|第二页1
}

func (x *GuildTechDonateRanking) Reset() {
	*x = GuildTechDonateRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTechDonateRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTechDonateRanking) ProtoMessage() {}

func (x *GuildTechDonateRanking) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTechDonateRanking.ProtoReflect.Descriptor instead.
func (*GuildTechDonateRanking) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{190}
}

func (x *GuildTechDonateRanking) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GuildTechDonateRanking) GetXPage() uint32 {
	if x != nil && x.XPage != nil {
		return *x.XPage
	}
	return 0
}

//联盟科技:捐献排行榜奖励
type GuildTechDonateAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAwardType *uint32 `protobuf:"varint,1,req,name=_award_type,json=AwardType" json:"_award_type,omitempty"` //奖励类型:1日奖励|2周奖励
	XPage      *uint32 `protobuf:"varint,2,opt,name=_page,json=Page" json:"_page,omitempty"`                  //页码:第一页0|第二页1
}

func (x *GuildTechDonateAward) Reset() {
	*x = GuildTechDonateAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTechDonateAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTechDonateAward) ProtoMessage() {}

func (x *GuildTechDonateAward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTechDonateAward.ProtoReflect.Descriptor instead.
func (*GuildTechDonateAward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{191}
}

func (x *GuildTechDonateAward) GetXAwardType() uint32 {
	if x != nil && x.XAwardType != nil {
		return *x.XAwardType
	}
	return 0
}

func (x *GuildTechDonateAward) GetXPage() uint32 {
	if x != nil && x.XPage != nil {
		return *x.XPage
	}
	return 0
}

//联盟建筑: 城市列表
type GuildBuildingCityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GuildBuildingCityList) Reset() {
	*x = GuildBuildingCityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBuildingCityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBuildingCityList) ProtoMessage() {}

func (x *GuildBuildingCityList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBuildingCityList.ProtoReflect.Descriptor instead.
func (*GuildBuildingCityList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{192}
}

func (x *GuildBuildingCityList) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟建筑: 设置保护罩
type GuildBuildingSetCover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBuildingId *uint32 `protobuf:"varint,1,req,name=_building_id,json=BuildingId" json:"_building_id,omitempty"` //建筑ID
}

func (x *GuildBuildingSetCover) Reset() {
	*x = GuildBuildingSetCover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBuildingSetCover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBuildingSetCover) ProtoMessage() {}

func (x *GuildBuildingSetCover) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBuildingSetCover.ProtoReflect.Descriptor instead.
func (*GuildBuildingSetCover) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{193}
}

func (x *GuildBuildingSetCover) GetXBuildingId() uint32 {
	if x != nil && x.XBuildingId != nil {
		return *x.XBuildingId
	}
	return 0
}

//联盟合并:列表
type GuildMergeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GuildMergeList) Reset() {
	*x = GuildMergeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMergeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMergeList) ProtoMessage() {}

func (x *GuildMergeList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMergeList.ProtoReflect.Descriptor instead.
func (*GuildMergeList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{194}
}

func (x *GuildMergeList) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟合并:同意
type GuildMergeAgree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //合并联盟ID
}

func (x *GuildMergeAgree) Reset() {
	*x = GuildMergeAgree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMergeAgree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMergeAgree) ProtoMessage() {}

func (x *GuildMergeAgree) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMergeAgree.ProtoReflect.Descriptor instead.
func (*GuildMergeAgree) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{195}
}

func (x *GuildMergeAgree) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟合并:拒绝
type GuildMergeReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //被合并联盟ID
}

func (x *GuildMergeReject) Reset() {
	*x = GuildMergeReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMergeReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMergeReject) ProtoMessage() {}

func (x *GuildMergeReject) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMergeReject.ProtoReflect.Descriptor instead.
func (*GuildMergeReject) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{196}
}

func (x *GuildMergeReject) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟:移民
type GuildMigrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //移民到的联盟ID
}

func (x *GuildMigrate) Reset() {
	*x = GuildMigrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMigrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMigrate) ProtoMessage() {}

func (x *GuildMigrate) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMigrate.ProtoReflect.Descriptor instead.
func (*GuildMigrate) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{197}
}

func (x *GuildMigrate) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟:设置联盟都城
type GuildSetMasterCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBuildingId *uint32 `protobuf:"varint,1,req,name=_building_id,json=BuildingId" json:"_building_id,omitempty"` //城市ID
}

func (x *GuildSetMasterCity) Reset() {
	*x = GuildSetMasterCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSetMasterCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSetMasterCity) ProtoMessage() {}

func (x *GuildSetMasterCity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSetMasterCity.ProtoReflect.Descriptor instead.
func (*GuildSetMasterCity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{198}
}

func (x *GuildSetMasterCity) GetXBuildingId() uint32 {
	if x != nil && x.XBuildingId != nil {
		return *x.XBuildingId
	}
	return 0
}

//联盟宝箱:列表
type GuildBoxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GuildBoxList) Reset() {
	*x = GuildBoxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxList) ProtoMessage() {}

func (x *GuildBoxList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxList.ProtoReflect.Descriptor instead.
func (*GuildBoxList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{199}
}

func (x *GuildBoxList) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟宝箱:打开
type GuildBoxOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //宝箱唯一ID
}

func (x *GuildBoxOpen) Reset() {
	*x = GuildBoxOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxOpen) ProtoMessage() {}

func (x *GuildBoxOpen) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxOpen.ProtoReflect.Descriptor instead.
func (*GuildBoxOpen) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{200}
}

func (x *GuildBoxOpen) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//联盟宝箱:打开全部(指定类型)
type GuildBoxOpenAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType           []uint32 `protobuf:"varint,1,rep,name=_type,json=Type" json:"_type,omitempty"`                                 //宝箱类型
	XTransparentArg *uint32  `protobuf:"varint,2,opt,name=_transparent_arg,json=TransparentArg" json:"_transparent_arg,omitempty"` //客户端透传参数
}

func (x *GuildBoxOpenAll) Reset() {
	*x = GuildBoxOpenAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxOpenAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxOpenAll) ProtoMessage() {}

func (x *GuildBoxOpenAll) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxOpenAll.ProtoReflect.Descriptor instead.
func (*GuildBoxOpenAll) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{201}
}

func (x *GuildBoxOpenAll) GetXType() []uint32 {
	if x != nil {
		return x.XType
	}
	return nil
}

func (x *GuildBoxOpenAll) GetXTransparentArg() uint32 {
	if x != nil && x.XTransparentArg != nil {
		return *x.XTransparentArg
	}
	return 0
}

//联盟科技:取消推荐
type GuildTechCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *uint32 `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"` //科技类型
}

func (x *GuildTechCancel) Reset() {
	*x = GuildTechCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTechCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTechCancel) ProtoMessage() {}

func (x *GuildTechCancel) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTechCancel.ProtoReflect.Descriptor instead.
func (*GuildTechCancel) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{202}
}

func (x *GuildTechCancel) GetXType() uint32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//行军加速
type SpeedupMarch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroopId  *uint32 `protobuf:"varint,1,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"`    // 军队id
	XItemId   *uint32 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`       // 道具ID
	XGems     *int32  `protobuf:"varint,3,opt,name=_gems,json=Gems" json:"_gems,omitempty"`               // 使用钻石
	XServerId *int32  `protobuf:"varint,4,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
	XFieldId  *int32  `protobuf:"varint,5,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"`    //不填或者0 不在战场
}

func (x *SpeedupMarch) Reset() {
	*x = SpeedupMarch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupMarch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupMarch) ProtoMessage() {}

func (x *SpeedupMarch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupMarch.ProtoReflect.Descriptor instead.
func (*SpeedupMarch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{203}
}

func (x *SpeedupMarch) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

func (x *SpeedupMarch) GetXItemId() uint32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SpeedupMarch) GetXGems() int32 {
	if x != nil && x.XGems != nil {
		return *x.XGems
	}
	return 0
}

func (x *SpeedupMarch) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *SpeedupMarch) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//获取声望排行列表
type GetPopularityRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`               //
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
}

func (x *GetPopularityRankList) Reset() {
	*x = GetPopularityRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopularityRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopularityRankList) ProtoMessage() {}

func (x *GetPopularityRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopularityRankList.ProtoReflect.Descriptor instead.
func (*GetPopularityRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{204}
}

func (x *GetPopularityRankList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetPopularityRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取轮盘的物品列表
type GetRouletteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetRouletteList) Reset() {
	*x = GetRouletteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouletteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouletteList) ProtoMessage() {}

func (x *GetRouletteList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouletteList.ProtoReflect.Descriptor instead.
func (*GetRouletteList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{205}
}

func (x *GetRouletteList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//取消当前宝箱
type AbandonTreasureBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *AbandonTreasureBox) Reset() {
	*x = AbandonTreasureBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonTreasureBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonTreasureBox) ProtoMessage() {}

func (x *AbandonTreasureBox) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonTreasureBox.ProtoReflect.Descriptor instead.
func (*AbandonTreasureBox) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{206}
}

func (x *AbandonTreasureBox) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//刷新轮盘
type RefreshRoulette struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *RefreshRoulette) Reset() {
	*x = RefreshRoulette{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRoulette) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRoulette) ProtoMessage() {}

func (x *RefreshRoulette) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRoulette.ProtoReflect.Descriptor instead.
func (*RefreshRoulette) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{207}
}

func (x *RefreshRoulette) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//转轮盘
type StartRoulette struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBets     []int32 `protobuf:"varint,1,rep,name=_bets,json=Bets" json:"_bets,omitempty"`             //各个位置的注数, 0 ~ 7
	XShowhand *int32  `protobuf:"varint,2,opt,name=_showhand,json=Showhand" json:"_showhand,omitempty"` //0: 普通模式下注，1： 梭哈模式下注
}

func (x *StartRoulette) Reset() {
	*x = StartRoulette{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRoulette) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoulette) ProtoMessage() {}

func (x *StartRoulette) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoulette.ProtoReflect.Descriptor instead.
func (*StartRoulette) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{208}
}

func (x *StartRoulette) GetXBets() []int32 {
	if x != nil {
		return x.XBets
	}
	return nil
}

func (x *StartRoulette) GetXShowhand() int32 {
	if x != nil && x.XShowhand != nil {
		return *x.XShowhand
	}
	return 0
}

//翻宝箱
type OpenTreasureBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPosition *int32 `protobuf:"varint,1,req,name=_position,json=Position" json:"_position,omitempty"` //物品的位置
	XGold     *int64 `protobuf:"varint,2,req,name=_gold,json=Gold" json:"_gold,omitempty"`             //所花的金币
	XOrder    *int32 `protobuf:"varint,3,req,name=_order,json=Order" json:"_order,omitempty"`          //第几次打开
}

func (x *OpenTreasureBox) Reset() {
	*x = OpenTreasureBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenTreasureBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTreasureBox) ProtoMessage() {}

func (x *OpenTreasureBox) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTreasureBox.ProtoReflect.Descriptor instead.
func (*OpenTreasureBox) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{209}
}

func (x *OpenTreasureBox) GetXPosition() int32 {
	if x != nil && x.XPosition != nil {
		return *x.XPosition
	}
	return 0
}

func (x *OpenTreasureBox) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *OpenTreasureBox) GetXOrder() int32 {
	if x != nil && x.XOrder != nil {
		return *x.XOrder
	}
	return 0
}

//花费金币购买轮盘积分
type BuyRouletteCredits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCredits *int32 `protobuf:"varint,1,req,name=_credits,json=Credits" json:"_credits,omitempty"` //购买的credits数
}

func (x *BuyRouletteCredits) Reset() {
	*x = BuyRouletteCredits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRouletteCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRouletteCredits) ProtoMessage() {}

func (x *BuyRouletteCredits) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRouletteCredits.ProtoReflect.Descriptor instead.
func (*BuyRouletteCredits) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{210}
}

func (x *BuyRouletteCredits) GetXCredits() int32 {
	if x != nil && x.XCredits != nil {
		return *x.XCredits
	}
	return 0
}

//刷新黑市
type BlackMarketRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeRefresh *int32 `protobuf:"varint,1,req,name=free_refresh,json=freeRefresh" json:"free_refresh,omitempty"` //是否免费刷新 0-false 1-true 2-不刷新，仅获取数据
	Gold        *int64 `protobuf:"varint,2,opt,name=gold" json:"gold,omitempty"`                                  //客户端计算的金币消耗数量
}

func (x *BlackMarketRefresh) Reset() {
	*x = BlackMarketRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackMarketRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackMarketRefresh) ProtoMessage() {}

func (x *BlackMarketRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackMarketRefresh.ProtoReflect.Descriptor instead.
func (*BlackMarketRefresh) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{211}
}

func (x *BlackMarketRefresh) GetFreeRefresh() int32 {
	if x != nil && x.FreeRefresh != nil {
		return *x.FreeRefresh
	}
	return 0
}

func (x *BlackMarketRefresh) GetGold() int64 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

type BlackMarketBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId   *int32 `protobuf:"varint,1,req,name=type_id,json=typeId" json:"type_id,omitempty"` //购买的id
	Position *int32 `protobuf:"varint,2,req,name=position" json:"position,omitempty"`           //购买的位置
}

func (x *BlackMarketBuy) Reset() {
	*x = BlackMarketBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackMarketBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackMarketBuy) ProtoMessage() {}

func (x *BlackMarketBuy) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackMarketBuy.ProtoReflect.Descriptor instead.
func (*BlackMarketBuy) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{212}
}

func (x *BlackMarketBuy) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *BlackMarketBuy) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

//刷新酒馆
type TavernRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFreeRefresh *int32 `protobuf:"varint,1,req,name=_free_refresh,json=FreeRefresh" json:"_free_refresh,omitempty"` //是否免费刷新 0-false 1-true
	XCost        *int32 `protobuf:"varint,2,opt,name=_cost,json=Cost" json:"_cost,omitempty"`                        //客户端计算的金币消耗数量
}

func (x *TavernRefresh) Reset() {
	*x = TavernRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TavernRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TavernRefresh) ProtoMessage() {}

func (x *TavernRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TavernRefresh.ProtoReflect.Descriptor instead.
func (*TavernRefresh) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{213}
}

func (x *TavernRefresh) GetXFreeRefresh() int32 {
	if x != nil && x.XFreeRefresh != nil {
		return *x.XFreeRefresh
	}
	return 0
}

func (x *TavernRefresh) GetXCost() int32 {
	if x != nil && x.XCost != nil {
		return *x.XCost
	}
	return 0
}

//酒馆购买英雄
type TavernBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId   *int32      `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`     //购买id
	XPosition *int32      `protobuf:"varint,2,req,name=_position,json=Position" json:"_position,omitempty"` //购买的位置
	XGeneral  *pb.General `protobuf:"bytes,3,opt,name=_general,json=General" json:"_general,omitempty"`     //将军信息
}

func (x *TavernBuy) Reset() {
	*x = TavernBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TavernBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TavernBuy) ProtoMessage() {}

func (x *TavernBuy) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TavernBuy.ProtoReflect.Descriptor instead.
func (*TavernBuy) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{214}
}

func (x *TavernBuy) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *TavernBuy) GetXPosition() int32 {
	if x != nil && x.XPosition != nil {
		return *x.XPosition
	}
	return 0
}

func (x *TavernBuy) GetXGeneral() *pb.General {
	if x != nil {
		return x.XGeneral
	}
	return nil
}

//刷新将军技能书
type GeneralSkillRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFreeRefresh *int32 `protobuf:"varint,1,req,name=_free_refresh,json=FreeRefresh" json:"_free_refresh,omitempty"` //是否免费刷新 0-false 1-true
	XCost        *int32 `protobuf:"varint,2,opt,name=_cost,json=Cost" json:"_cost,omitempty"`                        //客户端计算的金币消耗数量
}

func (x *GeneralSkillRefresh) Reset() {
	*x = GeneralSkillRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSkillRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSkillRefresh) ProtoMessage() {}

func (x *GeneralSkillRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSkillRefresh.ProtoReflect.Descriptor instead.
func (*GeneralSkillRefresh) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{215}
}

func (x *GeneralSkillRefresh) GetXFreeRefresh() int32 {
	if x != nil && x.XFreeRefresh != nil {
		return *x.XFreeRefresh
	}
	return 0
}

func (x *GeneralSkillRefresh) GetXCost() int32 {
	if x != nil && x.XCost != nil {
		return *x.XCost
	}
	return 0
}

//技能馆购买技能书
type GeneralSkillBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId   *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`     //购买id
	XPosition *int32 `protobuf:"varint,2,req,name=_position,json=Position" json:"_position,omitempty"` //购买的位置
	XSkillId  *int32 `protobuf:"varint,3,opt,name=_skill_id,json=SkillId" json:"_skill_id,omitempty"`  //技能id
}

func (x *GeneralSkillBuy) Reset() {
	*x = GeneralSkillBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSkillBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSkillBuy) ProtoMessage() {}

func (x *GeneralSkillBuy) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSkillBuy.ProtoReflect.Descriptor instead.
func (*GeneralSkillBuy) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{216}
}

func (x *GeneralSkillBuy) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *GeneralSkillBuy) GetXPosition() int32 {
	if x != nil && x.XPosition != nil {
		return *x.XPosition
	}
	return 0
}

func (x *GeneralSkillBuy) GetXSkillId() int32 {
	if x != nil && x.XSkillId != nil {
		return *x.XSkillId
	}
	return 0
}

//祭坛将军复活
type SacrificeReliveGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //复活的将军id
}

func (x *SacrificeReliveGeneral) Reset() {
	*x = SacrificeReliveGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SacrificeReliveGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SacrificeReliveGeneral) ProtoMessage() {}

func (x *SacrificeReliveGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SacrificeReliveGeneral.ProtoReflect.Descriptor instead.
func (*SacrificeReliveGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{217}
}

func (x *SacrificeReliveGeneral) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

//建筑修建完成
type BuildingFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position               *int32 `protobuf:"varint,1,req,name=position" json:"position,omitempty"`
	TypeId                 *int32 `protobuf:"varint,2,req,name=type_id,json=typeId" json:"type_id,omitempty"`
	CurrentLevel           *int32 `protobuf:"varint,3,req,name=current_level,json=currentLevel" json:"current_level,omitempty"`
	XClientTime            *int64 `protobuf:"varint,4,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`                                      //客户端调整后的时间
	XCsDeltaTime           *int64 `protobuf:"varint,5,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`                                 //客户端服务端时间差
	XBuildingStartTime     *int64 `protobuf:"varint,6,opt,name=_building_start_time,json=BuildingStartTime" json:"_building_start_time,omitempty"`               //客户端的建筑开始时间
	XBuildingRealStartTime *int64 `protobuf:"varint,7,opt,name=_building_real_start_time,json=BuildingRealStartTime" json:"_building_real_start_time,omitempty"` //客户端的建筑开始时间
}

func (x *BuildingFinish) Reset() {
	*x = BuildingFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFinish) ProtoMessage() {}

func (x *BuildingFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFinish.ProtoReflect.Descriptor instead.
func (*BuildingFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{218}
}

func (x *BuildingFinish) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *BuildingFinish) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *BuildingFinish) GetCurrentLevel() int32 {
	if x != nil && x.CurrentLevel != nil {
		return *x.CurrentLevel
	}
	return 0
}

func (x *BuildingFinish) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *BuildingFinish) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *BuildingFinish) GetXBuildingStartTime() int64 {
	if x != nil && x.XBuildingStartTime != nil {
		return *x.XBuildingStartTime
	}
	return 0
}

func (x *BuildingFinish) GetXBuildingRealStartTime() int64 {
	if x != nil && x.XBuildingRealStartTime != nil {
		return *x.XBuildingRealStartTime
	}
	return 0
}

//科技研究完成
type TechnologyFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position           *int32 `protobuf:"varint,1,req,name=position" json:"position,omitempty"`
	TypeId             *int32 `protobuf:"varint,2,req,name=type_id,json=typeId" json:"type_id,omitempty"`
	CurrentLevel       *int32 `protobuf:"varint,3,req,name=current_level,json=currentLevel" json:"current_level,omitempty"`
	XClientTime        *int64 `protobuf:"varint,4,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`                          //客户端调整后的时间
	XCsDeltaTime       *int64 `protobuf:"varint,5,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`                     //客户端服务端时间差
	XTechStartTime     *int64 `protobuf:"varint,6,opt,name=_tech_start_time,json=TechStartTime" json:"_tech_start_time,omitempty"`               //客户端的科技开始时间
	XTechRealStartTime *int64 `protobuf:"varint,7,opt,name=_tech_real_start_time,json=TechRealStartTime" json:"_tech_real_start_time,omitempty"` //客户端的科技开始时间
}

func (x *TechnologyFinish) Reset() {
	*x = TechnologyFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechnologyFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnologyFinish) ProtoMessage() {}

func (x *TechnologyFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnologyFinish.ProtoReflect.Descriptor instead.
func (*TechnologyFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{219}
}

func (x *TechnologyFinish) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *TechnologyFinish) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *TechnologyFinish) GetCurrentLevel() int32 {
	if x != nil && x.CurrentLevel != nil {
		return *x.CurrentLevel
	}
	return 0
}

func (x *TechnologyFinish) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *TechnologyFinish) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *TechnologyFinish) GetXTechStartTime() int64 {
	if x != nil && x.XTechStartTime != nil {
		return *x.XTechStartTime
	}
	return 0
}

func (x *TechnologyFinish) GetXTechRealStartTime() int64 {
	if x != nil && x.XTechRealStartTime != nil {
		return *x.XTechRealStartTime
	}
	return 0
}

//保存新手引导当前步骤
type SavePlayerSteps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSteps  *int32 `protobuf:"varint,1,req,name=_steps,json=Steps" json:"_steps,omitempty"`    //当前第几步
	XModule *int32 `protobuf:"varint,2,req,name=_module,json=Module" json:"_module,omitempty"` //模块ID
}

func (x *SavePlayerSteps) Reset() {
	*x = SavePlayerSteps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePlayerSteps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePlayerSteps) ProtoMessage() {}

func (x *SavePlayerSteps) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePlayerSteps.ProtoReflect.Descriptor instead.
func (*SavePlayerSteps) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{220}
}

func (x *SavePlayerSteps) GetXSteps() int32 {
	if x != nil && x.XSteps != nil {
		return *x.XSteps
	}
	return 0
}

func (x *SavePlayerSteps) GetXModule() int32 {
	if x != nil && x.XModule != nil {
		return *x.XModule
	}
	return 0
}

//伤兵治疗完成
type HealFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position           *int32      `protobuf:"varint,1,req,name=position" json:"position,omitempty"`
	XTroop             []*pb.Troop `protobuf:"bytes,2,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                                            // 伤兵各兵种
	XClientTime        *int64      `protobuf:"varint,3,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`                          //客户端调整后的时间
	XCsDeltaTime       *int64      `protobuf:"varint,4,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`                     //客户端服务端时间差
	XTechStartTime     *int64      `protobuf:"varint,5,opt,name=_tech_start_time,json=TechStartTime" json:"_tech_start_time,omitempty"`               //客户端的治疗开始时间
	XHealRealStartTime *int64      `protobuf:"varint,6,opt,name=_heal_real_start_time,json=HealRealStartTime" json:"_heal_real_start_time,omitempty"` //客户端的治疗开始时间
}

func (x *HealFinish) Reset() {
	*x = HealFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealFinish) ProtoMessage() {}

func (x *HealFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealFinish.ProtoReflect.Descriptor instead.
func (*HealFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{221}
}

func (x *HealFinish) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *HealFinish) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *HealFinish) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *HealFinish) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *HealFinish) GetXTechStartTime() int64 {
	if x != nil && x.XTechStartTime != nil {
		return *x.XTechStartTime
	}
	return 0
}

func (x *HealFinish) GetXHealRealStartTime() int64 {
	if x != nil && x.XHealRealStartTime != nil {
		return *x.XHealRealStartTime
	}
	return 0
}

//锻造完成
type SynthesisFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId         *int32        `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`                             // 建筑位置
	XItemId             *int32        `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                                         // 道具id
	XType               *pb.ForgeType `protobuf:"varint,3,req,name=_type,json=Type,enum=Msg.ForgeType,def=4" json:"_type,omitempty"`                        // 锻造类型
	XClientTime         *int64        `protobuf:"varint,4,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`                             //客户端调整后的时间
	XCsDeltaTime        *int64        `protobuf:"varint,5,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`                        //客户端服务端时间差
	XForgeStartTime     *int64        `protobuf:"varint,6,opt,name=_forge_start_time,json=ForgeStartTime" json:"_forge_start_time,omitempty"`               //客户端的锻造开始时间
	XForgeRealStartTime *int64        `protobuf:"varint,7,opt,name=_forge_real_start_time,json=ForgeRealStartTime" json:"_forge_real_start_time,omitempty"` //客户端的锻造开始时间
}

// Default values for SynthesisFinish fields.
const (
	Default_SynthesisFinish_XType = pb.ForgeType(4) // pb.ForgeType_synthesis
)

func (x *SynthesisFinish) Reset() {
	*x = SynthesisFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesisFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisFinish) ProtoMessage() {}

func (x *SynthesisFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisFinish.ProtoReflect.Descriptor instead.
func (*SynthesisFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{222}
}

func (x *SynthesisFinish) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SynthesisFinish) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SynthesisFinish) GetXType() pb.ForgeType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_SynthesisFinish_XType
}

func (x *SynthesisFinish) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SynthesisFinish) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *SynthesisFinish) GetXForgeStartTime() int64 {
	if x != nil && x.XForgeStartTime != nil {
		return *x.XForgeStartTime
	}
	return 0
}

func (x *SynthesisFinish) GetXForgeRealStartTime() int64 {
	if x != nil && x.XForgeRealStartTime != nil {
		return *x.XForgeRealStartTime
	}
	return 0
}

//获取一个用户的详细信息
type GetUserDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId []int32 `protobuf:"varint,1,rep,name=_user_id,json=UserId" json:"_user_id,omitempty"`
}

func (x *GetUserDetails) Reset() {
	*x = GetUserDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDetails) ProtoMessage() {}

func (x *GetUserDetails) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDetails.ProtoReflect.Descriptor instead.
func (*GetUserDetails) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{223}
}

func (x *GetUserDetails) GetXUserId() []int32 {
	if x != nil {
		return x.XUserId
	}
	return nil
}

//新手打野引导完成
type BattleGuideFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMonsterId *int32      `protobuf:"varint,1,req,name=_monster_id,json=MonsterId" json:"_monster_id,omitempty"` //怪物的ID
	XTargetWx  *int32      `protobuf:"varint,2,req,name=_target_wx,json=TargetWx" json:"_target_wx,omitempty"`    //目标的横坐标
	XTargetWy  *int32      `protobuf:"varint,3,req,name=_target_wy,json=TargetWy" json:"_target_wy,omitempty"`    //目标的纵坐标
	XTroop     []*pb.Troop `protobuf:"bytes,4,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                //出兵兵种
}

func (x *BattleGuideFinished) Reset() {
	*x = BattleGuideFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleGuideFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleGuideFinished) ProtoMessage() {}

func (x *BattleGuideFinished) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleGuideFinished.ProtoReflect.Descriptor instead.
func (*BattleGuideFinished) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{224}
}

func (x *BattleGuideFinished) GetXMonsterId() int32 {
	if x != nil && x.XMonsterId != nil {
		return *x.XMonsterId
	}
	return 0
}

func (x *BattleGuideFinished) GetXTargetWx() int32 {
	if x != nil && x.XTargetWx != nil {
		return *x.XTargetWx
	}
	return 0
}

func (x *BattleGuideFinished) GetXTargetWy() int32 {
	if x != nil && x.XTargetWy != nil {
		return *x.XTargetWy
	}
	return 0
}

func (x *BattleGuideFinished) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

//获取每日任务列表
type GetDailyTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetDailyTaskList) Reset() {
	*x = GetDailyTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyTaskList) ProtoMessage() {}

func (x *GetDailyTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyTaskList.ProtoReflect.Descriptor instead.
func (*GetDailyTaskList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{225}
}

func (x *GetDailyTaskList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取章节任务列表
type GetChapterTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetChapterTaskList) Reset() {
	*x = GetChapterTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChapterTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChapterTaskList) ProtoMessage() {}

func (x *GetChapterTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChapterTaskList.ProtoReflect.Descriptor instead.
func (*GetChapterTaskList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{226}
}

func (x *GetChapterTaskList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//从商城里购买物品
type BuyFromStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32  `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //物品ID
	XPrice  *int32  `protobuf:"varint,2,req,name=_price,json=Price" json:"_price,omitempty"`      //物品的单价
	XAmount *int32  `protobuf:"varint,3,req,name=_amount,json=Amount" json:"_amount,omitempty"`   //购买的数量
	XIsUse  *int32  `protobuf:"varint,4,opt,name=_isUse,json=IsUse" json:"_isUse,omitempty"`      //0:不使用 1：使用
	XTotal  *int32  `protobuf:"varint,5,opt,name=_total,json=Total" json:"_total,omitempty"`      //物品的总价
	XName   *string `protobuf:"bytes,6,opt,name=_name,json=Name" json:"_name,omitempty"`          //使用通缉令的昵称
}

func (x *BuyFromStore) Reset() {
	*x = BuyFromStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyFromStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyFromStore) ProtoMessage() {}

func (x *BuyFromStore) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyFromStore.ProtoReflect.Descriptor instead.
func (*BuyFromStore) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{227}
}

func (x *BuyFromStore) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *BuyFromStore) GetXPrice() int32 {
	if x != nil && x.XPrice != nil {
		return *x.XPrice
	}
	return 0
}

func (x *BuyFromStore) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

func (x *BuyFromStore) GetXIsUse() int32 {
	if x != nil && x.XIsUse != nil {
		return *x.XIsUse
	}
	return 0
}

func (x *BuyFromStore) GetXTotal() int32 {
	if x != nil && x.XTotal != nil {
		return *x.XTotal
	}
	return 0
}

func (x *BuyFromStore) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

//刷新一个每日任务
type RefreshDailyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId   *int32 `protobuf:"varint,1,req,name=_task_id,json=TaskId" json:"_task_id,omitempty"`       //任务ID
	XGoldTime *int32 `protobuf:"varint,2,req,name=_gold_time,json=GoldTime" json:"_gold_time,omitempty"` //第几次刷新
	XGoldCost *int32 `protobuf:"varint,3,req,name=_gold_cost,json=GoldCost" json:"_gold_cost,omitempty"` //花费金币
	XTaskLine *int32 `protobuf:"varint,4,req,name=_task_line,json=TaskLine" json:"_task_line,omitempty"` //任务线
}

func (x *RefreshDailyTask) Reset() {
	*x = RefreshDailyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshDailyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshDailyTask) ProtoMessage() {}

func (x *RefreshDailyTask) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshDailyTask.ProtoReflect.Descriptor instead.
func (*RefreshDailyTask) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{228}
}

func (x *RefreshDailyTask) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *RefreshDailyTask) GetXGoldTime() int32 {
	if x != nil && x.XGoldTime != nil {
		return *x.XGoldTime
	}
	return 0
}

func (x *RefreshDailyTask) GetXGoldCost() int32 {
	if x != nil && x.XGoldCost != nil {
		return *x.XGoldCost
	}
	return 0
}

func (x *RefreshDailyTask) GetXTaskLine() int32 {
	if x != nil && x.XTaskLine != nil {
		return *x.XTaskLine
	}
	return 0
}

//获取金币礼包购买内容
type GetIapList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetIapList) Reset() {
	*x = GetIapList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIapList) ProtoMessage() {}

func (x *GetIapList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIapList.ProtoReflect.Descriptor instead.
func (*GetIapList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{229}
}

func (x *GetIapList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取自己的遗迹列表
type GetRuinsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetRuinsList) Reset() {
	*x = GetRuinsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuinsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuinsList) ProtoMessage() {}

func (x *GetRuinsList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuinsList.ProtoReflect.Descriptor instead.
func (*GetRuinsList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{230}
}

func (x *GetRuinsList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//使用藏宝图开启遗迹
type OpenRuins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //物品ID
}

func (x *OpenRuins) Reset() {
	*x = OpenRuins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenRuins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRuins) ProtoMessage() {}

func (x *OpenRuins) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRuins.ProtoReflect.Descriptor instead.
func (*OpenRuins) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{231}
}

func (x *OpenRuins) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//获取王城信息（弃用）
type GetKingCastleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetKingCastleInfo) Reset() {
	*x = GetKingCastleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKingCastleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKingCastleInfo) ProtoMessage() {}

func (x *GetKingCastleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKingCastleInfo.ProtoReflect.Descriptor instead.
func (*GetKingCastleInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{232}
}

func (x *GetKingCastleInfo) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//设置当前王城头衔（弃用）
type SetGuildPlayerKingCastleJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPlayerId     *int32                `protobuf:"varint,1,req,name=_player_id,json=PlayerId" json:"_player_id,omitempty"`                                          // 任命王城玩家ID
	XGuildJobType *pb.KingCastleJobType `protobuf:"varint,2,req,name=_guild_job_type,json=GuildJobType,enum=Msg.KingCastleJobType" json:"_guild_job_type,omitempty"` // 任命职位
	PlayerName    *string               `protobuf:"bytes,3,req,name=player_name,json=playerName" json:"player_name,omitempty"`                                       // 玩家名字
}

func (x *SetGuildPlayerKingCastleJob) Reset() {
	*x = SetGuildPlayerKingCastleJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGuildPlayerKingCastleJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGuildPlayerKingCastleJob) ProtoMessage() {}

func (x *SetGuildPlayerKingCastleJob) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGuildPlayerKingCastleJob.ProtoReflect.Descriptor instead.
func (*SetGuildPlayerKingCastleJob) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{233}
}

func (x *SetGuildPlayerKingCastleJob) GetXPlayerId() int32 {
	if x != nil && x.XPlayerId != nil {
		return *x.XPlayerId
	}
	return 0
}

func (x *SetGuildPlayerKingCastleJob) GetXGuildJobType() pb.KingCastleJobType {
	if x != nil && x.XGuildJobType != nil {
		return *x.XGuildJobType
	}
	return pb.KingCastleJobType(0)
}

func (x *SetGuildPlayerKingCastleJob) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

// ----------------------- 将军相关 --------------------------
//将军相关接口
type General struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUpgradeStar       *GeneralUpgradeStar       `protobuf:"bytes,1,opt,name=_upgrade_star,json=UpgradeStar" json:"_upgrade_star,omitempty"`                      //将军升星请求 - 翻go
	XGeneralFire       *GeneralFire              `protobuf:"bytes,2,opt,name=_general_fire,json=GeneralFire" json:"_general_fire,omitempty"`                      //将军解雇请求 - 翻go
	XUpgradeQuality    *GeneralUpgradeQuality    `protobuf:"bytes,3,opt,name=_upgrade_quality,json=UpgradeQuality" json:"_upgrade_quality,omitempty"`             //将军升阶请求 - 移除
	XRankingList       *GeneralRankingList       `protobuf:"bytes,4,opt,name=_ranking_list,json=RankingList" json:"_ranking_list,omitempty"`                      //将军排行请求
	XRelive            *GeneralRelive            `protobuf:"bytes,5,opt,name=_relive,json=Relive" json:"_relive,omitempty"`                                       //将军复活请求 - 翻go
	XReliveSpeedup     *GeneralReliveSpeedup     `protobuf:"bytes,6,opt,name=_relive_speedup,json=ReliveSpeedup" json:"_relive_speedup,omitempty"`                //使用复活石加速将军复活 - 翻go
	XReliveFinished    *GeneralReliveFinished    `protobuf:"bytes,7,opt,name=_relive_finished,json=ReliveFinished" json:"_relive_finished,omitempty"`             //将军复活后告知服务器 - 翻go
	XBaptize           *GeneralBaptize           `protobuf:"bytes,8,opt,name=_baptize,json=Baptize" json:"_baptize,omitempty"`                                    //将军洗练接口 - 移除
	XBaptizeConfirm    *GeneralBaptizeConfirm    `protobuf:"bytes,9,opt,name=_baptize_confirm,json=BaptizeConfirm" json:"_baptize_confirm,omitempty"`             //将军洗练确认接口 - 移除
	XLearnSkill        *GeneralLearnSkill        `protobuf:"bytes,10,opt,name=_learn_skill,json=LearnSkill" json:"_learn_skill,omitempty"`                        //将军技能学习接口 - 移除
	XLearnSkillV2      *GeneralLearnSkillV2      `protobuf:"bytes,11,opt,name=_learn_skill_v2,json=LearnSkillV2" json:"_learn_skill_v2,omitempty"`                //将军技能学习新接口 - 翻go
	XLearnSkillConfirm *GeneralLearnSkillConfirm `protobuf:"bytes,12,opt,name=_learn_skill_confirm,json=LearnSkillConfirm" json:"_learn_skill_confirm,omitempty"` //将军技能替换确认 - 移除
	XUpgradeFeature    *GeneralUpgradeFeature    `protobuf:"bytes,13,opt,name=_upgrade_feature,json=UpgradeFeature" json:"_upgrade_feature,omitempty"`            //将军特性升级接口 - 移除
}

func (x *General) Reset() {
	*x = General{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *General) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*General) ProtoMessage() {}

func (x *General) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use General.ProtoReflect.Descriptor instead.
func (*General) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{234}
}

func (x *General) GetXUpgradeStar() *GeneralUpgradeStar {
	if x != nil {
		return x.XUpgradeStar
	}
	return nil
}

func (x *General) GetXGeneralFire() *GeneralFire {
	if x != nil {
		return x.XGeneralFire
	}
	return nil
}

func (x *General) GetXUpgradeQuality() *GeneralUpgradeQuality {
	if x != nil {
		return x.XUpgradeQuality
	}
	return nil
}

func (x *General) GetXRankingList() *GeneralRankingList {
	if x != nil {
		return x.XRankingList
	}
	return nil
}

func (x *General) GetXRelive() *GeneralRelive {
	if x != nil {
		return x.XRelive
	}
	return nil
}

func (x *General) GetXReliveSpeedup() *GeneralReliveSpeedup {
	if x != nil {
		return x.XReliveSpeedup
	}
	return nil
}

func (x *General) GetXReliveFinished() *GeneralReliveFinished {
	if x != nil {
		return x.XReliveFinished
	}
	return nil
}

func (x *General) GetXBaptize() *GeneralBaptize {
	if x != nil {
		return x.XBaptize
	}
	return nil
}

func (x *General) GetXBaptizeConfirm() *GeneralBaptizeConfirm {
	if x != nil {
		return x.XBaptizeConfirm
	}
	return nil
}

func (x *General) GetXLearnSkill() *GeneralLearnSkill {
	if x != nil {
		return x.XLearnSkill
	}
	return nil
}

func (x *General) GetXLearnSkillV2() *GeneralLearnSkillV2 {
	if x != nil {
		return x.XLearnSkillV2
	}
	return nil
}

func (x *General) GetXLearnSkillConfirm() *GeneralLearnSkillConfirm {
	if x != nil {
		return x.XLearnSkillConfirm
	}
	return nil
}

func (x *General) GetXUpgradeFeature() *GeneralUpgradeFeature {
	if x != nil {
		return x.XUpgradeFeature
	}
	return nil
}

//将军升星接口
type GeneralUpgradeStar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId        *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                        //需要升星的将军id
	XCurrentStarLevel *int32 `protobuf:"varint,2,req,name=_current_star_level,json=CurrentStarLevel" json:"_current_star_level,omitempty"` //当前将军的星级 0代表无星
	XCostResE         *int32 `protobuf:"varint,3,req,name=_cost_resE,json=CostResE" json:"_cost_resE,omitempty"`                           //客户端认为需要花费的资源E数
	XCostItem         *int32 `protobuf:"varint,4,req,name=_cost_item,json=CostItem" json:"_cost_item,omitempty"`                           //客户端认为需要花费的道具数
	XItemId           *int32 `protobuf:"varint,5,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                                 //客户端认为升星需要花费的道具
}

func (x *GeneralUpgradeStar) Reset() {
	*x = GeneralUpgradeStar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralUpgradeStar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralUpgradeStar) ProtoMessage() {}

func (x *GeneralUpgradeStar) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralUpgradeStar.ProtoReflect.Descriptor instead.
func (*GeneralUpgradeStar) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{235}
}

func (x *GeneralUpgradeStar) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralUpgradeStar) GetXCurrentStarLevel() int32 {
	if x != nil && x.XCurrentStarLevel != nil {
		return *x.XCurrentStarLevel
	}
	return 0
}

func (x *GeneralUpgradeStar) GetXCostResE() int32 {
	if x != nil && x.XCostResE != nil {
		return *x.XCostResE
	}
	return 0
}

func (x *GeneralUpgradeStar) GetXCostItem() int32 {
	if x != nil && x.XCostItem != nil {
		return *x.XCostItem
	}
	return 0
}

func (x *GeneralUpgradeStar) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//将军解雇接口
type GeneralFire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //需要解雇的将军id
	XType      *int32 `protobuf:"varint,2,opt,name=_type,json=Type" json:"_type,omitempty"`                  // 1：普通解雇 2：完美解雇
}

func (x *GeneralFire) Reset() {
	*x = GeneralFire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralFire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralFire) ProtoMessage() {}

func (x *GeneralFire) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralFire.ProtoReflect.Descriptor instead.
func (*GeneralFire) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{236}
}

func (x *GeneralFire) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralFire) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//将军升阶接口
type GeneralUpgradeQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId          *int64                 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                                                          //需要升阶的将军id
	XCurrentQualityType *pb.GeneralQualityType `protobuf:"varint,2,req,name=_current_quality_type,json=CurrentQualityType,enum=Msg.GeneralQualityType" json:"_current_quality_type,omitempty"` //当前将军的品质
	XCostResE           *int32                 `protobuf:"varint,3,req,name=_cost_resE,json=CostResE" json:"_cost_resE,omitempty"`                                                             //客户端认为将军升阶需要花费的资源E数
}

func (x *GeneralUpgradeQuality) Reset() {
	*x = GeneralUpgradeQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralUpgradeQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralUpgradeQuality) ProtoMessage() {}

func (x *GeneralUpgradeQuality) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralUpgradeQuality.ProtoReflect.Descriptor instead.
func (*GeneralUpgradeQuality) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{237}
}

func (x *GeneralUpgradeQuality) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralUpgradeQuality) GetXCurrentQualityType() pb.GeneralQualityType {
	if x != nil && x.XCurrentQualityType != nil {
		return *x.XCurrentQualityType
	}
	return pb.GeneralQualityType(1)
}

func (x *GeneralUpgradeQuality) GetXCostResE() int32 {
	if x != nil && x.XCostResE != nil {
		return *x.XCostResE
	}
	return 0
}

//将军排行接口
type GeneralRankingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos       *int32 `protobuf:"varint,1,req,name=pos" json:"pos,omitempty"`                             //当前将军排行列表的位置，用于load more 0:初次请求，大于0：用服务器返回的next_pos请求
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0 自己原服
}

func (x *GeneralRankingList) Reset() {
	*x = GeneralRankingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralRankingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralRankingList) ProtoMessage() {}

func (x *GeneralRankingList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralRankingList.ProtoReflect.Descriptor instead.
func (*GeneralRankingList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{238}
}

func (x *GeneralRankingList) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *GeneralRankingList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//将军复活接口
type GeneralRelive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //需要复活的将军id
	XCostTime  *int32 `protobuf:"varint,2,opt,name=_cost_time,json=CostTime" json:"_cost_time,omitempty"`    //复活需要发花费的时间
	XCancel    *int32 `protobuf:"varint,3,opt,name=_cancel,json=Cancel" json:"_cancel,omitempty"`            //取消复活操作：1
}

func (x *GeneralRelive) Reset() {
	*x = GeneralRelive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralRelive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralRelive) ProtoMessage() {}

func (x *GeneralRelive) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralRelive.ProtoReflect.Descriptor instead.
func (*GeneralRelive) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{239}
}

func (x *GeneralRelive) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralRelive) GetXCostTime() int32 {
	if x != nil && x.XCostTime != nil {
		return *x.XCostTime
	}
	return 0
}

func (x *GeneralRelive) GetXCancel() int32 {
	if x != nil && x.XCancel != nil {
		return *x.XCancel
	}
	return 0
}

//将军复活后告知服务器接口
type GeneralReliveFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //需要复活的将军id
}

func (x *GeneralReliveFinished) Reset() {
	*x = GeneralReliveFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReliveFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReliveFinished) ProtoMessage() {}

func (x *GeneralReliveFinished) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReliveFinished.ProtoReflect.Descriptor instead.
func (*GeneralReliveFinished) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{240}
}

func (x *GeneralReliveFinished) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

//使用复活石加速将军复活接口
type GeneralReliveSpeedup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId    *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`          //复活石道具id
	XGeneralId *int64 `protobuf:"varint,2,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //复活将军id
}

func (x *GeneralReliveSpeedup) Reset() {
	*x = GeneralReliveSpeedup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReliveSpeedup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReliveSpeedup) ProtoMessage() {}

func (x *GeneralReliveSpeedup) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReliveSpeedup.ProtoReflect.Descriptor instead.
func (*GeneralReliveSpeedup) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{241}
}

func (x *GeneralReliveSpeedup) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *GeneralReliveSpeedup) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

//将军洗练
type GeneralBaptize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
	XCostType  *int32 `protobuf:"varint,2,req,name=_cost_type,json=CostType" json:"_cost_type,omitempty"`    //将军洗练花费的类型，0：金币，1：钻石
	XCost      *int32 `protobuf:"varint,3,req,name=_cost,json=Cost" json:"_cost,omitempty"`                  //将军洗练花费
	XFilter    *int32 `protobuf:"varint,4,opt,name=_filter,json=Filter" json:"_filter,omitempty"`            //希望保留的洗练结果,二进制位组合
}

func (x *GeneralBaptize) Reset() {
	*x = GeneralBaptize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralBaptize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralBaptize) ProtoMessage() {}

func (x *GeneralBaptize) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralBaptize.ProtoReflect.Descriptor instead.
func (*GeneralBaptize) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{242}
}

func (x *GeneralBaptize) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralBaptize) GetXCostType() int32 {
	if x != nil && x.XCostType != nil {
		return *x.XCostType
	}
	return 0
}

func (x *GeneralBaptize) GetXCost() int32 {
	if x != nil && x.XCost != nil {
		return *x.XCost
	}
	return 0
}

func (x *GeneralBaptize) GetXFilter() int32 {
	if x != nil && x.XFilter != nil {
		return *x.XFilter
	}
	return 0
}

//将军洗练确认
type GeneralBaptizeConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64                 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
	XItem      *pb.GeneralBaptizeItem `protobuf:"bytes,2,req,name=_item,json=Item" json:"_item,omitempty"`                   //将军洗练属性结果
	XConfirm   *int32                 `protobuf:"varint,3,req,name=_confirm,json=Confirm" json:"_confirm,omitempty"`         //0: 取消，1：确认
}

func (x *GeneralBaptizeConfirm) Reset() {
	*x = GeneralBaptizeConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralBaptizeConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralBaptizeConfirm) ProtoMessage() {}

func (x *GeneralBaptizeConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralBaptizeConfirm.ProtoReflect.Descriptor instead.
func (*GeneralBaptizeConfirm) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{243}
}

func (x *GeneralBaptizeConfirm) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralBaptizeConfirm) GetXItem() *pb.GeneralBaptizeItem {
	if x != nil {
		return x.XItem
	}
	return nil
}

func (x *GeneralBaptizeConfirm) GetXConfirm() int32 {
	if x != nil && x.XConfirm != nil {
		return *x.XConfirm
	}
	return 0
}

//将军学习技能
type GeneralLearnSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
	XSkillId   *int32 `protobuf:"varint,2,req,name=_skill_id,json=SkillId" json:"_skill_id,omitempty"`       //技能id，即：道具id
}

func (x *GeneralLearnSkill) Reset() {
	*x = GeneralLearnSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralLearnSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralLearnSkill) ProtoMessage() {}

func (x *GeneralLearnSkill) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralLearnSkill.ProtoReflect.Descriptor instead.
func (*GeneralLearnSkill) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{244}
}

func (x *GeneralLearnSkill) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralLearnSkill) GetXSkillId() int32 {
	if x != nil && x.XSkillId != nil {
		return *x.XSkillId
	}
	return 0
}

//将军学习技能新接口
type GeneralLearnSkillV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
	XSkillId   *int32 `protobuf:"varint,2,req,name=_skill_id,json=SkillId" json:"_skill_id,omitempty"`       //技能id，即：道具id
	XId        *int64 `protobuf:"varint,3,opt,name=_id,json=Id" json:"_id,omitempty"`                        //道具唯一id
}

func (x *GeneralLearnSkillV2) Reset() {
	*x = GeneralLearnSkillV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralLearnSkillV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralLearnSkillV2) ProtoMessage() {}

func (x *GeneralLearnSkillV2) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralLearnSkillV2.ProtoReflect.Descriptor instead.
func (*GeneralLearnSkillV2) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{245}
}

func (x *GeneralLearnSkillV2) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralLearnSkillV2) GetXSkillId() int32 {
	if x != nil && x.XSkillId != nil {
		return *x.XSkillId
	}
	return 0
}

func (x *GeneralLearnSkillV2) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//将军技能替换确认
type GeneralLearnSkillConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId  *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`      //将军id
	XOldSkillId *int32 `protobuf:"varint,2,req,name=_old_skill_id,json=OldSkillId" json:"_old_skill_id,omitempty"` //被替换的老的技能id
	XNewSkillId *int32 `protobuf:"varint,3,req,name=_new_skill_id,json=NewSkillId" json:"_new_skill_id,omitempty"` //被替换的新的技能id
	XConfirm    *int32 `protobuf:"varint,4,req,name=_confirm,json=Confirm" json:"_confirm,omitempty"`              //1： 替换，0： 取消替换
}

func (x *GeneralLearnSkillConfirm) Reset() {
	*x = GeneralLearnSkillConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralLearnSkillConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralLearnSkillConfirm) ProtoMessage() {}

func (x *GeneralLearnSkillConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralLearnSkillConfirm.ProtoReflect.Descriptor instead.
func (*GeneralLearnSkillConfirm) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{246}
}

func (x *GeneralLearnSkillConfirm) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralLearnSkillConfirm) GetXOldSkillId() int32 {
	if x != nil && x.XOldSkillId != nil {
		return *x.XOldSkillId
	}
	return 0
}

func (x *GeneralLearnSkillConfirm) GetXNewSkillId() int32 {
	if x != nil && x.XNewSkillId != nil {
		return *x.XNewSkillId
	}
	return 0
}

func (x *GeneralLearnSkillConfirm) GetXConfirm() int32 {
	if x != nil && x.XConfirm != nil {
		return *x.XConfirm
	}
	return 0
}

//激活自己的分城
type ActiveSubCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XName      *string           `protobuf:"bytes,1,req,name=_name,json=Name" json:"_name,omitempty"`                                     //分城名字
	XGeneralId *int64            `protobuf:"varint,2,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                   //分城将领id
	XPolicy    *pb.SubCityPolicy `protobuf:"varint,3,req,name=_policy,json=Policy,enum=Msg.SubCityPolicy,def=0" json:"_policy,omitempty"` //发展策略
}

// Default values for ActiveSubCity fields.
const (
	Default_ActiveSubCity_XPolicy = pb.SubCityPolicy(0) // pb.SubCityPolicy_balance
)

func (x *ActiveSubCity) Reset() {
	*x = ActiveSubCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveSubCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveSubCity) ProtoMessage() {}

func (x *ActiveSubCity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveSubCity.ProtoReflect.Descriptor instead.
func (*ActiveSubCity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{247}
}

func (x *ActiveSubCity) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *ActiveSubCity) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *ActiveSubCity) GetXPolicy() pb.SubCityPolicy {
	if x != nil && x.XPolicy != nil {
		return *x.XPolicy
	}
	return Default_ActiveSubCity_XPolicy
}

//修改分城请求
type ModifySubCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId        *int32            `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                          //要修改的分城id
	XName      *string           `protobuf:"bytes,2,opt,name=_name,json=Name" json:"_name,omitempty"`                                     //要修改的分城名字
	XGeneralId *int64            `protobuf:"varint,3,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                   //分城将领id
	XPolicy    *pb.SubCityPolicy `protobuf:"varint,4,opt,name=_policy,json=Policy,enum=Msg.SubCityPolicy,def=0" json:"_policy,omitempty"` //修改分城策略
}

// Default values for ModifySubCity fields.
const (
	Default_ModifySubCity_XPolicy = pb.SubCityPolicy(0) // pb.SubCityPolicy_balance
)

func (x *ModifySubCity) Reset() {
	*x = ModifySubCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifySubCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifySubCity) ProtoMessage() {}

func (x *ModifySubCity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifySubCity.ProtoReflect.Descriptor instead.
func (*ModifySubCity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{248}
}

func (x *ModifySubCity) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ModifySubCity) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *ModifySubCity) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *ModifySubCity) GetXPolicy() pb.SubCityPolicy {
	if x != nil && x.XPolicy != nil {
		return *x.XPolicy
	}
	return Default_ModifySubCity_XPolicy
}

//分城购买锤子
type SubCityBuyBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientTime *int64 `protobuf:"varint,1,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"` //客户端购买的时间。用这个时间计算新建筑的起始时间
	XId         *int32 `protobuf:"varint,2,req,name=_id,json=Id" json:"_id,omitempty"`                           //分城的id
}

func (x *SubCityBuyBuilder) Reset() {
	*x = SubCityBuyBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCityBuyBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCityBuyBuilder) ProtoMessage() {}

func (x *SubCityBuyBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCityBuyBuilder.ProtoReflect.Descriptor instead.
func (*SubCityBuyBuilder) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{249}
}

func (x *SubCityBuyBuilder) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SubCityBuyBuilder) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//分城升级时代
type SubCityUpgradeTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientTime *int64 `protobuf:"varint,1,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"` //客户端购买的时间。用这个时间计算新建筑的起始时间
	XId         *int32 `protobuf:"varint,2,req,name=_id,json=Id" json:"_id,omitempty"`                           //分城的id
}

func (x *SubCityUpgradeTimes) Reset() {
	*x = SubCityUpgradeTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCityUpgradeTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCityUpgradeTimes) ProtoMessage() {}

func (x *SubCityUpgradeTimes) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCityUpgradeTimes.ProtoReflect.Descriptor instead.
func (*SubCityUpgradeTimes) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{250}
}

func (x *SubCityUpgradeTimes) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SubCityUpgradeTimes) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//分城建筑加速
type SubCitySpeedupBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientTime    *int64    `protobuf:"varint,1,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`            //客户端购买的时间。用这个时间计算新建筑的起始时间
	ItemId         *int32    `protobuf:"varint,2,req,name=item_id,json=itemId" json:"item_id,omitempty"`                          // 道具ID
	ItemAmount     *int32    `protobuf:"varint,3,req,name=item_amount,json=itemAmount" json:"item_amount,omitempty"`              // 道具数量
	XId            *int32    `protobuf:"varint,4,req,name=_id,json=Id" json:"_id,omitempty"`                                      //分城的id
	Builder        *int32    `protobuf:"varint,5,req,name=builder" json:"builder,omitempty"`                                      //建筑队列id
	XTypeId        *int32    `protobuf:"varint,6,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                        //建筑id
	XNextLevel     *int32    `protobuf:"varint,7,req,name=_next_level,json=NextLevel" json:"_next_level,omitempty"`               //准备升级到的建筑level
	XStartTime     *int64    `protobuf:"varint,8,req,name=_start_time,json=StartTime" json:"_start_time,omitempty"`               //buff后开始时间
	XRealStartTime *int64    `protobuf:"varint,9,req,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"` //建造实际开始时间
	XLeftTime      *int32    `protobuf:"varint,10,opt,name=_left_time,json=LeftTime" json:"_left_time,omitempty"`                 // 加速道具使用前 对象剩余的时间
	XAfterLevel    *int32    `protobuf:"varint,11,opt,name=_after_level,json=AfterLevel" json:"_after_level,omitempty"`           // 使用完道具以后 对象的等级
	XItemList      []*ItemUp `protobuf:"bytes,12,rep,name=_item_list,json=ItemList" json:"_item_list,omitempty"`                  // 一键加速
	XNewLeftTime   *int64    `protobuf:"varint,13,opt,name=_new_left_time,json=NewLeftTime" json:"_new_left_time,omitempty"`      // 64位修正 加速道具使用前 对象剩余的时间
	XBuyCost       *int64    `protobuf:"varint,14,opt,name=_buy_cost,json=BuyCost" json:"_buy_cost,omitempty"`                    // 购买并使用时花费的钻石
}

func (x *SubCitySpeedupBuilding) Reset() {
	*x = SubCitySpeedupBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCitySpeedupBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCitySpeedupBuilding) ProtoMessage() {}

func (x *SubCitySpeedupBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCitySpeedupBuilding.ProtoReflect.Descriptor instead.
func (*SubCitySpeedupBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{251}
}

func (x *SubCitySpeedupBuilding) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetItemAmount() int32 {
	if x != nil && x.ItemAmount != nil {
		return *x.ItemAmount
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetBuilder() int32 {
	if x != nil && x.Builder != nil {
		return *x.Builder
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXNextLevel() int32 {
	if x != nil && x.XNextLevel != nil {
		return *x.XNextLevel
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXLeftTime() int32 {
	if x != nil && x.XLeftTime != nil {
		return *x.XLeftTime
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXAfterLevel() int32 {
	if x != nil && x.XAfterLevel != nil {
		return *x.XAfterLevel
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXItemList() []*ItemUp {
	if x != nil {
		return x.XItemList
	}
	return nil
}

func (x *SubCitySpeedupBuilding) GetXNewLeftTime() int64 {
	if x != nil && x.XNewLeftTime != nil {
		return *x.XNewLeftTime
	}
	return 0
}

func (x *SubCitySpeedupBuilding) GetXBuyCost() int64 {
	if x != nil && x.XBuyCost != nil {
		return *x.XBuyCost
	}
	return 0
}

//分城买兵
type SubCityBuyTroop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientTime *int64      `protobuf:"varint,1,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"` //客户端购买的时间。
	XTroop      []*pb.Troop `protobuf:"bytes,2,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                   //客户端计算的买的兵
	XGold       *int64      `protobuf:"varint,3,req,name=_gold,json=Gold" json:"_gold,omitempty"`                     //客户端计算消耗的金币
	Id          *int32      `protobuf:"varint,4,req,name=id" json:"id,omitempty"`                                     //分城id
}

func (x *SubCityBuyTroop) Reset() {
	*x = SubCityBuyTroop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCityBuyTroop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCityBuyTroop) ProtoMessage() {}

func (x *SubCityBuyTroop) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCityBuyTroop.ProtoReflect.Descriptor instead.
func (*SubCityBuyTroop) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{252}
}

func (x *SubCityBuyTroop) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SubCityBuyTroop) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *SubCityBuyTroop) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SubCityBuyTroop) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

//放弃分城
type AbandonSubCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"` //分城id
}

func (x *AbandonSubCity) Reset() {
	*x = AbandonSubCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonSubCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonSubCity) ProtoMessage() {}

func (x *AbandonSubCity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonSubCity.ProtoReflect.Descriptor instead.
func (*AbandonSubCity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{253}
}

func (x *AbandonSubCity) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

//获取活跃度奖励 校验用
type GetActivityTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPoint  *int32  `protobuf:"varint,1,req,name=_point,json=Point" json:"_point,omitempty"`    //当前活跃度点数
	XTaskId *int32  `protobuf:"varint,2,opt,name=_taskId,json=TaskId" json:"_taskId,omitempty"` //任务ID
	XTask   *string `protobuf:"bytes,3,opt,name=_task,json=Task" json:"_task,omitempty"`        //任务名字
}

func (x *GetActivityTaskReward) Reset() {
	*x = GetActivityTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityTaskReward) ProtoMessage() {}

func (x *GetActivityTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityTaskReward.ProtoReflect.Descriptor instead.
func (*GetActivityTaskReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{254}
}

func (x *GetActivityTaskReward) GetXPoint() int32 {
	if x != nil && x.XPoint != nil {
		return *x.XPoint
	}
	return 0
}

func (x *GetActivityTaskReward) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *GetActivityTaskReward) GetXTask() string {
	if x != nil && x.XTask != nil {
		return *x.XTask
	}
	return ""
}

//获取聊天配置
type GetChatConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //占位，防止服务器解析错误
}

func (x *GetChatConfig) Reset() {
	*x = GetChatConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatConfig) ProtoMessage() {}

func (x *GetChatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatConfig.ProtoReflect.Descriptor instead.
func (*GetChatConfig) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{255}
}

func (x *GetChatConfig) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//切换文明
type ChangeEvony struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XEvony  *int32 `protobuf:"varint,1,opt,name=_evony,json=Evony" json:"_evony,omitempty"`      //文明
	XItemId *int32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //非0:道具ID,为0:使用钻石
}

func (x *ChangeEvony) Reset() {
	*x = ChangeEvony{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEvony) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEvony) ProtoMessage() {}

func (x *ChangeEvony) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEvony.ProtoReflect.Descriptor instead.
func (*ChangeEvony) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{256}
}

func (x *ChangeEvony) GetXEvony() int32 {
	if x != nil && x.XEvony != nil {
		return *x.XEvony
	}
	return 0
}

func (x *ChangeEvony) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//分解装备
type DestructEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId      *int32 `protobuf:"varint,1,req,name=_itemId,json=ItemId" json:"_itemId,omitempty"`                  //装备ID
	XAmount      *int32 `protobuf:"varint,2,req,name=_amount,json=Amount" json:"_amount,omitempty"`                  //分解数量
	XLordEquiped *int32 `protobuf:"varint,3,opt,name=_lord_equiped,json=LordEquiped" json:"_lord_equiped,omitempty"` // 是否是君主身上的宝物 0不是 1是
	XId          *int64 `protobuf:"varint,4,opt,name=_id,json=Id" json:"_id,omitempty"`                              // 装备唯一id
}

func (x *DestructEquipment) Reset() {
	*x = DestructEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestructEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestructEquipment) ProtoMessage() {}

func (x *DestructEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestructEquipment.ProtoReflect.Descriptor instead.
func (*DestructEquipment) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{257}
}

func (x *DestructEquipment) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *DestructEquipment) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

func (x *DestructEquipment) GetXLordEquiped() int32 {
	if x != nil && x.XLordEquiped != nil {
		return *x.XLordEquiped
	}
	return 0
}

func (x *DestructEquipment) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//重置君主天赋
type ResetLordGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCostGold      *int64 `protobuf:"varint,1,req,name=_cost_gold,json=CostGold" json:"_cost_gold,omitempty"`
	XItemId        *int32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`
	XPage          *int32 `protobuf:"varint,3,opt,name=_page,json=Page" json:"_page,omitempty"`
	XPrimaryItemId *int32 `protobuf:"varint,4,opt,name=_primary_item_id,json=PrimaryItemId" json:"_primary_item_id,omitempty"` // 唯一ID
}

func (x *ResetLordGift) Reset() {
	*x = ResetLordGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetLordGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetLordGift) ProtoMessage() {}

func (x *ResetLordGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetLordGift.ProtoReflect.Descriptor instead.
func (*ResetLordGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{258}
}

func (x *ResetLordGift) GetXCostGold() int64 {
	if x != nil && x.XCostGold != nil {
		return *x.XCostGold
	}
	return 0
}

func (x *ResetLordGift) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *ResetLordGift) GetXPage() int32 {
	if x != nil && x.XPage != nil {
		return *x.XPage
	}
	return 0
}

func (x *ResetLordGift) GetXPrimaryItemId() int32 {
	if x != nil && x.XPrimaryItemId != nil {
		return *x.XPrimaryItemId
	}
	return 0
}

//拉取联盟科技列表
type GetGuildTechData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GetGuildTechData) Reset() {
	*x = GetGuildTechData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildTechData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildTechData) ProtoMessage() {}

func (x *GetGuildTechData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildTechData.ProtoReflect.Descriptor instead.
func (*GetGuildTechData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{259}
}

func (x *GetGuildTechData) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//服务器信息（弃用）
type GetServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32 `protobuf:"varint,1,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *GetServerInfo) Reset() {
	*x = GetServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfo) ProtoMessage() {}

func (x *GetServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfo.ProtoReflect.Descriptor instead.
func (*GetServerInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{260}
}

func (x *GetServerInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//用户名全匹配搜索，或者用户id全匹配搜索。
type SearchUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XName    *string `protobuf:"bytes,1,req,name=_name,json=Name" json:"_name,omitempty"`                    //用户名或者用户id
	ServerId *int32  `protobuf:"varint,2,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"` //服务器id, 0：所有服搜索，1：指定服搜索
}

// Default values for SearchUser fields.
const (
	Default_SearchUser_ServerId = int32(0)
)

func (x *SearchUser) Reset() {
	*x = SearchUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUser) ProtoMessage() {}

func (x *SearchUser) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUser.ProtoReflect.Descriptor instead.
func (*SearchUser) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{261}
}

func (x *SearchUser) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *SearchUser) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return Default_SearchUser_ServerId
}

//-----------------------新的轮盘接口-----------------------
//获取轮盘列表
type GetWheelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetWheelList) Reset() {
	*x = GetWheelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWheelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWheelList) ProtoMessage() {}

func (x *GetWheelList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWheelList.ProtoReflect.Descriptor instead.
func (*GetWheelList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{262}
}

func (x *GetWheelList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//转轮盘
type PlayWheel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBet *int32 `protobuf:"varint,1,req,name=_bet,json=Bet" json:"_bet,omitempty"` //1: 转1次轮盘，10： 转10次轮盘
}

func (x *PlayWheel) Reset() {
	*x = PlayWheel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayWheel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayWheel) ProtoMessage() {}

func (x *PlayWheel) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayWheel.ProtoReflect.Descriptor instead.
func (*PlayWheel) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{263}
}

func (x *PlayWheel) GetXBet() int32 {
	if x != nil && x.XBet != nil {
		return *x.XBet
	}
	return 0
}

//收取转轮盘结果
type CollectWheelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemList []int32 `protobuf:"varint,1,rep,name=_item_list,json=ItemList" json:"_item_list,omitempty"` //收取转轮盘的结果，将赚取道具加入背包
}

func (x *CollectWheelData) Reset() {
	*x = CollectWheelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectWheelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectWheelData) ProtoMessage() {}

func (x *CollectWheelData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectWheelData.ProtoReflect.Descriptor instead.
func (*CollectWheelData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{264}
}

func (x *CollectWheelData) GetXItemList() []int32 {
	if x != nil {
		return x.XItemList
	}
	return nil
}

//设置转轮盘VIP等级玩法
type SetWheelVipPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XVip *int32 `protobuf:"varint,1,req,name=_vip,json=Vip" json:"_vip,omitempty"` //0: 普通玩法， 大于0根据配置表传入对应的vip
}

func (x *SetWheelVipPlay) Reset() {
	*x = SetWheelVipPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWheelVipPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWheelVipPlay) ProtoMessage() {}

func (x *SetWheelVipPlay) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWheelVipPlay.ProtoReflect.Descriptor instead.
func (*SetWheelVipPlay) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{265}
}

func (x *SetWheelVipPlay) GetXVip() int32 {
	if x != nil && x.XVip != nil {
		return *x.XVip
	}
	return 0
}

//获取用户vip玩法数据
type GetWheelVipPlayList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetWheelVipPlayList) Reset() {
	*x = GetWheelVipPlayList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWheelVipPlayList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWheelVipPlayList) ProtoMessage() {}

func (x *GetWheelVipPlayList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWheelVipPlayList.ProtoReflect.Descriptor instead.
func (*GetWheelVipPlayList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{266}
}

func (x *GetWheelVipPlayList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取轮盘积分
type GetWheelCredits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetWheelCredits) Reset() {
	*x = GetWheelCredits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWheelCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWheelCredits) ProtoMessage() {}

func (x *GetWheelCredits) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWheelCredits.ProtoReflect.Descriptor instead.
func (*GetWheelCredits) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{267}
}

func (x *GetWheelCredits) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type ClientLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLog []string `protobuf:"bytes,1,rep,name=_log,json=Log" json:"_log,omitempty"`
}

func (x *ClientLog) Reset() {
	*x = ClientLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLog) ProtoMessage() {}

func (x *ClientLog) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLog.ProtoReflect.Descriptor instead.
func (*ClientLog) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{268}
}

func (x *ClientLog) GetXLog() []string {
	if x != nil {
		return x.XLog
	}
	return nil
}

type SetDefendGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int32 `protobuf:"varint,1,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`     //守城将军ID，0代表设为空
	XPrincipal *int32 `protobuf:"varint,2,opt,name=_principal,json=Principal,def=1" json:"_principal,omitempty"` //是否主将
}

// Default values for SetDefendGeneral fields.
const (
	Default_SetDefendGeneral_XPrincipal = int32(1)
)

func (x *SetDefendGeneral) Reset() {
	*x = SetDefendGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefendGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefendGeneral) ProtoMessage() {}

func (x *SetDefendGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefendGeneral.ProtoReflect.Descriptor instead.
func (*SetDefendGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{269}
}

func (x *SetDefendGeneral) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *SetDefendGeneral) GetXPrincipal() int32 {
	if x != nil && x.XPrincipal != nil {
		return *x.XPrincipal
	}
	return Default_SetDefendGeneral_XPrincipal
}

//-----------------------新的活动轮盘-----------------------
//转活动轮盘
type NewRouletteTurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType  *int32 `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"`    //1: 单抽，10：10连抽
	XGems  *int32 `protobuf:"varint,2,req,name=_gems,json=Gems" json:"_gems,omitempty"`    //消耗钻石数
	XCoins *int32 `protobuf:"varint,3,opt,name=_coins,json=Coins" json:"_coins,omitempty"` //消耗代币数
}

func (x *NewRouletteTurn) Reset() {
	*x = NewRouletteTurn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRouletteTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRouletteTurn) ProtoMessage() {}

func (x *NewRouletteTurn) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRouletteTurn.ProtoReflect.Descriptor instead.
func (*NewRouletteTurn) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{270}
}

func (x *NewRouletteTurn) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *NewRouletteTurn) GetXGems() int32 {
	if x != nil && x.XGems != nil {
		return *x.XGems
	}
	return 0
}

func (x *NewRouletteTurn) GetXCoins() int32 {
	if x != nil && x.XCoins != nil {
		return *x.XCoins
	}
	return 0
}

//领取活动轮盘累计奖励
type NewRouletteAccumulateAwards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XStage *int32 `protobuf:"varint,1,req,name=_stage,json=Stage" json:"_stage,omitempty"` //领取累计奖励的档位
}

func (x *NewRouletteAccumulateAwards) Reset() {
	*x = NewRouletteAccumulateAwards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRouletteAccumulateAwards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRouletteAccumulateAwards) ProtoMessage() {}

func (x *NewRouletteAccumulateAwards) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRouletteAccumulateAwards.ProtoReflect.Descriptor instead.
func (*NewRouletteAccumulateAwards) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{271}
}

func (x *NewRouletteAccumulateAwards) GetXStage() int32 {
	if x != nil && x.XStage != nil {
		return *x.XStage
	}
	return 0
}

//---------------------------------------王城相关协议-----------------------------------------
//转让当前王城的国王 限制在联盟内
type ChangeKingPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPlayerId *int32 `protobuf:"varint,1,req,name=_player_id,json=PlayerId" json:"_player_id,omitempty"` // 受让的王城玩家ID
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 服务器id，不填的话，为当前服务器id
}

func (x *ChangeKingPlayer) Reset() {
	*x = ChangeKingPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeKingPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeKingPlayer) ProtoMessage() {}

func (x *ChangeKingPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeKingPlayer.ProtoReflect.Descriptor instead.
func (*ChangeKingPlayer) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{272}
}

func (x *ChangeKingPlayer) GetXPlayerId() int32 {
	if x != nil && x.XPlayerId != nil {
		return *x.XPlayerId
	}
	return 0
}

func (x *ChangeKingPlayer) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//设置国家名字和国旗
type SetKingNameLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KingName      *string `protobuf:"bytes,1,req,name=king_name,json=kingName" json:"king_name,omitempty"`
	KingCountryId *int32  `protobuf:"varint,2,req,name=king_country_id,json=kingCountryId" json:"king_country_id,omitempty"`
	XServerId     *int32  `protobuf:"varint,3,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 服务器id，不填的话，为当前服务器id
}

func (x *SetKingNameLanguage) Reset() {
	*x = SetKingNameLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKingNameLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKingNameLanguage) ProtoMessage() {}

func (x *SetKingNameLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKingNameLanguage.ProtoReflect.Descriptor instead.
func (*SetKingNameLanguage) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{273}
}

func (x *SetKingNameLanguage) GetKingName() string {
	if x != nil && x.KingName != nil {
		return *x.KingName
	}
	return ""
}

func (x *SetKingNameLanguage) GetKingCountryId() int32 {
	if x != nil && x.KingCountryId != nil {
		return *x.KingCountryId
	}
	return 0
}

func (x *SetKingNameLanguage) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//召回王城的军队
type CallBackKingCastleArmy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPlayerId *int32 `protobuf:"varint,1,req,name=_player_id,json=PlayerId" json:"_player_id,omitempty"` //在王城驻军的玩家ID
}

func (x *CallBackKingCastleArmy) Reset() {
	*x = CallBackKingCastleArmy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallBackKingCastleArmy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBackKingCastleArmy) ProtoMessage() {}

func (x *CallBackKingCastleArmy) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBackKingCastleArmy.ProtoReflect.Descriptor instead.
func (*CallBackKingCastleArmy) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{274}
}

func (x *CallBackKingCastleArmy) GetXPlayerId() int32 {
	if x != nil && x.XPlayerId != nil {
		return *x.XPlayerId
	}
	return 0
}

//新接口
//获取王城信息
type GetKindomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag,def=0" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 服务器id，不填的话，为当前服务器id
}

// Default values for GetKindomInfo fields.
const (
	Default_GetKindomInfo_XFlag = int32(0)
)

func (x *GetKindomInfo) Reset() {
	*x = GetKindomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKindomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKindomInfo) ProtoMessage() {}

func (x *GetKindomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKindomInfo.ProtoReflect.Descriptor instead.
func (*GetKindomInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{275}
}

func (x *GetKindomInfo) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return Default_GetKindomInfo_XFlag
}

func (x *GetKindomInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取王城头衔者，增量获取，每次获取20个
type GetKindomJobTitleUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XStartPos   *uint32 `protobuf:"varint,1,req,name=_start_pos,json=StartPos" json:"_start_pos,omitempty"`              //获取的起始位置，第一次传0，然后每次传服务器返回的值，服务器返回的值为0，则表明load more结束
	XRequireNum *uint32 `protobuf:"varint,2,req,name=_require_num,json=RequireNum,def=20" json:"_require_num,omitempty"` //每次请求返回的人数，默认20人
	XServerId   *int32  `protobuf:"varint,3,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`              // 服务器id，不填的话，为当前服务器id
}

// Default values for GetKindomJobTitleUsers fields.
const (
	Default_GetKindomJobTitleUsers_XRequireNum = uint32(20)
)

func (x *GetKindomJobTitleUsers) Reset() {
	*x = GetKindomJobTitleUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKindomJobTitleUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKindomJobTitleUsers) ProtoMessage() {}

func (x *GetKindomJobTitleUsers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKindomJobTitleUsers.ProtoReflect.Descriptor instead.
func (*GetKindomJobTitleUsers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{276}
}

func (x *GetKindomJobTitleUsers) GetXStartPos() uint32 {
	if x != nil && x.XStartPos != nil {
		return *x.XStartPos
	}
	return 0
}

func (x *GetKindomJobTitleUsers) GetXRequireNum() uint32 {
	if x != nil && x.XRequireNum != nil {
		return *x.XRequireNum
	}
	return Default_GetKindomJobTitleUsers_XRequireNum
}

func (x *GetKindomJobTitleUsers) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取历任国王，增量获取，每次获取20个
type GetKindomHistoryKings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XStartPos    *uint32 `protobuf:"varint,1,req,name=_start_pos,json=StartPos" json:"_start_pos,omitempty"`              //获取的起始位置，第一次传0，然后每次传服务器返回的值，服务器返回的值为0，则表明load more结束
	XRequireNum  *uint32 `protobuf:"varint,2,req,name=_require_num,json=RequireNum,def=20" json:"_require_num,omitempty"` //每次请求返回的人数，默认20人
	XServerId    *int32  `protobuf:"varint,3,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`              // 服务器id，不填的话，为当前服务器id
	XIsConqueror *int32  `protobuf:"varint,4,opt,name=_IsConqueror,json=IsConqueror" json:"_IsConqueror,omitempty"`       //征服者列表
}

// Default values for GetKindomHistoryKings fields.
const (
	Default_GetKindomHistoryKings_XRequireNum = uint32(20)
)

func (x *GetKindomHistoryKings) Reset() {
	*x = GetKindomHistoryKings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKindomHistoryKings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKindomHistoryKings) ProtoMessage() {}

func (x *GetKindomHistoryKings) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKindomHistoryKings.ProtoReflect.Descriptor instead.
func (*GetKindomHistoryKings) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{277}
}

func (x *GetKindomHistoryKings) GetXStartPos() uint32 {
	if x != nil && x.XStartPos != nil {
		return *x.XStartPos
	}
	return 0
}

func (x *GetKindomHistoryKings) GetXRequireNum() uint32 {
	if x != nil && x.XRequireNum != nil {
		return *x.XRequireNum
	}
	return Default_GetKindomHistoryKings_XRequireNum
}

func (x *GetKindomHistoryKings) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *GetKindomHistoryKings) GetXIsConqueror() int32 {
	if x != nil && x.XIsConqueror != nil {
		return *x.XIsConqueror
	}
	return 0
}

//获取战争列表, 增量获取，每次获取20个
type GetKindomMarchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XStartPos   *uint32 `protobuf:"varint,1,req,name=_start_pos,json=StartPos" json:"_start_pos,omitempty"`              //获取的起始位置，第一次传0，然后每次传服务器返回的值，服务器返回的值为0，则表明load more结束
	XRequireNum *uint32 `protobuf:"varint,2,req,name=_require_num,json=RequireNum,def=20" json:"_require_num,omitempty"` //每次请求返回的出征部队数，默认20
}

// Default values for GetKindomMarchList fields.
const (
	Default_GetKindomMarchList_XRequireNum = uint32(20)
)

func (x *GetKindomMarchList) Reset() {
	*x = GetKindomMarchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKindomMarchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKindomMarchList) ProtoMessage() {}

func (x *GetKindomMarchList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKindomMarchList.ProtoReflect.Descriptor instead.
func (*GetKindomMarchList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{278}
}

func (x *GetKindomMarchList) GetXStartPos() uint32 {
	if x != nil && x.XStartPos != nil {
		return *x.XStartPos
	}
	return 0
}

func (x *GetKindomMarchList) GetXRequireNum() uint32 {
	if x != nil && x.XRequireNum != nil {
		return *x.XRequireNum
	}
	return Default_GetKindomMarchList_XRequireNum
}

//设置王城玩家头衔
type SetKindomPlayerJobTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid          *int32                `protobuf:"varint,1,opt,name=_uid,json=Uid" json:"_uid,omitempty"`                                                           //根据id设置
	XGuildJobType *pb.KingCastleJobType `protobuf:"varint,2,req,name=_guild_job_type,json=GuildJobType,enum=Msg.KingCastleJobType" json:"_guild_job_type,omitempty"` // 任命职位
	XName         *string               `protobuf:"bytes,3,opt,name=_name,json=Name" json:"_name,omitempty"`                                                         //根据name设置
	XServerId     *int32                `protobuf:"varint,4,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                                          // 服务器id，不填的话，为当前服务器id
}

func (x *SetKindomPlayerJobTitle) Reset() {
	*x = SetKindomPlayerJobTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKindomPlayerJobTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKindomPlayerJobTitle) ProtoMessage() {}

func (x *SetKindomPlayerJobTitle) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKindomPlayerJobTitle.ProtoReflect.Descriptor instead.
func (*SetKindomPlayerJobTitle) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{279}
}

func (x *SetKindomPlayerJobTitle) GetXUid() int32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

func (x *SetKindomPlayerJobTitle) GetXGuildJobType() pb.KingCastleJobType {
	if x != nil && x.XGuildJobType != nil {
		return *x.XGuildJobType
	}
	return pb.KingCastleJobType(0)
}

func (x *SetKindomPlayerJobTitle) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *SetKindomPlayerJobTitle) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取王城驻军信息
type GetKindomArmySupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32 `protobuf:"varint,1,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 服务器id
}

func (x *GetKindomArmySupport) Reset() {
	*x = GetKindomArmySupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKindomArmySupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKindomArmySupport) ProtoMessage() {}

func (x *GetKindomArmySupport) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKindomArmySupport.ProtoReflect.Descriptor instead.
func (*GetKindomArmySupport) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{280}
}

func (x *GetKindomArmySupport) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//封赏玩家
type KingdomAwardPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *int32 `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`         //封赏玩家
	ItemId    *int32 `protobuf:"varint,2,req,name=item_id,json=itemId" json:"item_id,omitempty"`         //礼包
	XServerId *int32 `protobuf:"varint,3,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 服务器id，不填的话，为当前服务器id
}

func (x *KingdomAwardPlayer) Reset() {
	*x = KingdomAwardPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdomAwardPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdomAwardPlayer) ProtoMessage() {}

func (x *KingdomAwardPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdomAwardPlayer.ProtoReflect.Descriptor instead.
func (*KingdomAwardPlayer) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{281}
}

func (x *KingdomAwardPlayer) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *KingdomAwardPlayer) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *KingdomAwardPlayer) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//分城城墙修复
type SubCityHealWall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWallHealth    *int32 `protobuf:"varint,1,req,name=_wall_health,json=WallHealth" json:"_wall_health,omitempty"`            //城墙生命值
	XStartTime     *int64 `protobuf:"varint,2,req,name=_start_time,json=StartTime" json:"_start_time,omitempty"`               //
	XRealStartTime *int64 `protobuf:"varint,3,req,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"` //
	XId            *int32 `protobuf:"varint,4,req,name=_id,json=Id" json:"_id,omitempty"`                                      //分城的id
}

func (x *SubCityHealWall) Reset() {
	*x = SubCityHealWall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCityHealWall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCityHealWall) ProtoMessage() {}

func (x *SubCityHealWall) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCityHealWall.ProtoReflect.Descriptor instead.
func (*SubCityHealWall) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{282}
}

func (x *SubCityHealWall) GetXWallHealth() int32 {
	if x != nil && x.XWallHealth != nil {
		return *x.XWallHealth
	}
	return 0
}

func (x *SubCityHealWall) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *SubCityHealWall) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

func (x *SubCityHealWall) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//设置装备查看权限
type SetUserInfoPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XEquipment *int32 `protobuf:"varint,1,opt,name=_equipment,json=Equipment" json:"_equipment,omitempty"` //是否允许查看装备
	XFlag      *int32 `protobuf:"varint,2,opt,name=_flag,json=Flag,def=1" json:"_flag,omitempty"`          // 必填字段
}

// Default values for SetUserInfoPermission fields.
const (
	Default_SetUserInfoPermission_XFlag = int32(1)
)

func (x *SetUserInfoPermission) Reset() {
	*x = SetUserInfoPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserInfoPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserInfoPermission) ProtoMessage() {}

func (x *SetUserInfoPermission) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserInfoPermission.ProtoReflect.Descriptor instead.
func (*SetUserInfoPermission) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{283}
}

func (x *SetUserInfoPermission) GetXEquipment() int32 {
	if x != nil && x.XEquipment != nil {
		return *x.XEquipment
	}
	return 0
}

func (x *SetUserInfoPermission) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return Default_SetUserInfoPermission_XFlag
}

//设置vip查看权限
type SetVipPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XVip  *int32 `protobuf:"varint,1,opt,name=_vip,json=Vip" json:"_vip,omitempty"`          //是否允许查看vip
	XFlag *int32 `protobuf:"varint,2,opt,name=_flag,json=Flag,def=1" json:"_flag,omitempty"` // 必填字段
}

// Default values for SetVipPermission fields.
const (
	Default_SetVipPermission_XFlag = int32(1)
)

func (x *SetVipPermission) Reset() {
	*x = SetVipPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVipPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVipPermission) ProtoMessage() {}

func (x *SetVipPermission) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVipPermission.ProtoReflect.Descriptor instead.
func (*SetVipPermission) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{284}
}

func (x *SetVipPermission) GetXVip() int32 {
	if x != nil && x.XVip != nil {
		return *x.XVip
	}
	return 0
}

func (x *SetVipPermission) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return Default_SetVipPermission_XFlag
}

//设置联盟礼物来源查看权限
type SetAllienceGiftPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAllienceGiftFrom *int32 `protobuf:"varint,1,opt,name=_allience_gift_from,json=AllienceGiftFrom" json:"_allience_gift_from,omitempty"` //是否允许联盟礼物玩家
	XFlag             *int32 `protobuf:"varint,2,opt,name=_flag,json=Flag,def=1" json:"_flag,omitempty"`                                   // 必填字段
}

// Default values for SetAllienceGiftPermission fields.
const (
	Default_SetAllienceGiftPermission_XFlag = int32(1)
)

func (x *SetAllienceGiftPermission) Reset() {
	*x = SetAllienceGiftPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllienceGiftPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllienceGiftPermission) ProtoMessage() {}

func (x *SetAllienceGiftPermission) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllienceGiftPermission.ProtoReflect.Descriptor instead.
func (*SetAllienceGiftPermission) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{285}
}

func (x *SetAllienceGiftPermission) GetXAllienceGiftFrom() int32 {
	if x != nil && x.XAllienceGiftFrom != nil {
		return *x.XAllienceGiftFrom
	}
	return 0
}

func (x *SetAllienceGiftPermission) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return Default_SetAllienceGiftPermission_XFlag
}

//设置显示建筑名字权限
type SetBuildingNamePermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBuildingNameShow *int32 `protobuf:"varint,1,opt,name=_building_name_show,json=BuildingNameShow" json:"_building_name_show,omitempty"` //是否允许显示建筑名字
}

func (x *SetBuildingNamePermission) Reset() {
	*x = SetBuildingNamePermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBuildingNamePermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBuildingNamePermission) ProtoMessage() {}

func (x *SetBuildingNamePermission) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBuildingNamePermission.ProtoReflect.Descriptor instead.
func (*SetBuildingNamePermission) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{286}
}

func (x *SetBuildingNamePermission) GetXBuildingNameShow() int32 {
	if x != nil && x.XBuildingNameShow != nil {
		return *x.XBuildingNameShow
	}
	return 0
}

//解散分城士兵
type DismissSubcitySoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSubCityId *int32    `protobuf:"varint,1,req,name=_sub_city_id,json=SubCityId" json:"_sub_city_id,omitempty"` //分城id
	XTroop     *pb.Troop `protobuf:"bytes,2,req,name=_troop,json=Troop" json:"_troop,omitempty"`                  //兵种数据
}

func (x *DismissSubcitySoldiers) Reset() {
	*x = DismissSubcitySoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissSubcitySoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissSubcitySoldiers) ProtoMessage() {}

func (x *DismissSubcitySoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissSubcitySoldiers.ProtoReflect.Descriptor instead.
func (*DismissSubcitySoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{287}
}

func (x *DismissSubcitySoldiers) GetXSubCityId() int32 {
	if x != nil && x.XSubCityId != nil {
		return *x.XSubCityId
	}
	return 0
}

func (x *DismissSubcitySoldiers) GetXTroop() *pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

//获取联盟战历史纪录
type GetHistoryWarList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId      *int32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`                //公会ID(获取个人数据时填0)
	XPreviousTime *int32 `protobuf:"varint,2,req,name=_previous_time,json=PreviousTime" json:"_previous_time,omitempty"` //上一个time用于load more
}

func (x *GetHistoryWarList) Reset() {
	*x = GetHistoryWarList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryWarList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryWarList) ProtoMessage() {}

func (x *GetHistoryWarList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryWarList.ProtoReflect.Descriptor instead.
func (*GetHistoryWarList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{288}
}

func (x *GetHistoryWarList) GetXGuildId() int32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GetHistoryWarList) GetXPreviousTime() int32 {
	if x != nil && x.XPreviousTime != nil {
		return *x.XPreviousTime
	}
	return 0
}

//联盟战立即出兵
type SendGuildWarImmediately struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWarId    *uint32 `protobuf:"varint,1,req,name=_war_id,json=WarId" json:"_war_id,omitempty"`          //联盟战ID
	XCost     *uint32 `protobuf:"varint,2,req,name=_cost,json=Cost" json:"_cost,omitempty"`               //花费钻石数量
	XServerId *int32  `protobuf:"varint,3,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *SendGuildWarImmediately) Reset() {
	*x = SendGuildWarImmediately{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGuildWarImmediately) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGuildWarImmediately) ProtoMessage() {}

func (x *SendGuildWarImmediately) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGuildWarImmediately.ProtoReflect.Descriptor instead.
func (*SendGuildWarImmediately) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{289}
}

func (x *SendGuildWarImmediately) GetXWarId() uint32 {
	if x != nil && x.XWarId != nil {
		return *x.XWarId
	}
	return 0
}

func (x *SendGuildWarImmediately) GetXCost() uint32 {
	if x != nil && x.XCost != nil {
		return *x.XCost
	}
	return 0
}

func (x *SendGuildWarImmediately) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//加好友
type AddFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid  *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"`   //用户id
	XText *string `protobuf:"bytes,2,opt,name=_text,json=Text" json:"_text,omitempty"` //加好友时的文本
}

func (x *AddFriend) Reset() {
	*x = AddFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriend) ProtoMessage() {}

func (x *AddFriend) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriend.ProtoReflect.Descriptor instead.
func (*AddFriend) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{290}
}

func (x *AddFriend) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

func (x *AddFriend) GetXText() string {
	if x != nil && x.XText != nil {
		return *x.XText
	}
	return ""
}

//解除好友
type DelFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //用户id
}

func (x *DelFriend) Reset() {
	*x = DelFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFriend) ProtoMessage() {}

func (x *DelFriend) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFriend.ProtoReflect.Descriptor instead.
func (*DelFriend) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{291}
}

func (x *DelFriend) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//将某人拉入黑名单，加入黑名单自动解除好友关系
type AddUserToBlacklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //用户id
}

func (x *AddUserToBlacklist) Reset() {
	*x = AddUserToBlacklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserToBlacklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToBlacklist) ProtoMessage() {}

func (x *AddUserToBlacklist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToBlacklist.ProtoReflect.Descriptor instead.
func (*AddUserToBlacklist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{292}
}

func (x *AddUserToBlacklist) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//将某人移除黑名单
type DelUserFromBlacklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //用户id
}

func (x *DelUserFromBlacklist) Reset() {
	*x = DelUserFromBlacklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserFromBlacklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserFromBlacklist) ProtoMessage() {}

func (x *DelUserFromBlacklist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserFromBlacklist.ProtoReflect.Descriptor instead.
func (*DelUserFromBlacklist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{293}
}

func (x *DelUserFromBlacklist) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//好友请求确认
type ConfirmAddFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //请求加好友的用户id
}

func (x *ConfirmAddFriend) Reset() {
	*x = ConfirmAddFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmAddFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmAddFriend) ProtoMessage() {}

func (x *ConfirmAddFriend) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmAddFriend.ProtoReflect.Descriptor instead.
func (*ConfirmAddFriend) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{294}
}

func (x *ConfirmAddFriend) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//获取邮件战报详细内容
type GetMailReportDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMailId  *uint64 `protobuf:"varint,1,req,name=_mail_id,json=MailId" json:"_mail_id,omitempty"`    //邮件id
	XOwnerId *uint64 `protobuf:"varint,2,opt,name=_owner_id,json=OwnerId" json:"_owner_id,omitempty"` //拥有者id
}

func (x *GetMailReportDetail) Reset() {
	*x = GetMailReportDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMailReportDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailReportDetail) ProtoMessage() {}

func (x *GetMailReportDetail) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailReportDetail.ProtoReflect.Descriptor instead.
func (*GetMailReportDetail) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{295}
}

func (x *GetMailReportDetail) GetXMailId() uint64 {
	if x != nil && x.XMailId != nil {
		return *x.XMailId
	}
	return 0
}

func (x *GetMailReportDetail) GetXOwnerId() uint64 {
	if x != nil && x.XOwnerId != nil {
		return *x.XOwnerId
	}
	return 0
}

//拒绝好友请求
type RefuseAddFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //请求加好友的用户id
}

func (x *RefuseAddFriend) Reset() {
	*x = RefuseAddFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefuseAddFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefuseAddFriend) ProtoMessage() {}

func (x *RefuseAddFriend) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefuseAddFriend.ProtoReflect.Descriptor instead.
func (*RefuseAddFriend) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{296}
}

func (x *RefuseAddFriend) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//使用钻石直接购买资源
type BuyResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId  *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`    //购买的资源的道具id
	XCostGem *int32 `protobuf:"varint,2,req,name=_cost_gem,json=CostGem" json:"_cost_gem,omitempty"` //花费的钻石
	XItemNum *int32 `protobuf:"varint,3,opt,name=_item_num,json=ItemNum" json:"_item_num,omitempty"` //购买数量
}

func (x *BuyResource) Reset() {
	*x = BuyResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyResource) ProtoMessage() {}

func (x *BuyResource) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyResource.ProtoReflect.Descriptor instead.
func (*BuyResource) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{297}
}

func (x *BuyResource) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *BuyResource) GetXCostGem() int32 {
	if x != nil && x.XCostGem != nil {
		return *x.XCostGem
	}
	return 0
}

func (x *BuyResource) GetXItemNum() int32 {
	if x != nil && x.XItemNum != nil {
		return *x.XItemNum
	}
	return 0
}

//星标好友
type FavoriteFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //好友的用户id
}

func (x *FavoriteFriend) Reset() {
	*x = FavoriteFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteFriend) ProtoMessage() {}

func (x *FavoriteFriend) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteFriend.ProtoReflect.Descriptor instead.
func (*FavoriteFriend) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{298}
}

func (x *FavoriteFriend) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//取消星标好友
type UnfavoriteFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //好友的用户id
}

func (x *UnfavoriteFriend) Reset() {
	*x = UnfavoriteFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnfavoriteFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfavoriteFriend) ProtoMessage() {}

func (x *UnfavoriteFriend) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfavoriteFriend.ProtoReflect.Descriptor instead.
func (*UnfavoriteFriend) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{299}
}

func (x *UnfavoriteFriend) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//获取推荐好友，同语言，高战力，非好友的玩家进行推荐，每次返回5个
type SuggestFriends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *SuggestFriends) Reset() {
	*x = SuggestFriends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestFriends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestFriends) ProtoMessage() {}

func (x *SuggestFriends) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestFriends.ProtoReflect.Descriptor instead.
func (*SuggestFriends) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{300}
}

func (x *SuggestFriends) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取会员每日奖励
type ClaimMembershipReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMembershipId *uint32 `protobuf:"varint,1,req,name=_membership_id,json=MembershipId" json:"_membership_id,omitempty"`
}

func (x *ClaimMembershipReward) Reset() {
	*x = ClaimMembershipReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimMembershipReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimMembershipReward) ProtoMessage() {}

func (x *ClaimMembershipReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimMembershipReward.ProtoReflect.Descriptor instead.
func (*ClaimMembershipReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{301}
}

func (x *ClaimMembershipReward) GetXMembershipId() uint32 {
	if x != nil && x.XMembershipId != nil {
		return *x.XMembershipId
	}
	return 0
}

type ChatHistoryWholeFetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChatHistoryWholeFetch *chatmessage.ChatHistoryWholeFetch `protobuf:"bytes,1,req,name=_chat_history_whole_fetch,json=ChatHistoryWholeFetch" json:"_chat_history_whole_fetch,omitempty"` //获取聊天历史记录
}

func (x *ChatHistoryWholeFetch) Reset() {
	*x = ChatHistoryWholeFetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryWholeFetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryWholeFetch) ProtoMessage() {}

func (x *ChatHistoryWholeFetch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryWholeFetch.ProtoReflect.Descriptor instead.
func (*ChatHistoryWholeFetch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{302}
}

func (x *ChatHistoryWholeFetch) GetXChatHistoryWholeFetch() *chatmessage.ChatHistoryWholeFetch {
	if x != nil {
		return x.XChatHistoryWholeFetch
	}
	return nil
}

//获取消费奖励
type ClaimConsumerReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`
	XSubId *int32 `protobuf:"varint,2,req,name=_sub_id,json=SubId" json:"_sub_id,omitempty"`
}

func (x *ClaimConsumerReward) Reset() {
	*x = ClaimConsumerReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimConsumerReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimConsumerReward) ProtoMessage() {}

func (x *ClaimConsumerReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimConsumerReward.ProtoReflect.Descriptor instead.
func (*ClaimConsumerReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{303}
}

func (x *ClaimConsumerReward) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ClaimConsumerReward) GetXSubId() int32 {
	if x != nil && x.XSubId != nil {
		return *x.XSubId
	}
	return 0
}

//巡查功能
//刷新巡查内容
type RefreshPatrol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCost *int32 `protobuf:"varint,1,req,name=_cost,json=Cost" json:"_cost,omitempty"` //需要花费的金币数
}

func (x *RefreshPatrol) Reset() {
	*x = RefreshPatrol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshPatrol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshPatrol) ProtoMessage() {}

func (x *RefreshPatrol) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshPatrol.ProtoReflect.Descriptor instead.
func (*RefreshPatrol) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{304}
}

func (x *RefreshPatrol) GetXCost() int32 {
	if x != nil && x.XCost != nil {
		return *x.XCost
	}
	return 0
}

//领取巡查奖励
type CollectPatrolAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XConfigId *int32                               `protobuf:"varint,1,req,name=_config_id,json=ConfigId" json:"_config_id,omitempty"` //领取奖励的config id
	XType     *CollectPatrolAwardCollectPatrolType `protobuf:"varint,2,req,name=_type,json=Type,enum=MsgUp.CollectPatrolAwardCollectPatrolType" json:"_type,omitempty"`
}

func (x *CollectPatrolAward) Reset() {
	*x = CollectPatrolAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPatrolAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPatrolAward) ProtoMessage() {}

func (x *CollectPatrolAward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPatrolAward.ProtoReflect.Descriptor instead.
func (*CollectPatrolAward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{305}
}

func (x *CollectPatrolAward) GetXConfigId() int32 {
	if x != nil && x.XConfigId != nil {
		return *x.XConfigId
	}
	return 0
}

func (x *CollectPatrolAward) GetXType() CollectPatrolAwardCollectPatrolType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return CollectPatrolAward_free_collect
}

//自动巡查
type AutoPatrol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XConfigId    *int32 `protobuf:"varint,1,req,name=_config_id,json=ConfigId" json:"_config_id,omitempty"`          //自动巡查，config id
	XPatrolCount *int32 `protobuf:"varint,2,req,name=_patrol_count,json=PatrolCount" json:"_patrol_count,omitempty"` //自动巡查次数
}

func (x *AutoPatrol) Reset() {
	*x = AutoPatrol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoPatrol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoPatrol) ProtoMessage() {}

func (x *AutoPatrol) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoPatrol.ProtoReflect.Descriptor instead.
func (*AutoPatrol) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{306}
}

func (x *AutoPatrol) GetXConfigId() int32 {
	if x != nil && x.XConfigId != nil {
		return *x.XConfigId
	}
	return 0
}

func (x *AutoPatrol) GetXPatrolCount() int32 {
	if x != nil && x.XPatrolCount != nil {
		return *x.XPatrolCount
	}
	return 0
}

type GetServerActiveReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId      *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                  //活动Id
	XCostGem *int32 `protobuf:"varint,2,opt,name=_cost_gem,json=CostGem" json:"_cost_gem,omitempty"` //补签所需钻石数
	XPoint   *int32 `protobuf:"varint,3,opt,name=_point,json=Point" json:"_point,omitempty"`         //领取阶段奖励对应的点数
}

func (x *GetServerActiveReward) Reset() {
	*x = GetServerActiveReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerActiveReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerActiveReward) ProtoMessage() {}

func (x *GetServerActiveReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerActiveReward.ProtoReflect.Descriptor instead.
func (*GetServerActiveReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{307}
}

func (x *GetServerActiveReward) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GetServerActiveReward) GetXCostGem() int32 {
	if x != nil && x.XCostGem != nil {
		return *x.XCostGem
	}
	return 0
}

func (x *GetServerActiveReward) GetXPoint() int32 {
	if x != nil && x.XPoint != nil {
		return *x.XPoint
	}
	return 0
}

//打开联盟礼物
type AllianceUseGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGiftId []int32 `protobuf:"varint,1,rep,name=_gift_id,json=GiftId" json:"_gift_id,omitempty"` //礼包ID
}

func (x *AllianceUseGift) Reset() {
	*x = AllianceUseGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllianceUseGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllianceUseGift) ProtoMessage() {}

func (x *AllianceUseGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllianceUseGift.ProtoReflect.Descriptor instead.
func (*AllianceUseGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{308}
}

func (x *AllianceUseGift) GetXGiftId() []int32 {
	if x != nil {
		return x.XGiftId
	}
	return nil
}

//打开全服礼物
type KingUseGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGiftId []int32 `protobuf:"varint,1,rep,name=_gift_id,json=GiftId" json:"_gift_id,omitempty"` //礼包ID
}

func (x *KingUseGift) Reset() {
	*x = KingUseGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingUseGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingUseGift) ProtoMessage() {}

func (x *KingUseGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingUseGift.ProtoReflect.Descriptor instead.
func (*KingUseGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{309}
}

func (x *KingUseGift) GetXGiftId() []int32 {
	if x != nil {
		return x.XGiftId
	}
	return nil
}

type ServerActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *ServerActive) Reset() {
	*x = ServerActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerActive) ProtoMessage() {}

func (x *ServerActive) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerActive.ProtoReflect.Descriptor instead.
func (*ServerActive) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{310}
}

func (x *ServerActive) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获得全服礼物
type GetKingGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetKingGift) Reset() {
	*x = GetKingGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKingGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKingGift) ProtoMessage() {}

func (x *GetKingGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKingGift.ProtoReflect.Descriptor instead.
func (*GetKingGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{311}
}

func (x *GetKingGift) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取好友列表
type GetFriendsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetFriendsList) Reset() {
	*x = GetFriendsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsList) ProtoMessage() {}

func (x *GetFriendsList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsList.ProtoReflect.Descriptor instead.
func (*GetFriendsList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{312}
}

func (x *GetFriendsList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//修改服务器城堡
type ChangeServerCastle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCastleId *int32 `protobuf:"varint,1,req,name=_castle_id,json=CastleId" json:"_castle_id,omitempty"` //server castle id
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //不填或者0原服，服务器id
}

func (x *ChangeServerCastle) Reset() {
	*x = ChangeServerCastle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeServerCastle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeServerCastle) ProtoMessage() {}

func (x *ChangeServerCastle) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeServerCastle.ProtoReflect.Descriptor instead.
func (*ChangeServerCastle) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{313}
}

func (x *ChangeServerCastle) GetXCastleId() int32 {
	if x != nil && x.XCastleId != nil {
		return *x.XCastleId
	}
	return 0
}

func (x *ChangeServerCastle) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//检查buff是否一致
type CheckBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBuffList []*pb.BuffInfo `protobuf:"bytes,1,rep,name=_buff_list,json=BuffList" json:"_buff_list,omitempty"`
}

func (x *CheckBuff) Reset() {
	*x = CheckBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBuff) ProtoMessage() {}

func (x *CheckBuff) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBuff.ProtoReflect.Descriptor instead.
func (*CheckBuff) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{314}
}

func (x *CheckBuff) GetXBuffList() []*pb.BuffInfo {
	if x != nil {
		return x.XBuffList
	}
	return nil
}

//检查轮盘播报
type CheckRotary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *CheckRotary) Reset() {
	*x = CheckRotary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRotary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRotary) ProtoMessage() {}

func (x *CheckRotary) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRotary.ProtoReflect.Descriptor instead.
func (*CheckRotary) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{315}
}

func (x *CheckRotary) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//检查轮盘高级播报
type CheckRotaryAdvance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLastTime *uint32 `protobuf:"varint,1,opt,name=_last_time,json=LastTime" json:"_last_time,omitempty"` //上次拿到播报的时间
}

func (x *CheckRotaryAdvance) Reset() {
	*x = CheckRotaryAdvance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRotaryAdvance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRotaryAdvance) ProtoMessage() {}

func (x *CheckRotaryAdvance) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRotaryAdvance.ProtoReflect.Descriptor instead.
func (*CheckRotaryAdvance) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{316}
}

func (x *CheckRotaryAdvance) GetXLastTime() uint32 {
	if x != nil && x.XLastTime != nil {
		return *x.XLastTime
	}
	return 0
}

//开启异鬼来袭活动
type WhiteWalkerActiveStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *WhiteWalkerActiveStart) Reset() {
	*x = WhiteWalkerActiveStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteWalkerActiveStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteWalkerActiveStart) ProtoMessage() {}

func (x *WhiteWalkerActiveStart) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteWalkerActiveStart.ProtoReflect.Descriptor instead.
func (*WhiteWalkerActiveStart) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{317}
}

func (x *WhiteWalkerActiveStart) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//王国全服礼物
type GetLordHourGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGiftKey *int32 `protobuf:"varint,1,req,name=_gift_key,json=GiftKey" json:"_gift_key,omitempty"`
}

func (x *GetLordHourGift) Reset() {
	*x = GetLordHourGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLordHourGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLordHourGift) ProtoMessage() {}

func (x *GetLordHourGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLordHourGift.ProtoReflect.Descriptor instead.
func (*GetLordHourGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{318}
}

func (x *GetLordHourGift) GetXGiftKey() int32 {
	if x != nil && x.XGiftKey != nil {
		return *x.XGiftKey
	}
	return 0
}

//遣返合战成员
type RepatriateWarMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWarId   *int32 `protobuf:"varint,1,req,name=_war_id,json=WarId" json:"_war_id,omitempty"`
	XTroopId *int32 `protobuf:"varint,2,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"`
	XFieldId *int32 `protobuf:"varint,3,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"`
}

func (x *RepatriateWarMember) Reset() {
	*x = RepatriateWarMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepatriateWarMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepatriateWarMember) ProtoMessage() {}

func (x *RepatriateWarMember) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepatriateWarMember.ProtoReflect.Descriptor instead.
func (*RepatriateWarMember) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{319}
}

func (x *RepatriateWarMember) GetXWarId() int32 {
	if x != nil && x.XWarId != nil {
		return *x.XWarId
	}
	return 0
}

func (x *RepatriateWarMember) GetXTroopId() int32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

func (x *RepatriateWarMember) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//获取酒馆送体力
type GetTarvenStamina struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XKey *int32 `protobuf:"varint,1,req,name=_key,json=Key" json:"_key,omitempty"`
}

func (x *GetTarvenStamina) Reset() {
	*x = GetTarvenStamina{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTarvenStamina) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTarvenStamina) ProtoMessage() {}

func (x *GetTarvenStamina) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTarvenStamina.ProtoReflect.Descriptor instead.
func (*GetTarvenStamina) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{320}
}

func (x *GetTarvenStamina) GetXKey() int32 {
	if x != nil && x.XKey != nil {
		return *x.XKey
	}
	return 0
}

//添加收藏坐标
type AddFavoriteCoord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XInfo      *pb.FavoriteCoordInfo   `protobuf:"bytes,1,opt,name=_info,json=Info" json:"_info,omitempty"`
	XOperation *int32                  `protobuf:"varint,2,opt,name=_operation,json=Operation" json:"_operation,omitempty"` //0:add 1: delete
	XBatch     []*pb.FavoriteCoordInfo `protobuf:"bytes,3,rep,name=_batch,json=Batch" json:"_batch,omitempty"`              //批量删除
}

func (x *AddFavoriteCoord) Reset() {
	*x = AddFavoriteCoord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFavoriteCoord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFavoriteCoord) ProtoMessage() {}

func (x *AddFavoriteCoord) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFavoriteCoord.ProtoReflect.Descriptor instead.
func (*AddFavoriteCoord) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{321}
}

func (x *AddFavoriteCoord) GetXInfo() *pb.FavoriteCoordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

func (x *AddFavoriteCoord) GetXOperation() int32 {
	if x != nil && x.XOperation != nil {
		return *x.XOperation
	}
	return 0
}

func (x *AddFavoriteCoord) GetXBatch() []*pb.FavoriteCoordInfo {
	if x != nil {
		return x.XBatch
	}
	return nil
}

//获取收藏坐标列表
type GetFavoriteCoordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetFavoriteCoordList) Reset() {
	*x = GetFavoriteCoordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteCoordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteCoordList) ProtoMessage() {}

func (x *GetFavoriteCoordList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteCoordList.ProtoReflect.Descriptor instead.
func (*GetFavoriteCoordList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{322}
}

func (x *GetFavoriteCoordList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取将军信息详情
type AskGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneralId *int32 `protobuf:"varint,1,req,name=general_id,json=generalId" json:"general_id,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *AskGeneral) Reset() {
	*x = AskGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskGeneral) ProtoMessage() {}

func (x *AskGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskGeneral.ProtoReflect.Descriptor instead.
func (*AskGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{323}
}

func (x *AskGeneral) GetGeneralId() int32 {
	if x != nil && x.GeneralId != nil {
		return *x.GeneralId
	}
	return 0
}

func (x *AskGeneral) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//客户端上报问题
type ReportError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType    *int32  `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"`         //类型
	XContent *string `protobuf:"bytes,2,opt,name=_content,json=Content" json:"_content,omitempty"` //内容
	XUserId  *int32  `protobuf:"varint,3,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"` //用户id
}

func (x *ReportError) Reset() {
	*x = ReportError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportError) ProtoMessage() {}

func (x *ReportError) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportError.ProtoReflect.Descriptor instead.
func (*ReportError) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{324}
}

func (x *ReportError) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *ReportError) GetXContent() string {
	if x != nil && x.XContent != nil {
		return *x.XContent
	}
	return ""
}

func (x *ReportError) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//-------------联盟领地相关协议--------------
//创建联盟建筑
type CreateGuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *pb.GuildBuildingType `protobuf:"varint,1,req,name=_type,json=Type,enum=Msg.GuildBuildingType" json:"_type,omitempty"` //建筑类型
	XX    *int32                `protobuf:"varint,2,req,name=_x,json=X" json:"_x,omitempty"`                                     //建筑坐标
	XY    *int32                `protobuf:"varint,3,req,name=_y,json=Y" json:"_y,omitempty"`                                     //建筑坐标
}

func (x *CreateGuildBuilding) Reset() {
	*x = CreateGuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuildBuilding) ProtoMessage() {}

func (x *CreateGuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuildBuilding.ProtoReflect.Descriptor instead.
func (*CreateGuildBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{325}
}

func (x *CreateGuildBuilding) GetXType() pb.GuildBuildingType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return pb.GuildBuildingType(0)
}

func (x *CreateGuildBuilding) GetXX() int32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *CreateGuildBuilding) GetXY() int32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

//回收联盟建筑
type ReclaimGuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //回收联盟建筑id
}

func (x *ReclaimGuildBuilding) Reset() {
	*x = ReclaimGuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReclaimGuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReclaimGuildBuilding) ProtoMessage() {}

func (x *ReclaimGuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReclaimGuildBuilding.ProtoReflect.Descriptor instead.
func (*ReclaimGuildBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{326}
}

func (x *ReclaimGuildBuilding) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//升级联盟建筑
type UpgradeGuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //联盟建筑id
}

func (x *UpgradeGuildBuilding) Reset() {
	*x = UpgradeGuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeGuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeGuildBuilding) ProtoMessage() {}

func (x *UpgradeGuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeGuildBuilding.ProtoReflect.Descriptor instead.
func (*UpgradeGuildBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{327}
}

func (x *UpgradeGuildBuilding) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//升级联盟资源田
type UpgradeGuildFarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *int32 `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"` //联盟资源田类型
}

func (x *UpgradeGuildFarm) Reset() {
	*x = UpgradeGuildFarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeGuildFarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeGuildFarm) ProtoMessage() {}

func (x *UpgradeGuildFarm) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeGuildFarm.ProtoReflect.Descriptor instead.
func (*UpgradeGuildFarm) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{328}
}

func (x *UpgradeGuildFarm) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//取消升级联盟建筑
type CancelUpgradeGuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //联盟建筑id
}

func (x *CancelUpgradeGuildBuilding) Reset() {
	*x = CancelUpgradeGuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelUpgradeGuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUpgradeGuildBuilding) ProtoMessage() {}

func (x *CancelUpgradeGuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUpgradeGuildBuilding.ProtoReflect.Descriptor instead.
func (*CancelUpgradeGuildBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{329}
}

func (x *CancelUpgradeGuildBuilding) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取登录用户的联盟领地信息
type GetGuildTerritory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag,def=1" json:"_flag,omitempty"`
}

// Default values for GetGuildTerritory fields.
const (
	Default_GetGuildTerritory_XFlag = int32(1)
)

func (x *GetGuildTerritory) Reset() {
	*x = GetGuildTerritory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildTerritory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildTerritory) ProtoMessage() {}

func (x *GetGuildTerritory) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildTerritory.ProtoReflect.Descriptor instead.
func (*GetGuildTerritory) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{330}
}

func (x *GetGuildTerritory) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return Default_GetGuildTerritory_XFlag
}

//停止回收联盟建筑
type StopReclaimGuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //停止回收联盟建筑id
}

func (x *StopReclaimGuildBuilding) Reset() {
	*x = StopReclaimGuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReclaimGuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReclaimGuildBuilding) ProtoMessage() {}

func (x *StopReclaimGuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReclaimGuildBuilding.ProtoReflect.Descriptor instead.
func (*StopReclaimGuildBuilding) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{331}
}

func (x *StopReclaimGuildBuilding) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//设置分城是否自动参与战斗
type SetSubcityAutoFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCityId        *int32 `protobuf:"varint,1,req,name=_city_id,json=CityId" json:"_city_id,omitempty"`                             //分城id
	XAutoFight     *int32 `protobuf:"varint,2,req,name=_auto_fight,json=AutoFight,def=-1" json:"_auto_fight,omitempty"`             //是否自动参与战斗
	XAcceptSupport *int32 `protobuf:"varint,3,req,name=_accept_support,json=AcceptSupport,def=-1" json:"_accept_support,omitempty"` //是否接受支援
}

// Default values for SetSubcityAutoFight fields.
const (
	Default_SetSubcityAutoFight_XAutoFight     = int32(-1)
	Default_SetSubcityAutoFight_XAcceptSupport = int32(-1)
)

func (x *SetSubcityAutoFight) Reset() {
	*x = SetSubcityAutoFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubcityAutoFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubcityAutoFight) ProtoMessage() {}

func (x *SetSubcityAutoFight) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubcityAutoFight.ProtoReflect.Descriptor instead.
func (*SetSubcityAutoFight) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{332}
}

func (x *SetSubcityAutoFight) GetXCityId() int32 {
	if x != nil && x.XCityId != nil {
		return *x.XCityId
	}
	return 0
}

func (x *SetSubcityAutoFight) GetXAutoFight() int32 {
	if x != nil && x.XAutoFight != nil {
		return *x.XAutoFight
	}
	return Default_SetSubcityAutoFight_XAutoFight
}

func (x *SetSubcityAutoFight) GetXAcceptSupport() int32 {
	if x != nil && x.XAcceptSupport != nil {
		return *x.XAcceptSupport
	}
	return Default_SetSubcityAutoFight_XAcceptSupport
}

//释放俘虏将军
type ReleaseImprisonGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
}

func (x *ReleaseImprisonGeneral) Reset() {
	*x = ReleaseImprisonGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseImprisonGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseImprisonGeneral) ProtoMessage() {}

func (x *ReleaseImprisonGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseImprisonGeneral.ProtoReflect.Descriptor instead.
func (*ReleaseImprisonGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{333}
}

func (x *ReleaseImprisonGeneral) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

//处决俘虏将军
type KillImprisonGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
}

func (x *KillImprisonGeneral) Reset() {
	*x = KillImprisonGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillImprisonGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillImprisonGeneral) ProtoMessage() {}

func (x *KillImprisonGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillImprisonGeneral.ProtoReflect.Descriptor instead.
func (*KillImprisonGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{334}
}

func (x *KillImprisonGeneral) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

//赎回俘虏将军
type RedomImprisonGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId *int64 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
}

func (x *RedomImprisonGeneral) Reset() {
	*x = RedomImprisonGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedomImprisonGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedomImprisonGeneral) ProtoMessage() {}

func (x *RedomImprisonGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedomImprisonGeneral.ProtoReflect.Descriptor instead.
func (*RedomImprisonGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{335}
}

func (x *RedomImprisonGeneral) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

type SendInvitekey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteKey *string `protobuf:"bytes,1,opt,name=inviteKey" json:"inviteKey,omitempty"`
}

func (x *SendInvitekey) Reset() {
	*x = SendInvitekey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInvitekey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInvitekey) ProtoMessage() {}

func (x *SendInvitekey) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInvitekey.ProtoReflect.Descriptor instead.
func (*SendInvitekey) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{336}
}

func (x *SendInvitekey) GetInviteKey() string {
	if x != nil && x.InviteKey != nil {
		return *x.InviteKey
	}
	return ""
}

//扔雪球
type SendSnowball struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId       *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                     //物品id
	XTargetUserId *int32 `protobuf:"varint,2,req,name=_target_user_id,json=TargetUserId" json:"_target_user_id,omitempty"` //目标id
}

func (x *SendSnowball) Reset() {
	*x = SendSnowball{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSnowball) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSnowball) ProtoMessage() {}

func (x *SendSnowball) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSnowball.ProtoReflect.Descriptor instead.
func (*SendSnowball) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{337}
}

func (x *SendSnowball) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SendSnowball) GetXTargetUserId() int32 {
	if x != nil && x.XTargetUserId != nil {
		return *x.XTargetUserId
	}
	return 0
}

//购买装扮
type BuySkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId   *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`     //装扮类型
	XDuration *int32 `protobuf:"varint,2,req,name=_duration,json=Duration" json:"_duration,omitempty"` //持续时间
}

func (x *BuySkin) Reset() {
	*x = BuySkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuySkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuySkin) ProtoMessage() {}

func (x *BuySkin) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuySkin.ProtoReflect.Descriptor instead.
func (*BuySkin) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{338}
}

func (x *BuySkin) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *BuySkin) GetXDuration() int32 {
	if x != nil && x.XDuration != nil {
		return *x.XDuration
	}
	return 0
}

//选择装扮
type SelectSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId *int32                  `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                           //装扮类型(0代表选择默认装扮)
	XWx     *int32                  `protobuf:"varint,2,opt,name=_wx,json=Wx" json:"_wx,omitempty"`                                         //地图格子的横坐标
	XWy     *int32                  `protobuf:"varint,3,opt,name=_wy,json=Wy" json:"_wy,omitempty"`                                         //地图格子的纵坐标
	XMode   *SelectSkinTeleportMode `protobuf:"varint,4,opt,name=_mode,json=Mode,enum=MsgUp.SelectSkinTeleportMode" json:"_mode,omitempty"` //是否使用金币，如果不传或者传0，表示使用道具，如果传1，表示使用金币
}

func (x *SelectSkin) Reset() {
	*x = SelectSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectSkin) ProtoMessage() {}

func (x *SelectSkin) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectSkin.ProtoReflect.Descriptor instead.
func (*SelectSkin) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{339}
}

func (x *SelectSkin) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *SelectSkin) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *SelectSkin) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *SelectSkin) GetXMode() SelectSkinTeleportMode {
	if x != nil && x.XMode != nil {
		return *x.XMode
	}
	return SelectSkin_use_item
}

//绑定facebook
type Facebook_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *Facebook_Invite) Reset() {
	*x = Facebook_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facebook_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facebook_Invite) ProtoMessage() {}

func (x *Facebook_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facebook_Invite.ProtoReflect.Descriptor instead.
func (*Facebook_Invite) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{340}
}

func (x *Facebook_Invite) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取联盟领地人数上限
type GetGuildTerritoryLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag,def=1" json:"_flag,omitempty"`
}

// Default values for GetGuildTerritoryLimit fields.
const (
	Default_GetGuildTerritoryLimit_XFlag = int32(1)
)

func (x *GetGuildTerritoryLimit) Reset() {
	*x = GetGuildTerritoryLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildTerritoryLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildTerritoryLimit) ProtoMessage() {}

func (x *GetGuildTerritoryLimit) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildTerritoryLimit.ProtoReflect.Descriptor instead.
func (*GetGuildTerritoryLimit) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{341}
}

func (x *GetGuildTerritoryLimit) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return Default_GetGuildTerritoryLimit_XFlag
}

//跨服战信息请求
type GetCrossServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`               //
	XShowRank *int32 `protobuf:"varint,2,opt,name=_show_rank,json=ShowRank" json:"_show_rank,omitempty"` //是否返回排行榜信息
}

func (x *GetCrossServerInfo) Reset() {
	*x = GetCrossServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossServerInfo) ProtoMessage() {}

func (x *GetCrossServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossServerInfo.ProtoReflect.Descriptor instead.
func (*GetCrossServerInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{342}
}

func (x *GetCrossServerInfo) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetCrossServerInfo) GetXShowRank() int32 {
	if x != nil && x.XShowRank != nil {
		return *x.XShowRank
	}
	return 0
}

//升级分城品质
type UpgradeSubcityColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`          //要修改的分城id
	XColor *int32 `protobuf:"varint,2,opt,name=_color,json=Color" json:"_color,omitempty"` //要升级的分城品质
}

func (x *UpgradeSubcityColor) Reset() {
	*x = UpgradeSubcityColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeSubcityColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeSubcityColor) ProtoMessage() {}

func (x *UpgradeSubcityColor) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeSubcityColor.ProtoReflect.Descriptor instead.
func (*UpgradeSubcityColor) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{343}
}

func (x *UpgradeSubcityColor) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *UpgradeSubcityColor) GetXColor() int32 {
	if x != nil && x.XColor != nil {
		return *x.XColor
	}
	return 0
}

//批量穿装备
type BatchWearEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWearEquip []*WearEquip `protobuf:"bytes,1,rep,name=_wear_equip,json=WearEquip" json:"_wear_equip,omitempty"` //各位置装备
}

func (x *BatchWearEquip) Reset() {
	*x = BatchWearEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchWearEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWearEquip) ProtoMessage() {}

func (x *BatchWearEquip) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWearEquip.ProtoReflect.Descriptor instead.
func (*BatchWearEquip) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{344}
}

func (x *BatchWearEquip) GetXWearEquip() []*WearEquip {
	if x != nil {
		return x.XWearEquip
	}
	return nil
}

//批量穿宝物
type BatchWearTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId       *int32          `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`                  //用户ID
	XWearTreasure []*WearTreasure `protobuf:"bytes,2,rep,name=_wear_treasure,json=WearTreasure" json:"_wear_treasure,omitempty"` //各位置宝物
}

func (x *BatchWearTreasure) Reset() {
	*x = BatchWearTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchWearTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWearTreasure) ProtoMessage() {}

func (x *BatchWearTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWearTreasure.ProtoReflect.Descriptor instead.
func (*BatchWearTreasure) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{345}
}

func (x *BatchWearTreasure) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *BatchWearTreasure) GetXWearTreasure() []*WearTreasure {
	if x != nil {
		return x.XWearTreasure
	}
	return nil
}

//获取现金预充值和钻石奖励数
type GetCashcostAndGoldReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetCashcostAndGoldReward) Reset() {
	*x = GetCashcostAndGoldReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCashcostAndGoldReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCashcostAndGoldReward) ProtoMessage() {}

func (x *GetCashcostAndGoldReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCashcostAndGoldReward.ProtoReflect.Descriptor instead.
func (*GetCashcostAndGoldReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{346}
}

func (x *GetCashcostAndGoldReward) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取预充值奖励
type GetPreRechargeReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetPreRechargeReward) Reset() {
	*x = GetPreRechargeReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPreRechargeReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreRechargeReward) ProtoMessage() {}

func (x *GetPreRechargeReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreRechargeReward.ProtoReflect.Descriptor instead.
func (*GetPreRechargeReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{347}
}

func (x *GetPreRechargeReward) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取游戏通告
type GetGameNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetGameNotice) Reset() {
	*x = GetGameNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameNotice) ProtoMessage() {}

func (x *GetGameNotice) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameNotice.ProtoReflect.Descriptor instead.
func (*GetGameNotice) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{348}
}

func (x *GetGameNotice) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//公告已读
type MarkReadGameNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeId   *int32 `protobuf:"varint,1,req,name=notice_id,json=noticeId" json:"notice_id,omitempty"`       //公告id
	RemarkType *int32 `protobuf:"varint,2,opt,name=remark_type,json=remarkType" json:"remark_type,omitempty"` //评论类型 : 1 - 好评 |  2 - 差评  | 3 - 取消评价
}

func (x *MarkReadGameNotice) Reset() {
	*x = MarkReadGameNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkReadGameNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkReadGameNotice) ProtoMessage() {}

func (x *MarkReadGameNotice) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkReadGameNotice.ProtoReflect.Descriptor instead.
func (*MarkReadGameNotice) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{349}
}

func (x *MarkReadGameNotice) GetNoticeId() int32 {
	if x != nil && x.NoticeId != nil {
		return *x.NoticeId
	}
	return 0
}

func (x *MarkReadGameNotice) GetRemarkType() int32 {
	if x != nil && x.RemarkType != nil {
		return *x.RemarkType
	}
	return 0
}

//保存本地设置信息
type SaveUserPrefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XJson   *string              `protobuf:"bytes,1,opt,name=_json,json=Json" json:"_json,omitempty"`                                         //保存内容
	XOpType *SaveUserPrefsOpType `protobuf:"varint,2,opt,name=_op_type,json=OpType,enum=MsgUp.SaveUserPrefsOpType" json:"_op_type,omitempty"` //操作类型
}

func (x *SaveUserPrefs) Reset() {
	*x = SaveUserPrefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserPrefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserPrefs) ProtoMessage() {}

func (x *SaveUserPrefs) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserPrefs.ProtoReflect.Descriptor instead.
func (*SaveUserPrefs) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{350}
}

func (x *SaveUserPrefs) GetXJson() string {
	if x != nil && x.XJson != nil {
		return *x.XJson
	}
	return ""
}

func (x *SaveUserPrefs) GetXOpType() SaveUserPrefsOpType {
	if x != nil && x.XOpType != nil {
		return *x.XOpType
	}
	return SaveUserPrefs_unknown
}

//获取本地设置信息
type GetUserPrefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
}

func (x *GetUserPrefs) Reset() {
	*x = GetUserPrefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPrefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPrefs) ProtoMessage() {}

func (x *GetUserPrefs) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPrefs.ProtoReflect.Descriptor instead.
func (*GetUserPrefs) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{351}
}

func (x *GetUserPrefs) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//取回资源
type GetbackFromStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XResource *pb.ResourceInfo `protobuf:"bytes,1,req,name=_resource,json=Resource" json:"_resource,omitempty"` // 取回的资源数据
}

func (x *GetbackFromStore) Reset() {
	*x = GetbackFromStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetbackFromStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetbackFromStore) ProtoMessage() {}

func (x *GetbackFromStore) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetbackFromStore.ProtoReflect.Descriptor instead.
func (*GetbackFromStore) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{352}
}

func (x *GetbackFromStore) GetXResource() *pb.ResourceInfo {
	if x != nil {
		return x.XResource
	}
	return nil
}

//获取世界boss的位置
type GetWorldBossInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32 `protobuf:"varint,1,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`
}

func (x *GetWorldBossInfo) Reset() {
	*x = GetWorldBossInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorldBossInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorldBossInfo) ProtoMessage() {}

func (x *GetWorldBossInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorldBossInfo.ProtoReflect.Descriptor instead.
func (*GetWorldBossInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{353}
}

func (x *GetWorldBossInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//购买打boss次数
type BuyAttackBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPrice *int32 `protobuf:"varint,1,opt,name=_price,json=Price" json:"_price,omitempty"`
}

func (x *BuyAttackBoss) Reset() {
	*x = BuyAttackBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyAttackBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyAttackBoss) ProtoMessage() {}

func (x *BuyAttackBoss) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyAttackBoss.ProtoReflect.Descriptor instead.
func (*BuyAttackBoss) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{354}
}

func (x *BuyAttackBoss) GetXPrice() int32 {
	if x != nil && x.XPrice != nil {
		return *x.XPrice
	}
	return 0
}

//获得跨服战排行榜列表
type GetCrossServerRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetCrossServerRank) Reset() {
	*x = GetCrossServerRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossServerRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossServerRank) ProtoMessage() {}

func (x *GetCrossServerRank) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossServerRank.ProtoReflect.Descriptor instead.
func (*GetCrossServerRank) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{355}
}

func (x *GetCrossServerRank) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//精炼装备
type RefineEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     *int32   `protobuf:"varint,1,req,name=item_id,json=itemId" json:"item_id,omitempty"`            // 道具id
	XId        *int64   `protobuf:"varint,2,opt,name=_id,json=Id" json:"_id,omitempty"`                        // 装备唯一id
	XGeneralId *int64   `protobuf:"varint,3,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
	XLockPos   []uint32 `protobuf:"varint,4,rep,name=_lockPos,json=LockPos" json:"_lockPos,omitempty"`         //精炼属性锁定位置
}

func (x *RefineEquipment) Reset() {
	*x = RefineEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineEquipment) ProtoMessage() {}

func (x *RefineEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineEquipment.ProtoReflect.Descriptor instead.
func (*RefineEquipment) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{356}
}

func (x *RefineEquipment) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *RefineEquipment) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *RefineEquipment) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *RefineEquipment) GetXLockPos() []uint32 {
	if x != nil {
		return x.XLockPos
	}
	return nil
}

//精炼龙
type RefineDragon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId        *int64   `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                        // 装备唯一id
	XGeneralId *int64   `protobuf:"varint,2,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
	XLockPos   []uint32 `protobuf:"varint,3,rep,name=_lockPos,json=LockPos" json:"_lockPos,omitempty"`         //精炼属性锁定位置
	XCostType  *int32   `protobuf:"varint,4,opt,name=_cost_type,json=CostType" json:"_cost_type,omitempty"`    //花费类型 0:钻石,1:战场币
}

func (x *RefineDragon) Reset() {
	*x = RefineDragon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineDragon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineDragon) ProtoMessage() {}

func (x *RefineDragon) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineDragon.ProtoReflect.Descriptor instead.
func (*RefineDragon) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{357}
}

func (x *RefineDragon) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *RefineDragon) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *RefineDragon) GetXLockPos() []uint32 {
	if x != nil {
		return x.XLockPos
	}
	return nil
}

func (x *RefineDragon) GetXCostType() int32 {
	if x != nil && x.XCostType != nil {
		return *x.XCostType
	}
	return 0
}

//特训士兵
type RefineSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId   *int32   `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`       //士兵id
	XLockPos  []uint32 `protobuf:"varint,2,rep,name=_lockPos,json=LockPos" json:"_lockPos,omitempty"`      //精炼属性锁定位置
	XCostType *int32   `protobuf:"varint,3,opt,name=_cost_type,json=CostType" json:"_cost_type,omitempty"` //花费类型 0:钻石,1:特训令
}

func (x *RefineSoldiers) Reset() {
	*x = RefineSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineSoldiers) ProtoMessage() {}

func (x *RefineSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineSoldiers.ProtoReflect.Descriptor instead.
func (*RefineSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{358}
}

func (x *RefineSoldiers) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *RefineSoldiers) GetXLockPos() []uint32 {
	if x != nil {
		return x.XLockPos
	}
	return nil
}

func (x *RefineSoldiers) GetXCostType() int32 {
	if x != nil && x.XCostType != nil {
		return *x.XCostType
	}
	return 0
}

//更新分城城墙数据
type UpdateSubcityWallData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSubcityId *int32 `protobuf:"varint,1,req,name=_subcity_id,json=SubcityId" json:"_subcity_id,omitempty"` //分城id
}

func (x *UpdateSubcityWallData) Reset() {
	*x = UpdateSubcityWallData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubcityWallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubcityWallData) ProtoMessage() {}

func (x *UpdateSubcityWallData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubcityWallData.ProtoReflect.Descriptor instead.
func (*UpdateSubcityWallData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{359}
}

func (x *UpdateSubcityWallData) GetXSubcityId() int32 {
	if x != nil && x.XSubcityId != nil {
		return *x.XSubcityId
	}
	return 0
}

//确认精炼装备结果
type ConfirmRefineEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId      *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                // 装备唯一id
	XConfirm *int32 `protobuf:"varint,2,opt,name=_confirm,json=Confirm" json:"_confirm,omitempty"` //1确认,0取消
}

func (x *ConfirmRefineEquipment) Reset() {
	*x = ConfirmRefineEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRefineEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRefineEquipment) ProtoMessage() {}

func (x *ConfirmRefineEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRefineEquipment.ProtoReflect.Descriptor instead.
func (*ConfirmRefineEquipment) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{360}
}

func (x *ConfirmRefineEquipment) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ConfirmRefineEquipment) GetXConfirm() int32 {
	if x != nil && x.XConfirm != nil {
		return *x.XConfirm
	}
	return 0
}

//确认精炼龙结果
type ConfirmRefineDragon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId      *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                // 龙的id
	XConfirm *int32 `protobuf:"varint,2,opt,name=_confirm,json=Confirm" json:"_confirm,omitempty"` //1确认,0取消
}

func (x *ConfirmRefineDragon) Reset() {
	*x = ConfirmRefineDragon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRefineDragon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRefineDragon) ProtoMessage() {}

func (x *ConfirmRefineDragon) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRefineDragon.ProtoReflect.Descriptor instead.
func (*ConfirmRefineDragon) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{361}
}

func (x *ConfirmRefineDragon) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ConfirmRefineDragon) GetXConfirm() int32 {
	if x != nil && x.XConfirm != nil {
		return *x.XConfirm
	}
	return 0
}

//确认特训士兵结果
type ConfirmRefineSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId  *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`  //士兵id
	XConfirm *int32 `protobuf:"varint,2,opt,name=_confirm,json=Confirm" json:"_confirm,omitempty"` //1确认,0取消
}

func (x *ConfirmRefineSoldiers) Reset() {
	*x = ConfirmRefineSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRefineSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRefineSoldiers) ProtoMessage() {}

func (x *ConfirmRefineSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRefineSoldiers.ProtoReflect.Descriptor instead.
func (*ConfirmRefineSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{362}
}

func (x *ConfirmRefineSoldiers) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *ConfirmRefineSoldiers) GetXConfirm() int32 {
	if x != nil && x.XConfirm != nil {
		return *x.XConfirm
	}
	return 0
}

//清除俘虏劳作的cd时间
type ClearWorkCd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGems *int32 `protobuf:"varint,1,req,name=_gems,json=Gems" json:"_gems,omitempty"` //消耗钻石的数量
}

func (x *ClearWorkCd) Reset() {
	*x = ClearWorkCd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearWorkCd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearWorkCd) ProtoMessage() {}

func (x *ClearWorkCd) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearWorkCd.ProtoReflect.Descriptor instead.
func (*ClearWorkCd) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{363}
}

func (x *ClearWorkCd) GetXGems() int32 {
	if x != nil && x.XGems != nil {
		return *x.XGems
	}
	return 0
}

//联盟科技推荐
type RecommendGuildTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId *int32 `protobuf:"varint,1,req,name=type_id,json=typeId" json:"type_id,omitempty"` //科技id
}

func (x *RecommendGuildTech) Reset() {
	*x = RecommendGuildTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendGuildTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendGuildTech) ProtoMessage() {}

func (x *RecommendGuildTech) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendGuildTech.ProtoReflect.Descriptor instead.
func (*RecommendGuildTech) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{364}
}

func (x *RecommendGuildTech) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

//砸彩蛋
type HitColorfulEgg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLevel *int32 `protobuf:"varint,1,opt,name=_level,json=Level" json:"_level,omitempty"` //1-4
}

func (x *HitColorfulEgg) Reset() {
	*x = HitColorfulEgg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HitColorfulEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitColorfulEgg) ProtoMessage() {}

func (x *HitColorfulEgg) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitColorfulEgg.ProtoReflect.Descriptor instead.
func (*HitColorfulEgg) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{365}
}

func (x *HitColorfulEgg) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

//为盟友开启战争保护
type ProtectOther struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPlayerId *int32 `protobuf:"varint,1,opt,name=_player_id,json=PlayerId" json:"_player_id,omitempty"`
}

func (x *ProtectOther) Reset() {
	*x = ProtectOther{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectOther) ProtoMessage() {}

func (x *ProtectOther) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectOther.ProtoReflect.Descriptor instead.
func (*ProtectOther) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{366}
}

func (x *ProtectOther) GetXPlayerId() int32 {
	if x != nil && x.XPlayerId != nil {
		return *x.XPlayerId
	}
	return 0
}

//合成道具
type SynthesisItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId   *int32    `protobuf:"varint,1,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`      //需要的道具id
	XAmount   *int32    `protobuf:"varint,2,opt,name=_amount,json=Amount" json:"_amount,omitempty"`        //需要的原道具数量
	XItemInfo *ItemInfo `protobuf:"bytes,3,opt,name=_item_info,json=ItemInfo" json:"_item_info,omitempty"` //合成的道具
}

func (x *SynthesisItem) Reset() {
	*x = SynthesisItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesisItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisItem) ProtoMessage() {}

func (x *SynthesisItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisItem.ProtoReflect.Descriptor instead.
func (*SynthesisItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{367}
}

func (x *SynthesisItem) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SynthesisItem) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

func (x *SynthesisItem) GetXItemInfo() *ItemInfo {
	if x != nil {
		return x.XItemInfo
	}
	return nil
}

//进入战场
type ComeInBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFieldId *int32 `protobuf:"varint,1,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"` //战场id
}

func (x *ComeInBattle) Reset() {
	*x = ComeInBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComeInBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComeInBattle) ProtoMessage() {}

func (x *ComeInBattle) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComeInBattle.ProtoReflect.Descriptor instead.
func (*ComeInBattle) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{368}
}

func (x *ComeInBattle) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//遗弃遗迹
type GiveUpRuins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWx *int32 `protobuf:"varint,1,req,name=_wx,json=Wx" json:"_wx,omitempty"` //遗迹坐标x
	XWy *int32 `protobuf:"varint,2,req,name=_wy,json=Wy" json:"_wy,omitempty"` //遗迹坐标y
}

func (x *GiveUpRuins) Reset() {
	*x = GiveUpRuins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveUpRuins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveUpRuins) ProtoMessage() {}

func (x *GiveUpRuins) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveUpRuins.ProtoReflect.Descriptor instead.
func (*GiveUpRuins) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{369}
}

func (x *GiveUpRuins) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *GiveUpRuins) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

//士兵升级
type UpgradeSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId      *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`               //当前士兵id
	XNextTypeId  *int32 `protobuf:"varint,2,req,name=_next_type_id,json=NextTypeId" json:"_next_type_id,omitempty"` //升级后的士兵id
	XNum         *int32 `protobuf:"varint,3,req,name=_num,json=Num" json:"_num,omitempty"`                          //士兵数量
	XPositionId  *int32 `protobuf:"varint,4,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`   //建筑位置
	XImmediately *int32 `protobuf:"varint,5,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"`  //是否马上完成
}

func (x *UpgradeSoldiers) Reset() {
	*x = UpgradeSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeSoldiers) ProtoMessage() {}

func (x *UpgradeSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeSoldiers.ProtoReflect.Descriptor instead.
func (*UpgradeSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{370}
}

func (x *UpgradeSoldiers) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *UpgradeSoldiers) GetXNextTypeId() int32 {
	if x != nil && x.XNextTypeId != nil {
		return *x.XNextTypeId
	}
	return 0
}

func (x *UpgradeSoldiers) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *UpgradeSoldiers) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *UpgradeSoldiers) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

//领取艺术大厅奖励
type GetArtReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XArtHallId *int32 `protobuf:"varint,1,req,name=_art_hall_id,json=ArtHallId" json:"_art_hall_id,omitempty"` //展厅id
	XProgress  *int32 `protobuf:"varint,2,req,name=_progress,json=Progress" json:"_progress,omitempty"`        //要领取的星级进度(0是兑换功能)
}

func (x *GetArtReward) Reset() {
	*x = GetArtReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtReward) ProtoMessage() {}

func (x *GetArtReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtReward.ProtoReflect.Descriptor instead.
func (*GetArtReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{371}
}

func (x *GetArtReward) GetXArtHallId() int32 {
	if x != nil && x.XArtHallId != nil {
		return *x.XArtHallId
	}
	return 0
}

func (x *GetArtReward) GetXProgress() int32 {
	if x != nil && x.XProgress != nil {
		return *x.XProgress
	}
	return 0
}

//激活宠物
type ActivePet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId     *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             //宠物类型（道具id）
	XPositionId *int32 `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` //建筑位置
}

func (x *ActivePet) Reset() {
	*x = ActivePet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePet) ProtoMessage() {}

func (x *ActivePet) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePet.ProtoReflect.Descriptor instead.
func (*ActivePet) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{372}
}

func (x *ActivePet) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *ActivePet) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

//材料生产
type MakeMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId  *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`  // 建筑位置
	XItemId      *int32 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`              // 生产的道具id
	XImmediately *int32 `protobuf:"varint,3,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"` // 是否立即升级
}

func (x *MakeMaterial) Reset() {
	*x = MakeMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMaterial) ProtoMessage() {}

func (x *MakeMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMaterial.ProtoReflect.Descriptor instead.
func (*MakeMaterial) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{373}
}

func (x *MakeMaterial) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *MakeMaterial) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *MakeMaterial) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

//材料生产立即完成
type SpeedupMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
	XItemId     *int32 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             // 生产的道具id
	XGold       *int64 `protobuf:"varint,3,req,name=_gold,json=Gold" json:"_gold,omitempty"`                     //客户端计算的金币消耗数量
	XSpeedType  *int32 `protobuf:"varint,4,opt,name=_speed_type,json=SpeedType" json:"_speed_type,omitempty"`    // 0:单个加速，1:批量加速
}

func (x *SpeedupMaterial) Reset() {
	*x = SpeedupMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupMaterial) ProtoMessage() {}

func (x *SpeedupMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupMaterial.ProtoReflect.Descriptor instead.
func (*SpeedupMaterial) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{374}
}

func (x *SpeedupMaterial) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SpeedupMaterial) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SpeedupMaterial) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *SpeedupMaterial) GetXSpeedType() int32 {
	if x != nil && x.XSpeedType != nil {
		return *x.XSpeedType
	}
	return 0
}

//生产科研石
type MakeTechStone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId  *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`  // 建筑位置
	XItemId      *int32 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`              // 生产的道具id
	XProductNum  *int32 `protobuf:"varint,3,req,name=_product_num,json=ProductNum" json:"_product_num,omitempty"`  // 生产的道具数量
	XImmediately *int32 `protobuf:"varint,4,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"` // 是否立即升级
}

func (x *MakeTechStone) Reset() {
	*x = MakeTechStone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeTechStone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeTechStone) ProtoMessage() {}

func (x *MakeTechStone) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeTechStone.ProtoReflect.Descriptor instead.
func (*MakeTechStone) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{375}
}

func (x *MakeTechStone) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *MakeTechStone) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *MakeTechStone) GetXProductNum() int32 {
	if x != nil && x.XProductNum != nil {
		return *x.XProductNum
	}
	return 0
}

func (x *MakeTechStone) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

//生产科研石立即完成
type SpeedupTechStone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
	XItemId     *int32 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             // 生产的道具id
	XProductNum *int32 `protobuf:"varint,3,req,name=_product_num,json=ProductNum" json:"_product_num,omitempty"` // 生产的道具数量
	XGold       *int64 `protobuf:"varint,4,req,name=_gold,json=Gold" json:"_gold,omitempty"`                     //客户端计算的金币消耗数量
}

func (x *SpeedupTechStone) Reset() {
	*x = SpeedupTechStone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupTechStone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupTechStone) ProtoMessage() {}

func (x *SpeedupTechStone) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupTechStone.ProtoReflect.Descriptor instead.
func (*SpeedupTechStone) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{376}
}

func (x *SpeedupTechStone) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *SpeedupTechStone) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SpeedupTechStone) GetXProductNum() int32 {
	if x != nil && x.XProductNum != nil {
		return *x.XProductNum
	}
	return 0
}

func (x *SpeedupTechStone) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

//删除材料生产队列
type DeleteMaterialQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
	XItemId     *int32 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             // 生产的道具id
	XQueueId    *int32 `protobuf:"varint,3,req,name=_queue_id,json=QueueId" json:"_queue_id,omitempty"`          //队列id
}

func (x *DeleteMaterialQueue) Reset() {
	*x = DeleteMaterialQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMaterialQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMaterialQueue) ProtoMessage() {}

func (x *DeleteMaterialQueue) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMaterialQueue.ProtoReflect.Descriptor instead.
func (*DeleteMaterialQueue) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{377}
}

func (x *DeleteMaterialQueue) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *DeleteMaterialQueue) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *DeleteMaterialQueue) GetXQueueId() int32 {
	if x != nil && x.XQueueId != nil {
		return *x.XQueueId
	}
	return 0
}

//宠物升品
type UpgradePet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId     *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             //宠物类型（道具id）
	XPositionId *int32 `protobuf:"varint,2,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` //建筑位置
}

func (x *UpgradePet) Reset() {
	*x = UpgradePet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradePet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePet) ProtoMessage() {}

func (x *UpgradePet) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePet.ProtoReflect.Descriptor instead.
func (*UpgradePet) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{378}
}

func (x *UpgradePet) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *UpgradePet) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

//获取科技大厅任务列表
type GetTechTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`
}

func (x *GetTechTaskList) Reset() {
	*x = GetTechTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechTaskList) ProtoMessage() {}

func (x *GetTechTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechTaskList.ProtoReflect.Descriptor instead.
func (*GetTechTaskList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{379}
}

func (x *GetTechTaskList) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

//领取科技大厅任务奖励
type GetTechTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId *int32 `protobuf:"varint,1,req,name=_task_id,json=TaskId" json:"_task_id,omitempty"`
	XLine   *int32 `protobuf:"varint,2,req,name=_line,json=Line" json:"_line,omitempty"` // 任务线
}

func (x *GetTechTaskReward) Reset() {
	*x = GetTechTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechTaskReward) ProtoMessage() {}

func (x *GetTechTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechTaskReward.ProtoReflect.Descriptor instead.
func (*GetTechTaskReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{380}
}

func (x *GetTechTaskReward) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *GetTechTaskReward) GetXLine() int32 {
	if x != nil && x.XLine != nil {
		return *x.XLine
	}
	return 0
}

//战场报名
type SignupBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSeason *uint32 `protobuf:"varint,1,req,name=_season,json=Season" json:"_season,omitempty"` //报名场次,0开始
}

func (x *SignupBattlefield) Reset() {
	*x = SignupBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignupBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupBattlefield) ProtoMessage() {}

func (x *SignupBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupBattlefield.ProtoReflect.Descriptor instead.
func (*SignupBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{381}
}

func (x *SignupBattlefield) GetXSeason() uint32 {
	if x != nil && x.XSeason != nil {
		return *x.XSeason
	}
	return 0
}

//战场参战成员委任
type SetMembersBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMembers []uint32 `protobuf:"varint,1,rep,name=_members,json=Members" json:"_members,omitempty"` //参战人员id
}

func (x *SetMembersBattlefield) Reset() {
	*x = SetMembersBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMembersBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMembersBattlefield) ProtoMessage() {}

func (x *SetMembersBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMembersBattlefield.ProtoReflect.Descriptor instead.
func (*SetMembersBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{382}
}

func (x *SetMembersBattlefield) GetXMembers() []uint32 {
	if x != nil {
		return x.XMembers
	}
	return nil
}

//获取战场分数排行
type GetBattlefieldRanklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId              *uint32 `protobuf:"varint,1,opt,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`                                          //联盟id
	XBattlefieldHistoryId *uint32 `protobuf:"varint,2,opt,name=_battlefield_history_id,json=BattlefieldHistoryId" json:"_battlefield_history_id,omitempty"` //战场历史战绩id
}

func (x *GetBattlefieldRanklist) Reset() {
	*x = GetBattlefieldRanklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldRanklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldRanklist) ProtoMessage() {}

func (x *GetBattlefieldRanklist) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldRanklist.ProtoReflect.Descriptor instead.
func (*GetBattlefieldRanklist) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{383}
}

func (x *GetBattlefieldRanklist) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GetBattlefieldRanklist) GetXBattlefieldHistoryId() uint32 {
	if x != nil && x.XBattlefieldHistoryId != nil {
		return *x.XBattlefieldHistoryId
	}
	return 0
}

//获取战场赛季积分排行
type GetBattlefieldGuildrank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBattleType *int32 `protobuf:"varint,1,opt,name=_battle_type,json=BattleType" json:"_battle_type,omitempty"` //战役类型 1. 君士坦丁堡; 2. 高加米拉; 5. 荣耀组; 6. 新秀组
}

func (x *GetBattlefieldGuildrank) Reset() {
	*x = GetBattlefieldGuildrank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldGuildrank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldGuildrank) ProtoMessage() {}

func (x *GetBattlefieldGuildrank) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldGuildrank.ProtoReflect.Descriptor instead.
func (*GetBattlefieldGuildrank) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{384}
}

func (x *GetBattlefieldGuildrank) GetXBattleType() int32 {
	if x != nil && x.XBattleType != nil {
		return *x.XBattleType
	}
	return 0
}

//获取战场赛季4轮累计积分排行
type GetBattlefieldGuildrankSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBattleType *int32 `protobuf:"varint,1,opt,name=_battle_type,json=BattleType" json:"_battle_type,omitempty"` //战役类型 1. 君士坦丁堡; 2. 高加米拉; 5. 荣耀组; 6. 新秀组; 9. 联盟邀请赛
	XArea       *int32 `protobuf:"varint,2,opt,name=_area,json=Area" json:"_area,omitempty"`                     //战区
	XGroup      *int32 `protobuf:"varint,3,opt,name=_group,json=Group" json:"_group,omitempty"`                  //分组
}

func (x *GetBattlefieldGuildrankSeason) Reset() {
	*x = GetBattlefieldGuildrankSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldGuildrankSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldGuildrankSeason) ProtoMessage() {}

func (x *GetBattlefieldGuildrankSeason) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldGuildrankSeason.ProtoReflect.Descriptor instead.
func (*GetBattlefieldGuildrankSeason) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{385}
}

func (x *GetBattlefieldGuildrankSeason) GetXBattleType() int32 {
	if x != nil && x.XBattleType != nil {
		return *x.XBattleType
	}
	return 0
}

func (x *GetBattlefieldGuildrankSeason) GetXArea() int32 {
	if x != nil && x.XArea != nil {
		return *x.XArea
	}
	return 0
}

func (x *GetBattlefieldGuildrankSeason) GetXGroup() int32 {
	if x != nil && x.XGroup != nil {
		return *x.XGroup
	}
	return 0
}

//获取联盟战场历史战绩
type GetBattlefieldHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLastId     *int32 `protobuf:"varint,1,opt,name=_last_id,json=LastId" json:"_last_id,omitempty"`             //用于分页
	XBattleType *int32 `protobuf:"varint,2,opt,name=_battle_type,json=BattleType" json:"_battle_type,omitempty"` //战役类型
	XUserId     *int32 `protobuf:"varint,3,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`             //记功柱入口
}

func (x *GetBattlefieldHistory) Reset() {
	*x = GetBattlefieldHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldHistory) ProtoMessage() {}

func (x *GetBattlefieldHistory) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldHistory.ProtoReflect.Descriptor instead.
func (*GetBattlefieldHistory) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{386}
}

func (x *GetBattlefieldHistory) GetXLastId() int32 {
	if x != nil && x.XLastId != nil {
		return *x.XLastId
	}
	return 0
}

func (x *GetBattlefieldHistory) GetXBattleType() int32 {
	if x != nil && x.XBattleType != nil {
		return *x.XBattleType
	}
	return 0
}

func (x *GetBattlefieldHistory) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//获取各种排行榜
type GetRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XRankType *pb.RankType `protobuf:"varint,1,req,name=_rank_type,json=RankType,enum=Msg.RankType" json:"_rank_type,omitempty"` //排行榜类型
	XServerId *int32       `protobuf:"varint,2,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                   //服务器id
}

func (x *GetRankList) Reset() {
	*x = GetRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankList) ProtoMessage() {}

func (x *GetRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankList.ProtoReflect.Descriptor instead.
func (*GetRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{387}
}

func (x *GetRankList) GetXRankType() pb.RankType {
	if x != nil && x.XRankType != nil {
		return *x.XRankType
	}
	return pb.RankType(0)
}

func (x *GetRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//离开战场
type QuitBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFieldId *int32 `protobuf:"varint,1,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"` //战场id
}

func (x *QuitBattle) Reset() {
	*x = QuitBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitBattle) ProtoMessage() {}

func (x *QuitBattle) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitBattle.ProtoReflect.Descriptor instead.
func (*QuitBattle) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{388}
}

func (x *QuitBattle) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//获取战场信息
type GetBattlefieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //战场id
}

func (x *GetBattlefieldInfo) Reset() {
	*x = GetBattlefieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldInfo) ProtoMessage() {}

func (x *GetBattlefieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldInfo.ProtoReflect.Descriptor instead.
func (*GetBattlefieldInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{389}
}

func (x *GetBattlefieldInfo) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取战场建筑驻军详情
type GetBattleGarrison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XX       *int32 `protobuf:"varint,1,req,name=_x,json=X" json:"_x,omitempty"`                     //坐标信息
	XY       *int32 `protobuf:"varint,2,req,name=_y,json=Y" json:"_y,omitempty"`                     //坐标信息
	XFieldId *int32 `protobuf:"varint,3,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"` //战场id
}

func (x *GetBattleGarrison) Reset() {
	*x = GetBattleGarrison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattleGarrison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattleGarrison) ProtoMessage() {}

func (x *GetBattleGarrison) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattleGarrison.ProtoReflect.Descriptor instead.
func (*GetBattleGarrison) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{390}
}

func (x *GetBattleGarrison) GetXX() int32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *GetBattleGarrison) GetXY() int32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

func (x *GetBattleGarrison) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//获取战场数据
type GetBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBattleType *int32 `protobuf:"varint,1,opt,name=_battle_type,json=BattleType" json:"_battle_type,omitempty"` //战场类型
}

func (x *GetBattleData) Reset() {
	*x = GetBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattleData) ProtoMessage() {}

func (x *GetBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattleData.ProtoReflect.Descriptor instead.
func (*GetBattleData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{391}
}

func (x *GetBattleData) GetXBattleType() int32 {
	if x != nil && x.XBattleType != nil {
		return *x.XBattleType
	}
	return 0
}

//获取战场记录
type GetBattlefieldRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XX *int32 `protobuf:"varint,1,opt,name=_x,json=X" json:"_x,omitempty"`
	XY *int32 `protobuf:"varint,2,opt,name=_y,json=Y" json:"_y,omitempty"`
}

func (x *GetBattlefieldRecord) Reset() {
	*x = GetBattlefieldRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldRecord) ProtoMessage() {}

func (x *GetBattlefieldRecord) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldRecord.ProtoReflect.Descriptor instead.
func (*GetBattlefieldRecord) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{392}
}

func (x *GetBattlefieldRecord) GetXX() int32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *GetBattlefieldRecord) GetXY() int32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

//获取战场个人排行
type GetBattlefieldPersonalRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBattleType *int32 `protobuf:"varint,1,opt,name=_battle_type,json=BattleType" json:"_battle_type,omitempty"` //战场类型
}

func (x *GetBattlefieldPersonalRankInfo) Reset() {
	*x = GetBattlefieldPersonalRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldPersonalRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldPersonalRankInfo) ProtoMessage() {}

func (x *GetBattlefieldPersonalRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldPersonalRankInfo.ProtoReflect.Descriptor instead.
func (*GetBattlefieldPersonalRankInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{393}
}

func (x *GetBattlefieldPersonalRankInfo) GetXBattleType() int32 {
	if x != nil && x.XBattleType != nil {
		return *x.XBattleType
	}
	return 0
}

//获取战场个人赛季排行
type GetBattlefieldPersonalSeasonRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBattleType *int32 `protobuf:"varint,1,opt,name=_battle_type,json=BattleType" json:"_battle_type,omitempty"` //战场类型 1. 君士坦丁堡; 2. 高加米拉; 5. 荣耀组; 6. 新秀组; 9. 联盟邀请赛
	XArea       *int32 `protobuf:"varint,2,opt,name=_area,json=Area" json:"_area,omitempty"`                     //战区
	XGroup      *int32 `protobuf:"varint,3,opt,name=_group,json=Group" json:"_group,omitempty"`                  //分组
}

func (x *GetBattlefieldPersonalSeasonRankInfo) Reset() {
	*x = GetBattlefieldPersonalSeasonRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldPersonalSeasonRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldPersonalSeasonRankInfo) ProtoMessage() {}

func (x *GetBattlefieldPersonalSeasonRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldPersonalSeasonRankInfo.ProtoReflect.Descriptor instead.
func (*GetBattlefieldPersonalSeasonRankInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{394}
}

func (x *GetBattlefieldPersonalSeasonRankInfo) GetXBattleType() int32 {
	if x != nil && x.XBattleType != nil {
		return *x.XBattleType
	}
	return 0
}

func (x *GetBattlefieldPersonalSeasonRankInfo) GetXArea() int32 {
	if x != nil && x.XArea != nil {
		return *x.XArea
	}
	return 0
}

func (x *GetBattlefieldPersonalSeasonRankInfo) GetXGroup() int32 {
	if x != nil && x.XGroup != nil {
		return *x.XGroup
	}
	return 0
}

//身份实名认证
type SetIdNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XIdNumber *string `protobuf:"bytes,1,opt,name=_id_number,json=IdNumber" json:"_id_number,omitempty"` //身份证号
	XName     *string `protobuf:"bytes,2,opt,name=_name,json=Name" json:"_name,omitempty"`               //名字
}

func (x *SetIdNumber) Reset() {
	*x = SetIdNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIdNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIdNumber) ProtoMessage() {}

func (x *SetIdNumber) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIdNumber.ProtoReflect.Descriptor instead.
func (*SetIdNumber) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{395}
}

func (x *SetIdNumber) GetXIdNumber() string {
	if x != nil && x.XIdNumber != nil {
		return *x.XIdNumber
	}
	return ""
}

func (x *SetIdNumber) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

//龙天赋升级与主动技
type SetDragonTalentUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDragonId    *int32 `protobuf:"varint,1,opt,name=_dragon_id,json=DragonId" json:"_dragon_id,omitempty"`          //龙的ID
	XTalentId    *int32 `protobuf:"varint,2,opt,name=_talent_id,json=TalentId" json:"_talent_id,omitempty"`          //天赋的ID
	XTalentLevel *int32 `protobuf:"varint,3,opt,name=_talent_level,json=TalentLevel" json:"_talent_level,omitempty"` //天赋的等级
	XType        *int32 `protobuf:"varint,4,opt,name=_type,json=Type" json:"_type,omitempty"`                        // 0升级 1主动技使用
}

func (x *SetDragonTalentUpgrade) Reset() {
	*x = SetDragonTalentUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDragonTalentUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDragonTalentUpgrade) ProtoMessage() {}

func (x *SetDragonTalentUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDragonTalentUpgrade.ProtoReflect.Descriptor instead.
func (*SetDragonTalentUpgrade) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{396}
}

func (x *SetDragonTalentUpgrade) GetXDragonId() int32 {
	if x != nil && x.XDragonId != nil {
		return *x.XDragonId
	}
	return 0
}

func (x *SetDragonTalentUpgrade) GetXTalentId() int32 {
	if x != nil && x.XTalentId != nil {
		return *x.XTalentId
	}
	return 0
}

func (x *SetDragonTalentUpgrade) GetXTalentLevel() int32 {
	if x != nil && x.XTalentLevel != nil {
		return *x.XTalentLevel
	}
	return 0
}

func (x *SetDragonTalentUpgrade) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//龙崖展示龙
type SetDragonCliffShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDragonId *int32 `protobuf:"varint,1,opt,name=_dragon_id,json=DragonId" json:"_dragon_id,omitempty"` //龙的ID
}

func (x *SetDragonCliffShow) Reset() {
	*x = SetDragonCliffShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDragonCliffShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDragonCliffShow) ProtoMessage() {}

func (x *SetDragonCliffShow) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDragonCliffShow.ProtoReflect.Descriptor instead.
func (*SetDragonCliffShow) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{397}
}

func (x *SetDragonCliffShow) GetXDragonId() int32 {
	if x != nil && x.XDragonId != nil {
		return *x.XDragonId
	}
	return 0
}

//解锁龙
type SetDragonUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDragonId *int32 `protobuf:"varint,1,opt,name=_dragon_id,json=DragonId" json:"_dragon_id,omitempty"` //龙的ID
	XItemId   *int32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`       //龙蛋的ID
}

func (x *SetDragonUnlock) Reset() {
	*x = SetDragonUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDragonUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDragonUnlock) ProtoMessage() {}

func (x *SetDragonUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDragonUnlock.ProtoReflect.Descriptor instead.
func (*SetDragonUnlock) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{398}
}

func (x *SetDragonUnlock) GetXDragonId() int32 {
	if x != nil && x.XDragonId != nil {
		return *x.XDragonId
	}
	return 0
}

func (x *SetDragonUnlock) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//喂养龙
type SetDragonFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDragonId  *int32 `protobuf:"varint,1,opt,name=_dragon_id,json=DragonId" json:"_dragon_id,omitempty"`    //龙的ID
	XItemId    *int32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`          //龙的食物ID
	XItemCount *int32 `protobuf:"varint,3,opt,name=_item_count,json=ItemCount" json:"_item_count,omitempty"` //喂养的食物数量
}

func (x *SetDragonFeed) Reset() {
	*x = SetDragonFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDragonFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDragonFeed) ProtoMessage() {}

func (x *SetDragonFeed) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDragonFeed.ProtoReflect.Descriptor instead.
func (*SetDragonFeed) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{399}
}

func (x *SetDragonFeed) GetXDragonId() int32 {
	if x != nil && x.XDragonId != nil {
		return *x.XDragonId
	}
	return 0
}

func (x *SetDragonFeed) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SetDragonFeed) GetXItemCount() int32 {
	if x != nil && x.XItemCount != nil {
		return *x.XItemCount
	}
	return 0
}

//出战龙
type SetDragonActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDragonId  *int32 `protobuf:"varint,1,opt,name=_dragon_id,json=DragonId" json:"_dragon_id,omitempty"`    //龙的ID
	XGeneralId *int32 `protobuf:"varint,2,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //龙的出战将军ID
}

func (x *SetDragonActive) Reset() {
	*x = SetDragonActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDragonActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDragonActive) ProtoMessage() {}

func (x *SetDragonActive) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDragonActive.ProtoReflect.Descriptor instead.
func (*SetDragonActive) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{400}
}

func (x *SetDragonActive) GetXDragonId() int32 {
	if x != nil && x.XDragonId != nil {
		return *x.XDragonId
	}
	return 0
}

func (x *SetDragonActive) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

//刷新食谱
type RefreshDragonFood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDragonId *int32 `protobuf:"varint,1,opt,name=_dragon_id,json=DragonId" json:"_dragon_id,omitempty"` //龙的ID
	XCostGold *int32 `protobuf:"varint,2,opt,name=_cost_gold,json=CostGold" json:"_cost_gold,omitempty"` //花费
}

func (x *RefreshDragonFood) Reset() {
	*x = RefreshDragonFood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshDragonFood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshDragonFood) ProtoMessage() {}

func (x *RefreshDragonFood) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshDragonFood.ProtoReflect.Descriptor instead.
func (*RefreshDragonFood) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{401}
}

func (x *RefreshDragonFood) GetXDragonId() int32 {
	if x != nil && x.XDragonId != nil {
		return *x.XDragonId
	}
	return 0
}

func (x *RefreshDragonFood) GetXCostGold() int32 {
	if x != nil && x.XCostGold != nil {
		return *x.XCostGold
	}
	return 0
}

//获取荣耀列表
type GetHonorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetHonorList) Reset() {
	*x = GetHonorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHonorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHonorList) ProtoMessage() {}

func (x *GetHonorList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHonorList.ProtoReflect.Descriptor instead.
func (*GetHonorList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{402}
}

func (x *GetHonorList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取战场2地图上的boss数据
type GetBattlefieldBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFieldId *int32 `protobuf:"varint,1,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"` //战场id
}

func (x *GetBattlefieldBoss) Reset() {
	*x = GetBattlefieldBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlefieldBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlefieldBoss) ProtoMessage() {}

func (x *GetBattlefieldBoss) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlefieldBoss.ProtoReflect.Descriptor instead.
func (*GetBattlefieldBoss) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{403}
}

func (x *GetBattlefieldBoss) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

//刷新战场商店
type BattleMarketRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeRefresh *int32 `protobuf:"varint,1,req,name=free_refresh,json=freeRefresh" json:"free_refresh,omitempty"` //是否免费刷新 0-false 1-true 2-不刷新，仅获取数据
	Gold        *int64 `protobuf:"varint,2,opt,name=gold" json:"gold,omitempty"`                                  //客户端计算的金币消耗数量
}

func (x *BattleMarketRefresh) Reset() {
	*x = BattleMarketRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleMarketRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleMarketRefresh) ProtoMessage() {}

func (x *BattleMarketRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleMarketRefresh.ProtoReflect.Descriptor instead.
func (*BattleMarketRefresh) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{404}
}

func (x *BattleMarketRefresh) GetFreeRefresh() int32 {
	if x != nil && x.FreeRefresh != nil {
		return *x.FreeRefresh
	}
	return 0
}

func (x *BattleMarketRefresh) GetGold() int64 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

//购买战场商品
type BattleMarketBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId   *int32 `protobuf:"varint,1,req,name=type_id,json=typeId" json:"type_id,omitempty"` //购买的id
	Position *int32 `protobuf:"varint,2,req,name=position" json:"position,omitempty"`           //购买的位置
}

func (x *BattleMarketBuy) Reset() {
	*x = BattleMarketBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleMarketBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleMarketBuy) ProtoMessage() {}

func (x *BattleMarketBuy) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleMarketBuy.ProtoReflect.Descriptor instead.
func (*BattleMarketBuy) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{405}
}

func (x *BattleMarketBuy) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *BattleMarketBuy) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

//获取分城活动列表
type GetFoundSubcity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XIndex *int32 `protobuf:"varint,1,opt,name=_index,json=Index" json:"_index,omitempty"`
}

func (x *GetFoundSubcity) Reset() {
	*x = GetFoundSubcity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFoundSubcity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFoundSubcity) ProtoMessage() {}

func (x *GetFoundSubcity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFoundSubcity.ProtoReflect.Descriptor instead.
func (*GetFoundSubcity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{406}
}

func (x *GetFoundSubcity) GetXIndex() int32 {
	if x != nil && x.XIndex != nil {
		return *x.XIndex
	}
	return 0
}

//获取世界名城活动
type GetFoundFamouscity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XIndex *int32 `protobuf:"varint,1,opt,name=_index,json=Index" json:"_index,omitempty"`
}

func (x *GetFoundFamouscity) Reset() {
	*x = GetFoundFamouscity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFoundFamouscity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFoundFamouscity) ProtoMessage() {}

func (x *GetFoundFamouscity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFoundFamouscity.ProtoReflect.Descriptor instead.
func (*GetFoundFamouscity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{407}
}

func (x *GetFoundFamouscity) GetXIndex() int32 {
	if x != nil && x.XIndex != nil {
		return *x.XIndex
	}
	return 0
}

//分城下注
type BetFoundSubcity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XIndex  *int32 `protobuf:"varint,1,opt,name=_index,json=Index" json:"_index,omitempty"`
	XItemId *int32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`
	XAmount *int32 `protobuf:"varint,3,opt,name=_amount,json=Amount" json:"_amount,omitempty"`
	XRound  *int32 `protobuf:"varint,4,opt,name=_round,json=Round" json:"_round,omitempty"`
}

func (x *BetFoundSubcity) Reset() {
	*x = BetFoundSubcity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetFoundSubcity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetFoundSubcity) ProtoMessage() {}

func (x *BetFoundSubcity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetFoundSubcity.ProtoReflect.Descriptor instead.
func (*BetFoundSubcity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{408}
}

func (x *BetFoundSubcity) GetXIndex() int32 {
	if x != nil && x.XIndex != nil {
		return *x.XIndex
	}
	return 0
}

func (x *BetFoundSubcity) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *BetFoundSubcity) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

func (x *BetFoundSubcity) GetXRound() int32 {
	if x != nil && x.XRound != nil {
		return *x.XRound
	}
	return 0
}

//世界名城下注
type BetFoundFamouscity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`
	XAmount *int32 `protobuf:"varint,2,opt,name=_amount,json=Amount" json:"_amount,omitempty"`
}

func (x *BetFoundFamouscity) Reset() {
	*x = BetFoundFamouscity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetFoundFamouscity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetFoundFamouscity) ProtoMessage() {}

func (x *BetFoundFamouscity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetFoundFamouscity.ProtoReflect.Descriptor instead.
func (*BetFoundFamouscity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{409}
}

func (x *BetFoundFamouscity) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *BetFoundFamouscity) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

//分城收材料
type ReapSubcityItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *ReapSubcityItems) Reset() {
	*x = ReapSubcityItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReapSubcityItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReapSubcityItems) ProtoMessage() {}

func (x *ReapSubcityItems) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReapSubcityItems.ProtoReflect.Descriptor instead.
func (*ReapSubcityItems) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{410}
}

func (x *ReapSubcityItems) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//使用道具开启分城
type OpenSubcityByItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //道具id
}

func (x *OpenSubcityByItem) Reset() {
	*x = OpenSubcityByItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSubcityByItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSubcityByItem) ProtoMessage() {}

func (x *OpenSubcityByItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSubcityByItem.ProtoReflect.Descriptor instead.
func (*OpenSubcityByItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{411}
}

func (x *OpenSubcityByItem) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//使用道具开启名城
type OpenFamouscityByItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //道具id
}

func (x *OpenFamouscityByItem) Reset() {
	*x = OpenFamouscityByItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFamouscityByItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFamouscityByItem) ProtoMessage() {}

func (x *OpenFamouscityByItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFamouscityByItem.ProtoReflect.Descriptor instead.
func (*OpenFamouscityByItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{412}
}

func (x *OpenFamouscityByItem) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//给建筑增加官职将军
type SetBuildingGovernmentGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBuildingId *int32 `protobuf:"varint,1,req,name=_building_id,json=BuildingId" json:"_building_id,omitempty"` //建筑类型ID
	XGeneralId  *int32 `protobuf:"varint,2,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`    //官职将军ID，0代表设为空
	XPositionId *int32 `protobuf:"varint,3,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` //建筑位置ID
}

func (x *SetBuildingGovernmentGeneral) Reset() {
	*x = SetBuildingGovernmentGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBuildingGovernmentGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBuildingGovernmentGeneral) ProtoMessage() {}

func (x *SetBuildingGovernmentGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBuildingGovernmentGeneral.ProtoReflect.Descriptor instead.
func (*SetBuildingGovernmentGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{413}
}

func (x *SetBuildingGovernmentGeneral) GetXBuildingId() int32 {
	if x != nil && x.XBuildingId != nil {
		return *x.XBuildingId
	}
	return 0
}

func (x *SetBuildingGovernmentGeneral) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *SetBuildingGovernmentGeneral) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

//邀请盟友击杀大盗
type InviteRobbersMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobbersId  *int32  `protobuf:"varint,1,req,name=robbers_id,json=robbersId" json:"robbers_id,omitempty"`    //宫廷大盗活动id
	MembersUid []int32 `protobuf:"varint,2,rep,name=members_uid,json=membersUid" json:"members_uid,omitempty"` //邀请的盟友id
}

func (x *InviteRobbersMembers) Reset() {
	*x = InviteRobbersMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteRobbersMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteRobbersMembers) ProtoMessage() {}

func (x *InviteRobbersMembers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteRobbersMembers.ProtoReflect.Descriptor instead.
func (*InviteRobbersMembers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{414}
}

func (x *InviteRobbersMembers) GetRobbersId() int32 {
	if x != nil && x.RobbersId != nil {
		return *x.RobbersId
	}
	return 0
}

func (x *InviteRobbersMembers) GetMembersUid() []int32 {
	if x != nil {
		return x.MembersUid
	}
	return nil
}

//获取宫廷大盗列表
type GetRobbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetRobbers) Reset() {
	*x = GetRobbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRobbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRobbers) ProtoMessage() {}

func (x *GetRobbers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRobbers.ProtoReflect.Descriptor instead.
func (*GetRobbers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{415}
}

func (x *GetRobbers) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取宫廷大盗奖励
type GetRobbersReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetRobbersReward) Reset() {
	*x = GetRobbersReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRobbersReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRobbersReward) ProtoMessage() {}

func (x *GetRobbersReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRobbersReward.ProtoReflect.Descriptor instead.
func (*GetRobbersReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{416}
}

func (x *GetRobbersReward) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取荣誉爵位列表
type GetVipPopularityRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTitle    *int32 `protobuf:"varint,1,opt,name=_title,json=Title" json:"_title,omitempty"`            //爵位 1大公 2公爵 3伯爵 4子爵 5男爵 6骑士
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *GetVipPopularityRankList) Reset() {
	*x = GetVipPopularityRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVipPopularityRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVipPopularityRankList) ProtoMessage() {}

func (x *GetVipPopularityRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVipPopularityRankList.ProtoReflect.Descriptor instead.
func (*GetVipPopularityRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{417}
}

func (x *GetVipPopularityRankList) GetXTitle() int32 {
	if x != nil && x.XTitle != nil {
		return *x.XTitle
	}
	return 0
}

func (x *GetVipPopularityRankList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取凯旋门榜单
type GetMapinfoTriumph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *GetMapinfoTriumph) Reset() {
	*x = GetMapinfoTriumph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapinfoTriumph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapinfoTriumph) ProtoMessage() {}

func (x *GetMapinfoTriumph) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapinfoTriumph.ProtoReflect.Descriptor instead.
func (*GetMapinfoTriumph) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{418}
}

func (x *GetMapinfoTriumph) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetMapinfoTriumph) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取凯旋门入榜记录
type GetMapinfoTriumphRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *GetMapinfoTriumphRecord) Reset() {
	*x = GetMapinfoTriumphRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapinfoTriumphRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapinfoTriumphRecord) ProtoMessage() {}

func (x *GetMapinfoTriumphRecord) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapinfoTriumphRecord.ProtoReflect.Descriptor instead.
func (*GetMapinfoTriumphRecord) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{419}
}

func (x *GetMapinfoTriumphRecord) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetMapinfoTriumphRecord) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取凯旋门送花记录
type GetMapinfoTriumphFlowerrecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag     *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
	XServerId *int32 `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *GetMapinfoTriumphFlowerrecord) Reset() {
	*x = GetMapinfoTriumphFlowerrecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapinfoTriumphFlowerrecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapinfoTriumphFlowerrecord) ProtoMessage() {}

func (x *GetMapinfoTriumphFlowerrecord) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapinfoTriumphFlowerrecord.ProtoReflect.Descriptor instead.
func (*GetMapinfoTriumphFlowerrecord) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{420}
}

func (x *GetMapinfoTriumphFlowerrecord) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetMapinfoTriumphFlowerrecord) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//凯旋门发送送花请求
type GetMapinfoTriumphFlower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XToplayerId *int32 `protobuf:"varint,1,req,name=_toplayer_id,json=ToplayerId" json:"_toplayer_id,omitempty"` //收花者id
	XType       *int32 `protobuf:"varint,2,req,name=_type,json=Type" json:"_type,omitempty"`                     // 榜单类型 1:君士坦丁堡;2:高加米拉;3:跨服战;4:奇迹
}

func (x *GetMapinfoTriumphFlower) Reset() {
	*x = GetMapinfoTriumphFlower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapinfoTriumphFlower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapinfoTriumphFlower) ProtoMessage() {}

func (x *GetMapinfoTriumphFlower) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapinfoTriumphFlower.ProtoReflect.Descriptor instead.
func (*GetMapinfoTriumphFlower) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{421}
}

func (x *GetMapinfoTriumphFlower) GetXToplayerId() int32 {
	if x != nil && x.XToplayerId != nil {
		return *x.XToplayerId
	}
	return 0
}

func (x *GetMapinfoTriumphFlower) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//战场结束同步积分数据
type OverBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XScoreBase                *float32                      `protobuf:"fixed32,1,req,name=_score_base,json=ScoreBase" json:"_score_base,omitempty"`                                              //基础积分
	XScoreActive              *float32                      `protobuf:"fixed32,2,req,name=_score_active,json=ScoreActive" json:"_score_active,omitempty"`                                        //动态积分
	XScoreTotal               *float32                      `protobuf:"fixed32,3,req,name=_score_total,json=ScoreTotal" json:"_score_total,omitempty"`                                           //个人总积分
	XListBattlefieldBuildings []*pb.BattlefieldBuildingInfo `protobuf:"bytes,4,rep,name=_list_battlefield_buildings,json=ListBattlefieldBuildings" json:"_list_battlefield_buildings,omitempty"` //战场建筑信息列表
}

func (x *OverBattlefield) Reset() {
	*x = OverBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverBattlefield) ProtoMessage() {}

func (x *OverBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverBattlefield.ProtoReflect.Descriptor instead.
func (*OverBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{422}
}

func (x *OverBattlefield) GetXScoreBase() float32 {
	if x != nil && x.XScoreBase != nil {
		return *x.XScoreBase
	}
	return 0
}

func (x *OverBattlefield) GetXScoreActive() float32 {
	if x != nil && x.XScoreActive != nil {
		return *x.XScoreActive
	}
	return 0
}

func (x *OverBattlefield) GetXScoreTotal() float32 {
	if x != nil && x.XScoreTotal != nil {
		return *x.XScoreTotal
	}
	return 0
}

func (x *OverBattlefield) GetXListBattlefieldBuildings() []*pb.BattlefieldBuildingInfo {
	if x != nil {
		return x.XListBattlefieldBuildings
	}
	return nil
}

//分解技能书
type DestructSkillBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,req,name=_itemId,json=ItemId" json:"_itemId,omitempty"` //装备ID
	XAmount *int32 `protobuf:"varint,2,req,name=_amount,json=Amount" json:"_amount,omitempty"` //分解数量
}

func (x *DestructSkillBook) Reset() {
	*x = DestructSkillBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestructSkillBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestructSkillBook) ProtoMessage() {}

func (x *DestructSkillBook) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestructSkillBook.ProtoReflect.Descriptor instead.
func (*DestructSkillBook) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{423}
}

func (x *DestructSkillBook) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *DestructSkillBook) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

//修改玩家头像框id 0代表无头像框
// 这个协议新的已经不用了
type SetAvatarFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFrameid *int32 `protobuf:"varint,1,req,name=_frameid,json=Frameid" json:"_frameid,omitempty"` //头像框id
}

func (x *SetAvatarFrame) Reset() {
	*x = SetAvatarFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAvatarFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAvatarFrame) ProtoMessage() {}

func (x *SetAvatarFrame) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAvatarFrame.ProtoReflect.Descriptor instead.
func (*SetAvatarFrame) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{424}
}

func (x *SetAvatarFrame) GetXFrameid() int32 {
	if x != nil && x.XFrameid != nil {
		return *x.XFrameid
	}
	return 0
}

//获取玩家解锁头像框列表
type GetAchievementList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetAchievementList) Reset() {
	*x = GetAchievementList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAchievementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAchievementList) ProtoMessage() {}

func (x *GetAchievementList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAchievementList.ProtoReflect.Descriptor instead.
func (*GetAchievementList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{425}
}

func (x *GetAchievementList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取海德拉活动排行
type GetHydraRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetHydraRank) Reset() {
	*x = GetHydraRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHydraRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHydraRank) ProtoMessage() {}

func (x *GetHydraRank) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHydraRank.ProtoReflect.Descriptor instead.
func (*GetHydraRank) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{426}
}

func (x *GetHydraRank) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取王者活动数据
type GetKingReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetKingReturn) Reset() {
	*x = GetKingReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKingReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKingReturn) ProtoMessage() {}

func (x *GetKingReturn) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKingReturn.ProtoReflect.Descriptor instead.
func (*GetKingReturn) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{427}
}

func (x *GetKingReturn) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取新手召回数据
type GetPlayerCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetPlayerCallback) Reset() {
	*x = GetPlayerCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerCallback) ProtoMessage() {}

func (x *GetPlayerCallback) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerCallback.ProtoReflect.Descriptor instead.
func (*GetPlayerCallback) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{428}
}

func (x *GetPlayerCallback) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取兑换活动数据
type GetExchangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetExchangeItem) Reset() {
	*x = GetExchangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeItem) ProtoMessage() {}

func (x *GetExchangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeItem.ProtoReflect.Descriptor instead.
func (*GetExchangeItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{429}
}

func (x *GetExchangeItem) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取活动奖励
type GetKingReturnReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XActiveId *int32 `protobuf:"varint,1,opt,name=_activeId,json=ActiveId" json:"_activeId,omitempty"` //活动ID
	XTaskId   *int32 `protobuf:"varint,2,opt,name=_taskId,json=TaskId" json:"_taskId,omitempty"`       //任务ID
	XCostGem  *int32 `protobuf:"varint,3,opt,name=_cost_gem,json=CostGem" json:"_cost_gem,omitempty"`  //补签所需钻石数
}

func (x *GetKingReturnReward) Reset() {
	*x = GetKingReturnReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKingReturnReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKingReturnReward) ProtoMessage() {}

func (x *GetKingReturnReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKingReturnReward.ProtoReflect.Descriptor instead.
func (*GetKingReturnReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{430}
}

func (x *GetKingReturnReward) GetXActiveId() int32 {
	if x != nil && x.XActiveId != nil {
		return *x.XActiveId
	}
	return 0
}

func (x *GetKingReturnReward) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *GetKingReturnReward) GetXCostGem() int32 {
	if x != nil && x.XCostGem != nil {
		return *x.XCostGem
	}
	return 0
}

//获取活动奖励
type GetExchangeReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XActiveId *int32 `protobuf:"varint,1,opt,name=_activeId,json=ActiveId" json:"_activeId,omitempty"` //活动ID
	XTaskId   *int32 `protobuf:"varint,2,opt,name=_taskId,json=TaskId" json:"_taskId,omitempty"`       //任务ID
}

func (x *GetExchangeReward) Reset() {
	*x = GetExchangeReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeReward) ProtoMessage() {}

func (x *GetExchangeReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeReward.ProtoReflect.Descriptor instead.
func (*GetExchangeReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{431}
}

func (x *GetExchangeReward) GetXActiveId() int32 {
	if x != nil && x.XActiveId != nil {
		return *x.XActiveId
	}
	return 0
}

func (x *GetExchangeReward) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//领取章节任务奖励
type GetChapterTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XActiveId *int32 `protobuf:"varint,1,opt,name=_activeId,json=ActiveId" json:"_activeId,omitempty"` //活动ID
	XTaskId   *int32 `protobuf:"varint,2,opt,name=_taskId,json=TaskId" json:"_taskId,omitempty"`       //任务ID
}

func (x *GetChapterTaskReward) Reset() {
	*x = GetChapterTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChapterTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChapterTaskReward) ProtoMessage() {}

func (x *GetChapterTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChapterTaskReward.ProtoReflect.Descriptor instead.
func (*GetChapterTaskReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{432}
}

func (x *GetChapterTaskReward) GetXActiveId() int32 {
	if x != nil && x.XActiveId != nil {
		return *x.XActiveId
	}
	return 0
}

func (x *GetChapterTaskReward) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//领取章节任务奖励
type GetNewChapterTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId        *int32 `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                      //主键Id
	XChapterId *int32 `protobuf:"varint,2,opt,name=_chapterId,json=ChapterId" json:"_chapterId,omitempty"` //章节ID 如果是领取章节奖励则为0
	XTaskId    *int32 `protobuf:"varint,3,opt,name=_taskId,json=TaskId" json:"_taskId,omitempty"`          //任务ID
}

func (x *GetNewChapterTaskReward) Reset() {
	*x = GetNewChapterTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewChapterTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewChapterTaskReward) ProtoMessage() {}

func (x *GetNewChapterTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewChapterTaskReward.ProtoReflect.Descriptor instead.
func (*GetNewChapterTaskReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{433}
}

func (x *GetNewChapterTaskReward) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GetNewChapterTaskReward) GetXChapterId() int32 {
	if x != nil && x.XChapterId != nil {
		return *x.XChapterId
	}
	return 0
}

func (x *GetNewChapterTaskReward) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//跨服战建筑列表
type GetTempleBuildingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32 `protobuf:"varint,1,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *GetTempleBuildingList) Reset() {
	*x = GetTempleBuildingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTempleBuildingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTempleBuildingList) ProtoMessage() {}

func (x *GetTempleBuildingList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTempleBuildingList.ProtoReflect.Descriptor instead.
func (*GetTempleBuildingList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{434}
}

func (x *GetTempleBuildingList) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//使用道具召唤野怪
type OpenMonsterByItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"` //道具id
}

func (x *OpenMonsterByItem) Reset() {
	*x = OpenMonsterByItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMonsterByItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMonsterByItem) ProtoMessage() {}

func (x *OpenMonsterByItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMonsterByItem.ProtoReflect.Descriptor instead.
func (*OpenMonsterByItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{435}
}

func (x *OpenMonsterByItem) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

//获取联盟召唤怪列表
type GetGuildMonster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //0:狼,1:迦楼罗
}

func (x *GetGuildMonster) Reset() {
	*x = GetGuildMonster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildMonster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildMonster) ProtoMessage() {}

func (x *GetGuildMonster) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildMonster.ProtoReflect.Descriptor instead.
func (*GetGuildMonster) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{436}
}

func (x *GetGuildMonster) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取单日刷新任务数据
type GetDailyRefreshTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetDailyRefreshTask) Reset() {
	*x = GetDailyRefreshTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyRefreshTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyRefreshTask) ProtoMessage() {}

func (x *GetDailyRefreshTask) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyRefreshTask.ProtoReflect.Descriptor instead.
func (*GetDailyRefreshTask) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{437}
}

func (x *GetDailyRefreshTask) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取王者归来累计宝箱奖励
type GetKingBoxReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid     *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"`             //用户id
	XEventId *int32  `protobuf:"varint,2,req,name=_eventId,json=EventId" json:"_eventId,omitempty"` //活动ID
}

func (x *GetKingBoxReward) Reset() {
	*x = GetKingBoxReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKingBoxReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKingBoxReward) ProtoMessage() {}

func (x *GetKingBoxReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKingBoxReward.ProtoReflect.Descriptor instead.
func (*GetKingBoxReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{438}
}

func (x *GetKingBoxReward) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

func (x *GetKingBoxReward) GetXEventId() int32 {
	if x != nil && x.XEventId != nil {
		return *x.XEventId
	}
	return 0
}

//获取活跃度奖励任务(单个任务道具奖励)
type GetActivityTaskRewardItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId *int32 `protobuf:"varint,1,req,name=_task_id,json=TaskId" json:"_task_id,omitempty"` //用户id
}

func (x *GetActivityTaskRewardItems) Reset() {
	*x = GetActivityTaskRewardItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityTaskRewardItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityTaskRewardItems) ProtoMessage() {}

func (x *GetActivityTaskRewardItems) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityTaskRewardItems.ProtoReflect.Descriptor instead.
func (*GetActivityTaskRewardItems) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{439}
}

func (x *GetActivityTaskRewardItems) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//获得里程碑任务列表
type GetMilestoneList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetMilestoneList) Reset() {
	*x = GetMilestoneList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMilestoneList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMilestoneList) ProtoMessage() {}

func (x *GetMilestoneList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMilestoneList.ProtoReflect.Descriptor instead.
func (*GetMilestoneList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{440}
}

func (x *GetMilestoneList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获得迦楼罗任务列表
type GetGaruaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetGaruaList) Reset() {
	*x = GetGaruaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGaruaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGaruaList) ProtoMessage() {}

func (x *GetGaruaList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGaruaList.ProtoReflect.Descriptor instead.
func (*GetGaruaList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{441}
}

func (x *GetGaruaList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取里程碑任务奖励
type ClaimMilestoneReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId *int32 `protobuf:"varint,1,req,name=_task_id,json=TaskId" json:"_task_id,omitempty"` //任务id
}

func (x *ClaimMilestoneReward) Reset() {
	*x = ClaimMilestoneReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimMilestoneReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimMilestoneReward) ProtoMessage() {}

func (x *ClaimMilestoneReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimMilestoneReward.ProtoReflect.Descriptor instead.
func (*ClaimMilestoneReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{442}
}

func (x *ClaimMilestoneReward) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//获取新服基金活动数据
type GetNewServerFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetNewServerFund) Reset() {
	*x = GetNewServerFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewServerFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewServerFund) ProtoMessage() {}

func (x *GetNewServerFund) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewServerFund.ProtoReflect.Descriptor instead.
func (*GetNewServerFund) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{443}
}

func (x *GetNewServerFund) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//阶段升级奖励记录
type UpgradeStageReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCurrentLevel *int32 `protobuf:"varint,1,opt,name=_current_level,json=CurrentLevel" json:"_current_level,omitempty"` //当前主城等级
}

func (x *UpgradeStageReward) Reset() {
	*x = UpgradeStageReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeStageReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeStageReward) ProtoMessage() {}

func (x *UpgradeStageReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeStageReward.ProtoReflect.Descriptor instead.
func (*UpgradeStageReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{444}
}

func (x *UpgradeStageReward) GetXCurrentLevel() int32 {
	if x != nil && x.XCurrentLevel != nil {
		return *x.XCurrentLevel
	}
	return 0
}

//安全码操作接口
type SafeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSafeCodeOperation *int32  `protobuf:"varint,1,req,name=_safe_code_operation,json=SafeCodeOperation" json:"_safe_code_operation,omitempty"` //操作类型: 0-开启|1-关闭|2-设置|3-清除|4-校验
	XType              *string `protobuf:"bytes,2,opt,name=_type,json=Type" json:"_type,omitempty"`                                             // 类型: 操作类型（BaptizeGeneral | FireGeneral | DestructEquipment | SellTreasure | DismissTroop | RefineDragon | RemoveResBuild）
	XData1             *int32  `protobuf:"varint,3,opt,name=_data1,json=Data1" json:"_data1,omitempty"`                                         // 数据1 -- 新密码
	XData2             *int32  `protobuf:"varint,4,opt,name=_data2,json=Data2" json:"_data2,omitempty"`                                         // 数据2 -- 老密码
}

func (x *SafeCode) Reset() {
	*x = SafeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeCode) ProtoMessage() {}

func (x *SafeCode) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeCode.ProtoReflect.Descriptor instead.
func (*SafeCode) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{445}
}

func (x *SafeCode) GetXSafeCodeOperation() int32 {
	if x != nil && x.XSafeCodeOperation != nil {
		return *x.XSafeCodeOperation
	}
	return 0
}

func (x *SafeCode) GetXType() string {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return ""
}

func (x *SafeCode) GetXData1() int32 {
	if x != nil && x.XData1 != nil {
		return *x.XData1
	}
	return 0
}

func (x *SafeCode) GetXData2() int32 {
	if x != nil && x.XData2 != nil {
		return *x.XData2
	}
	return 0
}

//分解道具
type DestructItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId *int32 `protobuf:"varint,1,req,name=_itemId,json=ItemId" json:"_itemId,omitempty"` //道具ID
	XAmount *int32 `protobuf:"varint,2,req,name=_amount,json=Amount" json:"_amount,omitempty"` //分解数量
	XId     *int64 `protobuf:"varint,3,opt,name=_id,json=Id" json:"_id,omitempty"`             //唯一id
}

func (x *DestructItem) Reset() {
	*x = DestructItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestructItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestructItem) ProtoMessage() {}

func (x *DestructItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestructItem.ProtoReflect.Descriptor instead.
func (*DestructItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{446}
}

func (x *DestructItem) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *DestructItem) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

func (x *DestructItem) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

// 道具
type ItemUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     *int32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`             // 道具ID
	ItemAmount *int32 `protobuf:"varint,2,opt,name=item_amount,json=itemAmount" json:"item_amount,omitempty"` // 道具数量
	XId        *int64 `protobuf:"varint,3,opt,name=_id,json=Id" json:"_id,omitempty"`                         // 唯一ID
}

func (x *ItemUp) Reset() {
	*x = ItemUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemUp) ProtoMessage() {}

func (x *ItemUp) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemUp.ProtoReflect.Descriptor instead.
func (*ItemUp) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{447}
}

func (x *ItemUp) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *ItemUp) GetItemAmount() int32 {
	if x != nil && x.ItemAmount != nil {
		return *x.ItemAmount
	}
	return 0
}

func (x *ItemUp) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//批量分解装备
type DestructEquipmentBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemList []*ItemUp `protobuf:"bytes,1,rep,name=_item_list,json=ItemList" json:"_item_list,omitempty"` // 分解的装备
}

func (x *DestructEquipmentBatch) Reset() {
	*x = DestructEquipmentBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestructEquipmentBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestructEquipmentBatch) ProtoMessage() {}

func (x *DestructEquipmentBatch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestructEquipmentBatch.ProtoReflect.Descriptor instead.
func (*DestructEquipmentBatch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{448}
}

func (x *DestructEquipmentBatch) GetXItemList() []*ItemUp {
	if x != nil {
		return x.XItemList
	}
	return nil
}

//升级将军特性
type GeneralUpgradeFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId  *int32 `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`    //将军id
	XFeatureId  *int32 `protobuf:"varint,2,req,name=_feature_id,json=FeatureId" json:"_feature_id,omitempty"`    //将军特性id
	XItemId     *int32 `protobuf:"varint,3,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             //符文类型
	XItemCount  *int32 `protobuf:"varint,4,req,name=_item_count,json=ItemCount" json:"_item_count,omitempty"`    //符文个数
	XLuckyStone *int32 `protobuf:"varint,5,req,name=_lucky_stone,json=LuckyStone" json:"_lucky_stone,omitempty"` //幸运石个数
	XResE       *int32 `protobuf:"varint,6,req,name=_resE,json=ResE" json:"_resE,omitempty"`                     //钻石数（校验使用）
}

func (x *GeneralUpgradeFeature) Reset() {
	*x = GeneralUpgradeFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralUpgradeFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralUpgradeFeature) ProtoMessage() {}

func (x *GeneralUpgradeFeature) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralUpgradeFeature.ProtoReflect.Descriptor instead.
func (*GeneralUpgradeFeature) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{449}
}

func (x *GeneralUpgradeFeature) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralUpgradeFeature) GetXFeatureId() int32 {
	if x != nil && x.XFeatureId != nil {
		return *x.XFeatureId
	}
	return 0
}

func (x *GeneralUpgradeFeature) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *GeneralUpgradeFeature) GetXItemCount() int32 {
	if x != nil && x.XItemCount != nil {
		return *x.XItemCount
	}
	return 0
}

func (x *GeneralUpgradeFeature) GetXLuckyStone() int32 {
	if x != nil && x.XLuckyStone != nil {
		return *x.XLuckyStone
	}
	return 0
}

func (x *GeneralUpgradeFeature) GetXResE() int32 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

//获取联盟世界名城列表
type GetGuildFamouscityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetGuildFamouscityList) Reset() {
	*x = GetGuildFamouscityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildFamouscityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildFamouscityList) ProtoMessage() {}

func (x *GetGuildFamouscityList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildFamouscityList.ProtoReflect.Descriptor instead.
func (*GetGuildFamouscityList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{450}
}

func (x *GetGuildFamouscityList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//召唤维京海盗
type SummonViking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMonsterId *int32 `protobuf:"varint,1,req,name=_monster_id,json=MonsterId" json:"_monster_id,omitempty"` //维京海盗id（校验使用）
}

func (x *SummonViking) Reset() {
	*x = SummonViking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummonViking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonViking) ProtoMessage() {}

func (x *SummonViking) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonViking.ProtoReflect.Descriptor instead.
func (*SummonViking) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{451}
}

func (x *SummonViking) GetXMonsterId() int32 {
	if x != nil && x.XMonsterId != nil {
		return *x.XMonsterId
	}
	return 0
}

//求助击杀维京海盗
type ApplyViking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMonsterId *int32 `protobuf:"varint,1,req,name=_monster_id,json=MonsterId" json:"_monster_id,omitempty"` //维京海盗id
}

func (x *ApplyViking) Reset() {
	*x = ApplyViking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyViking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyViking) ProtoMessage() {}

func (x *ApplyViking) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyViking.ProtoReflect.Descriptor instead.
func (*ApplyViking) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{452}
}

func (x *ApplyViking) GetXMonsterId() int32 {
	if x != nil && x.XMonsterId != nil {
		return *x.XMonsterId
	}
	return 0
}

//选择维京勇士活动难度
type SelectVikingDifficulty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDifficulty *int32 `protobuf:"varint,1,req,name=_difficulty,json=Difficulty" json:"_difficulty,omitempty"` //难度
}

func (x *SelectVikingDifficulty) Reset() {
	*x = SelectVikingDifficulty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectVikingDifficulty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectVikingDifficulty) ProtoMessage() {}

func (x *SelectVikingDifficulty) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectVikingDifficulty.ProtoReflect.Descriptor instead.
func (*SelectVikingDifficulty) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{453}
}

func (x *SelectVikingDifficulty) GetXDifficulty() int32 {
	if x != nil && x.XDifficulty != nil {
		return *x.XDifficulty
	}
	return 0
}

//获取小地图世界名城
type GetAllFamouscity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32 `protobuf:"varint,1,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //服务器id
}

func (x *GetAllFamouscity) Reset() {
	*x = GetAllFamouscity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllFamouscity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFamouscity) ProtoMessage() {}

func (x *GetAllFamouscity) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFamouscity.ProtoReflect.Descriptor instead.
func (*GetAllFamouscity) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{454}
}

func (x *GetAllFamouscity) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//获取维京勇士盟友战况列表
type GetGuildVikingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetGuildVikingList) Reset() {
	*x = GetGuildVikingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildVikingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildVikingList) ProtoMessage() {}

func (x *GetGuildVikingList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildVikingList.ProtoReflect.Descriptor instead.
func (*GetGuildVikingList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{455}
}

func (x *GetGuildVikingList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取玩家维京勇士数据
type GetVikingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetVikingData) Reset() {
	*x = GetVikingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVikingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVikingData) ProtoMessage() {}

func (x *GetVikingData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVikingData.ProtoReflect.Descriptor instead.
func (*GetVikingData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{456}
}

func (x *GetVikingData) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取维京勇士奖励
type ClaimVikingReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *ClaimVikingReward) Reset() {
	*x = ClaimVikingReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimVikingReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimVikingReward) ProtoMessage() {}

func (x *ClaimVikingReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimVikingReward.ProtoReflect.Descriptor instead.
func (*ClaimVikingReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{457}
}

func (x *ClaimVikingReward) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取季后赛玩家列表
type GetPlayoffMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XRound *int32 `protobuf:"varint,1,req,name=_round,json=Round,def=0" json:"_round,omitempty"` //轮次，0表示获取全部轮次
	XGroup *int32 `protobuf:"varint,2,req,name=_group,json=Group,def=0" json:"_group,omitempty"` //分组，0表示获取全部分组
	XArea  *int32 `protobuf:"varint,3,req,name=_area,json=Area" json:"_area,omitempty"`          //分区，3. 荣耀组; 4. 新秀组
}

// Default values for GetPlayoffMembers fields.
const (
	Default_GetPlayoffMembers_XRound = int32(0)
	Default_GetPlayoffMembers_XGroup = int32(0)
)

func (x *GetPlayoffMembers) Reset() {
	*x = GetPlayoffMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayoffMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayoffMembers) ProtoMessage() {}

func (x *GetPlayoffMembers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayoffMembers.ProtoReflect.Descriptor instead.
func (*GetPlayoffMembers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{458}
}

func (x *GetPlayoffMembers) GetXRound() int32 {
	if x != nil && x.XRound != nil {
		return *x.XRound
	}
	return Default_GetPlayoffMembers_XRound
}

func (x *GetPlayoffMembers) GetXGroup() int32 {
	if x != nil && x.XGroup != nil {
		return *x.XGroup
	}
	return Default_GetPlayoffMembers_XGroup
}

func (x *GetPlayoffMembers) GetXArea() int32 {
	if x != nil && x.XArea != nil {
		return *x.XArea
	}
	return 0
}

// 获得跨服争霸赛数据
type GetLimitServerCompetition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetLimitServerCompetition) Reset() {
	*x = GetLimitServerCompetition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLimitServerCompetition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitServerCompetition) ProtoMessage() {}

func (x *GetLimitServerCompetition) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitServerCompetition.ProtoReflect.Descriptor instead.
func (*GetLimitServerCompetition) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{459}
}

func (x *GetLimitServerCompetition) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取联盟珍宝数据
type GetGuildTreasureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetGuildTreasureData) Reset() {
	*x = GetGuildTreasureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildTreasureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildTreasureData) ProtoMessage() {}

func (x *GetGuildTreasureData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildTreasureData.ProtoReflect.Descriptor instead.
func (*GetGuildTreasureData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{460}
}

func (x *GetGuildTreasureData) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取联盟珍宝
type ClaimGuildTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //联盟珍宝id（自增）
}

func (x *ClaimGuildTreasure) Reset() {
	*x = ClaimGuildTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimGuildTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimGuildTreasure) ProtoMessage() {}

func (x *ClaimGuildTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimGuildTreasure.ProtoReflect.Descriptor instead.
func (*ClaimGuildTreasure) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{461}
}

func (x *ClaimGuildTreasure) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取可发送联盟珍宝列表
type GetPrivateTreasureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetPrivateTreasureList) Reset() {
	*x = GetPrivateTreasureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateTreasureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateTreasureList) ProtoMessage() {}

func (x *GetPrivateTreasureList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateTreasureList.ProtoReflect.Descriptor instead.
func (*GetPrivateTreasureList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{462}
}

func (x *GetPrivateTreasureList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//发送联盟珍宝
type SendPrivateTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTreasureId *int32 `protobuf:"varint,1,req,name=_treasure_id,json=TreasureId" json:"_treasure_id,omitempty"` //配置表唯一id，0表示一键发送全部
}

func (x *SendPrivateTreasure) Reset() {
	*x = SendPrivateTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPrivateTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPrivateTreasure) ProtoMessage() {}

func (x *SendPrivateTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPrivateTreasure.ProtoReflect.Descriptor instead.
func (*SendPrivateTreasure) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{463}
}

func (x *SendPrivateTreasure) GetXTreasureId() int32 {
	if x != nil && x.XTreasureId != nil {
		return *x.XTreasureId
	}
	return 0
}

//士兵授勋
type HonoursSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"` //授勋士兵类型
}

func (x *HonoursSoldiers) Reset() {
	*x = HonoursSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HonoursSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HonoursSoldiers) ProtoMessage() {}

func (x *HonoursSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HonoursSoldiers.ProtoReflect.Descriptor instead.
func (*HonoursSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{464}
}

func (x *HonoursSoldiers) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

//驱逐玩家出联盟领地
type DeportUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUid *uint32 `protobuf:"varint,1,req,name=_uid,json=Uid" json:"_uid,omitempty"` //被驱逐玩家id
}

func (x *DeportUser) Reset() {
	*x = DeportUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeportUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeportUser) ProtoMessage() {}

func (x *DeportUser) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeportUser.ProtoReflect.Descriptor instead.
func (*DeportUser) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{465}
}

func (x *DeportUser) GetXUid() uint32 {
	if x != nil && x.XUid != nil {
		return *x.XUid
	}
	return 0
}

//获取玩家驱逐列表
type GetDeportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetDeportList) Reset() {
	*x = GetDeportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeportList) ProtoMessage() {}

func (x *GetDeportList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeportList.ProtoReflect.Descriptor instead.
func (*GetDeportList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{466}
}

func (x *GetDeportList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取battlepass活动数据
type GetBattlepass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetBattlepass) Reset() {
	*x = GetBattlepass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlepass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlepass) ProtoMessage() {}

func (x *GetBattlepass) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlepass.ProtoReflect.Descriptor instead.
func (*GetBattlepass) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{467}
}

func (x *GetBattlepass) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取battlepass宝物奖励
type GetBattlepassReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLevel *int32 `protobuf:"varint,1,opt,name=_level,json=Level" json:"_level,omitempty"` // 领取宝物
	XType  *int32 `protobuf:"varint,2,opt,name=_type,json=Type" json:"_type,omitempty"`    // 领取宝物类型   0：普通奖励， 1：珍贵宝物
}

func (x *GetBattlepassReward) Reset() {
	*x = GetBattlepassReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBattlepassReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBattlepassReward) ProtoMessage() {}

func (x *GetBattlepassReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBattlepassReward.ProtoReflect.Descriptor instead.
func (*GetBattlepassReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{468}
}

func (x *GetBattlepassReward) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *GetBattlepassReward) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//获取玩家数据
type GetUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *GetUserDataType `protobuf:"varint,1,opt,name=_type,json=Type,enum=MsgUp.GetUserDataType" json:"_type,omitempty"`
}

func (x *GetUserData) Reset() {
	*x = GetUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserData) ProtoMessage() {}

func (x *GetUserData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserData.ProtoReflect.Descriptor instead.
func (*GetUserData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{469}
}

func (x *GetUserData) GetXType() GetUserDataType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return GetUserData_items
}

//获取评论奖励
type GetCommentedReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetCommentedReward) Reset() {
	*x = GetCommentedReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentedReward) ProtoMessage() {}

func (x *GetCommentedReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentedReward.ProtoReflect.Descriptor instead.
func (*GetCommentedReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{470}
}

func (x *GetCommentedReward) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取解谜奖励
type GetPuzzleReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPuzzleId  *int32 `protobuf:"varint,1,opt,name=_puzzle_id,json=PuzzleId" json:"_puzzle_id,omitempty"`
	XType      *int32 `protobuf:"varint,2,opt,name=_type,json=Type" json:"_type,omitempty"` //0普通关卡 1神秘关卡 2推送关卡
	XStarLevel *int32 `protobuf:"varint,3,opt,name=_star_level,json=StarLevel" json:"_star_level,omitempty"`
}

func (x *GetPuzzleReward) Reset() {
	*x = GetPuzzleReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPuzzleReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPuzzleReward) ProtoMessage() {}

func (x *GetPuzzleReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPuzzleReward.ProtoReflect.Descriptor instead.
func (*GetPuzzleReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{471}
}

func (x *GetPuzzleReward) GetXPuzzleId() int32 {
	if x != nil && x.XPuzzleId != nil {
		return *x.XPuzzleId
	}
	return 0
}

func (x *GetPuzzleReward) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *GetPuzzleReward) GetXStarLevel() int32 {
	if x != nil && x.XStarLevel != nil {
		return *x.XStarLevel
	}
	return 0
}

//获取解谜数据
type GetPuzzleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetPuzzleData) Reset() {
	*x = GetPuzzleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPuzzleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPuzzleData) ProtoMessage() {}

func (x *GetPuzzleData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPuzzleData.ProtoReflect.Descriptor instead.
func (*GetPuzzleData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{472}
}

func (x *GetPuzzleData) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取7日名将活动
type ClaimFirstWeekGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCount *int32 `protobuf:"varint,1,req,name=_count,json=Count" json:"_count,omitempty"` //已购买礼包个数
}

func (x *ClaimFirstWeekGift) Reset() {
	*x = ClaimFirstWeekGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimFirstWeekGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFirstWeekGift) ProtoMessage() {}

func (x *ClaimFirstWeekGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFirstWeekGift.ProtoReflect.Descriptor instead.
func (*ClaimFirstWeekGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{473}
}

func (x *ClaimFirstWeekGift) GetXCount() int32 {
	if x != nil && x.XCount != nil {
		return *x.XCount
	}
	return 0
}

//领取7日名将活动
type ClaimFamousGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTime *int32 `protobuf:"varint,1,req,name=_time,json=Time" json:"_time,omitempty"` //任务对应的时间，0表示任务开始，86400表示领取第一个任务奖励（将军）
}

func (x *ClaimFamousGeneral) Reset() {
	*x = ClaimFamousGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimFamousGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFamousGeneral) ProtoMessage() {}

func (x *ClaimFamousGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFamousGeneral.ProtoReflect.Descriptor instead.
func (*ClaimFamousGeneral) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{474}
}

func (x *ClaimFamousGeneral) GetXTime() int32 {
	if x != nil && x.XTime != nil {
		return *x.XTime
	}
	return 0
}

//设置周卡月卡礼包类型
type SetMonthCardType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId   *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`       //礼包ID
	XType *int32 `protobuf:"varint,2,req,name=_type,json=Type" json:"_type,omitempty"` //礼包类型
}

func (x *SetMonthCardType) Reset() {
	*x = SetMonthCardType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMonthCardType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMonthCardType) ProtoMessage() {}

func (x *SetMonthCardType) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMonthCardType.ProtoReflect.Descriptor instead.
func (*SetMonthCardType) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{475}
}

func (x *SetMonthCardType) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *SetMonthCardType) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//领取钻石消耗返利
type ClaimConsumerGemsReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //活动id
}

func (x *ClaimConsumerGemsReward) Reset() {
	*x = ClaimConsumerGemsReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimConsumerGemsReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimConsumerGemsReward) ProtoMessage() {}

func (x *ClaimConsumerGemsReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimConsumerGemsReward.ProtoReflect.Descriptor instead.
func (*ClaimConsumerGemsReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{476}
}

func (x *ClaimConsumerGemsReward) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//领取钻石消耗返利数据
type GetConsumerGemsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetConsumerGemsInfo) Reset() {
	*x = GetConsumerGemsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumerGemsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerGemsInfo) ProtoMessage() {}

func (x *GetConsumerGemsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerGemsInfo.ProtoReflect.Descriptor instead.
func (*GetConsumerGemsInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{477}
}

func (x *GetConsumerGemsInfo) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取免费礼包活动
type ClaimFreeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTime  *int32 `protobuf:"varint,1,req,name=_time,json=Time" json:"_time,omitempty"`      //领取时间
	XType  *int32 `protobuf:"varint,2,req,name=_type,json=Type" json:"_type,omitempty"`      //领取档位   0：紫将  1：金将
	XIsBuy *int32 `protobuf:"varint,3,req,name=_is_buy,json=IsBuy" json:"_is_buy,omitempty"` //是否是购买 0:领取奖励   1：购买
}

func (x *ClaimFreeGift) Reset() {
	*x = ClaimFreeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimFreeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFreeGift) ProtoMessage() {}

func (x *ClaimFreeGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFreeGift.ProtoReflect.Descriptor instead.
func (*ClaimFreeGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{478}
}

func (x *ClaimFreeGift) GetXTime() int32 {
	if x != nil && x.XTime != nil {
		return *x.XTime
	}
	return 0
}

func (x *ClaimFreeGift) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *ClaimFreeGift) GetXIsBuy() int32 {
	if x != nil && x.XIsBuy != nil {
		return *x.XIsBuy
	}
	return 0
}

type SendNpsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XScore *int32 `protobuf:"varint,1,req,name=_score,json=Score" json:"_score,omitempty"`
}

func (x *SendNpsResult) Reset() {
	*x = SendNpsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendNpsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNpsResult) ProtoMessage() {}

func (x *SendNpsResult) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNpsResult.ProtoReflect.Descriptor instead.
func (*SendNpsResult) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{479}
}

func (x *SendNpsResult) GetXScore() int32 {
	if x != nil && x.XScore != nil {
		return *x.XScore
	}
	return 0
}

//领取特殊礼包 流失礼包
type RequestSpecialGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *int32 `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"`
}

func (x *RequestSpecialGift) Reset() {
	*x = RequestSpecialGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSpecialGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSpecialGift) ProtoMessage() {}

func (x *RequestSpecialGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSpecialGift.ProtoReflect.Descriptor instead.
func (*RequestSpecialGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{480}
}

func (x *RequestSpecialGift) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//小战场组队
type SignupSmallBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDifficulty *int32 `protobuf:"varint,1,req,name=_difficulty,json=Difficulty" json:"_difficulty,omitempty"` //难度
	XType       *int32 `protobuf:"varint,2,req,name=_type,json=Type" json:"_type,omitempty"`                   //0. 加入匹配; 1. 创建队伍
}

func (x *SignupSmallBattlefield) Reset() {
	*x = SignupSmallBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignupSmallBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupSmallBattlefield) ProtoMessage() {}

func (x *SignupSmallBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupSmallBattlefield.ProtoReflect.Descriptor instead.
func (*SignupSmallBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{481}
}

func (x *SignupSmallBattlefield) GetXDifficulty() int32 {
	if x != nil && x.XDifficulty != nil {
		return *x.XDifficulty
	}
	return 0
}

func (x *SignupSmallBattlefield) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//小战场邀请
type InviteSmallBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId     *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`               //战场id
	XUserId *int32 `protobuf:"varint,2,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家id
}

func (x *InviteSmallBattlefield) Reset() {
	*x = InviteSmallBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteSmallBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteSmallBattlefield) ProtoMessage() {}

func (x *InviteSmallBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteSmallBattlefield.ProtoReflect.Descriptor instead.
func (*InviteSmallBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{482}
}

func (x *InviteSmallBattlefield) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *InviteSmallBattlefield) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//小战场匹配
type MatchSmallBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //战场id
}

func (x *MatchSmallBattlefield) Reset() {
	*x = MatchSmallBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSmallBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSmallBattlefield) ProtoMessage() {}

func (x *MatchSmallBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSmallBattlefield.ProtoReflect.Descriptor instead.
func (*MatchSmallBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{483}
}

func (x *MatchSmallBattlefield) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//小战场开启挑战
type StartSmallBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //战场id
}

func (x *StartSmallBattlefield) Reset() {
	*x = StartSmallBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSmallBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSmallBattlefield) ProtoMessage() {}

func (x *StartSmallBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSmallBattlefield.ProtoReflect.Descriptor instead.
func (*StartSmallBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{484}
}

func (x *StartSmallBattlefield) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//同意小战场邀请
type ConfirmSmallBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId      *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                //战场id
	XConfirm *int32 `protobuf:"varint,2,req,name=_confirm,json=Confirm" json:"_confirm,omitempty"` //0. 拒绝; 1.同意
	XUserId  *int32 `protobuf:"varint,3,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`  //发送邀请的玩家id
}

func (x *ConfirmSmallBattlefield) Reset() {
	*x = ConfirmSmallBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmSmallBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmSmallBattlefield) ProtoMessage() {}

func (x *ConfirmSmallBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmSmallBattlefield.ProtoReflect.Descriptor instead.
func (*ConfirmSmallBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{485}
}

func (x *ConfirmSmallBattlefield) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ConfirmSmallBattlefield) GetXConfirm() int32 {
	if x != nil && x.XConfirm != nil {
		return *x.XConfirm
	}
	return 0
}

func (x *ConfirmSmallBattlefield) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//获取小战场相关信息
type GetSmallBattlefieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetSmallBattlefieldInfo) Reset() {
	*x = GetSmallBattlefieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmallBattlefieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmallBattlefieldInfo) ProtoMessage() {}

func (x *GetSmallBattlefieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmallBattlefieldInfo.ProtoReflect.Descriptor instead.
func (*GetSmallBattlefieldInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{486}
}

func (x *GetSmallBattlefieldInfo) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取小战场可邀请玩家列表
type GetSmallBattlefieldInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *GetSmallBattlefieldInviteType `protobuf:"varint,1,opt,name=_type,json=Type,enum=MsgUp.GetSmallBattlefieldInviteType" json:"_type,omitempty"`
}

func (x *GetSmallBattlefieldInvite) Reset() {
	*x = GetSmallBattlefieldInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmallBattlefieldInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmallBattlefieldInvite) ProtoMessage() {}

func (x *GetSmallBattlefieldInvite) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmallBattlefieldInvite.ProtoReflect.Descriptor instead.
func (*GetSmallBattlefieldInvite) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{487}
}

func (x *GetSmallBattlefieldInvite) GetXType() GetSmallBattlefieldInviteType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return GetSmallBattlefieldInvite_guild
}

//小战场准备
type ReadySmallBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //战场id
}

func (x *ReadySmallBattlefield) Reset() {
	*x = ReadySmallBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadySmallBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadySmallBattlefield) ProtoMessage() {}

func (x *ReadySmallBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadySmallBattlefield.ProtoReflect.Descriptor instead.
func (*ReadySmallBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{488}
}

func (x *ReadySmallBattlefield) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//获取活跃度奖励任务(批量任务道具奖励)
type GetActivityTaskRewardItemsBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskList []int32 `protobuf:"varint,1,rep,name=_task_list,json=TaskList" json:"_task_list,omitempty"` //任务id列表
}

func (x *GetActivityTaskRewardItemsBatch) Reset() {
	*x = GetActivityTaskRewardItemsBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityTaskRewardItemsBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityTaskRewardItemsBatch) ProtoMessage() {}

func (x *GetActivityTaskRewardItemsBatch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityTaskRewardItemsBatch.ProtoReflect.Descriptor instead.
func (*GetActivityTaskRewardItemsBatch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{489}
}

func (x *GetActivityTaskRewardItemsBatch) GetXTaskList() []int32 {
	if x != nil {
		return x.XTaskList
	}
	return nil
}

//选择小战场buff
type SelectSmallBattlefieldBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId     *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`               //战场id
	XBuffId *int32 `protobuf:"varint,2,req,name=_buff_id,json=BuffId" json:"_buff_id,omitempty"` //buffid(小战场配置中key)
}

func (x *SelectSmallBattlefieldBuff) Reset() {
	*x = SelectSmallBattlefieldBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectSmallBattlefieldBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectSmallBattlefieldBuff) ProtoMessage() {}

func (x *SelectSmallBattlefieldBuff) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectSmallBattlefieldBuff.ProtoReflect.Descriptor instead.
func (*SelectSmallBattlefieldBuff) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{490}
}

func (x *SelectSmallBattlefieldBuff) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *SelectSmallBattlefieldBuff) GetXBuffId() int32 {
	if x != nil && x.XBuffId != nil {
		return *x.XBuffId
	}
	return 0
}

//退出小战场
type QuitSmallBattlefield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //战场id
}

func (x *QuitSmallBattlefield) Reset() {
	*x = QuitSmallBattlefield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitSmallBattlefield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitSmallBattlefield) ProtoMessage() {}

func (x *QuitSmallBattlefield) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitSmallBattlefield.ProtoReflect.Descriptor instead.
func (*QuitSmallBattlefield) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{491}
}

func (x *QuitSmallBattlefield) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

// 拉取小战场邀请列表
type GetSmallBattlefieldInviteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetSmallBattlefieldInviteList) Reset() {
	*x = GetSmallBattlefieldInviteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSmallBattlefieldInviteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmallBattlefieldInviteList) ProtoMessage() {}

func (x *GetSmallBattlefieldInviteList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmallBattlefieldInviteList.ProtoReflect.Descriptor instead.
func (*GetSmallBattlefieldInviteList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{492}
}

func (x *GetSmallBattlefieldInviteList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//获取活动任务数据
type GetActiveEventTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId *int32 `protobuf:"varint,1,opt,name=activity_id,json=activityId" json:"activity_id,omitempty"` //活动id
}

func (x *GetActiveEventTaskList) Reset() {
	*x = GetActiveEventTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveEventTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveEventTaskList) ProtoMessage() {}

func (x *GetActiveEventTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveEventTaskList.ProtoReflect.Descriptor instead.
func (*GetActiveEventTaskList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{493}
}

func (x *GetActiveEventTaskList) GetActivityId() int32 {
	if x != nil && x.ActivityId != nil {
		return *x.ActivityId
	}
	return 0
}

//设置联盟城堡装扮
type SelectGuildBuildingSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSkinId *int32 `protobuf:"varint,1,req,name=_skin_id,json=SkinId" json:"_skin_id,omitempty"`
}

func (x *SelectGuildBuildingSkin) Reset() {
	*x = SelectGuildBuildingSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectGuildBuildingSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectGuildBuildingSkin) ProtoMessage() {}

func (x *SelectGuildBuildingSkin) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectGuildBuildingSkin.ProtoReflect.Descriptor instead.
func (*SelectGuildBuildingSkin) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{494}
}

func (x *SelectGuildBuildingSkin) GetXSkinId() int32 {
	if x != nil && x.XSkinId != nil {
		return *x.XSkinId
	}
	return 0
}

//遗迹密室操作
type SecretRoomOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType     *int32      `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"`               // 1 - 开启密室 | 2 - 关闭密室 | 3 - 选择终极奖励 | 4 - 敲格子 | 5 - 获取密室返回内容
	XItem     []*ItemInfo `protobuf:"bytes,2,rep,name=_item,json=Item" json:"_item,omitempty"`                //使用(选择) 道具的id 和 数量
	XBlockId  *int32      `protobuf:"varint,3,opt,name=_block_id,json=BlockId" json:"_block_id,omitempty"`    //格子id , 敲格子(1-25) | 选终极奖励(1-6)
	XRoomType *int32      `protobuf:"varint,4,opt,name=_room_type,json=RoomType" json:"_room_type,omitempty"` // 1 - 新版敲格子活动
	XCostGem  *int32      `protobuf:"varint,5,opt,name=_cost_gem,json=CostGem" json:"_cost_gem,omitempty"`    // 花费钻石数
}

func (x *SecretRoomOperation) Reset() {
	*x = SecretRoomOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretRoomOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretRoomOperation) ProtoMessage() {}

func (x *SecretRoomOperation) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretRoomOperation.ProtoReflect.Descriptor instead.
func (*SecretRoomOperation) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{495}
}

func (x *SecretRoomOperation) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *SecretRoomOperation) GetXItem() []*ItemInfo {
	if x != nil {
		return x.XItem
	}
	return nil
}

func (x *SecretRoomOperation) GetXBlockId() int32 {
	if x != nil && x.XBlockId != nil {
		return *x.XBlockId
	}
	return 0
}

func (x *SecretRoomOperation) GetXRoomType() int32 {
	if x != nil && x.XRoomType != nil {
		return *x.XRoomType
	}
	return 0
}

func (x *SecretRoomOperation) GetXCostGem() int32 {
	if x != nil && x.XCostGem != nil {
		return *x.XCostGem
	}
	return 0
}

//获取活动代币获得数量
type GetFireCoinsNumToday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,req,name=_flag,json=Flag" json:"_flag,omitempty"`
	Type  *int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"` // 类型: 0 - 花火节代币 | 1 - 竞技节代币
}

func (x *GetFireCoinsNumToday) Reset() {
	*x = GetFireCoinsNumToday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFireCoinsNumToday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFireCoinsNumToday) ProtoMessage() {}

func (x *GetFireCoinsNumToday) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFireCoinsNumToday.ProtoReflect.Descriptor instead.
func (*GetFireCoinsNumToday) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{496}
}

func (x *GetFireCoinsNumToday) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetFireCoinsNumToday) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

//获取成长基金的数据
type GetGrowthFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,req,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetGrowthFund) Reset() {
	*x = GetGrowthFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGrowthFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGrowthFund) ProtoMessage() {}

func (x *GetGrowthFund) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGrowthFund.ProtoReflect.Descriptor instead.
func (*GetGrowthFund) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{497}
}

func (x *GetGrowthFund) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//领取成长基金的奖励
type GetGrowthFundReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLevel *int32 `protobuf:"varint,1,req,name=_level,json=Level" json:"_level,omitempty"`
}

func (x *GetGrowthFundReward) Reset() {
	*x = GetGrowthFundReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGrowthFundReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGrowthFundReward) ProtoMessage() {}

func (x *GetGrowthFundReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGrowthFundReward.ProtoReflect.Descriptor instead.
func (*GetGrowthFundReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{498}
}

func (x *GetGrowthFundReward) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

//领取战损动画奖励
type GetWarLossReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetWarLossReward) Reset() {
	*x = GetWarLossReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWarLossReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWarLossReward) ProtoMessage() {}

func (x *GetWarLossReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWarLossReward.ProtoReflect.Descriptor instead.
func (*GetWarLossReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{499}
}

func (x *GetWarLossReward) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//隐藏士兵
type GhostTroops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop     []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                // 兵种
	XGhostTime *int32      `protobuf:"varint,2,opt,name=_ghost_time,json=GhostTime" json:"_ghost_time,omitempty"` // 隐藏时间
}

func (x *GhostTroops) Reset() {
	*x = GhostTroops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GhostTroops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostTroops) ProtoMessage() {}

func (x *GhostTroops) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostTroops.ProtoReflect.Descriptor instead.
func (*GhostTroops) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{500}
}

func (x *GhostTroops) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *GhostTroops) GetXGhostTime() int32 {
	if x != nil && x.XGhostTime != nil {
		return *x.XGhostTime
	}
	return 0
}

//取消隐藏士兵
type CancelGhostTroops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *CancelGhostTroops) Reset() {
	*x = CancelGhostTroops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelGhostTroops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelGhostTroops) ProtoMessage() {}

func (x *CancelGhostTroops) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelGhostTroops.ProtoReflect.Descriptor instead.
func (*CancelGhostTroops) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{501}
}

func (x *CancelGhostTroops) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type GetFameTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XEmblemType *int32 `protobuf:"varint,1,req,name=_emblem_type,json=EmblemType" json:"_emblem_type,omitempty"` // 成就徽章类型1-6
}

func (x *GetFameTaskList) Reset() {
	*x = GetFameTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFameTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFameTaskList) ProtoMessage() {}

func (x *GetFameTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFameTaskList.ProtoReflect.Descriptor instead.
func (*GetFameTaskList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{502}
}

func (x *GetFameTaskList) GetXEmblemType() int32 {
	if x != nil && x.XEmblemType != nil {
		return *x.XEmblemType
	}
	return 0
}

type GetFameTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFameTaskId *int32 `protobuf:"varint,1,req,name=_fame_task_id,json=FameTaskId" json:"_fame_task_id,omitempty"` //任务id
}

func (x *GetFameTaskReward) Reset() {
	*x = GetFameTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFameTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFameTaskReward) ProtoMessage() {}

func (x *GetFameTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFameTaskReward.ProtoReflect.Descriptor instead.
func (*GetFameTaskReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{503}
}

func (x *GetFameTaskReward) GetXFameTaskId() int32 {
	if x != nil && x.XFameTaskId != nil {
		return *x.XFameTaskId
	}
	return 0
}

type GetFameProcessReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFameProcess *int32 `protobuf:"varint,1,req,name=_fame_process,json=FameProcess" json:"_fame_process,omitempty"` // 第几个宝箱
}

func (x *GetFameProcessReward) Reset() {
	*x = GetFameProcessReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFameProcessReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFameProcessReward) ProtoMessage() {}

func (x *GetFameProcessReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFameProcessReward.ProtoReflect.Descriptor instead.
func (*GetFameProcessReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{504}
}

func (x *GetFameProcessReward) GetXFameProcess() int32 {
	if x != nil && x.XFameProcess != nil {
		return *x.XFameProcess
	}
	return 0
}

type LikeFame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTargetUserId *int64 `protobuf:"varint,1,req,name=_target_user_id,json=TargetUserId" json:"_target_user_id,omitempty"` // 目标玩家
	XFameTaskId   *int32 `protobuf:"varint,2,req,name=_fame_task_id,json=FameTaskId" json:"_fame_task_id,omitempty"`       // 成就任务id
}

func (x *LikeFame) Reset() {
	*x = LikeFame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeFame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeFame) ProtoMessage() {}

func (x *LikeFame) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeFame.ProtoReflect.Descriptor instead.
func (*LikeFame) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{505}
}

func (x *LikeFame) GetXTargetUserId() int64 {
	if x != nil && x.XTargetUserId != nil {
		return *x.XTargetUserId
	}
	return 0
}

func (x *LikeFame) GetXFameTaskId() int32 {
	if x != nil && x.XFameTaskId != nil {
		return *x.XFameTaskId
	}
	return 0
}

type GetLikeFameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTargetUserId *int64 `protobuf:"varint,1,req,name=_target_user_id,json=TargetUserId" json:"_target_user_id,omitempty"` // 目标玩家
	XFameTaskId   *int32 `protobuf:"varint,2,req,name=_fame_task_id,json=FameTaskId" json:"_fame_task_id,omitempty"`       // 成就任务id
}

func (x *GetLikeFameInfo) Reset() {
	*x = GetLikeFameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLikeFameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLikeFameInfo) ProtoMessage() {}

func (x *GetLikeFameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLikeFameInfo.ProtoReflect.Descriptor instead.
func (*GetLikeFameInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{506}
}

func (x *GetLikeFameInfo) GetXTargetUserId() int64 {
	if x != nil && x.XTargetUserId != nil {
		return *x.XTargetUserId
	}
	return 0
}

func (x *GetLikeFameInfo) GetXFameTaskId() int32 {
	if x != nil && x.XFameTaskId != nil {
		return *x.XFameTaskId
	}
	return 0
}

type GetMapBattleFlagInfoTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XX     *int32 `protobuf:"varint,1,req,name=_x,json=X" json:"_x,omitempty"`             // x
	XY     *int32 `protobuf:"varint,2,req,name=_y,json=Y" json:"_y,omitempty"`             // y
	XWidth *int32 `protobuf:"varint,3,req,name=_width,json=Width" json:"_width,omitempty"` // 宽
}

func (x *GetMapBattleFlagInfoTest) Reset() {
	*x = GetMapBattleFlagInfoTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapBattleFlagInfoTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapBattleFlagInfoTest) ProtoMessage() {}

func (x *GetMapBattleFlagInfoTest) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapBattleFlagInfoTest.ProtoReflect.Descriptor instead.
func (*GetMapBattleFlagInfoTest) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{507}
}

func (x *GetMapBattleFlagInfoTest) GetXX() int32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *GetMapBattleFlagInfoTest) GetXY() int32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

func (x *GetMapBattleFlagInfoTest) GetXWidth() int32 {
	if x != nil && x.XWidth != nil {
		return *x.XWidth
	}
	return 0
}

type GetGuildTerritoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *int32 `protobuf:"varint,1,opt,name=_type,json=Type" json:"_type,omitempty"` // 0:拉取联盟领地资源数据  1：领取联盟领地资源
}

func (x *GetGuildTerritoryRes) Reset() {
	*x = GetGuildTerritoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildTerritoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildTerritoryRes) ProtoMessage() {}

func (x *GetGuildTerritoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildTerritoryRes.ProtoReflect.Descriptor instead.
func (*GetGuildTerritoryRes) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{508}
}

func (x *GetGuildTerritoryRes) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

// 获取pve排行榜
type GetPveRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XArea *int32 `protobuf:"varint,1,opt,name=_area,json=Area" json:"_area,omitempty"` //战区
}

func (x *GetPveRankList) Reset() {
	*x = GetPveRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPveRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPveRankList) ProtoMessage() {}

func (x *GetPveRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPveRankList.ProtoReflect.Descriptor instead.
func (*GetPveRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{509}
}

func (x *GetPveRankList) GetXArea() int32 {
	if x != nil && x.XArea != nil {
		return *x.XArea
	}
	return 0
}

//获取蛮族来袭活动排行
type GetBarbarianRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"` //
	XType *int32 `protobuf:"varint,2,opt,name=_type,json=Type" json:"_type,omitempty"` // 1-只返回剩余攻击次数 | 2- 返回全部数据
}

func (x *GetBarbarianRankList) Reset() {
	*x = GetBarbarianRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBarbarianRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBarbarianRankList) ProtoMessage() {}

func (x *GetBarbarianRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBarbarianRankList.ProtoReflect.Descriptor instead.
func (*GetBarbarianRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{510}
}

func (x *GetBarbarianRankList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

func (x *GetBarbarianRankList) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

//获取尤尼尔活动排行
type GetYounierRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *int32 `protobuf:"varint,1,opt,name=_type,json=Type" json:"_type,omitempty"` //
}

func (x *GetYounierRankList) Reset() {
	*x = GetYounierRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYounierRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYounierRankList) ProtoMessage() {}

func (x *GetYounierRankList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYounierRankList.ProtoReflect.Descriptor instead.
func (*GetYounierRankList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{511}
}

func (x *GetYounierRankList) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

type GetPopularityRewardItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGear *int32 `protobuf:"varint,1,opt,name=_gear,json=Gear" json:"_gear,omitempty"` //阶段声望
}

func (x *GetPopularityRewardItems) Reset() {
	*x = GetPopularityRewardItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPopularityRewardItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopularityRewardItems) ProtoMessage() {}

func (x *GetPopularityRewardItems) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopularityRewardItems.ProtoReflect.Descriptor instead.
func (*GetPopularityRewardItems) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{512}
}

func (x *GetPopularityRewardItems) GetXGear() int32 {
	if x != nil && x.XGear != nil {
		return *x.XGear
	}
	return 0
}

//急救包使用
type FreemarchRevive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroopId *uint32 `protobuf:"varint,1,req,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"` //需要复活的那只自由行军队伍id
}

func (x *FreemarchRevive) Reset() {
	*x = FreemarchRevive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreemarchRevive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreemarchRevive) ProtoMessage() {}

func (x *FreemarchRevive) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreemarchRevive.ProtoReflect.Descriptor instead.
func (*FreemarchRevive) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{513}
}

func (x *FreemarchRevive) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

// 自由行军队伍接口信息
type FreeMarchTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCreate        *FmTeamCreate        `protobuf:"bytes,1,opt,name=_create,json=Create" json:"_create,omitempty"`                        //创建队伍
	XInfo          *FmTeamInfo          `protobuf:"bytes,2,opt,name=_info,json=Info" json:"_info,omitempty"`                              //队伍信息
	XSetInfo       *FmTeamSetInfo       `protobuf:"bytes,3,opt,name=_set_info,json=SetInfo" json:"_set_info,omitempty"`                   //设置信息
	XDismiss       *FmTeamDismiss       `protobuf:"bytes,4,opt,name=_dismiss,json=Dismiss" json:"_dismiss,omitempty"`                     //解散队伍
	XMemberPause   *FmTeamMemberPause   `protobuf:"bytes,5,opt,name=_member_pause,json=MemberPause" json:"_member_pause,omitempty"`       //队员暂离队伍
	XMemberLeave   *FmTeamMemberLeave   `protobuf:"bytes,6,opt,name=_member_leave,json=MemberLeave" json:"_member_leave,omitempty"`       //队员离开队伍
	XMemberBack    *FmTeamMemberBack    `protobuf:"bytes,7,opt,name=_member_back,json=MemberBack" json:"_member_back,omitempty"`          //队员回归
	XInvite        *FmTeamInvite        `protobuf:"bytes,8,opt,name=_invite,json=Invite" json:"_invite,omitempty"`                        //发出邀请
	XInviteConfirm *FmTeamInviteConfirm `protobuf:"bytes,9,opt,name=_invite_confirm,json=InviteConfirm" json:"_invite_confirm,omitempty"` //同意邀请
	XRally         *FmTeamRally         `protobuf:"bytes,10,opt,name=_rally,json=Rally" json:"_rally,omitempty"`                          //队长发出集会请求，未归队人员收到
	XSearchUser    *FmTeamSearchUser    `protobuf:"bytes,11,opt,name=_search_user,json=SearchUser" json:"_search_user,omitempty"`         //搜索玩家
	XRmMember      *FmTeamRmMember      `protobuf:"bytes,12,opt,name=_rm_member,json=RmMember" json:"_rm_member,omitempty"`               //移除队员
}

func (x *FreeMarchTeam) Reset() {
	*x = FreeMarchTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeMarchTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeMarchTeam) ProtoMessage() {}

func (x *FreeMarchTeam) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeMarchTeam.ProtoReflect.Descriptor instead.
func (*FreeMarchTeam) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{514}
}

func (x *FreeMarchTeam) GetXCreate() *FmTeamCreate {
	if x != nil {
		return x.XCreate
	}
	return nil
}

func (x *FreeMarchTeam) GetXInfo() *FmTeamInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

func (x *FreeMarchTeam) GetXSetInfo() *FmTeamSetInfo {
	if x != nil {
		return x.XSetInfo
	}
	return nil
}

func (x *FreeMarchTeam) GetXDismiss() *FmTeamDismiss {
	if x != nil {
		return x.XDismiss
	}
	return nil
}

func (x *FreeMarchTeam) GetXMemberPause() *FmTeamMemberPause {
	if x != nil {
		return x.XMemberPause
	}
	return nil
}

func (x *FreeMarchTeam) GetXMemberLeave() *FmTeamMemberLeave {
	if x != nil {
		return x.XMemberLeave
	}
	return nil
}

func (x *FreeMarchTeam) GetXMemberBack() *FmTeamMemberBack {
	if x != nil {
		return x.XMemberBack
	}
	return nil
}

func (x *FreeMarchTeam) GetXInvite() *FmTeamInvite {
	if x != nil {
		return x.XInvite
	}
	return nil
}

func (x *FreeMarchTeam) GetXInviteConfirm() *FmTeamInviteConfirm {
	if x != nil {
		return x.XInviteConfirm
	}
	return nil
}

func (x *FreeMarchTeam) GetXRally() *FmTeamRally {
	if x != nil {
		return x.XRally
	}
	return nil
}

func (x *FreeMarchTeam) GetXSearchUser() *FmTeamSearchUser {
	if x != nil {
		return x.XSearchUser
	}
	return nil
}

func (x *FreeMarchTeam) GetXRmMember() *FmTeamRmMember {
	if x != nil {
		return x.XRmMember
	}
	return nil
}

//创建自由行军队伍
type FmTeamCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTarget     *int32  `protobuf:"varint,1,req,name=_target,json=Target" json:"_target,omitempty"`               //目标
	XIntro      *string `protobuf:"bytes,2,req,name=_intro,json=Intro" json:"_intro,omitempty"`                   //简介
	XType       *int32  `protobuf:"varint,3,req,name=_type,json=Type" json:"_type,omitempty"`                     //类型 1-公开,2-密码
	XPasswd     *string `protobuf:"bytes,4,req,name=_passwd,json=Passwd" json:"_passwd,omitempty"`                //密码
	XRewardType *int32  `protobuf:"varint,5,req,name=_reward_type,json=RewardType" json:"_reward_type,omitempty"` //奖励类型,1-roll,2-队长分配
	XRewardList *string `protobuf:"bytes,6,req,name=_reward_list,json=RewardList" json:"_reward_list,omitempty"`  //奖励列表,分配列表
	XPowerLimit *int64  `protobuf:"varint,7,req,name=_power_limit,json=PowerLimit" json:"_power_limit,omitempty"` //战力要求
}

func (x *FmTeamCreate) Reset() {
	*x = FmTeamCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamCreate) ProtoMessage() {}

func (x *FmTeamCreate) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamCreate.ProtoReflect.Descriptor instead.
func (*FmTeamCreate) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{515}
}

func (x *FmTeamCreate) GetXTarget() int32 {
	if x != nil && x.XTarget != nil {
		return *x.XTarget
	}
	return 0
}

func (x *FmTeamCreate) GetXIntro() string {
	if x != nil && x.XIntro != nil {
		return *x.XIntro
	}
	return ""
}

func (x *FmTeamCreate) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *FmTeamCreate) GetXPasswd() string {
	if x != nil && x.XPasswd != nil {
		return *x.XPasswd
	}
	return ""
}

func (x *FmTeamCreate) GetXRewardType() int32 {
	if x != nil && x.XRewardType != nil {
		return *x.XRewardType
	}
	return 0
}

func (x *FmTeamCreate) GetXRewardList() string {
	if x != nil && x.XRewardList != nil {
		return *x.XRewardList
	}
	return ""
}

func (x *FmTeamCreate) GetXPowerLimit() int64 {
	if x != nil && x.XPowerLimit != nil {
		return *x.XPowerLimit
	}
	return 0
}

//自由行军队伍信息
type FmTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //队伍编号
}

func (x *FmTeamInfo) Reset() {
	*x = FmTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamInfo) ProtoMessage() {}

func (x *FmTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamInfo.ProtoReflect.Descriptor instead.
func (*FmTeamInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{516}
}

func (x *FmTeamInfo) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//设置自由行军队伍信息
type FmTeamSetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId     *int64  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`             //队伍编号
	XTarget *int32  `protobuf:"varint,2,req,name=_target,json=Target" json:"_target,omitempty"` //目标
	XIntro  *string `protobuf:"bytes,3,req,name=_intro,json=Intro" json:"_intro,omitempty"`     //简介
}

func (x *FmTeamSetInfo) Reset() {
	*x = FmTeamSetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamSetInfo) ProtoMessage() {}

func (x *FmTeamSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamSetInfo.ProtoReflect.Descriptor instead.
func (*FmTeamSetInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{517}
}

func (x *FmTeamSetInfo) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *FmTeamSetInfo) GetXTarget() int32 {
	if x != nil && x.XTarget != nil {
		return *x.XTarget
	}
	return 0
}

func (x *FmTeamSetInfo) GetXIntro() string {
	if x != nil && x.XIntro != nil {
		return *x.XIntro
	}
	return ""
}

//解散自由行军队伍
type FmTeamDismiss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //队伍编号
}

func (x *FmTeamDismiss) Reset() {
	*x = FmTeamDismiss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamDismiss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamDismiss) ProtoMessage() {}

func (x *FmTeamDismiss) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamDismiss.ProtoReflect.Descriptor instead.
func (*FmTeamDismiss) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{518}
}

func (x *FmTeamDismiss) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//队员暂离队伍
type FmTeamMemberPause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //队伍编号
}

func (x *FmTeamMemberPause) Reset() {
	*x = FmTeamMemberPause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamMemberPause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamMemberPause) ProtoMessage() {}

func (x *FmTeamMemberPause) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamMemberPause.ProtoReflect.Descriptor instead.
func (*FmTeamMemberPause) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{519}
}

func (x *FmTeamMemberPause) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//队员离开队伍
type FmTeamMemberLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //队伍编号
}

func (x *FmTeamMemberLeave) Reset() {
	*x = FmTeamMemberLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamMemberLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamMemberLeave) ProtoMessage() {}

func (x *FmTeamMemberLeave) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamMemberLeave.ProtoReflect.Descriptor instead.
func (*FmTeamMemberLeave) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{520}
}

func (x *FmTeamMemberLeave) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//队员回归
type FmTeamMemberBack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //队伍编号
}

func (x *FmTeamMemberBack) Reset() {
	*x = FmTeamMemberBack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamMemberBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamMemberBack) ProtoMessage() {}

func (x *FmTeamMemberBack) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamMemberBack.ProtoReflect.Descriptor instead.
func (*FmTeamMemberBack) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{521}
}

func (x *FmTeamMemberBack) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//发出邀请
type FmTeamInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId     *int64  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`               //队伍编号
	XUserId *uint32 `protobuf:"varint,2,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"` //受邀请的玩家
}

func (x *FmTeamInvite) Reset() {
	*x = FmTeamInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamInvite) ProtoMessage() {}

func (x *FmTeamInvite) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamInvite.ProtoReflect.Descriptor instead.
func (*FmTeamInvite) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{522}
}

func (x *FmTeamInvite) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *FmTeamInvite) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//同意邀请
type FmTeamInviteConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //队伍编号
}

func (x *FmTeamInviteConfirm) Reset() {
	*x = FmTeamInviteConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamInviteConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamInviteConfirm) ProtoMessage() {}

func (x *FmTeamInviteConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamInviteConfirm.ProtoReflect.Descriptor instead.
func (*FmTeamInviteConfirm) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{523}
}

func (x *FmTeamInviteConfirm) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//集会
type FmTeamRally struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` //队伍编号
}

func (x *FmTeamRally) Reset() {
	*x = FmTeamRally{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamRally) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamRally) ProtoMessage() {}

func (x *FmTeamRally) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamRally.ProtoReflect.Descriptor instead.
func (*FmTeamRally) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{524}
}

func (x *FmTeamRally) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//搜索玩家
type FmTeamSearchUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XName     *string `protobuf:"bytes,1,req,name=_name,json=Name" json:"_name,omitempty"`
	XServerId *int32  `protobuf:"varint,2,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` //联盟搜索所在服id 不填或者0 代表自己原服
}

func (x *FmTeamSearchUser) Reset() {
	*x = FmTeamSearchUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamSearchUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamSearchUser) ProtoMessage() {}

func (x *FmTeamSearchUser) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamSearchUser.ProtoReflect.Descriptor instead.
func (*FmTeamSearchUser) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{525}
}

func (x *FmTeamSearchUser) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *FmTeamSearchUser) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//移除队员
type FmTeamRmMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId     *int64  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`               //队伍编号
	XUserId *uint32 `protobuf:"varint,2,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //移除成员id
}

func (x *FmTeamRmMember) Reset() {
	*x = FmTeamRmMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamRmMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamRmMember) ProtoMessage() {}

func (x *FmTeamRmMember) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamRmMember.ProtoReflect.Descriptor instead.
func (*FmTeamRmMember) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{526}
}

func (x *FmTeamRmMember) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *FmTeamRmMember) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//任务列表
type GetTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *GetTaskList) Reset() {
	*x = GetTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskList) ProtoMessage() {}

func (x *GetTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskList.ProtoReflect.Descriptor instead.
func (*GetTaskList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{527}
}

func (x *GetTaskList) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//接取任务
type GetTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XConfId *int64 `protobuf:"varint,1,opt,name=_conf_id,json=ConfId" json:"_conf_id,omitempty"` //配置id
}

func (x *GetTask) Reset() {
	*x = GetTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTask) ProtoMessage() {}

func (x *GetTask) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTask.ProtoReflect.Descriptor instead.
func (*GetTask) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{528}
}

func (x *GetTask) GetXConfId() int64 {
	if x != nil && x.XConfId != nil {
		return *x.XConfId
	}
	return 0
}

//放弃任务
type DisTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId *int64 `protobuf:"varint,1,opt,name=_task_id,json=TaskId" json:"_task_id,omitempty"` //任务id
}

func (x *DisTask) Reset() {
	*x = DisTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisTask) ProtoMessage() {}

func (x *DisTask) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisTask.ProtoReflect.Descriptor instead.
func (*DisTask) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{529}
}

func (x *DisTask) GetXTaskId() int64 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//提交任务
type SubTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId *int64 `protobuf:"varint,1,opt,name=_task_id,json=TaskId" json:"_task_id,omitempty"` //任务id
}

func (x *SubTask) Reset() {
	*x = SubTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTask) ProtoMessage() {}

func (x *SubTask) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTask.ProtoReflect.Descriptor instead.
func (*SubTask) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{530}
}

func (x *SubTask) GetXTaskId() int64 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//领取任务奖励
type GetTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId *int64 `protobuf:"varint,1,opt,name=_task_id,json=TaskId" json:"_task_id,omitempty"` //任务id
}

func (x *GetTaskReward) Reset() {
	*x = GetTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReward) ProtoMessage() {}

func (x *GetTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReward.ProtoReflect.Descriptor instead.
func (*GetTaskReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{531}
}

func (x *GetTaskReward) GetXTaskId() int64 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

//解锁临时背包格子
type UnlockTempBagCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *int32 `protobuf:"varint,1,opt,name=_flag,json=Flag" json:"_flag,omitempty"`
}

func (x *UnlockTempBagCell) Reset() {
	*x = UnlockTempBagCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockTempBagCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockTempBagCell) ProtoMessage() {}

func (x *UnlockTempBagCell) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockTempBagCell.ProtoReflect.Descriptor instead.
func (*UnlockTempBagCell) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{532}
}

func (x *UnlockTempBagCell) GetXFlag() int32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

//丢弃临时背包道具
type DisTempBagItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId      *int64  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                  //道具的配置id
	XDataId  *int64  `protobuf:"varint,2,opt,name=_data_id,json=DataId" json:"_data_id,omitempty"`    //数据id
	XTroopId *uint32 `protobuf:"varint,3,opt,name=_troop_id,json=TroopId" json:"_troop_id,omitempty"` //部队的id
}

func (x *DisTempBagItem) Reset() {
	*x = DisTempBagItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisTempBagItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisTempBagItem) ProtoMessage() {}

func (x *DisTempBagItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisTempBagItem.ProtoReflect.Descriptor instead.
func (*DisTempBagItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{533}
}

func (x *DisTempBagItem) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *DisTempBagItem) GetXDataId() int64 {
	if x != nil && x.XDataId != nil {
		return *x.XDataId
	}
	return 0
}

func (x *DisTempBagItem) GetXTroopId() uint32 {
	if x != nil && x.XTroopId != nil {
		return *x.XTroopId
	}
	return 0
}

//获取联盟领地资源使用纪录
type GetGuildTerritoryResUseRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId      *int32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`                //公会ID(获取个人数据时填0)
	XPreviousTime *int32 `protobuf:"varint,2,req,name=_previous_time,json=PreviousTime" json:"_previous_time,omitempty"` //上一个time用于load more
}

func (x *GetGuildTerritoryResUseRecord) Reset() {
	*x = GetGuildTerritoryResUseRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuildTerritoryResUseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuildTerritoryResUseRecord) ProtoMessage() {}

func (x *GetGuildTerritoryResUseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuildTerritoryResUseRecord.ProtoReflect.Descriptor instead.
func (*GetGuildTerritoryResUseRecord) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{534}
}

func (x *GetGuildTerritoryResUseRecord) GetXGuildId() int32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GetGuildTerritoryResUseRecord) GetXPreviousTime() int32 {
	if x != nil && x.XPreviousTime != nil {
		return *x.XPreviousTime
	}
	return 0
}

//联盟资源购买
type BuyGuildTerritoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResId     *uint32 `protobuf:"varint,1,req,name=res_id,json=resId" json:"res_id,omitempty"`             // 资源ID
	ResAmount *uint32 `protobuf:"varint,2,req,name=res_amount,json=resAmount" json:"res_amount,omitempty"` // 资源数量
}

func (x *BuyGuildTerritoryRes) Reset() {
	*x = BuyGuildTerritoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyGuildTerritoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyGuildTerritoryRes) ProtoMessage() {}

func (x *BuyGuildTerritoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyGuildTerritoryRes.ProtoReflect.Descriptor instead.
func (*BuyGuildTerritoryRes) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{535}
}

func (x *BuyGuildTerritoryRes) GetResId() uint32 {
	if x != nil && x.ResId != nil {
		return *x.ResId
	}
	return 0
}

func (x *BuyGuildTerritoryRes) GetResAmount() uint32 {
	if x != nil && x.ResAmount != nil {
		return *x.ResAmount
	}
	return 0
}

//联盟物资分配
type DistributeGuildTerritoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDistributeResData []*DistributeResData `protobuf:"bytes,1,rep,name=_distribute_res_data,json=DistributeResData" json:"_distribute_res_data,omitempty"`
}

func (x *DistributeGuildTerritoryRes) Reset() {
	*x = DistributeGuildTerritoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeGuildTerritoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeGuildTerritoryRes) ProtoMessage() {}

func (x *DistributeGuildTerritoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeGuildTerritoryRes.ProtoReflect.Descriptor instead.
func (*DistributeGuildTerritoryRes) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{536}
}

func (x *DistributeGuildTerritoryRes) GetXDistributeResData() []*DistributeResData {
	if x != nil {
		return x.XDistributeResData
	}
	return nil
}

//联盟资源分配数据
type DistributeResData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId   *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`        //目标成员id
	ResAmount *int32  `protobuf:"varint,2,req,name=res_amount,json=resAmount" json:"res_amount,omitempty"` // 资源数量
}

func (x *DistributeResData) Reset() {
	*x = DistributeResData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributeResData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributeResData) ProtoMessage() {}

func (x *DistributeResData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributeResData.ProtoReflect.Descriptor instead.
func (*DistributeResData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{537}
}

func (x *DistributeResData) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *DistributeResData) GetResAmount() int32 {
	if x != nil && x.ResAmount != nil {
		return *x.ResAmount
	}
	return 0
}

//联盟资源获取
type GuildDepotResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"` //联盟ID
}

func (x *GuildDepotResource) Reset() {
	*x = GuildDepotResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDepotResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDepotResource) ProtoMessage() {}

func (x *GuildDepotResource) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDepotResource.ProtoReflect.Descriptor instead.
func (*GuildDepotResource) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{538}
}

func (x *GuildDepotResource) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

//联盟运输
type GuildTransport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *uint32 `protobuf:"varint,1,req,name=_flag,json=Flag" json:"_flag,omitempty"` //常量值:1
}

func (x *GuildTransport) Reset() {
	*x = GuildTransport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTransport) ProtoMessage() {}

func (x *GuildTransport) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTransport.ProtoReflect.Descriptor instead.
func (*GuildTransport) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{539}
}

func (x *GuildTransport) GetXFlag() uint32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type GuildTransportAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
	XFood   *uint32 `protobuf:"varint,2,req,name=_food,json=Food" json:"_food,omitempty"`
	XWood   *uint32 `protobuf:"varint,3,req,name=_wood,json=Wood" json:"_wood,omitempty"`
	XIron   *uint32 `protobuf:"varint,4,req,name=_iron,json=Iron" json:"_iron,omitempty"`
	XStone  *uint32 `protobuf:"varint,5,req,name=_stone,json=Stone" json:"_stone,omitempty"`
}

func (x *GuildTransportAsk) Reset() {
	*x = GuildTransportAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTransportAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTransportAsk) ProtoMessage() {}

func (x *GuildTransportAsk) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTransportAsk.ProtoReflect.Descriptor instead.
func (*GuildTransportAsk) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{540}
}

func (x *GuildTransportAsk) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildTransportAsk) GetXFood() uint32 {
	if x != nil && x.XFood != nil {
		return *x.XFood
	}
	return 0
}

func (x *GuildTransportAsk) GetXWood() uint32 {
	if x != nil && x.XWood != nil {
		return *x.XWood
	}
	return 0
}

func (x *GuildTransportAsk) GetXIron() uint32 {
	if x != nil && x.XIron != nil {
		return *x.XIron
	}
	return 0
}

func (x *GuildTransportAsk) GetXStone() uint32 {
	if x != nil && x.XStone != nil {
		return *x.XStone
	}
	return 0
}

type GuildTransportList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFlag *uint32 `protobuf:"varint,1,req,name=_flag,json=Flag" json:"_flag,omitempty"` //常量值:1
}

func (x *GuildTransportList) Reset() {
	*x = GuildTransportList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTransportList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTransportList) ProtoMessage() {}

func (x *GuildTransportList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTransportList.ProtoReflect.Descriptor instead.
func (*GuildTransportList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{541}
}

func (x *GuildTransportList) GetXFlag() uint32 {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return 0
}

type GuildTransportFind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
	XName   *string `protobuf:"bytes,2,req,name=_name,json=Name" json:"_name,omitempty"`          //成员名称
}

func (x *GuildTransportFind) Reset() {
	*x = GuildTransportFind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTransportFind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTransportFind) ProtoMessage() {}

func (x *GuildTransportFind) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTransportFind.ProtoReflect.Descriptor instead.
func (*GuildTransportFind) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{542}
}

func (x *GuildTransportFind) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildTransportFind) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

//取消治疗伤兵
type CancelHealSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientTime *int64 `protobuf:"varint,1,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`
}

func (x *CancelHealSoldiers) Reset() {
	*x = CancelHealSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelHealSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelHealSoldiers) ProtoMessage() {}

func (x *CancelHealSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelHealSoldiers.ProtoReflect.Descriptor instead.
func (*CancelHealSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{543}
}

func (x *CancelHealSoldiers) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

//运输资源信息
type TransportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *TransportInfo) Reset() {
	*x = TransportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportInfo) ProtoMessage() {}

func (x *TransportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportInfo.ProtoReflect.Descriptor instead.
func (*TransportInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{544}
}

func (x *TransportInfo) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//生产急救包
type ProduceMedicineBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId      *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId,def=1" json:"_type_id,omitempty"`              //1-急救包
	XNum         *int32 `protobuf:"varint,2,req,name=_num,json=Num" json:"_num,omitempty"`                               //个数
	XPositionId  *int32 `protobuf:"varint,3,opt,name=_position_id,json=PositionId" json:"_position_id,omitempty"`        //建筑位置
	XImmediately *int32 `protobuf:"varint,4,req,name=_immediately,json=Immediately,def=0" json:"_immediately,omitempty"` //是否马上完成
	XResA        *int64 `protobuf:"varint,5,req,name=_resA,json=ResA" json:"_resA,omitempty"`                            //客户端计算的resA消耗数量
	XResB        *int64 `protobuf:"varint,6,req,name=_resB,json=ResB" json:"_resB,omitempty"`                            //客户端计算的resB消耗数量
	XResC        *int64 `protobuf:"varint,7,req,name=_resC,json=ResC" json:"_resC,omitempty"`                            //客户端计算的resC消耗数量
	XResD        *int64 `protobuf:"varint,8,req,name=_resD,json=ResD" json:"_resD,omitempty"`                            //客户端计算的resD消耗数量
	XResE        *int64 `protobuf:"varint,9,req,name=_resE,json=ResE" json:"_resE,omitempty"`                            //客户端计算的resE消耗数量
	XGold        *int64 `protobuf:"varint,10,req,name=_gold,json=Gold" json:"_gold,omitempty"`                           //客户端计算的金币消耗数量
}

// Default values for ProduceMedicineBag fields.
const (
	Default_ProduceMedicineBag_XTypeId      = int32(1)
	Default_ProduceMedicineBag_XImmediately = int32(0)
)

func (x *ProduceMedicineBag) Reset() {
	*x = ProduceMedicineBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceMedicineBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceMedicineBag) ProtoMessage() {}

func (x *ProduceMedicineBag) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceMedicineBag.ProtoReflect.Descriptor instead.
func (*ProduceMedicineBag) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{545}
}

func (x *ProduceMedicineBag) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return Default_ProduceMedicineBag_XTypeId
}

func (x *ProduceMedicineBag) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *ProduceMedicineBag) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *ProduceMedicineBag) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return Default_ProduceMedicineBag_XImmediately
}

func (x *ProduceMedicineBag) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *ProduceMedicineBag) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *ProduceMedicineBag) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *ProduceMedicineBag) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *ProduceMedicineBag) GetXResE() int64 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

func (x *ProduceMedicineBag) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

//加速急救包
type SpeedupMedicineBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGold *int64 `protobuf:"varint,1,req,name=_gold,json=Gold" json:"_gold,omitempty"` //客户端计算的金币消耗数量
}

func (x *SpeedupMedicineBag) Reset() {
	*x = SpeedupMedicineBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupMedicineBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupMedicineBag) ProtoMessage() {}

func (x *SpeedupMedicineBag) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupMedicineBag.ProtoReflect.Descriptor instead.
func (*SpeedupMedicineBag) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{546}
}

func (x *SpeedupMedicineBag) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

// 充能道具信息
type ChargeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *ChargeItem) Reset() {
	*x = ChargeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeItem) ProtoMessage() {}

func (x *ChargeItem) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeItem.ProtoReflect.Descriptor instead.
func (*ChargeItem) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{547}
}

func (x *ChargeItem) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//移动建筑位置
type ModifyBuildingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId    *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`            //唯一标识0
	XNewPositionId *int32 `protobuf:"varint,2,opt,name=_new_position_id,json=NewPositionId" json:"_new_position_id,omitempty"` //位置id
}

func (x *ModifyBuildingPosition) Reset() {
	*x = ModifyBuildingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBuildingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBuildingPosition) ProtoMessage() {}

func (x *ModifyBuildingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBuildingPosition.ProtoReflect.Descriptor instead.
func (*ModifyBuildingPosition) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{548}
}

func (x *ModifyBuildingPosition) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *ModifyBuildingPosition) GetXNewPositionId() int32 {
	if x != nil && x.XNewPositionId != nil {
		return *x.XNewPositionId
	}
	return 0
}

//饲养所 - 科技升级
type PetTechUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId      *uint32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`              //科技ID
	XImmediately *uint32 `protobuf:"varint,2,req,name=_immediately,json=Immediately" json:"_immediately,omitempty"` //是否马上完成 0非立即完成|1立即完成
}

func (x *PetTechUpgrade) Reset() {
	*x = PetTechUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetTechUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetTechUpgrade) ProtoMessage() {}

func (x *PetTechUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetTechUpgrade.ProtoReflect.Descriptor instead.
func (*PetTechUpgrade) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{549}
}

func (x *PetTechUpgrade) GetXTypeId() uint32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *PetTechUpgrade) GetXImmediately() uint32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

//饲养所 - 取消科技升级
type PetTechUpgradeCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId *uint32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"` //科技ID
}

func (x *PetTechUpgradeCancel) Reset() {
	*x = PetTechUpgradeCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetTechUpgradeCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetTechUpgradeCancel) ProtoMessage() {}

func (x *PetTechUpgradeCancel) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetTechUpgradeCancel.ProtoReflect.Descriptor instead.
func (*PetTechUpgradeCancel) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{550}
}

func (x *PetTechUpgradeCancel) GetXTypeId() uint32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

//饲养所 - 科技升级加速(钻石)
type PetTechUpgradeSpeedup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId *uint32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"` //科技ID
	XGem    *uint32 `protobuf:"varint,2,req,name=_gem,json=Gem" json:"_gem,omitempty"`            //钻石
}

func (x *PetTechUpgradeSpeedup) Reset() {
	*x = PetTechUpgradeSpeedup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetTechUpgradeSpeedup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetTechUpgradeSpeedup) ProtoMessage() {}

func (x *PetTechUpgradeSpeedup) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetTechUpgradeSpeedup.ProtoReflect.Descriptor instead.
func (*PetTechUpgradeSpeedup) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{551}
}

func (x *PetTechUpgradeSpeedup) GetXTypeId() uint32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *PetTechUpgradeSpeedup) GetXGem() uint32 {
	if x != nil && x.XGem != nil {
		return *x.XGem
	}
	return 0
}

//游戏初始化数据
type InitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *InitData) Reset() {
	*x = InitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitData) ProtoMessage() {}

func (x *InitData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitData.ProtoReflect.Descriptor instead.
func (*InitData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{552}
}

func (x *InitData) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//劝隆士兵完成
type SurrenderSoldiersFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop         []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                              //劝隆士兵
	XClientTime    *int64      `protobuf:"varint,2,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`            //客户端调整后的时间
	XCsDeltaTime   *int64      `protobuf:"varint,3,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`       //客户端服务端时间差
	XStartTime     *int64      `protobuf:"varint,4,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"`               //客户端的劝隆开始时间
	XRealStartTime *int64      `protobuf:"varint,5,opt,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"` //客户端的劝隆开始时间
}

func (x *SurrenderSoldiersFinish) Reset() {
	*x = SurrenderSoldiersFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurrenderSoldiersFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderSoldiersFinish) ProtoMessage() {}

func (x *SurrenderSoldiersFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderSoldiersFinish.ProtoReflect.Descriptor instead.
func (*SurrenderSoldiersFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{553}
}

func (x *SurrenderSoldiersFinish) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *SurrenderSoldiersFinish) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *SurrenderSoldiersFinish) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *SurrenderSoldiersFinish) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *SurrenderSoldiersFinish) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

//钻石加速劝隆士兵
type SpeedupSurrenderSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"` //劝隆士兵
	XGold  *int64      `protobuf:"varint,2,req,name=_gold,json=Gold" json:"_gold,omitempty"`   //客户端计算的金币消耗数量
}

func (x *SpeedupSurrenderSoldiers) Reset() {
	*x = SpeedupSurrenderSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupSurrenderSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupSurrenderSoldiers) ProtoMessage() {}

func (x *SpeedupSurrenderSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupSurrenderSoldiers.ProtoReflect.Descriptor instead.
func (*SpeedupSurrenderSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{554}
}

func (x *SpeedupSurrenderSoldiers) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *SpeedupSurrenderSoldiers) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

//取消劝隆士兵
type CancelSurrenderSoldiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop         []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                              //劝隆士兵
	XClientTime    *int64      `protobuf:"varint,2,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`            //客户端调整后的时间
	XCsDeltaTime   *int64      `protobuf:"varint,3,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`       //客户端服务端时间差
	XStartTime     *int64      `protobuf:"varint,4,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"`               //客户端的劝隆开始时间
	XRealStartTime *int64      `protobuf:"varint,5,opt,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"` //客户端的劝隆开始时间
}

func (x *CancelSurrenderSoldiers) Reset() {
	*x = CancelSurrenderSoldiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSurrenderSoldiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSurrenderSoldiers) ProtoMessage() {}

func (x *CancelSurrenderSoldiers) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSurrenderSoldiers.ProtoReflect.Descriptor instead.
func (*CancelSurrenderSoldiers) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{555}
}

func (x *CancelSurrenderSoldiers) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *CancelSurrenderSoldiers) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *CancelSurrenderSoldiers) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *CancelSurrenderSoldiers) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *CancelSurrenderSoldiers) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

//劳作完成
type WorkFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop         []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                              //劳作士兵
	XClientTime    *int64      `protobuf:"varint,2,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`            //客户端调整后的时间
	XCsDeltaTime   *int64      `protobuf:"varint,3,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`       //客户端服务端时间差
	XStartTime     *int64      `protobuf:"varint,4,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"`               //客户端的劝隆开始时间
	XRealStartTime *int64      `protobuf:"varint,5,opt,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"` //客户端的劝隆开始时间
}

func (x *WorkFinish) Reset() {
	*x = WorkFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkFinish) ProtoMessage() {}

func (x *WorkFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkFinish.ProtoReflect.Descriptor instead.
func (*WorkFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{556}
}

func (x *WorkFinish) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *WorkFinish) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *WorkFinish) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *WorkFinish) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *WorkFinish) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

//钻石加速劳作
type SpeedupWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"` //劳作士兵
	XGold  *int64      `protobuf:"varint,2,req,name=_gold,json=Gold" json:"_gold,omitempty"`   //客户端计算的金币消耗数量
}

func (x *SpeedupWork) Reset() {
	*x = SpeedupWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedupWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedupWork) ProtoMessage() {}

func (x *SpeedupWork) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedupWork.ProtoReflect.Descriptor instead.
func (*SpeedupWork) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{557}
}

func (x *SpeedupWork) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *SpeedupWork) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

//取消劳作
type CancelWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTroop         []*pb.Troop `protobuf:"bytes,1,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                              //劳作士兵
	XClientTime    *int64      `protobuf:"varint,2,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`            //客户端调整后的时间
	XCsDeltaTime   *int64      `protobuf:"varint,3,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`       //客户端服务端时间差
	XStartTime     *int64      `protobuf:"varint,4,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"`               //客户端的劳作开始时间
	XRealStartTime *int64      `protobuf:"varint,5,opt,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"` //客户端的劳作开始时间
}

func (x *CancelWork) Reset() {
	*x = CancelWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWork) ProtoMessage() {}

func (x *CancelWork) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWork.ProtoReflect.Descriptor instead.
func (*CancelWork) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{558}
}

func (x *CancelWork) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *CancelWork) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *CancelWork) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *CancelWork) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *CancelWork) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

//互动
type Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *Interaction) Reset() {
	*x = Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interaction) ProtoMessage() {}

func (x *Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interaction.ProtoReflect.Descriptor instead.
func (*Interaction) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{559}
}

func (x *Interaction) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//互动问题
type InteractionAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XConfigId *uint32 `protobuf:"varint,1,req,name=_config_id,json=ConfigId" json:"_config_id,omitempty"` //小人id
	XAnswerId *uint32 `protobuf:"varint,2,req,name=_answer_id,json=AnswerId" json:"_answer_id,omitempty"` //答案id
}

func (x *InteractionAsk) Reset() {
	*x = InteractionAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAsk) ProtoMessage() {}

func (x *InteractionAsk) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAsk.ProtoReflect.Descriptor instead.
func (*InteractionAsk) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{560}
}

func (x *InteractionAsk) GetXConfigId() uint32 {
	if x != nil && x.XConfigId != nil {
		return *x.XConfigId
	}
	return 0
}

func (x *InteractionAsk) GetXAnswerId() uint32 {
	if x != nil && x.XAnswerId != nil {
		return *x.XAnswerId
	}
	return 0
}

//生产急救包完成
type ProduceMedicineBagFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position       *int32  `protobuf:"varint,1,req,name=position" json:"position,omitempty"`
	XNum           []int32 `protobuf:"varint,2,rep,name=_num,json=Num" json:"_num,omitempty"`                                   //急救包数量
	XClientTime    *int64  `protobuf:"varint,3,opt,name=_client_time,json=ClientTime" json:"_client_time,omitempty"`            //客户端调整后的时间
	XCsDeltaTime   *int64  `protobuf:"varint,4,opt,name=_cs_delta_time,json=CsDeltaTime" json:"_cs_delta_time,omitempty"`       //客户端服务端时间差
	XStartTime     *int64  `protobuf:"varint,5,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"`               //客户端的开始时间
	XRealStartTime *int64  `protobuf:"varint,6,opt,name=_real_start_time,json=RealStartTime" json:"_real_start_time,omitempty"` //客户端的开始时间
}

func (x *ProduceMedicineBagFinish) Reset() {
	*x = ProduceMedicineBagFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceMedicineBagFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceMedicineBagFinish) ProtoMessage() {}

func (x *ProduceMedicineBagFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceMedicineBagFinish.ProtoReflect.Descriptor instead.
func (*ProduceMedicineBagFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{561}
}

func (x *ProduceMedicineBagFinish) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *ProduceMedicineBagFinish) GetXNum() []int32 {
	if x != nil {
		return x.XNum
	}
	return nil
}

func (x *ProduceMedicineBagFinish) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

func (x *ProduceMedicineBagFinish) GetXCsDeltaTime() int64 {
	if x != nil && x.XCsDeltaTime != nil {
		return *x.XCsDeltaTime
	}
	return 0
}

func (x *ProduceMedicineBagFinish) GetXStartTime() int64 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *ProduceMedicineBagFinish) GetXRealStartTime() int64 {
	if x != nil && x.XRealStartTime != nil {
		return *x.XRealStartTime
	}
	return 0
}

//取消生产急救包
type CancelProduceMedicineBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientTime *int64 `protobuf:"varint,1,req,name=_client_time,json=ClientTime" json:"_client_time,omitempty"` //客户端时间
}

func (x *CancelProduceMedicineBag) Reset() {
	*x = CancelProduceMedicineBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelProduceMedicineBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelProduceMedicineBag) ProtoMessage() {}

func (x *CancelProduceMedicineBag) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelProduceMedicineBag.ProtoReflect.Descriptor instead.
func (*CancelProduceMedicineBag) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{562}
}

func (x *CancelProduceMedicineBag) GetXClientTime() int64 {
	if x != nil && x.XClientTime != nil {
		return *x.XClientTime
	}
	return 0
}

//修改出征队伍自动复活选项
type ModifyTroopAutoRelife struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAutoRelifeSolider   *int32 `protobuf:"varint,1,req,name=_auto_relife_solider,json=AutoRelifeSolider" json:"_auto_relife_solider,omitempty"`       //自动使用急救包道具0自动使用 1不自动使用
	XAutoRelifeApparatus *int32 `protobuf:"varint,2,req,name=_auto_relife_apparatus,json=AutoRelifeApparatus" json:"_auto_relife_apparatus,omitempty"` //自动使用钻石修复攻城器械0自动使用 1不自动使用
}

func (x *ModifyTroopAutoRelife) Reset() {
	*x = ModifyTroopAutoRelife{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTroopAutoRelife) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTroopAutoRelife) ProtoMessage() {}

func (x *ModifyTroopAutoRelife) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTroopAutoRelife.ProtoReflect.Descriptor instead.
func (*ModifyTroopAutoRelife) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{563}
}

func (x *ModifyTroopAutoRelife) GetXAutoRelifeSolider() int32 {
	if x != nil && x.XAutoRelifeSolider != nil {
		return *x.XAutoRelifeSolider
	}
	return 0
}

func (x *ModifyTroopAutoRelife) GetXAutoRelifeApparatus() int32 {
	if x != nil && x.XAutoRelifeApparatus != nil {
		return *x.XAutoRelifeApparatus
	}
	return 0
}

//获取战宠列表
type PetSummaryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
}

func (x *PetSummaryList) Reset() {
	*x = PetSummaryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetSummaryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetSummaryList) ProtoMessage() {}

func (x *PetSummaryList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetSummaryList.ProtoReflect.Descriptor instead.
func (*PetSummaryList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{564}
}

func (x *PetSummaryList) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 锻造
type EquipForge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId  *int32        `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`      // 建筑位置
	XItemId      *int32        `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                  // 道具id
	XType        *pb.ForgeType `protobuf:"varint,3,req,name=_type,json=Type,enum=Msg.ForgeType,def=4" json:"_type,omitempty"` // 锻造类型
	XImmediately *int32        `protobuf:"varint,4,opt,name=_immediately,json=Immediately" json:"_immediately,omitempty"`     // 是否马上完成
	XId          *int64        `protobuf:"varint,5,opt,name=_id,json=Id" json:"_id,omitempty"`                                // 装备唯一id
	XItems       []*pb.ComItem `protobuf:"bytes,6,rep,name=_items,json=Items" json:"_items,omitempty"`                        // 锻造材料
	XAddItem     *pb.ComItem   `protobuf:"bytes,7,opt,name=_add_item,json=AddItem" json:"_add_item,omitempty"`                // 额外添加的道具 消耗一个等级<=5的道具 可以提高高品质道具产出的概率
}

// Default values for EquipForge fields.
const (
	Default_EquipForge_XType = pb.ForgeType(4) // pb.ForgeType_synthesis
)

func (x *EquipForge) Reset() {
	*x = EquipForge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipForge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipForge) ProtoMessage() {}

func (x *EquipForge) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipForge.ProtoReflect.Descriptor instead.
func (*EquipForge) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{565}
}

func (x *EquipForge) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *EquipForge) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *EquipForge) GetXType() pb.ForgeType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_EquipForge_XType
}

func (x *EquipForge) GetXImmediately() int32 {
	if x != nil && x.XImmediately != nil {
		return *x.XImmediately
	}
	return 0
}

func (x *EquipForge) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *EquipForge) GetXItems() []*pb.ComItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

func (x *EquipForge) GetXAddItem() *pb.ComItem {
	if x != nil {
		return x.XAddItem
	}
	return nil
}

// 锻造完成领取装备
type EquipForgeFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32 `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"` // 建筑位置
}

func (x *EquipForgeFinish) Reset() {
	*x = EquipForgeFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipForgeFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipForgeFinish) ProtoMessage() {}

func (x *EquipForgeFinish) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipForgeFinish.ProtoReflect.Descriptor instead.
func (*EquipForgeFinish) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{566}
}

func (x *EquipForgeFinish) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

// 强化
type EquipStreathen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32        `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`      // 建筑位置
	XId         *int64        `protobuf:"varint,2,req,name=_id,json=Id" json:"_id,omitempty"`                                // 唯一id
	XType       *pb.ForgeType `protobuf:"varint,3,req,name=_type,json=Type,enum=Msg.ForgeType,def=4" json:"_type,omitempty"` // 锻造类型
	XItems      *pb.ComItem   `protobuf:"bytes,4,opt,name=_items,json=Items" json:"_items,omitempty"`                        // 强化石
	XAddItem    *pb.ComItem   `protobuf:"bytes,5,opt,name=_add_item,json=AddItem" json:"_add_item,omitempty"`                // 防爆符
}

// Default values for EquipStreathen fields.
const (
	Default_EquipStreathen_XType = pb.ForgeType(4) // pb.ForgeType_synthesis
)

func (x *EquipStreathen) Reset() {
	*x = EquipStreathen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipStreathen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipStreathen) ProtoMessage() {}

func (x *EquipStreathen) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipStreathen.ProtoReflect.Descriptor instead.
func (*EquipStreathen) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{567}
}

func (x *EquipStreathen) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *EquipStreathen) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *EquipStreathen) GetXType() pb.ForgeType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_EquipStreathen_XType
}

func (x *EquipStreathen) GetXItems() *pb.ComItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

func (x *EquipStreathen) GetXAddItem() *pb.ComItem {
	if x != nil {
		return x.XAddItem
	}
	return nil
}

// 附魔
type EquipEnchanting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32        `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`      // 建筑位置
	XId         *int64        `protobuf:"varint,2,req,name=_id,json=Id" json:"_id,omitempty"`                                // 唯一id
	XType       *pb.ForgeType `protobuf:"varint,3,req,name=_type,json=Type,enum=Msg.ForgeType,def=4" json:"_type,omitempty"` // 锻造类型
	XItems      *pb.ComItem   `protobuf:"bytes,4,opt,name=_items,json=Items" json:"_items,omitempty"`                        // 附魔石
}

// Default values for EquipEnchanting fields.
const (
	Default_EquipEnchanting_XType = pb.ForgeType(4) // pb.ForgeType_synthesis
)

func (x *EquipEnchanting) Reset() {
	*x = EquipEnchanting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipEnchanting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipEnchanting) ProtoMessage() {}

func (x *EquipEnchanting) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipEnchanting.ProtoReflect.Descriptor instead.
func (*EquipEnchanting) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{568}
}

func (x *EquipEnchanting) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *EquipEnchanting) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *EquipEnchanting) GetXType() pb.ForgeType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_EquipEnchanting_XType
}

func (x *EquipEnchanting) GetXItems() *pb.ComItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

// 合成
type EquipFuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionId *int32        `protobuf:"varint,1,req,name=_position_id,json=PositionId" json:"_position_id,omitempty"`      // 建筑位置
	XType       *pb.ForgeType `protobuf:"varint,2,req,name=_type,json=Type,enum=Msg.ForgeType,def=4" json:"_type,omitempty"` // 锻造类型
	XItems      []*pb.ComItem `protobuf:"bytes,3,rep,name=_items,json=Items" json:"_items,omitempty"`                        // 材料
}

// Default values for EquipFuse fields.
const (
	Default_EquipFuse_XType = pb.ForgeType(4) // pb.ForgeType_synthesis
)

func (x *EquipFuse) Reset() {
	*x = EquipFuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipFuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipFuse) ProtoMessage() {}

func (x *EquipFuse) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipFuse.ProtoReflect.Descriptor instead.
func (*EquipFuse) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{569}
}

func (x *EquipFuse) GetXPositionId() int32 {
	if x != nil && x.XPositionId != nil {
		return *x.XPositionId
	}
	return 0
}

func (x *EquipFuse) GetXType() pb.ForgeType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return Default_EquipFuse_XType
}

func (x *EquipFuse) GetXItems() []*pb.ComItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

// 宝物合成
type PlayerTreasureFuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *uint32       `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` //玩家ID
	XItems  []*pb.ComItem `protobuf:"bytes,2,rep,name=_items,json=Items" json:"_items,omitempty"`       // 材料
}

func (x *PlayerTreasureFuse) Reset() {
	*x = PlayerTreasureFuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTreasureFuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTreasureFuse) ProtoMessage() {}

func (x *PlayerTreasureFuse) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTreasureFuse.ProtoReflect.Descriptor instead.
func (*PlayerTreasureFuse) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{570}
}

func (x *PlayerTreasureFuse) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *PlayerTreasureFuse) GetXItems() []*pb.ComItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

// 精炼
type EquipRefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId     *int32        `protobuf:"varint,1,req,name=item_id,json=itemId" json:"item_id,omitempty"`            // 道具id
	XId        *int64        `protobuf:"varint,2,opt,name=_id,json=Id" json:"_id,omitempty"`                        // 装备唯一id
	XGeneralId *int64        `protobuf:"varint,3,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"` //将军id
	XLockPos   []uint32      `protobuf:"varint,4,rep,name=_lockPos,json=LockPos" json:"_lockPos,omitempty"`         //精炼属性锁定位置
	XItem      []*pb.ComItem `protobuf:"bytes,5,rep,name=_item,json=Item" json:"_item,omitempty"`                   // 消耗的材料
}

func (x *EquipRefine) Reset() {
	*x = EquipRefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRefine) ProtoMessage() {}

func (x *EquipRefine) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRefine.ProtoReflect.Descriptor instead.
func (*EquipRefine) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{571}
}

func (x *EquipRefine) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *EquipRefine) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *EquipRefine) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *EquipRefine) GetXLockPos() []uint32 {
	if x != nil {
		return x.XLockPos
	}
	return nil
}

func (x *EquipRefine) GetXItem() []*pb.ComItem {
	if x != nil {
		return x.XItem
	}
	return nil
}

// 锻造科技
type EquipTechUpgrad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *int64 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` // 科技id
}

func (x *EquipTechUpgrad) Reset() {
	*x = EquipTechUpgrad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipTechUpgrad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipTechUpgrad) ProtoMessage() {}

func (x *EquipTechUpgrad) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipTechUpgrad.ProtoReflect.Descriptor instead.
func (*EquipTechUpgrad) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{572}
}

func (x *EquipTechUpgrad) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

// 战宠上阵下阵(绑定英雄)
type PetBindHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPetId  *uint32 `protobuf:"varint,1,req,name=_pet_id,json=PetId" json:"_pet_id,omitempty"`    // 战宠数据库唯一ID
	XHeroId *uint32 `protobuf:"varint,2,req,name=_hero_id,json=HeroId" json:"_hero_id,omitempty"` // (数据库主键Id)英雄ID 大于0为上阵, 小于等于0为下阵
}

func (x *PetBindHero) Reset() {
	*x = PetBindHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetBindHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetBindHero) ProtoMessage() {}

func (x *PetBindHero) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetBindHero.ProtoReflect.Descriptor instead.
func (*PetBindHero) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{573}
}

func (x *PetBindHero) GetXPetId() uint32 {
	if x != nil && x.XPetId != nil {
		return *x.XPetId
	}
	return 0
}

func (x *PetBindHero) GetXHeroId() uint32 {
	if x != nil && x.XHeroId != nil {
		return *x.XHeroId
	}
	return 0
}

// 战宠融合
type PetMerge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPetId          *uint32 `protobuf:"varint,1,req,name=_pet_id,json=PetId" json:"_pet_id,omitempty"`                              // 战宠数据库唯一ID (主战宠ID)
	XAssistantPetId *uint32 `protobuf:"varint,2,req,name=_assistant_pet_id,json=AssistantPetId" json:"_assistant_pet_id,omitempty"` // 战宠数据库唯一ID (副战宠ID)
}

func (x *PetMerge) Reset() {
	*x = PetMerge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetMerge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetMerge) ProtoMessage() {}

func (x *PetMerge) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetMerge.ProtoReflect.Descriptor instead.
func (*PetMerge) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{574}
}

func (x *PetMerge) GetXPetId() uint32 {
	if x != nil && x.XPetId != nil {
		return *x.XPetId
	}
	return 0
}

func (x *PetMerge) GetXAssistantPetId() uint32 {
	if x != nil && x.XAssistantPetId != nil {
		return *x.XAssistantPetId
	}
	return 0
}

// 访问别人主城
type Visit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFriendId *uint32 `protobuf:"varint,1,req,name=_friend_id,json=FriendId" json:"_friend_id,omitempty"` // 好友ID(玩家ID)
}

func (x *Visit) Reset() {
	*x = Visit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Visit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Visit) ProtoMessage() {}

func (x *Visit) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Visit.ProtoReflect.Descriptor instead.
func (*Visit) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{575}
}

func (x *Visit) GetXFriendId() uint32 {
	if x != nil && x.XFriendId != nil {
		return *x.XFriendId
	}
	return 0
}

// 批量分解道具
type DestructItemBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDestructItems []*DestructItem `protobuf:"bytes,1,rep,name=_destruct_items,json=DestructItems" json:"_destruct_items,omitempty"`
}

func (x *DestructItemBatch) Reset() {
	*x = DestructItemBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestructItemBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestructItemBatch) ProtoMessage() {}

func (x *DestructItemBatch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestructItemBatch.ProtoReflect.Descriptor instead.
func (*DestructItemBatch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{576}
}

func (x *DestructItemBatch) GetXDestructItems() []*DestructItem {
	if x != nil {
		return x.XDestructItems
	}
	return nil
}

// 分解领主宝物
type DestructTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId      *int32 `protobuf:"varint,1,req,name=_itemId,json=ItemId" json:"_itemId,omitempty"`                  //宝物ID
	XAmount      *int32 `protobuf:"varint,2,req,name=_amount,json=Amount" json:"_amount,omitempty"`                  //分解数量
	XLordEquiped *int32 `protobuf:"varint,3,opt,name=_lord_equiped,json=LordEquiped" json:"_lord_equiped,omitempty"` // 是否是君主身上正在穿戴的宝物 0不是 1是
	XId          *int64 `protobuf:"varint,4,opt,name=_id,json=Id" json:"_id,omitempty"`                              // 宝物唯一id
}

func (x *DestructTreasure) Reset() {
	*x = DestructTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestructTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestructTreasure) ProtoMessage() {}

func (x *DestructTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestructTreasure.ProtoReflect.Descriptor instead.
func (*DestructTreasure) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{577}
}

func (x *DestructTreasure) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *DestructTreasure) GetXAmount() int32 {
	if x != nil && x.XAmount != nil {
		return *x.XAmount
	}
	return 0
}

func (x *DestructTreasure) GetXLordEquiped() int32 {
	if x != nil && x.XLordEquiped != nil {
		return *x.XLordEquiped
	}
	return 0
}

func (x *DestructTreasure) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

// 批量分解宝物
type DestructTreasureBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTreasures []*DestructTreasure `protobuf:"bytes,1,rep,name=_treasures,json=Treasures" json:"_treasures,omitempty"`
}

func (x *DestructTreasureBatch) Reset() {
	*x = DestructTreasureBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestructTreasureBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestructTreasureBatch) ProtoMessage() {}

func (x *DestructTreasureBatch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestructTreasureBatch.ProtoReflect.Descriptor instead.
func (*DestructTreasureBatch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{578}
}

func (x *DestructTreasureBatch) GetXTreasures() []*DestructTreasure {
	if x != nil {
		return x.XTreasures
	}
	return nil
}

//酒馆(克隆中心)抽奖
type TavernDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPosition *int32      `protobuf:"varint,1,req,name=_position,json=Position" json:"_position,omitempty"`      // 建筑位置
	XLevelId  *int32      `protobuf:"varint,2,req,name=_level_id,json=LevelId" json:"_level_id,omitempty"`       // 级别：1保底、2普通、3高级
	XDrawId   *int32      `protobuf:"varint,3,opt,name=_draw_id,json=DrawId" json:"_draw_id,omitempty"`          // 抽奖类型：1免费次数、2道具、3钻石
	XDrawNum  *int32      `protobuf:"varint,4,opt,name=_draw_num,json=DrawNum,def=1" json:"_draw_num,omitempty"` // 抽奖次数
	XItems    *pb.ComItem `protobuf:"bytes,5,opt,name=_items,json=Items" json:"_items,omitempty"`                // 道具
}

// Default values for TavernDraw fields.
const (
	Default_TavernDraw_XDrawNum = int32(1)
)

func (x *TavernDraw) Reset() {
	*x = TavernDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TavernDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TavernDraw) ProtoMessage() {}

func (x *TavernDraw) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TavernDraw.ProtoReflect.Descriptor instead.
func (*TavernDraw) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{579}
}

func (x *TavernDraw) GetXPosition() int32 {
	if x != nil && x.XPosition != nil {
		return *x.XPosition
	}
	return 0
}

func (x *TavernDraw) GetXLevelId() int32 {
	if x != nil && x.XLevelId != nil {
		return *x.XLevelId
	}
	return 0
}

func (x *TavernDraw) GetXDrawId() int32 {
	if x != nil && x.XDrawId != nil {
		return *x.XDrawId
	}
	return 0
}

func (x *TavernDraw) GetXDrawNum() int32 {
	if x != nil && x.XDrawNum != nil {
		return *x.XDrawNum
	}
	return Default_TavernDraw_XDrawNum
}

func (x *TavernDraw) GetXItems() *pb.ComItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

//英雄天赋升级
type HeroTalentUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XHeroId *uint32 `protobuf:"varint,1,req,name=_hero_id,json=HeroId" json:"_hero_id,omitempty"` //英雄唯一ID
	XId     *uint32 `protobuf:"varint,2,req,name=_id,json=Id" json:"_id,omitempty"`               //天赋唯一ID
}

func (x *HeroTalentUpgrade) Reset() {
	*x = HeroTalentUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroTalentUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroTalentUpgrade) ProtoMessage() {}

func (x *HeroTalentUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroTalentUpgrade.ProtoReflect.Descriptor instead.
func (*HeroTalentUpgrade) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{580}
}

func (x *HeroTalentUpgrade) GetXHeroId() uint32 {
	if x != nil && x.XHeroId != nil {
		return *x.XHeroId
	}
	return 0
}

func (x *HeroTalentUpgrade) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//英雄天赋重置
type HeroTalentReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XHeroId *uint32 `protobuf:"varint,1,req,name=_hero_id,json=HeroId" json:"_hero_id,omitempty"` //英雄唯一ID
}

func (x *HeroTalentReset) Reset() {
	*x = HeroTalentReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroTalentReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroTalentReset) ProtoMessage() {}

func (x *HeroTalentReset) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroTalentReset.ProtoReflect.Descriptor instead.
func (*HeroTalentReset) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{581}
}

func (x *HeroTalentReset) GetXHeroId() uint32 {
	if x != nil && x.XHeroId != nil {
		return *x.XHeroId
	}
	return 0
}

// 领主主动技能天赋使用
type UsePlayerGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGiftPage     *int32  `protobuf:"varint,1,req,name=_gift_page,json=GiftPage" json:"_gift_page,omitempty"`               // 页数
	XTypeId       *int32  `protobuf:"varint,2,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                     // 科技种类
	XLevel        *int32  `protobuf:"varint,3,req,name=_level,json=Level" json:"_level,omitempty"`                          // 科技等级
	XTargetWx     *int32  `protobuf:"varint,4,opt,name=_target_wx,json=TargetWx" json:"_target_wx,omitempty"`               //目标的横坐标
	XTargetWy     *int32  `protobuf:"varint,5,opt,name=_target_wy,json=TargetWy" json:"_target_wy,omitempty"`               //目标的纵坐标
	XTargetUserId *uint32 `protobuf:"varint,6,opt,name=_target_user_id,json=TargetUserId" json:"_target_user_id,omitempty"` //目标玩家id，如果目标有玩家属性需要填写（如攻打其他玩家正在采集的资源点）
}

func (x *UsePlayerGift) Reset() {
	*x = UsePlayerGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsePlayerGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsePlayerGift) ProtoMessage() {}

func (x *UsePlayerGift) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsePlayerGift.ProtoReflect.Descriptor instead.
func (*UsePlayerGift) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{582}
}

func (x *UsePlayerGift) GetXGiftPage() int32 {
	if x != nil && x.XGiftPage != nil {
		return *x.XGiftPage
	}
	return 0
}

func (x *UsePlayerGift) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *UsePlayerGift) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *UsePlayerGift) GetXTargetWx() int32 {
	if x != nil && x.XTargetWx != nil {
		return *x.XTargetWx
	}
	return 0
}

func (x *UsePlayerGift) GetXTargetWy() int32 {
	if x != nil && x.XTargetWy != nil {
		return *x.XTargetWy
	}
	return 0
}

func (x *UsePlayerGift) GetXTargetUserId() uint32 {
	if x != nil && x.XTargetUserId != nil {
		return *x.XTargetUserId
	}
	return 0
}

// 批量读取邮件
type BatchReadMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBatchIdTypes []*pb.MoreIdType `protobuf:"bytes,1,rep,name=_batch_id_types,json=BatchIdTypes" json:"_batch_id_types,omitempty"`
}

func (x *BatchReadMail) Reset() {
	*x = BatchReadMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReadMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReadMail) ProtoMessage() {}

func (x *BatchReadMail) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReadMail.ProtoReflect.Descriptor instead.
func (*BatchReadMail) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{583}
}

func (x *BatchReadMail) GetXBatchIdTypes() []*pb.MoreIdType {
	if x != nil {
		return x.XBatchIdTypes
	}
	return nil
}

// 批量收取奖励
type BatchGetReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBatchIdTypes []*pb.MoreIdType `protobuf:"bytes,1,rep,name=_batch_id_types,json=BatchIdTypes" json:"_batch_id_types,omitempty"`
}

func (x *BatchGetReward) Reset() {
	*x = BatchGetReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetReward) ProtoMessage() {}

func (x *BatchGetReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetReward.ProtoReflect.Descriptor instead.
func (*BatchGetReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{584}
}

func (x *BatchGetReward) GetXBatchIdTypes() []*pb.MoreIdType {
	if x != nil {
		return x.XBatchIdTypes
	}
	return nil
}

// 获取单个装备详情
type AskEquipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipId *int64                 `protobuf:"varint,1,req,name=equip_id,json=equipId" json:"equip_id,omitempty"`
	XScene  *AskEquipInfoSceneType `protobuf:"varint,2,opt,name=_scene,json=Scene,enum=MsgUp.AskEquipInfoSceneType,def=0" json:"_scene,omitempty"` // 场景
	XUserId *int32                 `protobuf:"varint,3,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                                   // 所属用户ID,若不传则默认为当前登录用户ID
}

// Default values for AskEquipInfo fields.
const (
	Default_AskEquipInfo_XScene = AskEquipInfo_world_drop
)

func (x *AskEquipInfo) Reset() {
	*x = AskEquipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskEquipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskEquipInfo) ProtoMessage() {}

func (x *AskEquipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskEquipInfo.ProtoReflect.Descriptor instead.
func (*AskEquipInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{585}
}

func (x *AskEquipInfo) GetEquipId() int64 {
	if x != nil && x.EquipId != nil {
		return *x.EquipId
	}
	return 0
}

func (x *AskEquipInfo) GetXScene() AskEquipInfoSceneType {
	if x != nil && x.XScene != nil {
		return *x.XScene
	}
	return Default_AskEquipInfo_XScene
}

func (x *AskEquipInfo) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 获取单个宠物详情
type GetPetSummaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId   *int32 `protobuf:"varint,1,req,name=pet_id,json=petId" json:"pet_id,omitempty"`
	XUserId *int32 `protobuf:"varint,2,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"` // 所属用户ID,若不传则默认为当前登录用户ID
}

func (x *GetPetSummaryInfo) Reset() {
	*x = GetPetSummaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPetSummaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPetSummaryInfo) ProtoMessage() {}

func (x *GetPetSummaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPetSummaryInfo.ProtoReflect.Descriptor instead.
func (*GetPetSummaryInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{586}
}

func (x *GetPetSummaryInfo) GetPetId() int32 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *GetPetSummaryInfo) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// FPS结算领取奖励
type FpsFinishReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XScore      *int64 `protobuf:"varint,1,req,name=_score,json=Score" json:"_score,omitempty"`                  // 分数
	XTime       *int64 `protobuf:"varint,2,req,name=_time,json=Time" json:"_time,omitempty"`                     // 用时
	XLevelId    *int64 `protobuf:"varint,4,opt,name=_level_id,json=LevelId" json:"_level_id,omitempty"`          // 关卡id
	XMonsterKey *int64 `protobuf:"varint,5,opt,name=_monster_key,json=MonsterKey" json:"_monster_key,omitempty"` //怪物的配置id
	XWx         *int64 `protobuf:"varint,6,opt,name=_wx,json=Wx" json:"_wx,omitempty"`                           // 怪物x坐标
	XWy         *int64 `protobuf:"varint,7,opt,name=_wy,json=Wy" json:"_wy,omitempty"`                           // 怪物y坐标
	XFpsType    *int32 `protobuf:"varint,8,opt,name=_fps_type,json=FpsType" json:"_fps_type,omitempty"`          // 0普通FPS 情报任务FPS
}

func (x *FpsFinishReward) Reset() {
	*x = FpsFinishReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpsFinishReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpsFinishReward) ProtoMessage() {}

func (x *FpsFinishReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpsFinishReward.ProtoReflect.Descriptor instead.
func (*FpsFinishReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{587}
}

func (x *FpsFinishReward) GetXScore() int64 {
	if x != nil && x.XScore != nil {
		return *x.XScore
	}
	return 0
}

func (x *FpsFinishReward) GetXTime() int64 {
	if x != nil && x.XTime != nil {
		return *x.XTime
	}
	return 0
}

func (x *FpsFinishReward) GetXLevelId() int64 {
	if x != nil && x.XLevelId != nil {
		return *x.XLevelId
	}
	return 0
}

func (x *FpsFinishReward) GetXMonsterKey() int64 {
	if x != nil && x.XMonsterKey != nil {
		return *x.XMonsterKey
	}
	return 0
}

func (x *FpsFinishReward) GetXWx() int64 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *FpsFinishReward) GetXWy() int64 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *FpsFinishReward) GetXFpsType() int32 {
	if x != nil && x.XFpsType != nil {
		return *x.XFpsType
	}
	return 0
}

// FPS进入
type FpsStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWx      *int64 `protobuf:"varint,1,req,name=_wx,json=Wx" json:"_wx,omitempty"`                  // 怪物x坐标
	XWy      *int64 `protobuf:"varint,2,req,name=_wy,json=Wy" json:"_wy,omitempty"`                  // 怪物y坐标
	XFpsType *int32 `protobuf:"varint,3,opt,name=_fps_type,json=FpsType" json:"_fps_type,omitempty"` // 0普通FPS 情报任务FPS
}

func (x *FpsStart) Reset() {
	*x = FpsStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpsStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpsStart) ProtoMessage() {}

func (x *FpsStart) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpsStart.ProtoReflect.Descriptor instead.
func (*FpsStart) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{588}
}

func (x *FpsStart) GetXWx() int64 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *FpsStart) GetXWy() int64 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *FpsStart) GetXFpsType() int32 {
	if x != nil && x.XFpsType != nil {
		return *x.XFpsType
	}
	return 0
}

// FPS中途退出
type FpsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWx      *int64 `protobuf:"varint,1,req,name=_wx,json=Wx" json:"_wx,omitempty"`                  // 怪物x坐标
	XWy      *int64 `protobuf:"varint,2,req,name=_wy,json=Wy" json:"_wy,omitempty"`                  // 怪物y坐标
	XFpsType *int32 `protobuf:"varint,3,opt,name=_fps_type,json=FpsType" json:"_fps_type,omitempty"` // 0普通FPS 情报任务FPS
}

func (x *FpsOut) Reset() {
	*x = FpsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpsOut) ProtoMessage() {}

func (x *FpsOut) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpsOut.ProtoReflect.Descriptor instead.
func (*FpsOut) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{589}
}

func (x *FpsOut) GetXWx() int64 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *FpsOut) GetXWy() int64 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *FpsOut) GetXFpsType() int32 {
	if x != nil && x.XFpsType != nil {
		return *x.XFpsType
	}
	return 0
}

// 大地图搜索
type WorldSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSearchType  *pb.WorldSearchType `protobuf:"varint,1,req,name=_search_type,json=SearchType,enum=Msg.WorldSearchType" json:"_search_type,omitempty"` // 搜索类型
	XSearchLevel *int32              `protobuf:"varint,2,req,name=_search_level,json=SearchLevel" json:"_search_level,omitempty"`                       // 搜索等级
	XShowCapture *int32              `protobuf:"varint,3,opt,name=_show_capture,json=ShowCapture" json:"_show_capture,omitempty"`                       // 是否展示被占领的资源田
	XSearchNum   *int32              `protobuf:"varint,4,opt,name=_search_num,json=SearchNum" json:"_search_num,omitempty"`                             // 当前的搜索次数
}

func (x *WorldSearch) Reset() {
	*x = WorldSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldSearch) ProtoMessage() {}

func (x *WorldSearch) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldSearch.ProtoReflect.Descriptor instead.
func (*WorldSearch) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{590}
}

func (x *WorldSearch) GetXSearchType() pb.WorldSearchType {
	if x != nil && x.XSearchType != nil {
		return *x.XSearchType
	}
	return pb.WorldSearchType(1)
}

func (x *WorldSearch) GetXSearchLevel() int32 {
	if x != nil && x.XSearchLevel != nil {
		return *x.XSearchLevel
	}
	return 0
}

func (x *WorldSearch) GetXShowCapture() int32 {
	if x != nil && x.XShowCapture != nil {
		return *x.XShowCapture
	}
	return 0
}

func (x *WorldSearch) GetXSearchNum() int32 {
	if x != nil && x.XSearchNum != nil {
		return *x.XSearchNum
	}
	return 0
}

// 自动集结设置
type AutoRally struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneralType    *int32              `protobuf:"varint,1,opt,name=general_type,json=generalType" json:"general_type,omitempty"`          // 0:自动 1：不上阵
	SoilderType    *int32              `protobuf:"varint,2,opt,name=soilder_type,json=soilderType" json:"soilder_type,omitempty"`          //  0:自动 1：派出1个
	XAutoRallyBoss []*pb.AutoRallyBoss `protobuf:"bytes,3,rep,name=_auto_rally_boss,json=AutoRallyBoss" json:"_auto_rally_boss,omitempty"` // boss设置
	AutoStrength   *int32              `protobuf:"varint,4,opt,name=auto_strength,json=autoStrength" json:"auto_strength,omitempty"`       //自动补充体力 0:自动 1:不自动
	DurationType   *int32              `protobuf:"varint,5,opt,name=duration_type,json=durationType" json:"duration_type,omitempty"`       // 时间档次 1：4小时 2：8小时 3：24小时
	State          *int32              `protobuf:"varint,6,req,name=state" json:"state,omitempty"`                                         //1:开启 2：关闭
}

func (x *AutoRally) Reset() {
	*x = AutoRally{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRally) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRally) ProtoMessage() {}

func (x *AutoRally) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRally.ProtoReflect.Descriptor instead.
func (*AutoRally) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{591}
}

func (x *AutoRally) GetGeneralType() int32 {
	if x != nil && x.GeneralType != nil {
		return *x.GeneralType
	}
	return 0
}

func (x *AutoRally) GetSoilderType() int32 {
	if x != nil && x.SoilderType != nil {
		return *x.SoilderType
	}
	return 0
}

func (x *AutoRally) GetXAutoRallyBoss() []*pb.AutoRallyBoss {
	if x != nil {
		return x.XAutoRallyBoss
	}
	return nil
}

func (x *AutoRally) GetAutoStrength() int32 {
	if x != nil && x.AutoStrength != nil {
		return *x.AutoStrength
	}
	return 0
}

func (x *AutoRally) GetDurationType() int32 {
	if x != nil && x.DurationType != nil {
		return *x.DurationType
	}
	return 0
}

func (x *AutoRally) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

// 自动集结 同步
type SyncAutoRally struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (x *SyncAutoRally) Reset() {
	*x = SyncAutoRally{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAutoRally) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAutoRally) ProtoMessage() {}

func (x *SyncAutoRally) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAutoRally.ProtoReflect.Descriptor instead.
func (*SyncAutoRally) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{592}
}

func (x *SyncAutoRally) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

// 联盟标志 添加 、 删除、修改
type GuildSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSignType  *int32                  `protobuf:"varint,1,req,name=_sign_type,json=SignType" json:"_sign_type,omitempty"` // 暂定五种类型 每个联盟每种类型只能有一个
	XSignInfo  *pb.FavoriteCoordInfo   `protobuf:"bytes,2,opt,name=_sign_info,json=SignInfo" json:"_sign_info,omitempty"`
	XOperation *int32                  `protobuf:"varint,3,opt,name=_operation,json=Operation" json:"_operation,omitempty"` //0:add 1: delete
	XBatch     []*pb.FavoriteCoordInfo `protobuf:"bytes,4,rep,name=_batch,json=Batch" json:"_batch,omitempty"`              //批量删除
}

func (x *GuildSign) Reset() {
	*x = GuildSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSign) ProtoMessage() {}

func (x *GuildSign) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSign.ProtoReflect.Descriptor instead.
func (*GuildSign) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{593}
}

func (x *GuildSign) GetXSignType() int32 {
	if x != nil && x.XSignType != nil {
		return *x.XSignType
	}
	return 0
}

func (x *GuildSign) GetXSignInfo() *pb.FavoriteCoordInfo {
	if x != nil {
		return x.XSignInfo
	}
	return nil
}

func (x *GuildSign) GetXOperation() int32 {
	if x != nil && x.XOperation != nil {
		return *x.XOperation
	}
	return 0
}

func (x *GuildSign) GetXBatch() []*pb.FavoriteCoordInfo {
	if x != nil {
		return x.XBatch
	}
	return nil
}

// 获取联盟标志详情
type GuildSignInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFavoriteId   *int64 `protobuf:"varint,1,req,name=_favorite_id,json=FavoriteId" json:"_favorite_id,omitempty"`       //联盟标签id
	XCommentSatrt *int64 `protobuf:"varint,2,opt,name=_comment_satrt,json=CommentSatrt" json:"_comment_satrt,omitempty"` // 留言起始索引 每次下发100条
}

func (x *GuildSignInfo) Reset() {
	*x = GuildSignInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSignInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSignInfo) ProtoMessage() {}

func (x *GuildSignInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSignInfo.ProtoReflect.Descriptor instead.
func (*GuildSignInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{594}
}

func (x *GuildSignInfo) GetXFavoriteId() int64 {
	if x != nil && x.XFavoriteId != nil {
		return *x.XFavoriteId
	}
	return 0
}

func (x *GuildSignInfo) GetXCommentSatrt() int64 {
	if x != nil && x.XCommentSatrt != nil {
		return *x.XCommentSatrt
	}
	return 0
}

// 联盟标志留言 新增 / 删除
type GuildSignComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFavoriteId *int64  `protobuf:"varint,1,req,name=_favorite_id,json=FavoriteId" json:"_favorite_id,omitempty"` //联盟标签id
	XContent    *string `protobuf:"bytes,2,opt,name=_content,json=Content" json:"_content,omitempty"`             // 留言内容
	XCommentId  *int64  `protobuf:"varint,3,opt,name=_comment_id,json=CommentId" json:"_comment_id,omitempty"`    // 留言id 大于0说明要删除这条留言
}

func (x *GuildSignComment) Reset() {
	*x = GuildSignComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSignComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSignComment) ProtoMessage() {}

func (x *GuildSignComment) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSignComment.ProtoReflect.Descriptor instead.
func (*GuildSignComment) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{595}
}

func (x *GuildSignComment) GetXFavoriteId() int64 {
	if x != nil && x.XFavoriteId != nil {
		return *x.XFavoriteId
	}
	return 0
}

func (x *GuildSignComment) GetXContent() string {
	if x != nil && x.XContent != nil {
		return *x.XContent
	}
	return ""
}

func (x *GuildSignComment) GetXCommentId() int64 {
	if x != nil && x.XCommentId != nil {
		return *x.XCommentId
	}
	return 0
}

// 联盟标记列表
type GuildSignList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId *int64 `protobuf:"varint,1,req,name=guild_id,json=guildId" json:"guild_id,omitempty"`
}

func (x *GuildSignList) Reset() {
	*x = GuildSignList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSignList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSignList) ProtoMessage() {}

func (x *GuildSignList) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSignList.ProtoReflect.Descriptor instead.
func (*GuildSignList) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{596}
}

func (x *GuildSignList) GetGuildId() int64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

// 修改好友临时用户信息
type SetFriendPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId     *int64  `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`
	XRemarkName *string `protobuf:"bytes,2,opt,name=_remark_name,json=RemarkName" json:"_remark_name,omitempty"` // 备注
}

func (x *SetFriendPlayerData) Reset() {
	*x = SetFriendPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFriendPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFriendPlayerData) ProtoMessage() {}

func (x *SetFriendPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFriendPlayerData.ProtoReflect.Descriptor instead.
func (*SetFriendPlayerData) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{597}
}

func (x *SetFriendPlayerData) GetXUserId() int64 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *SetFriendPlayerData) GetXRemarkName() string {
	if x != nil && x.XRemarkName != nil {
		return *x.XRemarkName
	}
	return ""
}

// 开礼包
type OpenGiftBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGiftId *int32                `protobuf:"varint,1,req,name=_gift_id,json=GiftId" json:"_gift_id,omitempty"`                                  // 礼包ID
	XScene  *OpenGiftBoxSceneType `protobuf:"varint,2,opt,name=_scene,json=Scene,enum=MsgUp.OpenGiftBoxSceneType,def=0" json:"_scene,omitempty"` // 场景类型
}

// Default values for OpenGiftBox fields.
const (
	Default_OpenGiftBox_XScene = OpenGiftBox_normal
)

func (x *OpenGiftBox) Reset() {
	*x = OpenGiftBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenGiftBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenGiftBox) ProtoMessage() {}

func (x *OpenGiftBox) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenGiftBox.ProtoReflect.Descriptor instead.
func (*OpenGiftBox) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{598}
}

func (x *OpenGiftBox) GetXGiftId() int32 {
	if x != nil && x.XGiftId != nil {
		return *x.XGiftId
	}
	return 0
}

func (x *OpenGiftBox) GetXScene() OpenGiftBoxSceneType {
	if x != nil && x.XScene != nil {
		return *x.XScene
	}
	return Default_OpenGiftBox_XScene
}

type RequestWorld_Scale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLevel   *uint64         `protobuf:"varint,1,req,name=_level,json=Level" json:"_level,omitempty"`
	XMapInfo *RequestMapinfo `protobuf:"bytes,2,opt,name=_map_info,json=MapInfo" json:"_map_info,omitempty"`
}

func (x *RequestWorld_Scale) Reset() {
	*x = RequestWorld_Scale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWorld_Scale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWorld_Scale) ProtoMessage() {}

func (x *RequestWorld_Scale) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWorld_Scale.ProtoReflect.Descriptor instead.
func (*RequestWorld_Scale) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{599}
}

func (x *RequestWorld_Scale) GetXLevel() uint64 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *RequestWorld_Scale) GetXMapInfo() *RequestMapinfo {
	if x != nil {
		return x.XMapInfo
	}
	return nil
}

// 新手引导阶段 挑战城内fps关卡胜利
type GuideFps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBarrier *int32 `protobuf:"varint,1,req,name=_Barrier,json=Barrier" json:"_Barrier,omitempty"` // 建筑位置id
	XLevel   *int32 `protobuf:"varint,2,opt,name=_level,json=Level" json:"_level,omitempty"`       // 关卡id
}

func (x *GuideFps) Reset() {
	*x = GuideFps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideFps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideFps) ProtoMessage() {}

func (x *GuideFps) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideFps.ProtoReflect.Descriptor instead.
func (*GuideFps) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{600}
}

func (x *GuideFps) GetXBarrier() int32 {
	if x != nil && x.XBarrier != nil {
		return *x.XBarrier
	}
	return 0
}

func (x *GuideFps) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

// 新手引导
type SendTroopCastle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBarrier     *int32      `protobuf:"varint,1,req,name=_Barrier,json=Barrier" json:"_Barrier,omitempty"`               // 建筑位置id
	XTroop       []*pb.Troop `protobuf:"bytes,2,rep,name=_troop,json=Troop" json:"_troop,omitempty"`                      //出兵各兵种
	XGeneralId   *int32      `protobuf:"varint,3,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`       //带兵将军ID
	XAssistantId *int32      `protobuf:"varint,4,opt,name=_assistant_id,json=AssistantId" json:"_assistant_id,omitempty"` //副将ID
}

func (x *SendTroopCastle) Reset() {
	*x = SendTroopCastle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTroopCastle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTroopCastle) ProtoMessage() {}

func (x *SendTroopCastle) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTroopCastle.ProtoReflect.Descriptor instead.
func (*SendTroopCastle) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{601}
}

func (x *SendTroopCastle) GetXBarrier() int32 {
	if x != nil && x.XBarrier != nil {
		return *x.XBarrier
	}
	return 0
}

func (x *SendTroopCastle) GetXTroop() []*pb.Troop {
	if x != nil {
		return x.XTroop
	}
	return nil
}

func (x *SendTroopCastle) GetXGeneralId() int32 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *SendTroopCastle) GetXAssistantId() int32 {
	if x != nil && x.XAssistantId != nil {
		return *x.XAssistantId
	}
	return 0
}

// 实力升级
type IntelStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` // 用户ID
}

func (x *IntelStrength) Reset() {
	*x = IntelStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntelStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntelStrength) ProtoMessage() {}

func (x *IntelStrength) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntelStrength.ProtoReflect.Descriptor instead.
func (*IntelStrength) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{602}
}

func (x *IntelStrength) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 领取奖励协议
type IntelTaskReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId       *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                     // 情报任务ID
	XConfigId *int32 `protobuf:"varint,2,req,name=_config_id,json=ConfigId" json:"_config_id,omitempty"` // 配置ID
}

func (x *IntelTaskReward) Reset() {
	*x = IntelTaskReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntelTaskReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntelTaskReward) ProtoMessage() {}

func (x *IntelTaskReward) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntelTaskReward.ProtoReflect.Descriptor instead.
func (*IntelTaskReward) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{603}
}

func (x *IntelTaskReward) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *IntelTaskReward) GetXConfigId() int32 {
	if x != nil && x.XConfigId != nil {
		return *x.XConfigId
	}
	return 0
}

// 情报刷新
type IntelTaskRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType *int32  `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"` // 刷新类型 1强制刷新所有 2刷新失效任务 3刷新单个任务,只刷新坐标(刷新单个时需传递对应的任务主键ID)
	XIds  []int32 `protobuf:"varint,2,rep,name=_ids,json=Ids" json:"_ids,omitempty"`    // 对应的任务主键ID
}

func (x *IntelTaskRefresh) Reset() {
	*x = IntelTaskRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntelTaskRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntelTaskRefresh) ProtoMessage() {}

func (x *IntelTaskRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntelTaskRefresh.ProtoReflect.Descriptor instead.
func (*IntelTaskRefresh) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{604}
}

func (x *IntelTaskRefresh) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *IntelTaskRefresh) GetXIds() []int32 {
	if x != nil {
		return x.XIds
	}
	return nil
}

// 获取迷雾格子信息
type CloudInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"` // 用户ID
}

func (x *CloudInfo) Reset() {
	*x = CloudInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_up_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInfo) ProtoMessage() {}

func (x *CloudInfo) ProtoReflect() protoreflect.Message {
	mi := &file_up_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInfo.ProtoReflect.Descriptor instead.
func (*CloudInfo) Descriptor() ([]byte, []int) {
	return file_up_proto_rawDescGZIP(), []int{605}
}

func (x *CloudInfo) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

var File_up_proto protoreflect.FileDescriptor

var file_up_proto_rawDesc = []byte{
	0x0a, 0x08, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x1a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe1, 0xad, 0x02, 0x0a, 0x06, 0x75, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x06, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x06, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52, 0x0e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a,
	0x0b, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09, 0x57, 0x65, 0x61, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x12, 0x37, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x07, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x52, 0x09, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x3f, 0x0a, 0x10, 0x5f,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0d, 0x41,
	0x73, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0d,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x0e, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x11,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x61, 0x70,
	0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x52, 0x65, 0x61, 0x70, 0x53, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12,
	0x3a, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x52,
	0x65, 0x61, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x09, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x12, 0x3a,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x52, 0x0c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x67, 0x61, 0x72, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x47,
	0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x0a, 0x42, 0x75, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x0d, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x52, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x65, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x75, 0x70, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x52, 0x0b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x54, 0x65, 0x63, 0x68,
	0x12, 0x2b, 0x0a, 0x09, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x61, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x75, 0x79, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a,
	0x0e, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x48, 0x65, 0x61,
	0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x73, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x73, 0x52, 0x11, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x72,
	0x65, 0x61, 0x70, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x52, 0x09, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x52, 0x65, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x05, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x04, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0d, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x74, 0x65, 0x63, 0x68, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x52, 0x0a,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x65, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x0d, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x12, 0x37, 0x0a, 0x0d, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52,
	0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x37, 0x0a, 0x0d,
	0x5f, 0x70, 0x65, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x65, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x50, 0x65, 0x61, 0x63, 0x65, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x42, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x10, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x0a, 0x5f, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x61, 0x63, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x65, 0x52, 0x09, 0x53, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x5f, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x61, 0x78, 0x65, 0x73, 0x52, 0x05,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x0c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x79, 0x73, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73,
	0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73,
	0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x76,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x63, 0x74, 0x68, 0x18, 0x77, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x63, 0x74, 0x68, 0x52, 0x10, 0x43,
	0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x63, 0x74, 0x68, 0x12,
	0x4e, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x09, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a,
	0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x7d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x51, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74,
	0x6c, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x12, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x42, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f,
	0x6d, 0x61, 0x72, 0x63, 0x68, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x4d, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x2c, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x52, 0x07, 0x53, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x5a,
	0x0a, 0x19, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x52,
	0x12, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x42, 0x6f, 0x78, 0x12, 0x44, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x18, 0x88, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x78,
	0x52, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x42, 0x6f,
	0x78, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x12,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x52, 0x0e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x12, 0x42, 0x75, 0x79, 0x52, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x48,
	0x65, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x90, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x10,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52,
	0x0e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12,
	0x47, 0x0a, 0x12, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x10, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x93,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x52,
	0x0f, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x0a, 0x48, 0x65, 0x61,
	0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x11, 0x5f, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x95, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x0f, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x43, 0x0a,
	0x11, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x52, 0x13, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x42, 0x75, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x10, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a,
	0x0d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x9b,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x47, 0x65, 0x74, 0x49,
	0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x75, 0x69, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x75, 0x69,
	0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x75, 0x69, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72,
	0x75, 0x69, 0x6e, 0x73, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x69, 0x6e, 0x73, 0x52, 0x09,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x75, 0x69, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x73, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0d,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x75, 0x62, 0x43, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a,
	0x0f, 0x5f, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x0d,
	0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x0b, 0x5f, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x52, 0x09, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x42, 0x75,
	0x79, 0x12, 0x2a, 0x0a, 0x08, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0xa3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x5b, 0x0a,
	0x19, 0x5f, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x16, 0x53, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x15, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x11, 0x53, 0x75, 0x62, 0x43, 0x69, 0x74, 0x79,
	0x42, 0x75, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x17, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x13, 0x53, 0x75, 0x62,
	0x43, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x5d, 0x0a, 0x1a, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0xa7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x53, 0x75, 0x62, 0x43, 0x69, 0x74, 0x79,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x48, 0x0a, 0x13, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62,
	0x75, 0x79, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x43, 0x69, 0x74,
	0x79, 0x42, 0x75, 0x79, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x61, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0e,
	0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x43, 0x69, 0x74, 0x79, 0x12, 0x5a,
	0x0a, 0x19, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x1c, 0x5f, 0x73, 0x65, 0x74, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x73, 0x74,
	0x6c, 0x65, 0x6a, 0x6f, 0x62, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c,
	0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x52, 0x1b, 0x53, 0x65, 0x74, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x6a,
	0x6f, 0x62, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0xad, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x18, 0xae, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x52, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x12, 0x40,
	0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x38, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x6f, 0x6e,
	0x79, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x6f, 0x6e, 0x79, 0x52, 0x0b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x6f, 0x6e, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x77, 0x65, 0x6c,
	0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65, 0x77, 0x65, 0x6c, 0x5f,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52, 0x0e, 0x44, 0x65, 0x77, 0x65, 0x6c,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xb3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4c, 0x6f, 0x72, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x13, 0x53, 0x65,
	0x74, 0x4b, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x47, 0x65,
	0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5f,
	0x0a, 0x1b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6d, 0x79, 0x18, 0xb6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74,
	0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6d, 0x79, 0x52, 0x16, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x4b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x41, 0x72, 0x6d, 0x79, 0x12,
	0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x77,
	0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x68,
	0x65, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c,
	0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x13, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x68, 0x65,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x77,
	0x68, 0x65, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0xbc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74,
	0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x0f, 0x53, 0x65, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x56, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x79,
	0x12, 0x56, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x76,
	0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xbd, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x13, 0x47, 0x65, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x56, 0x69, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52,
	0x0f, 0x47, 0x65, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x52, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0xc0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x10, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5f, 0x0a, 0x1b, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x52, 0x16, 0x47, 0x65, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x6f, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51,
	0x0a, 0x16, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6d, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x47,
	0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x1c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x17, 0x53, 0x65,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x6d, 0x79,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x6f, 0x6d, 0x41, 0x72, 0x6d, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52,
	0x0a, 0x16, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x13, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x0f, 0x53, 0x75, 0x62,
	0x43, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x58, 0x0a, 0x18,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52,
	0x15, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x47, 0x69, 0x66, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5b, 0x0a, 0x19, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0xce, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x52, 0x16, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x53, 0x75, 0x62,
	0x63, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x15,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x47, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x1b,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x5f,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0xd0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x52, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x57, 0x61, 0x72, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x48,
	0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73,
	0x65, 0x74, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x53, 0x65, 0x74, 0x56, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x5f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x09, 0x44, 0x65, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x16, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x57,
	0x0a, 0x18, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x14, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0xd7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0xd8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0xdb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x0e, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x47, 0x0a,
	0x12, 0x5f, 0x75, 0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x75, 0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x10, 0x55, 0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x18, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x15, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f,
	0x6d, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x12,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x68, 0x6f, 0x6c,
	0x65, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x15, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x38,
	0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x18,
	0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f,
	0x75, 0x74, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x0b, 0x4f, 0x75, 0x74,
	0x66, 0x69, 0x72, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x6f, 0x6e, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x66, 0x65, 0x18, 0xe8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x66, 0x65, 0x52, 0x0d, 0x4f, 0x6e, 0x57,
	0x61, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x66, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x61, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x61,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x13, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0xeb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x18, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x52, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0xed, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x46,
	0x0a, 0x12, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0f, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0b, 0x4b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xf3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xf5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0b, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e,
	0x67, 0x47, 0x69, 0x66, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x62, 0x0a, 0x1c, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x17, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x52, 0x12,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x73, 0x74,
	0x6c, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xfb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x6f, 0x6d, 0x18, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x6f, 0x6d, 0x52, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x52,
	0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x12, 0x38, 0x0a, 0x0d, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x18, 0xfe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f,
	0x74, 0x61, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x74, 0x61, 0x72, 0x79,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x5f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6b, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x16,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x82, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52,
	0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x72, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x52, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x74, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f,
	0x77, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x83, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x74, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x13, 0x52, 0x65, 0x70, 0x61, 0x74, 0x72, 0x69, 0x61, 0x74, 0x65, 0x57, 0x61, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x76, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x84, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x76, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x10, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x72, 0x76, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12,
	0x49, 0x0a, 0x13, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x85, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x86, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x87, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x0a,
	0x41, 0x73, 0x6b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x88, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x89,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x8a, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x52, 0x65, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x54, 0x0a, 0x17, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x18, 0x8b, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x13, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x41, 0x75, 0x74, 0x6f,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x8c, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x11, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x8d, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x52, 0x0a, 0x16, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x13, 0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x1c, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x18, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x17, 0x5f, 0x72, 0x65,
	0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x90, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x14, 0x52, 0x65, 0x64, 0x6f,
	0x6d, 0x49, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x3c, 0x0a, 0x0e, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x6b,
	0x65, 0x79, 0x18, 0x91, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x52,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c,
	0x18, 0x92, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c, 0x52, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x09, 0x5f,
	0x62, 0x75, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x93, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6e,
	0x52, 0x07, 0x42, 0x75, 0x79, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x94, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x6b, 0x69, 0x6e, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6e,
	0x12, 0x41, 0x0a, 0x10, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x18, 0x95, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x0e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x96, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x16, 0x47, 0x65, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x97, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x98,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x65,
	0x77, 0x52, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x6d,
	0x61, 0x70, 0x4e, 0x65, 0x77, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x99, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62,
	0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x1d, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x47, 0x69, 0x66, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x5f, 0x61, 0x6d, 0x62, 0x75, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x9b, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x6d, 0x62, 0x75, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x11, 0x41, 0x6d, 0x62, 0x75,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x35, 0x18, 0x9c, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x35, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x9d, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x43, 0x0a, 0x11, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x18, 0x9e, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x52, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x65, 0x61, 0x72, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x12, 0x65, 0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x9f, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x18, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x63, 0x6f, 0x73, 0x74, 0x41, 0x6e,
	0x64, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x18, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xa0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x14,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0xa1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0xa3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x0a, 0x10, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x73, 0x18, 0xa4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x73, 0x52, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x73, 0x18, 0xa5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x73, 0x52, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x73, 0x12, 0x69, 0x0a, 0x1e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0xa6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x14,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0xa8, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x75, 0x79,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x52, 0x0d, 0x42, 0x75,
	0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0xa9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x44,
	0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xaa, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0xab, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a,
	0x13, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x64,
	0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x64, 0x52, 0x0b, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x43, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x52, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x13, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x76, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70,
	0x76, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x76, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x11,
	0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x5f, 0x65, 0x67,
	0x67, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x5f, 0x65, 0x67,
	0x67, 0x52, 0x0e, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x45, 0x67,
	0x67, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0xb3,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x1c, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x3e, 0x0a, 0x0f, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x52, 0x0d, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x3d, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x69, 0x6e, 0x73,
	0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x69, 0x6e, 0x73, 0x52, 0x0b, 0x47,
	0x69, 0x76, 0x65, 0x55, 0x70, 0x52, 0x75, 0x69, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18,
	0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52,
	0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x32, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x18, 0xba,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x52, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x44, 0x0a, 0x11, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0xbd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x18, 0xbe, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x70, 0x65, 0x74, 0x52, 0x0a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65,
	0x74, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xbf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x5f,
	0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18,
	0xc1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6d,
	0x61, 0x6b, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x0d,
	0x4d, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x49, 0x0a,
	0x13, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x54,
	0x65, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0xc3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x18, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0xc4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x15, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5b,
	0x0a, 0x19, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc5, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x1a, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61,
	0x6e, 0x6b, 0x52, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x58, 0x0a, 0x18, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x15,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x18, 0xc9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x52, 0x10, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x72, 0x6d, 0x12, 0x35, 0x0a, 0x0c,
	0x5f, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0xca, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x71, 0x75, 0x69, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x51, 0x75, 0x69, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xcb, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0xcc, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x47, 0x61, 0x72, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xcd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x17, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0xce, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x77, 0x0a, 0x23, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x52, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x8b, 0x01, 0x0a, 0x2a, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xd1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x24, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0xd2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0xd3, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x44, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xd4,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x0f, 0x53, 0x65, 0x74, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x52, 0x11, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x3d,
	0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0xd6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x0c, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x15, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0xd7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x52, 0x12, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x55,
	0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x18, 0xd9, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x52, 0x0f, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x12, 0x52, 0x0a,
	0x16, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0xda, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x13, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x18, 0xdb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x18,
	0xdc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62,
	0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x0f, 0x42, 0x65, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xdd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x62,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x10, 0x52, 0x65, 0x61, 0x70,
	0x53, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4e, 0x0a, 0x15,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0xdf,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x52, 0x0c, 0x52, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x18, 0xe0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x6f, 0x0a,
	0x20, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x1c, 0x53, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x55,
	0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72,
	0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0xe2, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f,
	0x62, 0x62, 0x65, 0x72, 0x73, 0x18, 0xe3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x13,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0xe4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x62, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x65, 0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x76, 0x69, 0x70, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xe5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x70, 0x5f,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x47, 0x65, 0x74, 0x56, 0x69, 0x70, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74,
	0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x18, 0xe6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x52, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x12, 0x60, 0x0a, 0x1b,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x69,
	0x75, 0x6d, 0x70, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0xe7, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x54, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x60,
	0x0a, 0x1b, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74,
	0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe8, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x72, 0x0a, 0x21, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0xe9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x54, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xea, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x18, 0xeb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x11, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0xec, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x53,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a,
	0x15, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xed, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0xee, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x52,
	0x0c, 0x47, 0x65, 0x74, 0x48, 0x79, 0x64, 0x72, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x5b, 0x0a,
	0x19, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xef, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0xf0,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0d, 0x47,
	0x65, 0x74, 0x4b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x4c, 0x0a, 0x14,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0xf1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x17, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x13, 0x47, 0x65, 0x74,
	0x4b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x47, 0x0a, 0x12, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0xf3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0xf4, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x76,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x52, 0x65,
	0x76, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0f,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0xf5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0d, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x19,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xf6, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0xf7,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x15, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0xf8, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x4f,
	0x70, 0x65, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x46, 0x0a, 0x12, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0xf9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0xfa, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x11, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0xfb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x4b, 0x0a, 0x14,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x6b, 0x0a, 0x1f, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xfd, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x1a, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0xfe,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xff, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x17, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x80, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x14, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x81,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x61, 0x72, 0x75, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x82, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x72,
	0x75, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x61, 0x72, 0x75,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x83, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x53, 0x61,
	0x66, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x84, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x85, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66,
	0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x52, 0x12, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x18, 0x87, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x65, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x52, 0x12,
	0x42, 0x65, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x6f,
	0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x88,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x61, 0x6d, 0x6f, 0x75,
	0x73, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5d, 0x0a, 0x1a, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x89, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x16, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x61, 0x6d, 0x6f,
	0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x8a, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x56, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x8b, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x69,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x69, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x69, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x8c,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x56, 0x69,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x49,
	0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75,
	0x73, 0x63, 0x69, 0x74, 0x79, 0x18, 0x8d, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x6d,
	0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x52, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46,
	0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x10,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x8f, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x47, 0x65, 0x74, 0x56, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c,
	0x0a, 0x14, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x76, 0x69, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x11, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x56, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x14,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x14, 0x47,
	0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x93, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x66, 0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1a,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x13, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x44, 0x0a, 0x11, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x97, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x73, 0x53, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x18, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x15, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x44,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x9b, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x9c, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x75, 0x70, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x18, 0x9d, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x9e, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0e,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x9f,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0xa0, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0xa1, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xa2, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x16, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xa3, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x52, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x57, 0x65,
	0x65, 0x6b, 0x47, 0x69, 0x66, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0xa4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xa5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73,
	0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x1b, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0xa6, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x17, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xa7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x12,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x18, 0xa8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x52, 0x0f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xa9, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0xaa, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x78, 0x52, 0x07,
	0x4f, 0x70, 0x65, 0x6e, 0x42, 0x6f, 0x78, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xab, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x12,
	0x5f, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0xac, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x0f, 0x43, 0x72, 0x61, 0x7a, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x18, 0xad, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x52, 0x0e, 0x43, 0x72, 0x61, 0x7a, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x12, 0x66, 0x0a, 0x1d, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x53, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0xaf,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x16, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x11, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x18, 0xb0, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x52, 0x0e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xb1, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x72, 0x65,
	0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0xb2, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x51,
	0x0a, 0x16, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x70, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0xb4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x70, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xb5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xb7, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52,
	0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xb9, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x16, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x58, 0x0a,
	0x18, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xba, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x18, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0xbb, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x15, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x5e, 0x0a, 0x1a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0xbc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x69, 0x0a, 0x1e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x18, 0xbd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x52, 0x1a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x75, 0x66, 0x66, 0x12, 0x60, 0x0a, 0x1b,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xbe, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x66,
	0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18,
	0xbf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0xc0, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x15, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x7c, 0x0a, 0x25, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0xc1, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x1f, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38,
	0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0xc2, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x5f, 0x71, 0x75, 0x69,
	0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0xc3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x14, 0x51, 0x75, 0x69, 0x74, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x74, 0x0a, 0x22, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x1b, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0xc5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x16,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xc6, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x72, 0x0a, 0x21, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xc7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0xc8, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc9,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x47, 0x65, 0x74,
	0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x1b, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0xca, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6b, 0x69,
	0x6e, 0x52, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x12, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0xcb, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x77, 0x41, 0x64, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x6c, 0x0a, 0x1f, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0xcd, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x1b, 0x4e, 0x65, 0x77, 0x52,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xce, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x52,
	0x0a, 0x16, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x19, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18,
	0xd0, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x40, 0x0a,
	0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0xd1, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x12,
	0x54, 0x0a, 0x17, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xd2, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x61,
	0x72, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xd3, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x10, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x10, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a,
	0x0d, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x18, 0xd5,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x52, 0x0b, 0x47, 0x68, 0x6f, 0x73,
	0x74, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x18,
	0xd6, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x6f, 0x6f,
	0x70, 0x73, 0x52, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x54,
	0x72, 0x6f, 0x6f, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0xd7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x66, 0x66, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x52, 0x12, 0x53, 0x65, 0x74, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x66, 0x66, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x5d, 0x0a, 0x1a, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0xd8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x16, 0x53, 0x65, 0x74, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x77, 0x65, 0x61, 0x72,
	0x5f, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0xd9, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x0a, 0x57, 0x65, 0x61, 0x72, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x48,
	0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xda, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0xdb, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x11, 0x47, 0x65, 0x74, 0x46, 0x61, 0x6d, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0xdc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x14, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xdd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x18, 0xde, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x13,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xdf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x67, 0x0a, 0x1e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x52, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x18, 0xe1, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x52, 0x14, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xe2,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xe3, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a,
	0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xe4, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x72,
	0x62, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x72, 0x62, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x79,
	0x6f, 0x75, 0x6e, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0xe5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x79, 0x6f, 0x75, 0x6e, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x47, 0x65, 0x74, 0x59, 0x6f, 0x75, 0x6e, 0x69, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1c, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xe6, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x40,
	0x0a, 0x10, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0xe7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x52, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x44, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x18, 0xe8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x46, 0x72, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xe9, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0xea, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x2c, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0xeb, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x69, 0x73,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x44, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c,
	0x0a, 0x09, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0xec, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x52, 0x07, 0x53, 0x75, 0x62, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a, 0x10,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0xed, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4e,
	0x0a, 0x15, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62,
	0x61, 0x67, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0xee, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x11, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x61, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x45,
	0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x67, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0xef, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x67,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x61,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x76, 0x0a, 0x23, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0xf0, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1d,
	0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x55, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x57, 0x0a,
	0x18, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x18, 0xf1, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x75, 0x79, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x52, 0x14, 0x42, 0x75, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x18, 0xf2, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x52, 0x1b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xf3, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x6b,
	0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x73, 0x6b, 0x52, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0xf6, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x64,
	0x18, 0xf7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x73, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x65, 0x61,
	0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf9, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x62,
	0x61, 0x67, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f,
	0x62, 0x61, 0x67, 0x18, 0xfb, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x52, 0x12, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x0c, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0xfc, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x19, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x11, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x0e, 0x50, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x1a, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x18, 0xff, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x17, 0x53, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x61, 0x0a, 0x1b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70,
	0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x80, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x18, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x73, 0x18, 0x81, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x52, 0x17,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x82, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x38,
	0x0a, 0x0d, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x83, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0b, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x35, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x84, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x36, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x85, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x86, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x6b, 0x12, 0x63, 0x0a, 0x1c, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f,
	0x62, 0x61, 0x67, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x87, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12,
	0x63, 0x0a, 0x1c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x18,
	0x88, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x52, 0x18, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x61, 0x67, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x66,
	0x65, 0x18, 0x89, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x66, 0x65, 0x52, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x66, 0x65,
	0x12, 0x57, 0x0a, 0x18, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x8a, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x65, 0x74, 0x5f,
	0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x14, 0x50, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x70, 0x65,
	0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x18, 0x8b, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x52, 0x15,
	0x50, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x8c, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x49, 0x6e,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x8d, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x65, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x50, 0x65, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0c, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x18, 0x8e, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x52, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x8f, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x6e, 0x52, 0x0e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x11, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x90, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0b, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x18, 0x91, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x66, 0x75, 0x73, 0x65, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x46, 0x75, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x0b, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x18,
	0x93, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x52, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x65, 0x63, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x68,
	0x65, 0x72, 0x6f, 0x18, 0x94, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x70, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x52, 0x0b, 0x50, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x2f, 0x0a,
	0x0a, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x95, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x65, 0x74, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x52, 0x08, 0x50, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x18, 0x96, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x52, 0x05, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x97, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x11, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72,
	0x67, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x98, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x10, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x3b, 0x0a,
	0x0e, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x99, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x77,
	0x65, 0x61, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x57, 0x65,
	0x61, 0x72, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x9a, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x65, 0x61, 0x72,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x75, 0x73,
	0x65, 0x18, 0x9b, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x66, 0x75, 0x73, 0x65, 0x52, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x75, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x9c, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x10, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x9d,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0c,
	0x5f, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x9e, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x74, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x52, 0x0a, 0x54, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x44,
	0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x14, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x9f, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x11,
	0x48, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0xa0, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0xa1, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0d, 0x55, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xa3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0xa4,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xa5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x18, 0xa7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x52, 0x10, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x73, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0xa9, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x70, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x46, 0x70, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x0a,
	0x5f, 0x66, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xaa, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x70, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x08, 0x46, 0x70, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a,
	0x08, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0xab, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x70, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x52, 0x06, 0x46, 0x70, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xac, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6c, 0x6c,
	0x79, 0x18, 0xad, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x09, 0x41, 0x75, 0x74,
	0x6f, 0x52, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0xae, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0xaf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x52, 0x09, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x40, 0x0a, 0x10,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49,
	0x0a, 0x13, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xb1, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb2, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x53, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x62, 0x6f, 0x78, 0x18, 0xb4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x62, 0x6f, 0x78,
	0x52, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x12, 0x4c, 0x0a,
	0x14, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xb5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x1d, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb6, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x18, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6d, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0xb7, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x52,
	0x0a, 0x47, 0x65, 0x74, 0x47, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0d, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0xb8, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x0a, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66,
	0x70, 0x73, 0x18, 0xb9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x70, 0x73, 0x52, 0x08, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x46, 0x70, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x18, 0xba, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x52, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x0f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0xbb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x46, 0x0a,
	0x12, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0xbc, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0xbd, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x10,
	0x49, 0x6e, 0x74, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x12, 0x62, 0x0a, 0x1c, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0xbe, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x17, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xbf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc0, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0xc1, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x18, 0xc2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x68,
	0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc3, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x48, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0xc4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53,
	0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0xc5, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0xc7, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x61, 0x6c,
	0x65, 0x12, 0x43, 0x0a, 0x11, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xc8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x61, 0x6c,
	0x65, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xc9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0xca, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x18, 0xcb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0xcc, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xcd, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0xce, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xcf, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x53, 0x65, 0x6e, 0x64,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x11,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xd0, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xd1, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x47, 0x65, 0x74, 0x50, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x14, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x74, 0x0a, 0x1c, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x28, 0x0a, 0x0c, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x11,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x11, 0x0a,
	0x04, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x53, 0x6b, 0x75,
	0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x4e, 0x75, 0x6d, 0x22, 0x23, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x03, 0x53, 0x6b, 0x75, 0x22, 0x34, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x4c,
	0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x61,
	0x69, 0x6e, 0x12, 0x38, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x61, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x12, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x68, 0x6f,
	0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x6f, 0x74,
	0x53, 0x6b, 0x75, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6b, 0x75, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x79,
	0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x73,
	0x6b, 0x75, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x67, 0x65,
	0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x30, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x44, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x10, 0x63, 0x72, 0x61, 0x7a,
	0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x28, 0x0a, 0x11, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x27, 0x0a, 0x10,
	0x67, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x6f,
	0x78, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x07, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05,
	0x53, 0x75, 0x62, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x27,
	0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x56, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d,
	0x57, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4f, 0x6c, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22,
	0x34, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x59, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x72, 0x65,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4f, 0x6c, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x66, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x18, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x52, 0x05, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x17, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x77, 0x65, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x42, 0x61, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x57, 0x65, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x57, 0x65, 0x61, 0x72, 0x22, 0x9f, 0x02,
	0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f,
	0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x11, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x5f,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x58, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x4f, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x22, 0x6e, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x10, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x46, 0x61,
	0x6d, 0x6f, 0x75, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x28, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0x35, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x10, 0x03, 0x22, 0xba, 0x02, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x06, 0x5f, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x4d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x55, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x25, 0x0a, 0x05, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x22, 0x74, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xe1, 0x01,
	0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x10,
	0x01, 0x22, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2a, 0x0a, 0x0e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73,
	0x41, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65,
	0x73, 0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x44,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x65, 0x77,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72,
	0x65, 0x73, 0x41, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04,
	0x52, 0x65, 0x73, 0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65,
	0x73, 0x44, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47,
	0x6f, 0x6c, 0x64, 0x22, 0x33, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x10, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a,
	0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e,
	0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x02, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x41, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x42, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x72, 0x65, 0x73, 0x43, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x43,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x44, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x09,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72,
	0x65, 0x73, 0x45, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x45, 0x22,
	0x84, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x11, 0x0a,
	0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x75, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x0c,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x26, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x25, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x14,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x15,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x4e, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x26, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x74, 0x61, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x49,
	0x64, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4d, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0e, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x61, 0x69,
	0x6c, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x11, 0x0a,
	0x04, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x49, 0x64, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x52, 0x65, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0c,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x52, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x0a,
	0x0b, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x02,
	0x0a, 0x12, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x04,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x75, 0x62,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x72, 0x65, 0x73, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x42,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x43, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x45, 0x10, 0x05,
	0x22, 0x30, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x9f, 0x09, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x6f, 0x6f,
	0x70, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54,
	0x72, 0x6f, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x77, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x57, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x10, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x53, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x6c, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x5f,
	0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x02, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x06, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x66,
	0x65, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6c, 0x69, 0x66, 0x65, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a,
	0x13, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x78, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x70, 0x63, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x57, 0x78, 0x12, 0x2c, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6e, 0x70, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x79, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x70, 0x63, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77, 0x65,
	0x61, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x0d, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77,
	0x65, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x72,
	0x5f, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x0a, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x74, 0x72,
	0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x72,
	0x6f, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x72, 0x6f, 0x6f, 0x70,
	0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61,
	0x73, 0x74, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x47, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x05, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x09, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x07, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x78, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x78, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0f,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x6e, 0x69, 0x71,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x70, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x78,
	0x12, 0x2c, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x70, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x79, 0x22, 0x42,
	0x0a, 0x0b, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x41,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73,
	0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x44, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x45, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x04, 0x52, 0x65, 0x73, 0x45, 0x22, 0x54, 0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x67, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x47, 0x65, 0x6d, 0x22, 0x24, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2e, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x32, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x53,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x65, 0x76, 0x6f, 0x6e, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x6f, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x5f,
	0x69, 0x63, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x49, 0x63,
	0x70, 0x22, 0x68, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x57, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb0, 0x01, 0x0a, 0x12,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x57,
	0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02,
	0x57, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x22, 0x99,
	0x01, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6e, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x4d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x53, 0x75, 0x62, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x72, 0x0a, 0x1b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xc1,
	0x02, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x31, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x77, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x65, 0x66,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x75,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x75, 0x79, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x4e, 0x65,
	0x77, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xb3, 0x02, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x74, 0x65, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x74,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x08, 0x62,
	0x75, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x69, 0x74, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x68,
	0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x06,
	0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x41, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65,
	0x73, 0x42, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x42, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52,
	0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x44, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x72, 0x65, 0x73, 0x45, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x45,
	0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x48, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x12, 0x61, 0x6d, 0x62, 0x75, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f,
	0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x28, 0x0a, 0x10, 0x5f, 0x61, 0x6d, 0x62, 0x75, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x41, 0x6d, 0x62,
	0x75, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x11, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72,
	0x6f, 0x6f, 0x70, 0x22, 0x34, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f,
	0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a,
	0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x07, 0x55, 0x73, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x22, 0x7f, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f,
	0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x05, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x55, 0x73, 0x65, 0x47, 0x6f, 0x6c,
	0x64, 0x22, 0x33, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72,
	0x65, 0x73, 0x41, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04,
	0x52, 0x65, 0x73, 0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65,
	0x73, 0x44, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x45, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52,
	0x65, 0x73, 0x45, 0x22, 0x4a, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x8e, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x0c,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x39, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x70,
	0x65, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x61, 0x69,
	0x6c, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6c,
	0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0x3a, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x72, 0x0a,
	0x09, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x11,
	0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75,
	0x6d, 0x22, 0x90, 0x02, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x04, 0x72, 0x65, 0x73, 0x41, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0d,
	0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1b, 0x0a,
	0x08, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x4e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x61,
	0x69, 0x6c, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x67, 0x65,
	0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x63, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x13,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65,
	0x63, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x63, 0x74, 0x68, 0x52, 0x10, 0x43, 0x68, 0x61, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x63, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x12, 0x23, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x6c, 0x70,
	0x49, 0x64, 0x22, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77,
	0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x79, 0x12, 0x2f, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x2e, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x79, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x61, 0x74, 0x72, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x72, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x54,
	0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x63,
	0x61, 0x73, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4b, 0x69, 0x6e,
	0x67, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61,
	0x72, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x08, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x5f,
	0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x22, 0x67,
	0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72,
	0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x07,
	0x5f, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x57,
	0x61, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70,
	0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x22, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x07, 0x5f,
	0x77, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x57, 0x61,
	0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x57, 0x61, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a,
	0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x75,
	0x69, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x75, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x6f, 0x73, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x67, 0x65, 0x74, 0x75, 0x69, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x63, 0x70,
	0x10, 0x04, 0x22, 0x47, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x25,
	0x0a, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x52, 0x07, 0x44,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x07, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x05,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x04,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x12, 0x3a, 0x0a, 0x0c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x52, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x52, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x5f, 0x6b,
	0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x4b, 0x69,
	0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x52, 0x09, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x67,
	0x61, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x67, 0x61,
	0x6e, 0x52, 0x09, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x08,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6c, 0x61, 0x6e, 0x52, 0x06, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x12, 0x3a, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x68,
	0x65, 0x6c, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x52, 0x09, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x52, 0x07, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x6c, 0x70, 0x12, 0x37, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x38, 0x0a,
	0x0a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x72, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x72, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x6d, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x52,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x12,
	0x3c, 0x0a, 0x0f, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x52,
	0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x12, 0x42, 0x0a,
	0x11, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61,
	0x72, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x61, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61,
	0x72, 0x52, 0x0c, 0x51, 0x75, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x12,
	0x3c, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x48, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x74, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x72, 0x6d, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x72, 0x65, 0x70, 0x61, 0x74, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6d,
	0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x61, 0x74,
	0x72, 0x69, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x5f, 0x6d, 0x79,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x07, 0x4d, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x10,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x14, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x09,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x5f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x52, 0x0a, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x65, 0x63, 0x68, 0x12,
	0x34, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x52, 0x08, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x75, 0x79, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x10, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x48, 0x0a, 0x13, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0e, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x52, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x67, 0x65, 0x74, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x10, 0x47, 0x65,
	0x74, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x59,
	0x0a, 0x19, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x56, 0x0a, 0x18, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x52, 0x14, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x47, 0x0a, 0x15, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x54, 0x0a, 0x1c, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x18, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72,
	0x12, 0x4a, 0x0a, 0x14, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63,
	0x68, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x64, 0x52, 0x10, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x64, 0x12, 0x45, 0x0a, 0x12,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x52, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x53, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61,
	0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6d,
	0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6d,
	0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0f, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x11,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x12, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x52, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a,
	0x16, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x12, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x3c, 0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0f, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x0c, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x13, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x52, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x78, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x12, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x0f, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x65, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x13, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x62, 0x6f, 0x78, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x78, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69,
	0x74, 0x79, 0x12, 0x53, 0x0a, 0x17, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78,
	0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x13, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x78, 0x41, 0x6e, 0x6f, 0x6e,
	0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x5c, 0x0a, 0x1a, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x63, 0x68, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x19, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x65, 0x63, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x5c, 0x0a, 0x1a, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65,
	0x63, 0x68, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x56, 0x0a, 0x18, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x14, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x65, 0x63, 0x68, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x59, 0x0a, 0x19, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x59, 0x0a, 0x19, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x2b, 0x0a,
	0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0c, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x5f, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x4c, 0x61, 0x6e, 0x22, 0x24, 0x0a, 0x0d, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0x61, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x4e, 0x65, 0x77,
	0x56, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x22, 0x28, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x12, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03,
	0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x18, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04,
	0x55, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04,
	0x55, 0x69, 0x64, 0x73, 0x22, 0x22, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x1f, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x10, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a,
	0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2b, 0x0a, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6c,
	0x6f, 0x67, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x22, 0x32, 0x0a,
	0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x77, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x77, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x79, 0x12, 0x24, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x64,
	0x22, 0x31, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61,
	0x6e, 0x12, 0x20, 0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x4c, 0x61, 0x6e, 0x22, 0x24, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6d, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0x28, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2a, 0x0a, 0x13, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x76, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x27,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x13,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x11, 0x0a, 0x04, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x22, 0x42, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06,
	0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x19, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2a,
	0x0a, 0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x30, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x4c, 0x61, 0x6e, 0x22,
	0x28, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x5e, 0x0a, 0x11, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x5f, 0x63, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x43, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x44, 0x0a, 0x0f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x2f, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x63, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x44, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x05, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x22, 0x2b, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6d,
	0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x74,
	0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x22, 0x2f, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a,
	0x19, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x18, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x22, 0x2e, 0x0a, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x22, 0x2f, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x22, 0x39, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0e,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0e, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x53, 0x0a,
	0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x67, 0x22, 0x28, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a,
	0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x07, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x47, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x28, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2b, 0x0a, 0x14,
	0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x62, 0x6f, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x27, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x04, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x68,
	0x6f, 0x77, 0x68, 0x61, 0x6e, 0x64, 0x22, 0x5c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x14, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x22, 0x47, 0x0a, 0x10, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x49, 0x0a, 0x0e, 0x74, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x0a, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x08, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x50, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x11, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x18, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x9d,
	0x02, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x11, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x54, 0x65, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x15, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x54,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x43, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54,
	0x72, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f,
	0x74, 0x65, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x65, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x6f, 0x72,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x11, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x6f, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x5f, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x46, 0x6f, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a,
	0x15, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x57, 0x79, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05,
	0x54, 0x72, 0x6f, 0x6f, 0x70, 0x22, 0x2a, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0x2c, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x9d, 0x01, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x69, 0x73, 0x55, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73,
	0x55, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x47, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x47, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x23, 0x0a, 0x0c, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x25, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x75, 0x69, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x26, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72,
	0x75, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x2b,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x20,
	0x73, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x62,
	0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0f, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xef, 0x06, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3f, 0x0a,
	0x0d, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x52, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x12, 0x37,
	0x0a, 0x0d, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x52, 0x0b, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x06, 0x52, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x52, 0x0d, 0x52, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x10, 0x5f, 0x72, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x52, 0x0e, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x52, 0x07, 0x42,
	0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69,
	0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x0e, 0x42, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x12, 0x3c, 0x0a, 0x0c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x0a, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x44,
	0x0a, 0x0f, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x76,
	0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x76, 0x32, 0x52, 0x0c, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x56, 0x32, 0x12, 0x53, 0x0a, 0x14, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x11, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x48, 0x0a, 0x10, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x45, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x45, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0x43, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x45, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x45, 0x22, 0x46,
	0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22,
	0x39, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x7d,
	0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x84, 0x01,
	0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x22, 0x51, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x76,
	0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x9e,
	0x01, 0x0a, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1e,
	0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0d, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x65, 0x77, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x22,
	0x7e, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x8f, 0x01, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x3a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x49, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x16,
	0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0xd4, 0x03, 0x0a, 0x19, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4e,
	0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2c, 0x0a, 0x0a, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x75, 0x70, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x4c, 0x65, 0x66, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0x7e, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x22, 0x0a, 0x10, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x3f, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x6f, 0x6e, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x5f, 0x65, 0x76, 0x6f, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45,
	0x76, 0x6f, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x72, 0x64, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c,
	0x6f, 0x72, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x10,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x25, 0x0a,
	0x0e, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x1f, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x68, 0x65,
	0x65, 0x6c, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x03, 0x42, 0x65, 0x74, 0x22, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x12, 0x73, 0x65, 0x74,
	0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x56,
	0x69, 0x70, 0x22, 0x2e, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f,
	0x76, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0x28, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x1f, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6c,
	0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x6f, 0x67, 0x22, 0x56, 0x0a,
	0x12, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x54, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x75,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x47, 0x65, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x1e, 0x6e,
	0x65, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6d,
	0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x0a,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x0a, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49,
	0x73, 0x43, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x6f, 0x72, 0x22, 0x5b, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x12, 0x24, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x0a, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6a, 0x6f,
	0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x72,
	0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x14, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x90, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x57,
	0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x18, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x3f, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x69,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x04,
	0x5f, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x69, 0x70, 0x12,
	0x16, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x31, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x65, 0x0a, 0x1c, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x6c, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x61, 0x6c, 0x6c, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x41, 0x6c, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x4d,
	0x0a, 0x1c, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x13, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x22, 0x5e, 0x0a,
	0x18, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x75, 0x62, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x22, 0x58, 0x0a,
	0x14, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x57, 0x61, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x11,
	0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x1f, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03,
	0x55, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x11,
	0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69,
	0x64, 0x22, 0x27, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x16, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x11, 0x72, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55,
	0x69, 0x64, 0x22, 0x60, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x75, 0x6d, 0x22, 0x24, 0x0a, 0x0f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x11, 0x75, 0x6e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55,
	0x69, 0x64, 0x22, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x3f, 0x0a, 0x17, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x18, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x68, 0x6f, 0x6c,
	0x65, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x5f, 0x0a, 0x19, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x15, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x68,
	0x6f, 0x6c, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x22, 0x40, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x75, 0x62, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x73,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a,
	0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x01, 0x22, 0x4f, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b,
	0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x18, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x67, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0d, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x47,
	0x69, 0x66, 0x74, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x0d, 0x67,
	0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0x27, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x52, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x74,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x12, 0x2c, 0x0a, 0x0a,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x34, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x19, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x77,
	0x61, 0x6c, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x30, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x1a, 0x0a,
	0x09, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x47, 0x69, 0x66, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x67, 0x0a, 0x15, 0x72, 0x65, 0x70,
	0x61, 0x74, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x57, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54,
	0x72, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0x27, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x76, 0x65, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x12,
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x06, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x2e, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0x4a, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x02, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x58, 0x12, 0x0d,
	0x0a, 0x02, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x59, 0x22, 0x29, 0x0a,
	0x16, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x16, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x12, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x30,
	0x0a, 0x1d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x2d, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x2e, 0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x43, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x41,
	0x75, 0x74, 0x6f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x15, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x64,
	0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0x50, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x62,
	0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x57, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x10, 0x01, 0x22, 0x26, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x33, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x4a, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x6b,
	0x22, 0x3f, 0x0a, 0x15, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x45, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x12, 0x31, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09, 0x57,
	0x65, 0x61, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x22, 0x6b, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x5f, 0x77, 0x65,
	0x61, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x57, 0x65, 0x61, 0x72, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x22, 0x33, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2e, 0x0a, 0x17, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x26, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0x55, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x73, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x73, 0x2e, 0x6f, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x07,
	0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x67, 0x65, 0x6d,
	0x10, 0x01, 0x22, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x45, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x33, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x2c, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x77, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x4c,
	0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x22, 0x79, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x6b,
	0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x53, 0x75, 0x62, 0x63, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x22, 0x43, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x22, 0x4e, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x22, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x47, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x10, 0x68, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x2d, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x73, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x0d, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x5f,
	0x72, 0x75, 0x69, 0x6e, 0x73, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x4e,
	0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x22, 0x4e, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x41, 0x72, 0x74, 0x48, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x48, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x0d, 0x6d,
	0x61, 0x6b, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b,
	0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x75, 0x70, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x22, 0x6f, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x17, 0x73, 0x65,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x6d, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x5f, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22,
	0x3d, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x70,
	0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x6f, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c,
	0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x5b, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29,
	0x0a, 0x0b, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x09, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x14, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x78, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x58, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x79, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x59, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x58, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x59,
	0x22, 0x46, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x29, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x42, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x15, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x66, 0x66, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x4b, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x69,
	0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x22,
	0x25, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x32, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x15, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x22, 0x48, 0x0a, 0x11, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x2d, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x61,
	0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x74, 0x0a, 0x11, 0x62, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x49, 0x0a, 0x14, 0x62, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x29, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x30, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x33, 0x0a,
	0x17, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x16, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72,
	0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x55, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x62, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x29, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x53, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1a, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70,
	0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x54, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xd7, 0x01, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0b, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0a,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x1b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x13, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x12, 0x17, 0x0a, 0x07, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x69,
	0x64, 0x22, 0x2b, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x25,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2a, 0x0a,
	0x13, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x28, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x6a, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x65, 0x6d, 0x22,
	0x4b, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x17,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x66, 0x0a,
	0x1b, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0x28, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2d, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x43, 0x0a, 0x13, 0x67, 0x65,
	0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x03, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3a, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x12, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x61,
	0x72, 0x75, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x32, 0x0a,
	0x16, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x2a, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x3c, 0x0a,
	0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x7f, 0x0a, 0x09, 0x73,
	0x61, 0x66, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x11, 0x53, 0x61, 0x66, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x32, 0x22, 0x52, 0x0a, 0x0d,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x54, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x2c, 0x0a, 0x0a, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xca, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x6c, 0x75, 0x63, 0x6b, 0x79,
	0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73,
	0x45, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x52, 0x65, 0x73, 0x45, 0x22, 0x30, 0x0a,
	0x19, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75,
	0x73, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x2f, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x3b, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x32, 0x0a,
	0x12, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x2c, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76,
	0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2a, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x76, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x5e, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6f,
	0x66, 0x66, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x41,
	0x72, 0x65, 0x61, 0x22, 0x33, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2e, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x27, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x30, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x39, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x10, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x04, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x55, 0x69, 0x64, 0x22, 0x26,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x43, 0x0a,
	0x15, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x7b, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65,
	0x72, 0x73, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x10, 0x05, 0x22,
	0x2b, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x66, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2e, 0x0a, 0x15,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x14,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x13, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x1a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x53, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x42, 0x75, 0x79, 0x22, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6e, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x2b, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x50, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x45, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x17, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x61, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x7c, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x44, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x1d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x42, 0x75, 0x66,
	0x66, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x16, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x38,
	0x0a, 0x21, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x3d, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0xa9, 0x01, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x65, 0x6d, 0x22, 0x43, 0x0a, 0x18, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x2f, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x2a, 0x0a, 0x13, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x51, 0x0a, 0x0c, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f,
	0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47,
	0x68, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x36, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x65,
	0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x14,
	0x67, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x66,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x66,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x5f, 0x66,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x46, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x12, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x5f, 0x66,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x46, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x1d, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x12, 0x0d,
	0x0a, 0x02, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x58, 0x12, 0x0d, 0x0a,
	0x02, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x59, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x22, 0x2e, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x76, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x22, 0x43, 0x0a,
	0x17, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x2c, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x79, 0x6f, 0x75, 0x6e, 0x69, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x32, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x67, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x47, 0x65, 0x61, 0x72, 0x22, 0x2e, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x6f,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x72, 0x6f,
	0x6f, 0x70, 0x49, 0x64, 0x22, 0xad, 0x05, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x07, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e,
	0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x52, 0x07, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52,
	0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x0a,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x07, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x2b, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x05, 0x52, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x3c,
	0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a,
	0x5f, 0x72, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x08, 0x52, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x1f, 0x0a, 0x0c, 0x66,
	0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x10,
	0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x22, 0x22, 0x0a, 0x0f, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x14, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x27,
	0x0a, 0x14, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x13, 0x66, 0x6d, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x3b, 0x0a, 0x0e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x16,
	0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0d, 0x66, 0x6d, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x66, 0x6d, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x11, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x08, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x64, 0x22,
	0x24, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x5a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x49,
	0x64, 0x22, 0x66, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x62, 0x75, 0x79,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x1e, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67,
	0x55, 0x70, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x14, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x26, 0x0a,
	0x0f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6f, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x57, 0x6f, 0x6f,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x69, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x04, 0x49, 0x72, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x22, 0x2b, 0x0a,
	0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x45, 0x0a, 0x14, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x38, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67,
	0x12, 0x1b, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x11, 0x0a,
	0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73,
	0x41, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65,
	0x73, 0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x44,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x72, 0x65, 0x73, 0x45, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73,
	0x45, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x2b, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75,
	0x70, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47,
	0x6f, 0x6c, 0x64, 0x22, 0x27, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x18,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x22, 0x33, 0x0a, 0x17, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x18, 0x70, 0x65, 0x74,
	0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x67, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x47,
	0x65, 0x6d, 0x22, 0x25, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x19, 0x73, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72,
	0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e,
	0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x1a, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f,
	0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74,
	0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64,
	0x22, 0xce, 0x01, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f,
	0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54,
	0x72, 0x6f, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x75, 0x70, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70,
	0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0xc0, 0x01, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x06,
	0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x27, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x43, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x10, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x5f, 0x62, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x6c, 0x69, 0x66, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x6f,
	0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x66,
	0x65, 0x41, 0x70, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x70, 0x65,
	0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x29, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x36, 0x0a, 0x12, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x29, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x52, 0x07, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x10,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x09, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x56, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73,
	0x12, 0x22, 0x0a, 0x05, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x24, 0x0a, 0x11, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x74, 0x65,
	0x63, 0x68, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x0d, 0x70, 0x65,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x12, 0x16, 0x0a, 0x07, 0x5f,
	0x70, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x09, 0x70, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x70,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a,
	0x05, 0x76, 0x69, 0x73, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x0f, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7a, 0x0a, 0x11, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x6f, 0x72, 0x64, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x65, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x37, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x74, 0x61,
	0x76, 0x65, 0x72, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x44, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09,
	0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x31, 0x52, 0x07, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x40, 0x0a, 0x13, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x47, 0x69, 0x66, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x78, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x79, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0f, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x52,
	0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x25, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x62, 0x61, 0x67, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xbb, 0x01, 0x0a, 0x11, 0x66, 0x70, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x57,
	0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x57, 0x79, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49,
	0x0a, 0x09, 0x66, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x77, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x77, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x57, 0x79, 0x12, 0x1a, 0x0a,
	0x09, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x46, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x07, 0x66, 0x70, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x02, 0x57, 0x79, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x70, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x75, 0x6d, 0x22, 0xf1, 0x01, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x61, 0x6c, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x6f, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x52, 0x0d, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x61, 0x6c, 0x6c, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2a, 0x0a, 0x0f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x59, 0x0a, 0x0f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0c, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x61, 0x74, 0x72, 0x74, 0x22, 0x71, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x5f,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0a, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x2e, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x27, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x76, 0x69, 0x70, 0x10,
	0x01, 0x22, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x32, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x70, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x6f, 0x6f,
	0x70, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x42, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x52,
	0x05, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x26, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x14, 0x5a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x62, 0x2f, 0x75, 0x70,
}

var (
	file_up_proto_rawDescOnce sync.Once
	file_up_proto_rawDescData = file_up_proto_rawDesc
)

func file_up_proto_rawDescGZIP() []byte {
	file_up_proto_rawDescOnce.Do(func() {
		file_up_proto_rawDescData = protoimpl.X.CompressGZIP(file_up_proto_rawDescData)
	})
	return file_up_proto_rawDescData
}

var file_up_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_up_proto_msgTypes = make([]protoimpl.MessageInfo, 606)
var file_up_proto_goTypes = []interface{}{
	(SetNameSetType)(0),                          // 0: MsgUp.set_name.set_type
	(AskDailyLoginStatus)(0),                     // 1: MsgUp.ask_daily_login.status
	(TeleportTeleportMode)(0),                    // 2: MsgUp.teleport.teleport_mode
	(ReapResourceDataType)(0),                    // 3: MsgUp.reap_resource_data.type
	(PushTokenType)(0),                           // 4: MsgUp.push_token.type
	(CollectPatrolAwardCollectPatrolType)(0),     // 5: MsgUp.collect_patrol_award.collect_patrol_type
	(SelectSkinTeleportMode)(0),                  // 6: MsgUp.select_skin.teleport_mode
	(SaveUserPrefsOpType)(0),                     // 7: MsgUp.save_user_prefs.op_type
	(GetUserDataType)(0),                         // 8: MsgUp.get_user_data.type
	(GetSmallBattlefieldInviteType)(0),           // 9: MsgUp.get_small_battlefield_invite.type
	(AskEquipInfoSceneType)(0),                   // 10: MsgUp.ask_equip_info.scene_type
	(OpenGiftBoxSceneType)(0),                    // 11: MsgUp.open_gift_box.scene_type
	(*UpMsg)(nil),                                // 12: MsgUp.up_msg
	(*RewardMonthLogin)(nil),                     // 13: MsgUp.reward_month_login
	(*AutoPickupSetting)(nil),                    // 14: MsgUp.auto_pickup_setting
	(*SaveNewUserGuideProgress)(nil),             // 15: MsgUp.save_new_user_guide_progress
	(*GetGmeAuth)(nil),                           // 16: MsgUp.get_gme_auth
	(*GetCosAuth)(nil),                           // 17: MsgUp.get_cos_auth
	(*GetSearchList)(nil),                        // 18: MsgUp.get_search_list
	(*SetSearchRecord)(nil),                      // 19: MsgUp.set_search_record
	(*GoodsPurchase)(nil),                        // 20: MsgUp.goods_purchase
	(*GoodsNotSale)(nil),                         // 21: MsgUp.goods_not_sale
	(*SelectedGoodsSaleInfo)(nil),                // 22: MsgUp.selected_goods_sale_info
	(*GoodsSaleAgain)(nil),                       // 23: MsgUp.goods_sale_again
	(*GoodsSale)(nil),                            // 24: MsgUp.goods_sale
	(*GetGoodsList)(nil),                         // 25: MsgUp.get_goods_list
	(*GetGoodsFavoriteList)(nil),                 // 26: MsgUp.get_goods_favorite_list
	(*GoodsFavorite)(nil),                        // 27: MsgUp.goods_favorite
	(*GetGoodsHotList)(nil),                      // 28: MsgUp.get_goods_hot_list
	(*GetGoodsSellList)(nil),                     // 29: MsgUp.get_goods_sell_list
	(*GetGoodsDealList)(nil),                     // 30: MsgUp.get_goods_deal_list
	(*GetGoodsBlockingList)(nil),                 // 31: MsgUp.get_goods_blocking_list
	(*GetServerInfoList)(nil),                    // 32: MsgUp.get_server_info_list
	(*GetMoreSocialMediaReward)(nil),             // 33: MsgUp.get_more_social_media_reward
	(*CrazyMarketBuy)(nil),                       // 34: MsgUp.crazy_market_buy
	(*CrazyMarketList)(nil),                      // 35: MsgUp.crazy_market_list
	(*GetFreePackage)(nil),                       // 36: MsgUp.get_free_package
	(*OpenBox)(nil),                              // 37: MsgUp.open_box
	(*ClaimInviteGift)(nil),                      // 38: MsgUp.claim_invite_gift
	(*ShareReward)(nil),                          // 39: MsgUp.share_reward
	(*ClaimShareGift)(nil),                       // 40: MsgUp.claim_share_gift
	(*ListInviteGift)(nil),                       // 41: MsgUp.list_invite_gift
	(*HealWall)(nil),                             // 42: MsgUp.heal_wall
	(*CancelHealWall)(nil),                       // 43: MsgUp.cancel_heal_wall
	(*OutfireWall)(nil),                          // 44: MsgUp.outfire_wall
	(*OnWallOutlife)(nil),                        // 45: MsgUp.on_wall_outlife
	(*EquipSynthesis)(nil),                       // 46: MsgUp.equip_synthesis
	(*QuickSynthesisMaterial)(nil),               // 47: MsgUp.quick_synthesis_material
	(*SynthesisMaterialCell)(nil),                // 48: MsgUp.synthesis_material_cell
	(*SpeedupEquipSynthesis)(nil),                // 49: MsgUp.speedup_equip_synthesis
	(*DewelSynthesis)(nil),                       // 50: MsgUp.dewel_synthesis
	(*EquipReap)(nil),                            // 51: MsgUp.equip_reap
	(*RequireRewards)(nil),                       // 52: MsgUp.require_rewards
	(*SetName)(nil),                              // 53: MsgUp.set_name
	(*SetAvatar)(nil),                            // 54: MsgUp.set_avatar
	(*GetTimeReward)(nil),                        // 55: MsgUp.get_time_reward
	(*GetAdsReward)(nil),                         // 56: MsgUp.get_ads_reward
	(*GetHwAdsReward)(nil),                       // 57: MsgUp.get_hw_ads_reward
	(*AskDailyLogin)(nil),                        // 58: MsgUp.ask_daily_login
	(*SendMail)(nil),                             // 59: MsgUp.send_mail
	(*ItemInfo)(nil),                             // 60: MsgUp.item_info
	(*Teleport)(nil),                             // 61: MsgUp.teleport
	(*TeleportRandom)(nil),                       // 62: MsgUp.teleport_random
	(*TeleportGuild)(nil),                        // 63: MsgUp.teleport_guild
	(*CreateBuilding)(nil),                       // 64: MsgUp.create_building
	(*UpgradeBuilding)(nil),                      // 65: MsgUp.upgrade_building
	(*RemoveBuilding)(nil),                       // 66: MsgUp.remove_building
	(*SpeedupBuilding)(nil),                      // 67: MsgUp.speedup_building
	(*TrainSoldiers)(nil),                        // 68: MsgUp.train_soldiers
	(*ReapSoldiers)(nil),                         // 69: MsgUp.reap_soldiers
	(*SpeedupTrain)(nil),                         // 70: MsgUp.speedup_train
	(*GetMaillist)(nil),                          // 71: MsgUp.get_maillist
	(*GetSysmaillist)(nil),                       // 72: MsgUp.get_sysmaillist
	(*GetRewardmaillist)(nil),                    // 73: MsgUp.get_rewardmaillist
	(*GetActivitymaillist)(nil),                  // 74: MsgUp.get_activitymaillist
	(*GetFightMaillist)(nil),                     // 75: MsgUp.get_fight_maillist
	(*GetAllianceMaillist)(nil),                  // 76: MsgUp.get_alliance_maillist
	(*GetBattlefieldMaillist)(nil),               // 77: MsgUp.get_battlefield_maillist
	(*GetReportlist)(nil),                        // 78: MsgUp.get_reportlist
	(*GetReportTabList)(nil),                     // 79: MsgUp.get_report_tab_list
	(*ReadMail)(nil),                             // 80: MsgUp.read_mail
	(*GetMailReward)(nil),                        // 81: MsgUp.get_mail_reward
	(*BatchMailReward)(nil),                      // 82: MsgUp.batch_mail_reward
	(*ReapResource)(nil),                         // 83: MsgUp.reap_resource
	(*ReapResourceData)(nil),                     // 84: MsgUp.reap_resource_data
	(*ClaimQuestReward)(nil),                     // 85: MsgUp.claim_quest_reward
	(*SendTroop)(nil),                            // 86: MsgUp.send_troop
	(*WearEquip)(nil),                            // 87: MsgUp.wear_equip
	(*WearTreasure)(nil),                         // 88: MsgUp.wear_treasure
	(*WearEmblem)(nil),                           // 89: MsgUp.wear_emblem
	(*CheckMarch)(nil),                           // 90: MsgUp.check_march
	(*ReturnCastle)(nil),                         // 91: MsgUp.return_castle
	(*ReturnCastleByItem)(nil),                   // 92: MsgUp.return_castle_by_item
	(*SendTroopGarrison)(nil),                    // 93: MsgUp.send_troop_garrison
	(*BuyBuilder)(nil),                           // 94: MsgUp.buy_builder
	(*UpgradeTech)(nil),                          // 95: MsgUp.upgrade_tech
	(*UpgradeGift)(nil),                          // 96: MsgUp.upgrade_gift
	(*ChangeGiftPage)(nil),                       // 97: MsgUp.change_gift_page
	(*GetGiftList)(nil),                          // 98: MsgUp.get_gift_list
	(*GetServerList)(nil),                        // 99: MsgUp.get_server_list
	(*GetServerKingdomList)(nil),                 // 100: MsgUp.get_server_kingdom_list
	(*GetServerKingdom)(nil),                     // 101: MsgUp.get_server_kingdom
	(*Login)(nil),                                // 102: MsgUp.login
	(*RequestMapinfo)(nil),                       // 103: MsgUp.request_mapinfo
	(*PushMapinfoEmoji)(nil),                     // 104: MsgUp.push_mapinfo_emoji
	(*RequestMapinfoNew)(nil),                    // 105: MsgUp.request_mapinfo_new
	(*RequestMapinfoBattlefield)(nil),            // 106: MsgUp.request_mapinfo_battlefield
	(*ConsumeItem)(nil),                          // 107: MsgUp.consume_item
	(*SpeedupBatch)(nil),                         // 108: MsgUp.speedup_batch
	(*SpeedupTech)(nil),                          // 109: MsgUp.speedup_tech
	(*ShopConsume)(nil),                          // 110: MsgUp.shop_consume
	(*BuyItem)(nil),                              // 111: MsgUp.buy_item
	(*HealSoldiers)(nil),                         // 112: MsgUp.heal_soldiers
	(*AmbulanceSoldiers)(nil),                    // 113: MsgUp.ambulance_soldiers
	(*CallbackSoldiers)(nil),                     // 114: MsgUp.callback_soldiers
	(*ReviveSoldiers)(nil),                       // 115: MsgUp.revive_soldiers
	(*SpeedupHealSoldiers)(nil),                  // 116: MsgUp.speedup_heal_soldiers
	(*SurrenderSoldiers)(nil),                    // 117: MsgUp.surrender_soldiers
	(*Work)(nil),                                 // 118: MsgUp.work
	(*CancelBuilding)(nil),                       // 119: MsgUp.cancel_building
	(*CancelTrain)(nil),                          // 120: MsgUp.cancel_train
	(*CancelTech)(nil),                           // 121: MsgUp.cancel_tech
	(*CancelEquip)(nil),                          // 122: MsgUp.cancel_equip
	(*SetPush)(nil),                              // 123: MsgUp.set_push
	(*GiftExchange)(nil),                         // 124: MsgUp.gift_exchange
	(*PeaceShield)(nil),                          // 125: MsgUp.peace_shield
	(*DelMail)(nil),                              // 126: MsgUp.del_mail
	(*StartDailyTask)(nil),                       // 127: MsgUp.start_daily_task
	(*DailyTaskRewards)(nil),                     // 128: MsgUp.daily_task_rewards
	(*Sacrifice)(nil),                            // 129: MsgUp.sacrifice
	(*Taxes)(nil),                                // 130: MsgUp.taxes
	(*FavoriteMail)(nil),                         // 131: MsgUp.favorite_mail
	(*GetFavoritelist)(nil),                      // 132: MsgUp.get_favoritelist
	(*ChatHistoryFecth)(nil),                     // 133: MsgUp.chat_history_fecth
	(*ReportMessage)(nil),                        // 134: MsgUp.report_message
	(*ApplyHelp)(nil),                            // 135: MsgUp.apply_help
	(*GetHelp)(nil),                              // 136: MsgUp.get_help
	(*ProvideHelp)(nil),                          // 137: MsgUp.provide_help
	(*SyncTaxInfo)(nil),                          // 138: MsgUp.sync_tax_info
	(*ResourceTransport)(nil),                    // 139: MsgUp.resource_transport
	(*GetArmySupport)(nil),                       // 140: MsgUp.get_army_support
	(*RepatriateArmySupport)(nil),                // 141: MsgUp.repatriate_army_support
	(*CreateUnionWar)(nil),                       // 142: MsgUp.create_union_war
	(*JoinUnionWar)(nil),                         // 143: MsgUp.join_union_war
	(*CancelUnionWar)(nil),                       // 144: MsgUp.cancel_union_war
	(*QuitUnionWar)(nil),                         // 145: MsgUp.quit_union_war
	(*GuildWarList)(nil),                         // 146: MsgUp.guild_war_list
	(*PushToken)(nil),                            // 147: MsgUp.push_token
	(*GetKillRankList)(nil),                      // 148: MsgUp.get_kill_rank_list
	(*GetAllianceRankList)(nil),                  // 149: MsgUp.get_alliance_rank_list
	(*GetAllianceKillRankList)(nil),              // 150: MsgUp.get_alliance_kill_rank_list
	(*GetPowerRankList)(nil),                     // 151: MsgUp.get_power_rank_list
	(*GetFameRankList)(nil),                      // 152: MsgUp.get_fame_rank_list
	(*Guild)(nil),                                // 153: MsgUp.guild
	(*GuildMembers)(nil),                         // 154: MsgUp.guild_members
	(*GuildCreate)(nil),                          // 155: MsgUp.guild_create
	(*GuildDismiss)(nil),                         // 156: MsgUp.guild_dismiss
	(*GuildList)(nil),                            // 157: MsgUp.guild_list
	(*GuildSearch)(nil),                          // 158: MsgUp.guild_search
	(*GuildJoin)(nil),                            // 159: MsgUp.guild_join
	(*GuildJoinConfirm)(nil),                     // 160: MsgUp.guild_join_confirm
	(*GuildJoinRefuse)(nil),                      // 161: MsgUp.guild_join_refuse
	(*GuildJoinConfirmPitch)(nil),                // 162: MsgUp.guild_join_confirm_pitch
	(*GuildJoinRefusePitch)(nil),                 // 163: MsgUp.guild_join_refuse_pitch
	(*GuildLeave)(nil),                           // 164: MsgUp.guild_leave
	(*GuildKick)(nil),                            // 165: MsgUp.guild_kick
	(*GuildSetAvatar)(nil),                       // 166: MsgUp.guild_set_avatar
	(*GuildSetName)(nil),                         // 167: MsgUp.guild_set_name
	(*GuildSetShortName)(nil),                    // 168: MsgUp.guild_set_short_name
	(*GuildSetJoinType)(nil),                     // 169: MsgUp.guild_set_join_type
	(*GuildSetSlogan)(nil),                       // 170: MsgUp.guild_set_slogan
	(*GuildSetHeadline)(nil),                     // 171: MsgUp.guild_set_headline
	(*GuildSetBuilding)(nil),                     // 172: MsgUp.guild_set_building
	(*GuildGetLog)(nil),                          // 173: MsgUp.guild_get_log
	(*GuildSetLan)(nil),                          // 174: MsgUp.guild_set_lan
	(*GuildQuery)(nil),                           // 175: MsgUp.guild_query
	(*GuildMyQuery)(nil),                         // 176: MsgUp.guild_my_query
	(*GuildOpenPannel)(nil),                      // 177: MsgUp.guild_open_pannel
	(*GuildApplyMembers)(nil),                    // 178: MsgUp.guild_apply_members
	(*GuildInviteMembers)(nil),                   // 179: MsgUp.guild_invite_members
	(*ContactGetList)(nil),                       // 180: MsgUp.contact_get_list
	(*ContactAddUser)(nil),                       // 181: MsgUp.contact_add_user
	(*ContactRemoveUser)(nil),                    // 182: MsgUp.contact_remove_user
	(*GuildSetAuthTitle)(nil),                    // 183: MsgUp.guild_set_auth_title
	(*GuildInviteMember)(nil),                    // 184: MsgUp.guild_invite_member
	(*GuildInviteConfirm)(nil),                   // 185: MsgUp.guild_invite_confirm
	(*GuildInviteRefuse)(nil),                    // 186: MsgUp.guild_invite_refuse
	(*GuildChangeMemberLevel)(nil),               // 187: MsgUp.guild_change_member_level
	(*GuildTransfer)(nil),                        // 188: MsgUp.guild_transfer
	(*DismissSoldiers)(nil),                      // 189: MsgUp.dismiss_soldiers
	(*SetLanguage)(nil),                          // 190: MsgUp.set_language
	(*GuildElectOwner)(nil),                      // 191: MsgUp.guild_elect_owner
	(*GuildDonateTech)(nil),                      // 192: MsgUp.guild_donate_tech
	(*GuildStoreBuy)(nil),                        // 193: MsgUp.guild_store_buy
	(*GuildTechClearCd)(nil),                     // 194: MsgUp.guild_tech_clear_cd
	(*GuildCampSignup)(nil),                      // 195: MsgUp.guild_camp_signup
	(*GuildCampList)(nil),                        // 196: MsgUp.guild_camp_list
	(*GuildCampVote)(nil),                        // 197: MsgUp.guild_camp_vote
	(*GuildMergeApply)(nil),                      // 198: MsgUp.guild_merge_apply
	(*GuildMergeCancel)(nil),                     // 199: MsgUp.guild_merge_cancel
	(*GuildBoxAnonymity)(nil),                    // 200: MsgUp.guild_box_anonymity
	(*GuildBoxAnonyCancel)(nil),                  // 201: MsgUp.guild_box_anony_cancel
	(*GuildTechDonateRanking)(nil),               // 202: MsgUp.guild_tech_donate_ranking
	(*GuildTechDonateAward)(nil),                 // 203: MsgUp.guild_tech_donate_award
	(*GuildBuildingCityList)(nil),                // 204: MsgUp.guild_building_city_list
	(*GuildBuildingSetCover)(nil),                // 205: MsgUp.guild_building_set_cover
	(*GuildMergeList)(nil),                       // 206: MsgUp.guild_merge_list
	(*GuildMergeAgree)(nil),                      // 207: MsgUp.guild_merge_agree
	(*GuildMergeReject)(nil),                     // 208: MsgUp.guild_merge_reject
	(*GuildMigrate)(nil),                         // 209: MsgUp.guild_migrate
	(*GuildSetMasterCity)(nil),                   // 210: MsgUp.guild_set_master_city
	(*GuildBoxList)(nil),                         // 211: MsgUp.guild_box_list
	(*GuildBoxOpen)(nil),                         // 212: MsgUp.guild_box_open
	(*GuildBoxOpenAll)(nil),                      // 213: MsgUp.guild_box_open_all
	(*GuildTechCancel)(nil),                      // 214: MsgUp.guild_tech_cancel
	(*SpeedupMarch)(nil),                         // 215: MsgUp.speedup_march
	(*GetPopularityRankList)(nil),                // 216: MsgUp.get_popularity_rank_list
	(*GetRouletteList)(nil),                      // 217: MsgUp.get_roulette_list
	(*AbandonTreasureBox)(nil),                   // 218: MsgUp.abandon_treasure_box
	(*RefreshRoulette)(nil),                      // 219: MsgUp.refresh_roulette
	(*StartRoulette)(nil),                        // 220: MsgUp.start_roulette
	(*OpenTreasureBox)(nil),                      // 221: MsgUp.open_treasure_box
	(*BuyRouletteCredits)(nil),                   // 222: MsgUp.buy_roulette_credits
	(*BlackMarketRefresh)(nil),                   // 223: MsgUp.black_market_refresh
	(*BlackMarketBuy)(nil),                       // 224: MsgUp.black_market_buy
	(*TavernRefresh)(nil),                        // 225: MsgUp.tavern_refresh
	(*TavernBuy)(nil),                            // 226: MsgUp.tavern_buy
	(*GeneralSkillRefresh)(nil),                  // 227: MsgUp.general_skill_refresh
	(*GeneralSkillBuy)(nil),                      // 228: MsgUp.general_skill_buy
	(*SacrificeReliveGeneral)(nil),               // 229: MsgUp.sacrifice_relive_general
	(*BuildingFinish)(nil),                       // 230: MsgUp.building_finish
	(*TechnologyFinish)(nil),                     // 231: MsgUp.technology_finish
	(*SavePlayerSteps)(nil),                      // 232: MsgUp.save_player_steps
	(*HealFinish)(nil),                           // 233: MsgUp.heal_finish
	(*SynthesisFinish)(nil),                      // 234: MsgUp.synthesis_finish
	(*GetUserDetails)(nil),                       // 235: MsgUp.get_user_details
	(*BattleGuideFinished)(nil),                  // 236: MsgUp.battle_guide_finished
	(*GetDailyTaskList)(nil),                     // 237: MsgUp.get_daily_task_list
	(*GetChapterTaskList)(nil),                   // 238: MsgUp.get_chapter_task_list
	(*BuyFromStore)(nil),                         // 239: MsgUp.buy_from_store
	(*RefreshDailyTask)(nil),                     // 240: MsgUp.refresh_daily_task
	(*GetIapList)(nil),                           // 241: MsgUp.get_iap_list
	(*GetRuinsList)(nil),                         // 242: MsgUp.get_ruins_list
	(*OpenRuins)(nil),                            // 243: MsgUp.open_ruins
	(*GetKingCastleInfo)(nil),                    // 244: MsgUp.get_king_castle_info
	(*SetGuildPlayerKingCastleJob)(nil),          // 245: MsgUp.set_guild_player_king_castle_job
	(*General)(nil),                              // 246: MsgUp.general
	(*GeneralUpgradeStar)(nil),                   // 247: MsgUp.general_upgrade_star
	(*GeneralFire)(nil),                          // 248: MsgUp.general_fire
	(*GeneralUpgradeQuality)(nil),                // 249: MsgUp.general_upgrade_quality
	(*GeneralRankingList)(nil),                   // 250: MsgUp.general_ranking_list
	(*GeneralRelive)(nil),                        // 251: MsgUp.general_relive
	(*GeneralReliveFinished)(nil),                // 252: MsgUp.general_relive_finished
	(*GeneralReliveSpeedup)(nil),                 // 253: MsgUp.general_relive_speedup
	(*GeneralBaptize)(nil),                       // 254: MsgUp.general_baptize
	(*GeneralBaptizeConfirm)(nil),                // 255: MsgUp.general_baptize_confirm
	(*GeneralLearnSkill)(nil),                    // 256: MsgUp.general_learn_skill
	(*GeneralLearnSkillV2)(nil),                  // 257: MsgUp.general_learn_skill_v2
	(*GeneralLearnSkillConfirm)(nil),             // 258: MsgUp.general_learn_skill_confirm
	(*ActiveSubCity)(nil),                        // 259: MsgUp.active_sub_city
	(*ModifySubCity)(nil),                        // 260: MsgUp.modify_sub_city
	(*SubCityBuyBuilder)(nil),                    // 261: MsgUp.sub_city_buy_builder
	(*SubCityUpgradeTimes)(nil),                  // 262: MsgUp.sub_city_upgrade_times
	(*SubCitySpeedupBuilding)(nil),               // 263: MsgUp.sub_city_speedup_building
	(*SubCityBuyTroop)(nil),                      // 264: MsgUp.sub_city_buy_troop
	(*AbandonSubCity)(nil),                       // 265: MsgUp.abandon_sub_city
	(*GetActivityTaskReward)(nil),                // 266: MsgUp.get_activity_task_reward
	(*GetChatConfig)(nil),                        // 267: MsgUp.get_chat_config
	(*ChangeEvony)(nil),                          // 268: MsgUp.change_evony
	(*DestructEquipment)(nil),                    // 269: MsgUp.destruct_equipment
	(*ResetLordGift)(nil),                        // 270: MsgUp.reset_lord_gift
	(*GetGuildTechData)(nil),                     // 271: MsgUp.get_guild_tech_data
	(*GetServerInfo)(nil),                        // 272: MsgUp.get_server_info
	(*SearchUser)(nil),                           // 273: MsgUp.search_user
	(*GetWheelList)(nil),                         // 274: MsgUp.get_wheel_list
	(*PlayWheel)(nil),                            // 275: MsgUp.play_wheel
	(*CollectWheelData)(nil),                     // 276: MsgUp.collect_wheel_data
	(*SetWheelVipPlay)(nil),                      // 277: MsgUp.set_wheel_vip_play
	(*GetWheelVipPlayList)(nil),                  // 278: MsgUp.get_wheel_vip_play_list
	(*GetWheelCredits)(nil),                      // 279: MsgUp.get_wheel_credits
	(*ClientLog)(nil),                            // 280: MsgUp.client_log
	(*SetDefendGeneral)(nil),                     // 281: MsgUp.set_defend_general
	(*NewRouletteTurn)(nil),                      // 282: MsgUp.new_roulette_turn
	(*NewRouletteAccumulateAwards)(nil),          // 283: MsgUp.new_roulette_accumulate_awards
	(*ChangeKingPlayer)(nil),                     // 284: MsgUp.change_king_player
	(*SetKingNameLanguage)(nil),                  // 285: MsgUp.set_king_name_language
	(*CallBackKingCastleArmy)(nil),               // 286: MsgUp.call_back_king_castle_army
	(*GetKindomInfo)(nil),                        // 287: MsgUp.get_kindom_info
	(*GetKindomJobTitleUsers)(nil),               // 288: MsgUp.get_kindom_job_title_users
	(*GetKindomHistoryKings)(nil),                // 289: MsgUp.get_kindom_history_kings
	(*GetKindomMarchList)(nil),                   // 290: MsgUp.get_kindom_march_list
	(*SetKindomPlayerJobTitle)(nil),              // 291: MsgUp.set_kindom_player_job_title
	(*GetKindomArmySupport)(nil),                 // 292: MsgUp.get_kindom_army_support
	(*KingdomAwardPlayer)(nil),                   // 293: MsgUp.kingdom_award_player
	(*SubCityHealWall)(nil),                      // 294: MsgUp.sub_city_heal_wall
	(*SetUserInfoPermission)(nil),                // 295: MsgUp.set_user_info_permission
	(*SetVipPermission)(nil),                     // 296: MsgUp.set_vip_permission
	(*SetAllienceGiftPermission)(nil),            // 297: MsgUp.set_allience_gift_permission
	(*SetBuildingNamePermission)(nil),            // 298: MsgUp.set_building_name_permission
	(*DismissSubcitySoldiers)(nil),               // 299: MsgUp.dismiss_subcity_soldiers
	(*GetHistoryWarList)(nil),                    // 300: MsgUp.get_history_war_list
	(*SendGuildWarImmediately)(nil),              // 301: MsgUp.send_guild_war_immediately
	(*AddFriend)(nil),                            // 302: MsgUp.add_friend
	(*DelFriend)(nil),                            // 303: MsgUp.del_friend
	(*AddUserToBlacklist)(nil),                   // 304: MsgUp.add_user_to_blacklist
	(*DelUserFromBlacklist)(nil),                 // 305: MsgUp.del_user_from_blacklist
	(*ConfirmAddFriend)(nil),                     // 306: MsgUp.confirm_add_friend
	(*GetMailReportDetail)(nil),                  // 307: MsgUp.get_mail_report_detail
	(*RefuseAddFriend)(nil),                      // 308: MsgUp.refuse_add_friend
	(*BuyResource)(nil),                          // 309: MsgUp.buy_resource
	(*FavoriteFriend)(nil),                       // 310: MsgUp.favorite_friend
	(*UnfavoriteFriend)(nil),                     // 311: MsgUp.unfavorite_friend
	(*SuggestFriends)(nil),                       // 312: MsgUp.suggest_friends
	(*ClaimMembershipReward)(nil),                // 313: MsgUp.claim_membership_reward
	(*ChatHistoryWholeFetch)(nil),                // 314: MsgUp.chat_history_whole_fetch
	(*ClaimConsumerReward)(nil),                  // 315: MsgUp.claim_consumer_reward
	(*RefreshPatrol)(nil),                        // 316: MsgUp.refresh_patrol
	(*CollectPatrolAward)(nil),                   // 317: MsgUp.collect_patrol_award
	(*AutoPatrol)(nil),                           // 318: MsgUp.auto_patrol
	(*GetServerActiveReward)(nil),                // 319: MsgUp.get_server_active_reward
	(*AllianceUseGift)(nil),                      // 320: MsgUp.alliance_use_gift
	(*KingUseGift)(nil),                          // 321: MsgUp.king_use_gift
	(*ServerActive)(nil),                         // 322: MsgUp.server_active
	(*GetKingGift)(nil),                          // 323: MsgUp.get_king_gift
	(*GetFriendsList)(nil),                       // 324: MsgUp.get_friends_list
	(*ChangeServerCastle)(nil),                   // 325: MsgUp.change_server_castle
	(*CheckBuff)(nil),                            // 326: MsgUp.check_buff
	(*CheckRotary)(nil),                          // 327: MsgUp.check_rotary
	(*CheckRotaryAdvance)(nil),                   // 328: MsgUp.check_rotary_advance
	(*WhiteWalkerActiveStart)(nil),               // 329: MsgUp.white_walker_active_start
	(*GetLordHourGift)(nil),                      // 330: MsgUp.get_lord_hour_gift
	(*RepatriateWarMember)(nil),                  // 331: MsgUp.repatriate_war_member
	(*GetTarvenStamina)(nil),                     // 332: MsgUp.get_tarven_stamina
	(*AddFavoriteCoord)(nil),                     // 333: MsgUp.add_favorite_coord
	(*GetFavoriteCoordList)(nil),                 // 334: MsgUp.get_favorite_coord_list
	(*AskGeneral)(nil),                           // 335: MsgUp.ask_general
	(*ReportError)(nil),                          // 336: MsgUp.report_error
	(*CreateGuildBuilding)(nil),                  // 337: MsgUp.create_guild_building
	(*ReclaimGuildBuilding)(nil),                 // 338: MsgUp.reclaim_guild_building
	(*UpgradeGuildBuilding)(nil),                 // 339: MsgUp.upgrade_guild_building
	(*UpgradeGuildFarm)(nil),                     // 340: MsgUp.upgrade_guild_farm
	(*CancelUpgradeGuildBuilding)(nil),           // 341: MsgUp.cancel_upgrade_guild_building
	(*GetGuildTerritory)(nil),                    // 342: MsgUp.get_guild_territory
	(*StopReclaimGuildBuilding)(nil),             // 343: MsgUp.stop_reclaim_guild_building
	(*SetSubcityAutoFight)(nil),                  // 344: MsgUp.set_subcity_auto_fight
	(*ReleaseImprisonGeneral)(nil),               // 345: MsgUp.release_imprison_general
	(*KillImprisonGeneral)(nil),                  // 346: MsgUp.kill_imprison_general
	(*RedomImprisonGeneral)(nil),                 // 347: MsgUp.redom_imprison_general
	(*SendInvitekey)(nil),                        // 348: MsgUp.SendInvitekey
	(*SendSnowball)(nil),                         // 349: MsgUp.send_snowball
	(*BuySkin)(nil),                              // 350: MsgUp.buy_skin
	(*SelectSkin)(nil),                           // 351: MsgUp.select_skin
	(*Facebook_Invite)(nil),                      // 352: MsgUp.Facebook_Invite
	(*GetGuildTerritoryLimit)(nil),               // 353: MsgUp.get_guild_territory_limit
	(*GetCrossServerInfo)(nil),                   // 354: MsgUp.get_cross_server_info
	(*UpgradeSubcityColor)(nil),                  // 355: MsgUp.upgrade_subcity_color
	(*BatchWearEquip)(nil),                       // 356: MsgUp.batch_wear_equip
	(*BatchWearTreasure)(nil),                    // 357: MsgUp.batch_wear_treasure
	(*GetCashcostAndGoldReward)(nil),             // 358: MsgUp.get_cashcost_and_gold_reward
	(*GetPreRechargeReward)(nil),                 // 359: MsgUp.get_pre_recharge_reward
	(*GetGameNotice)(nil),                        // 360: MsgUp.get_game_notice
	(*MarkReadGameNotice)(nil),                   // 361: MsgUp.mark_read_game_notice
	(*SaveUserPrefs)(nil),                        // 362: MsgUp.save_user_prefs
	(*GetUserPrefs)(nil),                         // 363: MsgUp.get_user_prefs
	(*GetbackFromStore)(nil),                     // 364: MsgUp.getback_from_store
	(*GetWorldBossInfo)(nil),                     // 365: MsgUp.get_world_boss_info
	(*BuyAttackBoss)(nil),                        // 366: MsgUp.buy_attack_boss
	(*GetCrossServerRank)(nil),                   // 367: MsgUp.get_cross_server_rank
	(*RefineEquipment)(nil),                      // 368: MsgUp.refine_equipment
	(*RefineDragon)(nil),                         // 369: MsgUp.refine_dragon
	(*RefineSoldiers)(nil),                       // 370: MsgUp.refine_soldiers
	(*UpdateSubcityWallData)(nil),                // 371: MsgUp.update_subcity_wall_data
	(*ConfirmRefineEquipment)(nil),               // 372: MsgUp.confirm_refine_equipment
	(*ConfirmRefineDragon)(nil),                  // 373: MsgUp.confirm_refine_dragon
	(*ConfirmRefineSoldiers)(nil),                // 374: MsgUp.confirm_refine_soldiers
	(*ClearWorkCd)(nil),                          // 375: MsgUp.clear_work_cd
	(*RecommendGuildTech)(nil),                   // 376: MsgUp.recommend_guild_tech
	(*HitColorfulEgg)(nil),                       // 377: MsgUp.hit_colorful_egg
	(*ProtectOther)(nil),                         // 378: MsgUp.protect_other
	(*SynthesisItem)(nil),                        // 379: MsgUp.synthesis_item
	(*ComeInBattle)(nil),                         // 380: MsgUp.come_in_battle
	(*GiveUpRuins)(nil),                          // 381: MsgUp.give_up_ruins
	(*UpgradeSoldiers)(nil),                      // 382: MsgUp.upgrade_soldiers
	(*GetArtReward)(nil),                         // 383: MsgUp.get_art_reward
	(*ActivePet)(nil),                            // 384: MsgUp.active_pet
	(*MakeMaterial)(nil),                         // 385: MsgUp.make_material
	(*SpeedupMaterial)(nil),                      // 386: MsgUp.speedup_material
	(*MakeTechStone)(nil),                        // 387: MsgUp.make_tech_stone
	(*SpeedupTechStone)(nil),                     // 388: MsgUp.speedup_tech_stone
	(*DeleteMaterialQueue)(nil),                  // 389: MsgUp.delete_material_queue
	(*UpgradePet)(nil),                           // 390: MsgUp.upgrade_pet
	(*GetTechTaskList)(nil),                      // 391: MsgUp.get_tech_task_list
	(*GetTechTaskReward)(nil),                    // 392: MsgUp.get_tech_task_reward
	(*SignupBattlefield)(nil),                    // 393: MsgUp.signup_battlefield
	(*SetMembersBattlefield)(nil),                // 394: MsgUp.set_members_battlefield
	(*GetBattlefieldRanklist)(nil),               // 395: MsgUp.get_battlefield_ranklist
	(*GetBattlefieldGuildrank)(nil),              // 396: MsgUp.get_battlefield_guildrank
	(*GetBattlefieldGuildrankSeason)(nil),        // 397: MsgUp.get_battlefield_guildrank_season
	(*GetBattlefieldHistory)(nil),                // 398: MsgUp.get_battlefield_history
	(*GetRankList)(nil),                          // 399: MsgUp.get_rank_list
	(*QuitBattle)(nil),                           // 400: MsgUp.quit_battle
	(*GetBattlefieldInfo)(nil),                   // 401: MsgUp.get_battlefield_info
	(*GetBattleGarrison)(nil),                    // 402: MsgUp.get_battle_garrison
	(*GetBattleData)(nil),                        // 403: MsgUp.get_battle_data
	(*GetBattlefieldRecord)(nil),                 // 404: MsgUp.get_battlefield_record
	(*GetBattlefieldPersonalRankInfo)(nil),       // 405: MsgUp.get_battlefield_personal_rank_info
	(*GetBattlefieldPersonalSeasonRankInfo)(nil), // 406: MsgUp.get_battlefield_personal_season_rank_info
	(*SetIdNumber)(nil),                          // 407: MsgUp.set_id_number
	(*SetDragonTalentUpgrade)(nil),               // 408: MsgUp.set_dragon_talent_upgrade
	(*SetDragonCliffShow)(nil),                   // 409: MsgUp.set_dragon_cliff_show
	(*SetDragonUnlock)(nil),                      // 410: MsgUp.set_dragon_unlock
	(*SetDragonFeed)(nil),                        // 411: MsgUp.set_dragon_feed
	(*SetDragonActive)(nil),                      // 412: MsgUp.set_dragon_active
	(*RefreshDragonFood)(nil),                    // 413: MsgUp.refresh_dragon_food
	(*GetHonorList)(nil),                         // 414: MsgUp.get_honor_list
	(*GetBattlefieldBoss)(nil),                   // 415: MsgUp.get_battlefield_boss
	(*BattleMarketRefresh)(nil),                  // 416: MsgUp.battle_market_refresh
	(*BattleMarketBuy)(nil),                      // 417: MsgUp.battle_market_buy
	(*GetFoundSubcity)(nil),                      // 418: MsgUp.get_found_subcity
	(*GetFoundFamouscity)(nil),                   // 419: MsgUp.get_found_famouscity
	(*BetFoundSubcity)(nil),                      // 420: MsgUp.bet_found_subcity
	(*BetFoundFamouscity)(nil),                   // 421: MsgUp.bet_found_famouscity
	(*ReapSubcityItems)(nil),                     // 422: MsgUp.reap_subcity_items
	(*OpenSubcityByItem)(nil),                    // 423: MsgUp.open_subcity_by_item
	(*OpenFamouscityByItem)(nil),                 // 424: MsgUp.open_famouscity_by_item
	(*SetBuildingGovernmentGeneral)(nil),         // 425: MsgUp.set_building_government_general
	(*InviteRobbersMembers)(nil),                 // 426: MsgUp.invite_robbers_members
	(*GetRobbers)(nil),                           // 427: MsgUp.get_robbers
	(*GetRobbersReward)(nil),                     // 428: MsgUp.get_robbers_reward
	(*GetVipPopularityRankList)(nil),             // 429: MsgUp.get_vip_popularity_rank_list
	(*GetMapinfoTriumph)(nil),                    // 430: MsgUp.get_mapinfo_triumph
	(*GetMapinfoTriumphRecord)(nil),              // 431: MsgUp.get_mapinfo_triumph_record
	(*GetMapinfoTriumphFlowerrecord)(nil),        // 432: MsgUp.get_mapinfo_triumph_flowerrecord
	(*GetMapinfoTriumphFlower)(nil),              // 433: MsgUp.get_mapinfo_triumph_flower
	(*OverBattlefield)(nil),                      // 434: MsgUp.over_battlefield
	(*DestructSkillBook)(nil),                    // 435: MsgUp.destruct_skill_book
	(*SetAvatarFrame)(nil),                       // 436: MsgUp.set_avatar_frame
	(*GetAchievementList)(nil),                   // 437: MsgUp.get_achievement_list
	(*GetHydraRank)(nil),                         // 438: MsgUp.get_hydra_rank
	(*GetKingReturn)(nil),                        // 439: MsgUp.get_king_return
	(*GetPlayerCallback)(nil),                    // 440: MsgUp.get_player_callback
	(*GetExchangeItem)(nil),                      // 441: MsgUp.get_exchange_item
	(*GetKingReturnReward)(nil),                  // 442: MsgUp.get_king_return_reward
	(*GetExchangeReward)(nil),                    // 443: MsgUp.get_exchange_reward
	(*GetChapterTaskReward)(nil),                 // 444: MsgUp.get_chapter_task_reward
	(*GetNewChapterTaskReward)(nil),              // 445: MsgUp.get_new_chapter_task_reward
	(*GetTempleBuildingList)(nil),                // 446: MsgUp.get_temple_building_list
	(*OpenMonsterByItem)(nil),                    // 447: MsgUp.open_monster_by_item
	(*GetGuildMonster)(nil),                      // 448: MsgUp.get_guild_monster
	(*GetDailyRefreshTask)(nil),                  // 449: MsgUp.get_daily_refresh_task
	(*GetKingBoxReward)(nil),                     // 450: MsgUp.get_king_box_reward
	(*GetActivityTaskRewardItems)(nil),           // 451: MsgUp.get_activity_task_reward_items
	(*GetMilestoneList)(nil),                     // 452: MsgUp.get_milestone_list
	(*GetGaruaList)(nil),                         // 453: MsgUp.get_garua_list
	(*ClaimMilestoneReward)(nil),                 // 454: MsgUp.claim_milestone_reward
	(*GetNewServerFund)(nil),                     // 455: MsgUp.get_new_server_fund
	(*UpgradeStageReward)(nil),                   // 456: MsgUp.upgrade_stage_reward
	(*SafeCode)(nil),                             // 457: MsgUp.safe_code
	(*DestructItem)(nil),                         // 458: MsgUp.destruct_item
	(*ItemUp)(nil),                               // 459: MsgUp.item_up
	(*DestructEquipmentBatch)(nil),               // 460: MsgUp.destruct_equipment_batch
	(*GeneralUpgradeFeature)(nil),                // 461: MsgUp.general_upgrade_feature
	(*GetGuildFamouscityList)(nil),               // 462: MsgUp.get_guild_famouscity_list
	(*SummonViking)(nil),                         // 463: MsgUp.summon_viking
	(*ApplyViking)(nil),                          // 464: MsgUp.apply_viking
	(*SelectVikingDifficulty)(nil),               // 465: MsgUp.select_viking_difficulty
	(*GetAllFamouscity)(nil),                     // 466: MsgUp.get_all_famouscity
	(*GetGuildVikingList)(nil),                   // 467: MsgUp.get_guild_viking_list
	(*GetVikingData)(nil),                        // 468: MsgUp.get_viking_data
	(*ClaimVikingReward)(nil),                    // 469: MsgUp.claim_viking_reward
	(*GetPlayoffMembers)(nil),                    // 470: MsgUp.get_playoff_members
	(*GetLimitServerCompetition)(nil),            // 471: MsgUp.get_limit_server_competition
	(*GetGuildTreasureData)(nil),                 // 472: MsgUp.get_guild_treasure_data
	(*ClaimGuildTreasure)(nil),                   // 473: MsgUp.claim_guild_treasure
	(*GetPrivateTreasureList)(nil),               // 474: MsgUp.get_private_treasure_list
	(*SendPrivateTreasure)(nil),                  // 475: MsgUp.send_private_treasure
	(*HonoursSoldiers)(nil),                      // 476: MsgUp.honours_soldiers
	(*DeportUser)(nil),                           // 477: MsgUp.deport_user
	(*GetDeportList)(nil),                        // 478: MsgUp.get_deport_list
	(*GetBattlepass)(nil),                        // 479: MsgUp.get_battlepass
	(*GetBattlepassReward)(nil),                  // 480: MsgUp.get_battlepass_reward
	(*GetUserData)(nil),                          // 481: MsgUp.get_user_data
	(*GetCommentedReward)(nil),                   // 482: MsgUp.get_commented_reward
	(*GetPuzzleReward)(nil),                      // 483: MsgUp.get_puzzle_reward
	(*GetPuzzleData)(nil),                        // 484: MsgUp.get_puzzle_data
	(*ClaimFirstWeekGift)(nil),                   // 485: MsgUp.claim_first_week_gift
	(*ClaimFamousGeneral)(nil),                   // 486: MsgUp.claim_famous_general
	(*SetMonthCardType)(nil),                     // 487: MsgUp.set_month_card_type
	(*ClaimConsumerGemsReward)(nil),              // 488: MsgUp.claim_consumer_gems_reward
	(*GetConsumerGemsInfo)(nil),                  // 489: MsgUp.get_consumer_gems_info
	(*ClaimFreeGift)(nil),                        // 490: MsgUp.claim_free_gift
	(*SendNpsResult)(nil),                        // 491: MsgUp.send_nps_result
	(*RequestSpecialGift)(nil),                   // 492: MsgUp.request_special_gift
	(*SignupSmallBattlefield)(nil),               // 493: MsgUp.signup_small_battlefield
	(*InviteSmallBattlefield)(nil),               // 494: MsgUp.invite_small_battlefield
	(*MatchSmallBattlefield)(nil),                // 495: MsgUp.match_small_battlefield
	(*StartSmallBattlefield)(nil),                // 496: MsgUp.start_small_battlefield
	(*ConfirmSmallBattlefield)(nil),              // 497: MsgUp.confirm_small_battlefield
	(*GetSmallBattlefieldInfo)(nil),              // 498: MsgUp.get_small_battlefield_info
	(*GetSmallBattlefieldInvite)(nil),            // 499: MsgUp.get_small_battlefield_invite
	(*ReadySmallBattlefield)(nil),                // 500: MsgUp.ready_small_battlefield
	(*GetActivityTaskRewardItemsBatch)(nil),      // 501: MsgUp.get_activity_task_reward_items_batch
	(*SelectSmallBattlefieldBuff)(nil),           // 502: MsgUp.select_small_battlefield_buff
	(*QuitSmallBattlefield)(nil),                 // 503: MsgUp.quit_small_battlefield
	(*GetSmallBattlefieldInviteList)(nil),        // 504: MsgUp.get_small_battlefield_invite_list
	(*GetActiveEventTaskList)(nil),               // 505: MsgUp.get_active_event_task_list
	(*SelectGuildBuildingSkin)(nil),              // 506: MsgUp.select_guild_building_skin
	(*SecretRoomOperation)(nil),                  // 507: MsgUp.secret_room_operation
	(*GetFireCoinsNumToday)(nil),                 // 508: MsgUp.get_fire_coins_num_today
	(*GetGrowthFund)(nil),                        // 509: MsgUp.get_growth_fund
	(*GetGrowthFundReward)(nil),                  // 510: MsgUp.get_growth_fund_reward
	(*GetWarLossReward)(nil),                     // 511: MsgUp.get_war_loss_reward
	(*GhostTroops)(nil),                          // 512: MsgUp.ghost_troops
	(*CancelGhostTroops)(nil),                    // 513: MsgUp.cancel_ghost_troops
	(*GetFameTaskList)(nil),                      // 514: MsgUp.get_fame_task_list
	(*GetFameTaskReward)(nil),                    // 515: MsgUp.get_fame_task_reward
	(*GetFameProcessReward)(nil),                 // 516: MsgUp.get_fame_process_reward
	(*LikeFame)(nil),                             // 517: MsgUp.like_fame
	(*GetLikeFameInfo)(nil),                      // 518: MsgUp.get_like_fame_info
	(*GetMapBattleFlagInfoTest)(nil),             // 519: MsgUp.get_map_battle_flag_info_test
	(*GetGuildTerritoryRes)(nil),                 // 520: MsgUp.get_guild_territory_res
	(*GetPveRankList)(nil),                       // 521: MsgUp.get_pve_rank_list
	(*GetBarbarianRankList)(nil),                 // 522: MsgUp.get_barbarian_rank_list
	(*GetYounierRankList)(nil),                   // 523: MsgUp.get_younier_rank_list
	(*GetPopularityRewardItems)(nil),             // 524: MsgUp.get_popularity_reward_items
	(*FreemarchRevive)(nil),                      // 525: MsgUp.freemarch_revive
	(*FreeMarchTeam)(nil),                        // 526: MsgUp.free_march_team
	(*FmTeamCreate)(nil),                         // 527: MsgUp.fm_team_create
	(*FmTeamInfo)(nil),                           // 528: MsgUp.fm_team_info
	(*FmTeamSetInfo)(nil),                        // 529: MsgUp.fm_team_set_info
	(*FmTeamDismiss)(nil),                        // 530: MsgUp.fm_team_dismiss
	(*FmTeamMemberPause)(nil),                    // 531: MsgUp.fm_team_member_pause
	(*FmTeamMemberLeave)(nil),                    // 532: MsgUp.fm_team_member_leave
	(*FmTeamMemberBack)(nil),                     // 533: MsgUp.fm_team_member_back
	(*FmTeamInvite)(nil),                         // 534: MsgUp.fm_team_invite
	(*FmTeamInviteConfirm)(nil),                  // 535: MsgUp.fm_team_invite_confirm
	(*FmTeamRally)(nil),                          // 536: MsgUp.fm_team_rally
	(*FmTeamSearchUser)(nil),                     // 537: MsgUp.fm_team_search_user
	(*FmTeamRmMember)(nil),                       // 538: MsgUp.fm_team_rm_member
	(*GetTaskList)(nil),                          // 539: MsgUp.get_task_list
	(*GetTask)(nil),                              // 540: MsgUp.get_task
	(*DisTask)(nil),                              // 541: MsgUp.dis_task
	(*SubTask)(nil),                              // 542: MsgUp.sub_task
	(*GetTaskReward)(nil),                        // 543: MsgUp.get_task_reward
	(*UnlockTempBagCell)(nil),                    // 544: MsgUp.unlock_temp_bag_cell
	(*DisTempBagItem)(nil),                       // 545: MsgUp.dis_temp_bag_item
	(*GetGuildTerritoryResUseRecord)(nil),        // 546: MsgUp.get_guild_territory_res_use_record
	(*BuyGuildTerritoryRes)(nil),                 // 547: MsgUp.buy_guild_territory_res
	(*DistributeGuildTerritoryRes)(nil),          // 548: MsgUp.distribute_guild_territory_res
	(*DistributeResData)(nil),                    // 549: MsgUp.distribute_res_data
	(*GuildDepotResource)(nil),                   // 550: MsgUp.guild_depot_resource
	(*GuildTransport)(nil),                       // 551: MsgUp.guild_transport
	(*GuildTransportAsk)(nil),                    // 552: MsgUp.guild_transport_ask
	(*GuildTransportList)(nil),                   // 553: MsgUp.guild_transport_list
	(*GuildTransportFind)(nil),                   // 554: MsgUp.guild_transport_find
	(*CancelHealSoldiers)(nil),                   // 555: MsgUp.cancel_heal_soldiers
	(*TransportInfo)(nil),                        // 556: MsgUp.transport_info
	(*ProduceMedicineBag)(nil),                   // 557: MsgUp.produce_medicine_bag
	(*SpeedupMedicineBag)(nil),                   // 558: MsgUp.speedup_medicine_bag
	(*ChargeItem)(nil),                           // 559: MsgUp.charge_item
	(*ModifyBuildingPosition)(nil),               // 560: MsgUp.modify_building_position
	(*PetTechUpgrade)(nil),                       // 561: MsgUp.pet_tech_upgrade
	(*PetTechUpgradeCancel)(nil),                 // 562: MsgUp.pet_tech_upgrade_cancel
	(*PetTechUpgradeSpeedup)(nil),                // 563: MsgUp.pet_tech_upgrade_speedup
	(*InitData)(nil),                             // 564: MsgUp.init_data
	(*SurrenderSoldiersFinish)(nil),              // 565: MsgUp.surrender_soldiers_finish
	(*SpeedupSurrenderSoldiers)(nil),             // 566: MsgUp.speedup_surrender_soldiers
	(*CancelSurrenderSoldiers)(nil),              // 567: MsgUp.cancel_surrender_soldiers
	(*WorkFinish)(nil),                           // 568: MsgUp.work_finish
	(*SpeedupWork)(nil),                          // 569: MsgUp.speedup_work
	(*CancelWork)(nil),                           // 570: MsgUp.cancel_work
	(*Interaction)(nil),                          // 571: MsgUp.interaction
	(*InteractionAsk)(nil),                       // 572: MsgUp.interaction_ask
	(*ProduceMedicineBagFinish)(nil),             // 573: MsgUp.produce_medicine_bag_finish
	(*CancelProduceMedicineBag)(nil),             // 574: MsgUp.cancel_produce_medicine_bag
	(*ModifyTroopAutoRelife)(nil),                // 575: MsgUp.modify_troop_auto_relife
	(*PetSummaryList)(nil),                       // 576: MsgUp.pet_summary_list
	(*EquipForge)(nil),                           // 577: MsgUp.equip_forge
	(*EquipForgeFinish)(nil),                     // 578: MsgUp.equip_forge_finish
	(*EquipStreathen)(nil),                       // 579: MsgUp.equip_streathen
	(*EquipEnchanting)(nil),                      // 580: MsgUp.equip_enchanting
	(*EquipFuse)(nil),                            // 581: MsgUp.equip_fuse
	(*PlayerTreasureFuse)(nil),                   // 582: MsgUp.player_treasure_fuse
	(*EquipRefine)(nil),                          // 583: MsgUp.equip_refine
	(*EquipTechUpgrad)(nil),                      // 584: MsgUp.equip_tech_upgrad
	(*PetBindHero)(nil),                          // 585: MsgUp.pet_bind_hero
	(*PetMerge)(nil),                             // 586: MsgUp.pet_merge
	(*Visit)(nil),                                // 587: MsgUp.visit
	(*DestructItemBatch)(nil),                    // 588: MsgUp.destruct_item_batch
	(*DestructTreasure)(nil),                     // 589: MsgUp.destruct_treasure
	(*DestructTreasureBatch)(nil),                // 590: MsgUp.destruct_treasure_batch
	(*TavernDraw)(nil),                           // 591: MsgUp.tavern_draw
	(*HeroTalentUpgrade)(nil),                    // 592: MsgUp.hero_talent_upgrade
	(*HeroTalentReset)(nil),                      // 593: MsgUp.hero_talent_reset
	(*UsePlayerGift)(nil),                        // 594: MsgUp.use_player_gift
	(*BatchReadMail)(nil),                        // 595: MsgUp.batch_read_mail
	(*BatchGetReward)(nil),                       // 596: MsgUp.batch_get_reward
	(*AskEquipInfo)(nil),                         // 597: MsgUp.ask_equip_info
	(*GetPetSummaryInfo)(nil),                    // 598: MsgUp.get_pet_summary_info
	(*FpsFinishReward)(nil),                      // 599: MsgUp.fps_finish_reward
	(*FpsStart)(nil),                             // 600: MsgUp.fps_start
	(*FpsOut)(nil),                               // 601: MsgUp.fps_out
	(*WorldSearch)(nil),                          // 602: MsgUp.world_search
	(*AutoRally)(nil),                            // 603: MsgUp.auto_rally
	(*SyncAutoRally)(nil),                        // 604: MsgUp.sync_auto_rally
	(*GuildSign)(nil),                            // 605: MsgUp.guild_sign
	(*GuildSignInfo)(nil),                        // 606: MsgUp.guild_sign_info
	(*GuildSignComment)(nil),                     // 607: MsgUp.guild_sign_comment
	(*GuildSignList)(nil),                        // 608: MsgUp.guild_sign_list
	(*SetFriendPlayerData)(nil),                  // 609: MsgUp.set_friend_player_data
	(*OpenGiftBox)(nil),                          // 610: MsgUp.open_gift_box
	(*RequestWorld_Scale)(nil),                   // 611: MsgUp.request_world_Scale
	(*GuideFps)(nil),                             // 612: MsgUp.guide_fps
	(*SendTroopCastle)(nil),                      // 613: MsgUp.send_troop_castle
	(*IntelStrength)(nil),                        // 614: MsgUp.intel_strength
	(*IntelTaskReward)(nil),                      // 615: MsgUp.intel_task_reward
	(*IntelTaskRefresh)(nil),                     // 616: MsgUp.intel_task_refresh
	(*CloudInfo)(nil),                            // 617: MsgUp.cloud_info
	(*chatmessage.SendTextMessage)(nil),          // 618: ChatMessage.send_text_message
	(*chatmessage.SendVoiceMessage)(nil),         // 619: ChatMessage.send_voice_message
	(*chatmessage.SendCoordMessage)(nil),         // 620: ChatMessage.send_coord_message
	(*chatmessage.SendPhotoMessage)(nil),         // 621: ChatMessage.send_photo_message
	(*chatmessage.SendMailMessage)(nil),          // 622: ChatMessage.send_mail_message
	(*chatmessage.MarkReadChannel)(nil),          // 623: ChatMessage.mark_read_channel
	(*chatmessage.DeleteMessage)(nil),            // 624: ChatMessage.delete_message
	(*chatmessage.SendEquipMessage)(nil),         // 625: ChatMessage.send_equip_message
	(*chatmessage.DeletePvpMessage)(nil),         // 626: ChatMessage.delete_pvp_message
	(*chatmessage.SendGeneralMessage)(nil),       // 627: ChatMessage.send_general_message
	(*chatmessage.SendFameMessage)(nil),          // 628: ChatMessage.send_fame_message
	(*chatmessage.SendGoodsMessage)(nil),         // 629: ChatMessage.send_goods_message
	(*chatmessage.SendPetMessage)(nil),           // 630: ChatMessage.send_pet_message
	(*pb.AutoPickupSetting)(nil),                 // 631: Msg.auto_pickup_setting
	(*pb.NewUserGuideProgress)(nil),              // 632: Msg.new_user_guide_progress
	(*pb.GoodsInfo)(nil),                         // 633: Msg.goods_info
	(pb.ForgeType)(0),                            // 634: Msg.forge_type
	(pb.WearPosition)(0),                         // 635: Msg.wear_position
	(pb.Mtype)(0),                                // 636: Msg.mtype
	(pb.MailType)(0),                             // 637: Msg.mail_type
	(pb.MailTabType)(0),                          // 638: Msg.mail_tab_type
	(*pb.Troop)(nil),                             // 639: Msg.troop
	(pb.MarchType)(0),                            // 640: Msg.march_type
	(pb.MapinfoType)(0),                          // 641: Msg.mapinfo_type
	(*pb.ResourceInfo)(nil),                      // 642: Msg.resource_info
	(*pb.ComItem)(nil),                           // 643: Msg.com_item
	(pb.WearActionType)(0),                       // 644: Msg.wear_action_type
	(*pb.MapRegion)(nil),                         // 645: Msg.map_region
	(pb.PushSwitchType)(0),                       // 646: Msg.push_switch_type
	(pb.PushNotificationType)(0),                 // 647: Msg.push_notification_type
	(pb.ItemResourceType)(0),                     // 648: Msg.item_resource_type
	(*chatmessage.ChatHistoryFecth)(nil),         // 649: ChatMessage.chat_history_fecth
	(*chatmessage.ReportMessage)(nil),            // 650: ChatMessage.report_message
	(pb.HelpType)(0),                             // 651: Msg.help_type
	(pb.LanType)(0),                              // 652: Msg.lan_type
	(pb.GuildJoinType)(0),                        // 653: Msg.guild_join_type
	(pb.GuildMemAuthority)(0),                    // 654: Msg.guild_mem_authority
	(*pb.General)(nil),                           // 655: Msg.general
	(pb.KingCastleJobType)(0),                    // 656: Msg.king_castle_job_type
	(pb.GeneralQualityType)(0),                   // 657: Msg.general_quality_type
	(*pb.GeneralBaptizeItem)(nil),                // 658: Msg.general_baptize_item
	(pb.SubCityPolicy)(0),                        // 659: Msg.sub_city_policy
	(*chatmessage.ChatHistoryWholeFetch)(nil),    // 660: ChatMessage.chat_history_whole_fetch
	(*pb.BuffInfo)(nil),                          // 661: Msg.buff_info
	(*pb.FavoriteCoordInfo)(nil),                 // 662: Msg.favorite_coord_info
	(pb.GuildBuildingType)(0),                    // 663: Msg.guild_building_type
	(pb.RankType)(0),                             // 664: Msg.rank_type
	(*pb.BattlefieldBuildingInfo)(nil),           // 665: Msg.battlefield_building_info
	(*pb.MoreIdType)(nil),                        // 666: Msg.more_id_type
	(pb.WorldSearchType)(0),                      // 667: Msg.world_search_type
	(*pb.AutoRallyBoss)(nil),                     // 668: Msg.auto_rally_boss
}
var file_up_proto_depIdxs = []int32{
	102, // 0: MsgUp.up_msg._login:type_name -> MsgUp.login
	103, // 1: MsgUp.up_msg._request_worldmap:type_name -> MsgUp.request_mapinfo
	55,  // 2: MsgUp.up_msg._get_time_reward:type_name -> MsgUp.get_time_reward
	46,  // 3: MsgUp.up_msg._equip_synthesis:type_name -> MsgUp.equip_synthesis
	87,  // 4: MsgUp.up_msg._wear_equip:type_name -> MsgUp.wear_equip
	107, // 5: MsgUp.up_msg._consume_item:type_name -> MsgUp.consume_item
	52,  // 6: MsgUp.up_msg._require_rewards:type_name -> MsgUp.require_rewards
	53,  // 7: MsgUp.up_msg._set_name:type_name -> MsgUp.set_name
	54,  // 8: MsgUp.up_msg._set_avatar:type_name -> MsgUp.set_avatar
	58,  // 9: MsgUp.up_msg._ask_daily_login:type_name -> MsgUp.ask_daily_login
	71,  // 10: MsgUp.up_msg._get_maillist:type_name -> MsgUp.get_maillist
	80,  // 11: MsgUp.up_msg._read_mail:type_name -> MsgUp.read_mail
	153, // 12: MsgUp.up_msg._guild:type_name -> MsgUp.guild
	61,  // 13: MsgUp.up_msg._teleport:type_name -> MsgUp.teleport
	62,  // 14: MsgUp.up_msg._teleport_random:type_name -> MsgUp.teleport_random
	64,  // 15: MsgUp.up_msg._create_building:type_name -> MsgUp.create_building
	65,  // 16: MsgUp.up_msg._upgrade_building:type_name -> MsgUp.upgrade_building
	66,  // 17: MsgUp.up_msg._remove_building:type_name -> MsgUp.remove_building
	67,  // 18: MsgUp.up_msg._speedup_building:type_name -> MsgUp.speedup_building
	68,  // 19: MsgUp.up_msg._train_soldiers:type_name -> MsgUp.train_soldiers
	69,  // 20: MsgUp.up_msg._reap_soldiers:type_name -> MsgUp.reap_soldiers
	70,  // 21: MsgUp.up_msg._speedup_train:type_name -> MsgUp.speedup_train
	83,  // 22: MsgUp.up_msg._reap_resource:type_name -> MsgUp.reap_resource
	85,  // 23: MsgUp.up_msg._claim_quest_reward:type_name -> MsgUp.claim_quest_reward
	86,  // 24: MsgUp.up_msg._send_troop:type_name -> MsgUp.send_troop
	90,  // 25: MsgUp.up_msg._check_march:type_name -> MsgUp.check_march
	91,  // 26: MsgUp.up_msg._return_castle:type_name -> MsgUp.return_castle
	93,  // 27: MsgUp.up_msg._send_troop_garrison:type_name -> MsgUp.send_troop_garrison
	94,  // 28: MsgUp.up_msg._buy_builder:type_name -> MsgUp.buy_builder
	95,  // 29: MsgUp.up_msg._upgrade_tech:type_name -> MsgUp.upgrade_tech
	99,  // 30: MsgUp.up_msg._get_server_list:type_name -> MsgUp.get_server_list
	109, // 31: MsgUp.up_msg._speedup_tech:type_name -> MsgUp.speedup_tech
	111, // 32: MsgUp.up_msg._buy_item:type_name -> MsgUp.buy_item
	112, // 33: MsgUp.up_msg._heal_soldiers:type_name -> MsgUp.heal_soldiers
	117, // 34: MsgUp.up_msg._surrender_soldiers:type_name -> MsgUp.surrender_soldiers
	51,  // 35: MsgUp.up_msg._equip_reap:type_name -> MsgUp.equip_reap
	118, // 36: MsgUp.up_msg._work:type_name -> MsgUp.work
	119, // 37: MsgUp.up_msg._cancel_building:type_name -> MsgUp.cancel_building
	120, // 38: MsgUp.up_msg._cancel_train:type_name -> MsgUp.cancel_train
	121, // 39: MsgUp.up_msg._cancel_tech:type_name -> MsgUp.cancel_tech
	122, // 40: MsgUp.up_msg._cancel_equip:type_name -> MsgUp.cancel_equip
	96,  // 41: MsgUp.up_msg._upgrade_gift:type_name -> MsgUp.upgrade_gift
	125, // 42: MsgUp.up_msg._peace_shield:type_name -> MsgUp.peace_shield
	78,  // 43: MsgUp.up_msg._get_reportlist:type_name -> MsgUp.get_reportlist
	126, // 44: MsgUp.up_msg._del_mail:type_name -> MsgUp.del_mail
	127, // 45: MsgUp.up_msg._start_daily_task:type_name -> MsgUp.start_daily_task
	128, // 46: MsgUp.up_msg._daily_task_rewards:type_name -> MsgUp.daily_task_rewards
	129, // 47: MsgUp.up_msg._sacrifice:type_name -> MsgUp.sacrifice
	130, // 48: MsgUp.up_msg._taxes:type_name -> MsgUp.taxes
	131, // 49: MsgUp.up_msg._favorite_mail:type_name -> MsgUp.favorite_mail
	132, // 50: MsgUp.up_msg._get_favoritelist:type_name -> MsgUp.get_favoritelist
	72,  // 51: MsgUp.up_msg._get_sysmaillist:type_name -> MsgUp.get_sysmaillist
	59,  // 52: MsgUp.up_msg._send_mail:type_name -> MsgUp.send_mail
	618, // 53: MsgUp.up_msg._send_text_message:type_name -> ChatMessage.send_text_message
	133, // 54: MsgUp.up_msg._chat_history_fecth:type_name -> MsgUp.chat_history_fecth
	619, // 55: MsgUp.up_msg._send_voice_message:type_name -> ChatMessage.send_voice_message
	138, // 56: MsgUp.up_msg._sync_tax_info:type_name -> MsgUp.sync_tax_info
	147, // 57: MsgUp.up_msg._push_token:type_name -> MsgUp.push_token
	180, // 58: MsgUp.up_msg._contact_get_list:type_name -> MsgUp.contact_get_list
	181, // 59: MsgUp.up_msg._contact_add_user:type_name -> MsgUp.contact_add_user
	182, // 60: MsgUp.up_msg._contact_remove_user:type_name -> MsgUp.contact_remove_user
	189, // 61: MsgUp.up_msg._dismiss_soldiers:type_name -> MsgUp.dismiss_soldiers
	190, // 62: MsgUp.up_msg._set_language:type_name -> MsgUp.set_language
	92,  // 63: MsgUp.up_msg._return_castle_by_item:type_name -> MsgUp.return_castle_by_item
	215, // 64: MsgUp.up_msg._speedup_march:type_name -> MsgUp.speedup_march
	123, // 65: MsgUp.up_msg._set_push:type_name -> MsgUp.set_push
	216, // 66: MsgUp.up_msg._get_popularity_rank_list:type_name -> MsgUp.get_popularity_rank_list
	217, // 67: MsgUp.up_msg._get_roulette_list:type_name -> MsgUp.get_roulette_list
	218, // 68: MsgUp.up_msg._abandon_treasure_box:type_name -> MsgUp.abandon_treasure_box
	219, // 69: MsgUp.up_msg._refresh_roulette:type_name -> MsgUp.refresh_roulette
	220, // 70: MsgUp.up_msg._start_roulette:type_name -> MsgUp.start_roulette
	221, // 71: MsgUp.up_msg._open_treasure_box:type_name -> MsgUp.open_treasure_box
	223, // 72: MsgUp.up_msg._black_market_refresh:type_name -> MsgUp.black_market_refresh
	224, // 73: MsgUp.up_msg._black_market_buy:type_name -> MsgUp.black_market_buy
	81,  // 74: MsgUp.up_msg._get_mail_reward:type_name -> MsgUp.get_mail_reward
	222, // 75: MsgUp.up_msg._buy_roulette_credits:type_name -> MsgUp.buy_roulette_credits
	42,  // 76: MsgUp.up_msg._heal_wall:type_name -> MsgUp.heal_wall
	43,  // 77: MsgUp.up_msg._cancel_heal_wall:type_name -> MsgUp.cancel_heal_wall
	230, // 78: MsgUp.up_msg._building_finish:type_name -> MsgUp.building_finish
	231, // 79: MsgUp.up_msg._technology_finish:type_name -> MsgUp.technology_finish
	232, // 80: MsgUp.up_msg._save_player_steps:type_name -> MsgUp.save_player_steps
	233, // 81: MsgUp.up_msg._heal_finish:type_name -> MsgUp.heal_finish
	234, // 82: MsgUp.up_msg._synthesis_finish:type_name -> MsgUp.synthesis_finish
	235, // 83: MsgUp.up_msg._get_user_details:type_name -> MsgUp.get_user_details
	236, // 84: MsgUp.up_msg._battle_guide_finished:type_name -> MsgUp.battle_guide_finished
	237, // 85: MsgUp.up_msg._get_daily_task_list:type_name -> MsgUp.get_daily_task_list
	239, // 86: MsgUp.up_msg._buy_from_store:type_name -> MsgUp.buy_from_store
	240, // 87: MsgUp.up_msg._refresh_daily_task:type_name -> MsgUp.refresh_daily_task
	241, // 88: MsgUp.up_msg._get_iap_list:type_name -> MsgUp.get_iap_list
	242, // 89: MsgUp.up_msg._get_ruins_list:type_name -> MsgUp.get_ruins_list
	243, // 90: MsgUp.up_msg._open_ruins:type_name -> MsgUp.open_ruins
	244, // 91: MsgUp.up_msg._get_king_castle_info:type_name -> MsgUp.get_king_castle_info
	259, // 92: MsgUp.up_msg._active_sub_city:type_name -> MsgUp.active_sub_city
	260, // 93: MsgUp.up_msg._modify_sub_city:type_name -> MsgUp.modify_sub_city
	225, // 94: MsgUp.up_msg._tavern_refresh:type_name -> MsgUp.tavern_refresh
	226, // 95: MsgUp.up_msg._tavern_buy:type_name -> MsgUp.tavern_buy
	246, // 96: MsgUp.up_msg._general:type_name -> MsgUp.general
	229, // 97: MsgUp.up_msg._sacrifice_relive_general:type_name -> MsgUp.sacrifice_relive_general
	261, // 98: MsgUp.up_msg._sub_city_buy_builder:type_name -> MsgUp.sub_city_buy_builder
	262, // 99: MsgUp.up_msg._sub_city_upgrade_times:type_name -> MsgUp.sub_city_upgrade_times
	263, // 100: MsgUp.up_msg._sub_city_speedup_building:type_name -> MsgUp.sub_city_speedup_building
	264, // 101: MsgUp.up_msg._sub_city_buy_troop:type_name -> MsgUp.sub_city_buy_troop
	265, // 102: MsgUp.up_msg._abandon_sub_city:type_name -> MsgUp.abandon_sub_city
	266, // 103: MsgUp.up_msg._get_activity_task_reward:type_name -> MsgUp.get_activity_task_reward
	284, // 104: MsgUp.up_msg._change_king_player:type_name -> MsgUp.change_king_player
	245, // 105: MsgUp.up_msg._setguildplayerkingcastlejob:type_name -> MsgUp.set_guild_player_king_castle_job
	227, // 106: MsgUp.up_msg._general_skill_refresh:type_name -> MsgUp.general_skill_refresh
	228, // 107: MsgUp.up_msg._general_skill_buy:type_name -> MsgUp.general_skill_buy
	267, // 108: MsgUp.up_msg._get_chat_config:type_name -> MsgUp.get_chat_config
	268, // 109: MsgUp.up_msg._change_evony:type_name -> MsgUp.change_evony
	269, // 110: MsgUp.up_msg._destruct_equipment:type_name -> MsgUp.destruct_equipment
	50,  // 111: MsgUp.up_msg._dewel_synthesis:type_name -> MsgUp.dewel_synthesis
	270, // 112: MsgUp.up_msg._reset_lord_gift:type_name -> MsgUp.reset_lord_gift
	285, // 113: MsgUp.up_msg._set_king_name_language:type_name -> MsgUp.set_king_name_language
	271, // 114: MsgUp.up_msg._get_guild_tech_data:type_name -> MsgUp.get_guild_tech_data
	286, // 115: MsgUp.up_msg._call_back_king_castle_army:type_name -> MsgUp.call_back_king_castle_army
	272, // 116: MsgUp.up_msg._get_server_info:type_name -> MsgUp.get_server_info
	273, // 117: MsgUp.up_msg._search_user:type_name -> MsgUp.search_user
	274, // 118: MsgUp.up_msg._get_wheel_list:type_name -> MsgUp.get_wheel_list
	275, // 119: MsgUp.up_msg._play_wheel:type_name -> MsgUp.play_wheel
	276, // 120: MsgUp.up_msg._collect_wheel_data:type_name -> MsgUp.collect_wheel_data
	277, // 121: MsgUp.up_msg._set_wheel_vip_play:type_name -> MsgUp.set_wheel_vip_play
	278, // 122: MsgUp.up_msg._get_wheel_vip_play_list:type_name -> MsgUp.get_wheel_vip_play_list
	279, // 123: MsgUp.up_msg._get_wheel_credits:type_name -> MsgUp.get_wheel_credits
	280, // 124: MsgUp.up_msg._client_log:type_name -> MsgUp.client_log
	281, // 125: MsgUp.up_msg._set_defend_general:type_name -> MsgUp.set_defend_general
	287, // 126: MsgUp.up_msg._get_kindom_info:type_name -> MsgUp.get_kindom_info
	288, // 127: MsgUp.up_msg._get_kindom_job_title_users:type_name -> MsgUp.get_kindom_job_title_users
	289, // 128: MsgUp.up_msg._get_kindom_history_kings:type_name -> MsgUp.get_kindom_history_kings
	290, // 129: MsgUp.up_msg._get_kindom_march_list:type_name -> MsgUp.get_kindom_march_list
	291, // 130: MsgUp.up_msg._set_kindom_player_job_title:type_name -> MsgUp.set_kindom_player_job_title
	292, // 131: MsgUp.up_msg._get_kindom_army_support:type_name -> MsgUp.get_kindom_army_support
	116, // 132: MsgUp.up_msg._speedup_heal_soldiers:type_name -> MsgUp.speedup_heal_soldiers
	294, // 133: MsgUp.up_msg._sub_city_heal_wall:type_name -> MsgUp.sub_city_heal_wall
	49,  // 134: MsgUp.up_msg._speedup_equip_synthesis:type_name -> MsgUp.speedup_equip_synthesis
	124, // 135: MsgUp.up_msg._gift_exchange:type_name -> MsgUp.gift_exchange
	295, // 136: MsgUp.up_msg._set_user_info_permission:type_name -> MsgUp.set_user_info_permission
	299, // 137: MsgUp.up_msg._dismiss_subcity_soldiers:type_name -> MsgUp.dismiss_subcity_soldiers
	300, // 138: MsgUp.up_msg._get_history_war_list:type_name -> MsgUp.get_history_war_list
	301, // 139: MsgUp.up_msg._send_guild_war_immediately:type_name -> MsgUp.send_guild_war_immediately
	148, // 140: MsgUp.up_msg._get_kill_rank_list:type_name -> MsgUp.get_kill_rank_list
	296, // 141: MsgUp.up_msg._set_vip_permission:type_name -> MsgUp.set_vip_permission
	302, // 142: MsgUp.up_msg._add_friend:type_name -> MsgUp.add_friend
	303, // 143: MsgUp.up_msg._del_friend:type_name -> MsgUp.del_friend
	304, // 144: MsgUp.up_msg._add_user_to_blacklist:type_name -> MsgUp.add_user_to_blacklist
	305, // 145: MsgUp.up_msg._del_user_from_blacklist:type_name -> MsgUp.del_user_from_blacklist
	306, // 146: MsgUp.up_msg._confirm_add_friend:type_name -> MsgUp.confirm_add_friend
	307, // 147: MsgUp.up_msg._get_mail_report_detail:type_name -> MsgUp.get_mail_report_detail
	309, // 148: MsgUp.up_msg._buy_resource:type_name -> MsgUp.buy_resource
	308, // 149: MsgUp.up_msg._refuse_add_friend:type_name -> MsgUp.refuse_add_friend
	310, // 150: MsgUp.up_msg._favorite_friend:type_name -> MsgUp.favorite_friend
	311, // 151: MsgUp.up_msg._unfavorite_friend:type_name -> MsgUp.unfavorite_friend
	312, // 152: MsgUp.up_msg._suggest_friends:type_name -> MsgUp.suggest_friends
	620, // 153: MsgUp.up_msg._send_coord_message:type_name -> ChatMessage.send_coord_message
	621, // 154: MsgUp.up_msg._send_photo_message:type_name -> ChatMessage.send_photo_message
	622, // 155: MsgUp.up_msg._send_mail_message:type_name -> ChatMessage.send_mail_message
	623, // 156: MsgUp.up_msg._mark_read_channel:type_name -> ChatMessage.mark_read_channel
	313, // 157: MsgUp.up_msg._claim_membership_reward:type_name -> MsgUp.claim_membership_reward
	293, // 158: MsgUp.up_msg._kingdom_award_player:type_name -> MsgUp.kingdom_award_player
	134, // 159: MsgUp.up_msg._report_message:type_name -> MsgUp.report_message
	314, // 160: MsgUp.up_msg._chat_history_whole_fetch:type_name -> MsgUp.chat_history_whole_fetch
	44,  // 161: MsgUp.up_msg._outfire_wall:type_name -> MsgUp.outfire_wall
	45,  // 162: MsgUp.up_msg._on_wall_outlife:type_name -> MsgUp.on_wall_outlife
	73,  // 163: MsgUp.up_msg._get_rewardmaillist:type_name -> MsgUp.get_rewardmaillist
	315, // 164: MsgUp.up_msg._claim_consumer_reward:type_name -> MsgUp.claim_consumer_reward
	316, // 165: MsgUp.up_msg._refresh_patrol:type_name -> MsgUp.refresh_patrol
	317, // 166: MsgUp.up_msg._collect_patrol_award:type_name -> MsgUp.collect_patrol_award
	318, // 167: MsgUp.up_msg._auto_patrol:type_name -> MsgUp.auto_patrol
	319, // 168: MsgUp.up_msg._get_server_active_reward:type_name -> MsgUp.get_server_active_reward
	320, // 169: MsgUp.up_msg._alliance_use_gift:type_name -> MsgUp.alliance_use_gift
	321, // 170: MsgUp.up_msg._king_use_gift:type_name -> MsgUp.king_use_gift
	322, // 171: MsgUp.up_msg._server_active:type_name -> MsgUp.server_active
	624, // 172: MsgUp.up_msg._delete_message:type_name -> ChatMessage.delete_message
	323, // 173: MsgUp.up_msg._get_king_gift:type_name -> MsgUp.get_king_gift
	324, // 174: MsgUp.up_msg._get_friends_list:type_name -> MsgUp.get_friends_list
	149, // 175: MsgUp.up_msg._get_alliance_rank_list:type_name -> MsgUp.get_alliance_rank_list
	150, // 176: MsgUp.up_msg._get_alliance_kill_rank_list:type_name -> MsgUp.get_alliance_kill_rank_list
	151, // 177: MsgUp.up_msg._get_power_rank_list:type_name -> MsgUp.get_power_rank_list
	325, // 178: MsgUp.up_msg._change_server_castle:type_name -> MsgUp.change_server_castle
	100, // 179: MsgUp.up_msg._get_server_kingdom_list:type_name -> MsgUp.get_server_kingdom_list
	101, // 180: MsgUp.up_msg._get_server_kingdom:type_name -> MsgUp.get_server_kingdom
	326, // 181: MsgUp.up_msg._check_buff:type_name -> MsgUp.check_buff
	327, // 182: MsgUp.up_msg._check_rotary:type_name -> MsgUp.check_rotary
	74,  // 183: MsgUp.up_msg._get_activitymaillist:type_name -> MsgUp.get_activitymaillist
	328, // 184: MsgUp.up_msg._check_rotary_advance:type_name -> MsgUp.check_rotary_advance
	329, // 185: MsgUp.up_msg._white_walker_active_start:type_name -> MsgUp.white_walker_active_start
	330, // 186: MsgUp.up_msg._get_lord_hour_gift:type_name -> MsgUp.get_lord_hour_gift
	331, // 187: MsgUp.up_msg._repatriate_war_member:type_name -> MsgUp.repatriate_war_member
	332, // 188: MsgUp.up_msg._get_tarven_stamina:type_name -> MsgUp.get_tarven_stamina
	333, // 189: MsgUp.up_msg._add_favorite_coord:type_name -> MsgUp.add_favorite_coord
	334, // 190: MsgUp.up_msg._get_favorite_coord_list:type_name -> MsgUp.get_favorite_coord_list
	335, // 191: MsgUp.up_msg._ask_general:type_name -> MsgUp.ask_general
	336, // 192: MsgUp.up_msg._report_error:type_name -> MsgUp.report_error
	337, // 193: MsgUp.up_msg._create_guild_building:type_name -> MsgUp.create_guild_building
	338, // 194: MsgUp.up_msg._reclaim_guild_building:type_name -> MsgUp.reclaim_guild_building
	344, // 195: MsgUp.up_msg._set_subcity_auto_fight:type_name -> MsgUp.set_subcity_auto_fight
	342, // 196: MsgUp.up_msg._get_guild_territory:type_name -> MsgUp.get_guild_territory
	345, // 197: MsgUp.up_msg._release_imprison_general:type_name -> MsgUp.release_imprison_general
	346, // 198: MsgUp.up_msg._kill_imprison_general:type_name -> MsgUp.kill_imprison_general
	343, // 199: MsgUp.up_msg._stop_reclaim_guild_building:type_name -> MsgUp.stop_reclaim_guild_building
	347, // 200: MsgUp.up_msg._redom_imprison_general:type_name -> MsgUp.redom_imprison_general
	348, // 201: MsgUp.up_msg._SendInvitekey:type_name -> MsgUp.SendInvitekey
	349, // 202: MsgUp.up_msg._send_snowball:type_name -> MsgUp.send_snowball
	350, // 203: MsgUp.up_msg._buy_skin:type_name -> MsgUp.buy_skin
	351, // 204: MsgUp.up_msg._select_skin:type_name -> MsgUp.select_skin
	352, // 205: MsgUp.up_msg._Facebook_Invite:type_name -> MsgUp.Facebook_Invite
	353, // 206: MsgUp.up_msg._get_guild_territory_limit:type_name -> MsgUp.get_guild_territory_limit
	354, // 207: MsgUp.up_msg._get_cross_server_info:type_name -> MsgUp.get_cross_server_info
	105, // 208: MsgUp.up_msg._request_worldmap_new:type_name -> MsgUp.request_mapinfo_new
	355, // 209: MsgUp.up_msg._upgrade_subcity_color:type_name -> MsgUp.upgrade_subcity_color
	297, // 210: MsgUp.up_msg._set_allience_gift_permission:type_name -> MsgUp.set_allience_gift_permission
	113, // 211: MsgUp.up_msg._ambulance_soldiers:type_name -> MsgUp.ambulance_soldiers
	82,  // 212: MsgUp.up_msg._batch_mail_reward:type_name -> MsgUp.batch_mail_reward
	356, // 213: MsgUp.up_msg._batch_wear_equip:type_name -> MsgUp.batch_wear_equip
	358, // 214: MsgUp.up_msg._get_cashcost_and_gold_reward:type_name -> MsgUp.get_cashcost_and_gold_reward
	359, // 215: MsgUp.up_msg._get_pre_recharge_reward:type_name -> MsgUp.get_pre_recharge_reward
	360, // 216: MsgUp.up_msg._get_game_notice:type_name -> MsgUp.get_game_notice
	361, // 217: MsgUp.up_msg._mark_read_game_notice:type_name -> MsgUp.mark_read_game_notice
	339, // 218: MsgUp.up_msg._upgrade_guild_building:type_name -> MsgUp.upgrade_guild_building
	362, // 219: MsgUp.up_msg._save_user_prefs:type_name -> MsgUp.save_user_prefs
	363, // 220: MsgUp.up_msg._get_user_prefs:type_name -> MsgUp.get_user_prefs
	341, // 221: MsgUp.up_msg._cancel_upgrade_guild_building:type_name -> MsgUp.cancel_upgrade_guild_building
	365, // 222: MsgUp.up_msg._get_world_boss_info:type_name -> MsgUp.get_world_boss_info
	366, // 223: MsgUp.up_msg._buy_attack_boss:type_name -> MsgUp.buy_attack_boss
	367, // 224: MsgUp.up_msg._get_cross_server_rank:type_name -> MsgUp.get_cross_server_rank
	368, // 225: MsgUp.up_msg._refine_equipment:type_name -> MsgUp.refine_equipment
	371, // 226: MsgUp.up_msg._update_subcity_wall_data:type_name -> MsgUp.update_subcity_wall_data
	372, // 227: MsgUp.up_msg._confirm_refine_equipment:type_name -> MsgUp.confirm_refine_equipment
	625, // 228: MsgUp.up_msg._send_equip_message:type_name -> ChatMessage.send_equip_message
	375, // 229: MsgUp.up_msg._clear_work_cd:type_name -> MsgUp.clear_work_cd
	376, // 230: MsgUp.up_msg._recommend_guild_tech:type_name -> MsgUp.recommend_guild_tech
	626, // 231: MsgUp.up_msg._delete_pvp_message:type_name -> ChatMessage.delete_pvp_message
	377, // 232: MsgUp.up_msg._hit_colorful_egg:type_name -> MsgUp.hit_colorful_egg
	75,  // 233: MsgUp.up_msg._get_fight_maillist:type_name -> MsgUp.get_fight_maillist
	378, // 234: MsgUp.up_msg._protect_other:type_name -> MsgUp.protect_other
	106, // 235: MsgUp.up_msg._request_mapinfo_battlefield:type_name -> MsgUp.request_mapinfo_battlefield
	379, // 236: MsgUp.up_msg._synthesis_item:type_name -> MsgUp.synthesis_item
	380, // 237: MsgUp.up_msg._come_in_battle:type_name -> MsgUp.come_in_battle
	381, // 238: MsgUp.up_msg._give_up_ruins:type_name -> MsgUp.give_up_ruins
	382, // 239: MsgUp.up_msg._upgrade_soldiers:type_name -> MsgUp.upgrade_soldiers
	383, // 240: MsgUp.up_msg._get_art_reward:type_name -> MsgUp.get_art_reward
	384, // 241: MsgUp.up_msg._active_pet:type_name -> MsgUp.active_pet
	385, // 242: MsgUp.up_msg._make_material:type_name -> MsgUp.make_material
	386, // 243: MsgUp.up_msg._speedup_material:type_name -> MsgUp.speedup_material
	389, // 244: MsgUp.up_msg._delete_material_queue:type_name -> MsgUp.delete_material_queue
	390, // 245: MsgUp.up_msg._upgrade_pet:type_name -> MsgUp.upgrade_pet
	391, // 246: MsgUp.up_msg._get_tech_task_list:type_name -> MsgUp.get_tech_task_list
	392, // 247: MsgUp.up_msg._get_tech_task_reward:type_name -> MsgUp.get_tech_task_reward
	387, // 248: MsgUp.up_msg._make_tech_stone:type_name -> MsgUp.make_tech_stone
	388, // 249: MsgUp.up_msg._speedup_tech_stone:type_name -> MsgUp.speedup_tech_stone
	393, // 250: MsgUp.up_msg._signup_battlefield:type_name -> MsgUp.signup_battlefield
	394, // 251: MsgUp.up_msg._set_members_battlefield:type_name -> MsgUp.set_members_battlefield
	395, // 252: MsgUp.up_msg._get_battlefield_ranklist:type_name -> MsgUp.get_battlefield_ranklist
	396, // 253: MsgUp.up_msg._get_battlefield_guildrank:type_name -> MsgUp.get_battlefield_guildrank
	398, // 254: MsgUp.up_msg._get_battlefield_history:type_name -> MsgUp.get_battlefield_history
	399, // 255: MsgUp.up_msg._get_rank_list:type_name -> MsgUp.get_rank_list
	340, // 256: MsgUp.up_msg._upgrade_guild_farm:type_name -> MsgUp.upgrade_guild_farm
	400, // 257: MsgUp.up_msg._quit_battle:type_name -> MsgUp.quit_battle
	401, // 258: MsgUp.up_msg._get_battlefield_info:type_name -> MsgUp.get_battlefield_info
	402, // 259: MsgUp.up_msg._get_battle_garrison:type_name -> MsgUp.get_battle_garrison
	403, // 260: MsgUp.up_msg._get_battle_data:type_name -> MsgUp.get_battle_data
	404, // 261: MsgUp.up_msg._get_battlefield_record:type_name -> MsgUp.get_battlefield_record
	405, // 262: MsgUp.up_msg._get_battlefield_personal_rank_info:type_name -> MsgUp.get_battlefield_personal_rank_info
	407, // 263: MsgUp.up_msg._set_id_number:type_name -> MsgUp.set_id_number
	406, // 264: MsgUp.up_msg._get_battlefield_personal_season_rank_info:type_name -> MsgUp.get_battlefield_personal_season_rank_info
	410, // 265: MsgUp.up_msg._set_dragon_unlock:type_name -> MsgUp.set_dragon_unlock
	411, // 266: MsgUp.up_msg._set_dragon_feed:type_name -> MsgUp.set_dragon_feed
	412, // 267: MsgUp.up_msg._set_dragon_active:type_name -> MsgUp.set_dragon_active
	413, // 268: MsgUp.up_msg._refresh_dragon_food:type_name -> MsgUp.refresh_dragon_food
	414, // 269: MsgUp.up_msg._get_honor_list:type_name -> MsgUp.get_honor_list
	415, // 270: MsgUp.up_msg._get_battlefield_boss:type_name -> MsgUp.get_battlefield_boss
	627, // 271: MsgUp.up_msg._send_general_message:type_name -> ChatMessage.send_general_message
	417, // 272: MsgUp.up_msg._battle_market_buy:type_name -> MsgUp.battle_market_buy
	416, // 273: MsgUp.up_msg._battle_market_refresh:type_name -> MsgUp.battle_market_refresh
	418, // 274: MsgUp.up_msg._get_found_subcity:type_name -> MsgUp.get_found_subcity
	420, // 275: MsgUp.up_msg._bet_found_subcity:type_name -> MsgUp.bet_found_subcity
	422, // 276: MsgUp.up_msg._reap_subcity_items:type_name -> MsgUp.reap_subcity_items
	423, // 277: MsgUp.up_msg._open_subcity_by_item:type_name -> MsgUp.open_subcity_by_item
	369, // 278: MsgUp.up_msg._refine_dragon:type_name -> MsgUp.refine_dragon
	373, // 279: MsgUp.up_msg._confirm_refine_dragon:type_name -> MsgUp.confirm_refine_dragon
	425, // 280: MsgUp.up_msg._set_building_government_general:type_name -> MsgUp.set_building_government_general
	426, // 281: MsgUp.up_msg._invite_robbers_members:type_name -> MsgUp.invite_robbers_members
	427, // 282: MsgUp.up_msg._get_robbers:type_name -> MsgUp.get_robbers
	428, // 283: MsgUp.up_msg._get_robbers_reward:type_name -> MsgUp.get_robbers_reward
	429, // 284: MsgUp.up_msg._get_vip_popularity_rank_list:type_name -> MsgUp.get_vip_popularity_rank_list
	430, // 285: MsgUp.up_msg._get_mapinfo_triumph:type_name -> MsgUp.get_mapinfo_triumph
	431, // 286: MsgUp.up_msg._get_mapinfo_triumph_record:type_name -> MsgUp.get_mapinfo_triumph_record
	433, // 287: MsgUp.up_msg._get_mapinfo_triumph_flower:type_name -> MsgUp.get_mapinfo_triumph_flower
	432, // 288: MsgUp.up_msg._get_mapinfo_triumph_flowerrecord:type_name -> MsgUp.get_mapinfo_triumph_flowerrecord
	434, // 289: MsgUp.up_msg._over_battlefield:type_name -> MsgUp.over_battlefield
	435, // 290: MsgUp.up_msg._destruct_skill_book:type_name -> MsgUp.destruct_skill_book
	436, // 291: MsgUp.up_msg._set_avatar_frame:type_name -> MsgUp.set_avatar_frame
	437, // 292: MsgUp.up_msg._get_achievement_list:type_name -> MsgUp.get_achievement_list
	438, // 293: MsgUp.up_msg._get_hydra_rank:type_name -> MsgUp.get_hydra_rank
	77,  // 294: MsgUp.up_msg._get_battlefield_maillist:type_name -> MsgUp.get_battlefield_maillist
	439, // 295: MsgUp.up_msg._get_king_return:type_name -> MsgUp.get_king_return
	440, // 296: MsgUp.up_msg._get_player_callback:type_name -> MsgUp.get_player_callback
	442, // 297: MsgUp.up_msg._get_king_return_reward:type_name -> MsgUp.get_king_return_reward
	114, // 298: MsgUp.up_msg._callback_soldiers:type_name -> MsgUp.callback_soldiers
	115, // 299: MsgUp.up_msg._revive_soldiers:type_name -> MsgUp.revive_soldiers
	63,  // 300: MsgUp.up_msg._teleport_guild:type_name -> MsgUp.teleport_guild
	446, // 301: MsgUp.up_msg._get_temple_building_list:type_name -> MsgUp.get_temple_building_list
	448, // 302: MsgUp.up_msg._get_guild_monster:type_name -> MsgUp.get_guild_monster
	447, // 303: MsgUp.up_msg._open_monster_by_item:type_name -> MsgUp.open_monster_by_item
	441, // 304: MsgUp.up_msg._get_exchange_item:type_name -> MsgUp.get_exchange_item
	443, // 305: MsgUp.up_msg._get_exchange_reward:type_name -> MsgUp.get_exchange_reward
	449, // 306: MsgUp.up_msg._get_daily_refresh_task:type_name -> MsgUp.get_daily_refresh_task
	450, // 307: MsgUp.up_msg._get_king_box_reward:type_name -> MsgUp.get_king_box_reward
	451, // 308: MsgUp.up_msg._get_activity_task_reward_items:type_name -> MsgUp.get_activity_task_reward_items
	455, // 309: MsgUp.up_msg._get_new_server_fund:type_name -> MsgUp.get_new_server_fund
	452, // 310: MsgUp.up_msg._get_milestone_list:type_name -> MsgUp.get_milestone_list
	454, // 311: MsgUp.up_msg._claim_milestone_reward:type_name -> MsgUp.claim_milestone_reward
	456, // 312: MsgUp.up_msg._upgrade_stage_reward:type_name -> MsgUp.upgrade_stage_reward
	453, // 313: MsgUp.up_msg._get_garua_list:type_name -> MsgUp.get_garua_list
	457, // 314: MsgUp.up_msg._safe_code:type_name -> MsgUp.safe_code
	458, // 315: MsgUp.up_msg._destruct_item:type_name -> MsgUp.destruct_item
	460, // 316: MsgUp.up_msg._destruct_equipment_batch:type_name -> MsgUp.destruct_equipment_batch
	419, // 317: MsgUp.up_msg._get_found_famouscity:type_name -> MsgUp.get_found_famouscity
	421, // 318: MsgUp.up_msg._bet_found_famouscity:type_name -> MsgUp.bet_found_famouscity
	424, // 319: MsgUp.up_msg._open_famouscity_by_item:type_name -> MsgUp.open_famouscity_by_item
	462, // 320: MsgUp.up_msg._get_guild_famouscity_list:type_name -> MsgUp.get_guild_famouscity_list
	463, // 321: MsgUp.up_msg._summon_viking:type_name -> MsgUp.summon_viking
	464, // 322: MsgUp.up_msg._apply_viking:type_name -> MsgUp.apply_viking
	465, // 323: MsgUp.up_msg._select_viking_difficulty:type_name -> MsgUp.select_viking_difficulty
	466, // 324: MsgUp.up_msg._get_all_famouscity:type_name -> MsgUp.get_all_famouscity
	467, // 325: MsgUp.up_msg._get_guild_viking_list:type_name -> MsgUp.get_guild_viking_list
	468, // 326: MsgUp.up_msg._get_viking_data:type_name -> MsgUp.get_viking_data
	469, // 327: MsgUp.up_msg._claim_viking_reward:type_name -> MsgUp.claim_viking_reward
	470, // 328: MsgUp.up_msg._get_playoff_members:type_name -> MsgUp.get_playoff_members
	472, // 329: MsgUp.up_msg._get_guild_treasure_data:type_name -> MsgUp.get_guild_treasure_data
	473, // 330: MsgUp.up_msg._claim_guild_treasure:type_name -> MsgUp.claim_guild_treasure
	471, // 331: MsgUp.up_msg._get_limit_server_competition:type_name -> MsgUp.get_limit_server_competition
	474, // 332: MsgUp.up_msg._get_private_treasure_list:type_name -> MsgUp.get_private_treasure_list
	475, // 333: MsgUp.up_msg._send_private_treasure:type_name -> MsgUp.send_private_treasure
	476, // 334: MsgUp.up_msg._honours_soldiers:type_name -> MsgUp.honours_soldiers
	370, // 335: MsgUp.up_msg._refine_soldiers:type_name -> MsgUp.refine_soldiers
	374, // 336: MsgUp.up_msg._confirm_refine_soldiers:type_name -> MsgUp.confirm_refine_soldiers
	477, // 337: MsgUp.up_msg._deport_user:type_name -> MsgUp.deport_user
	478, // 338: MsgUp.up_msg._get_deport_list:type_name -> MsgUp.get_deport_list
	108, // 339: MsgUp.up_msg._speedup_batch:type_name -> MsgUp.speedup_batch
	479, // 340: MsgUp.up_msg._get_battlepass:type_name -> MsgUp.get_battlepass
	480, // 341: MsgUp.up_msg._get_battlepass_reward:type_name -> MsgUp.get_battlepass_reward
	481, // 342: MsgUp.up_msg._get_user_data:type_name -> MsgUp.get_user_data
	482, // 343: MsgUp.up_msg._get_commented_reward:type_name -> MsgUp.get_commented_reward
	483, // 344: MsgUp.up_msg._get_puzzle_reward:type_name -> MsgUp.get_puzzle_reward
	484, // 345: MsgUp.up_msg._get_puzzle_data:type_name -> MsgUp.get_puzzle_data
	485, // 346: MsgUp.up_msg._claim_first_week_gift:type_name -> MsgUp.claim_first_week_gift
	486, // 347: MsgUp.up_msg._claim_famous_general:type_name -> MsgUp.claim_famous_general
	487, // 348: MsgUp.up_msg._set_month_card_type:type_name -> MsgUp.set_month_card_type
	488, // 349: MsgUp.up_msg._claim_consumer_gems_reward:type_name -> MsgUp.claim_consumer_gems_reward
	489, // 350: MsgUp.up_msg._get_consumer_gems_info:type_name -> MsgUp.get_consumer_gems_info
	38,  // 351: MsgUp.up_msg._claim_invite_gift:type_name -> MsgUp.claim_invite_gift
	41,  // 352: MsgUp.up_msg._list_invite_gift:type_name -> MsgUp.list_invite_gift
	37,  // 353: MsgUp.up_msg._open_box:type_name -> MsgUp.open_box
	36,  // 354: MsgUp.up_msg._get_free_package:type_name -> MsgUp.get_free_package
	35,  // 355: MsgUp.up_msg._crazy_market_list:type_name -> MsgUp.crazy_market_list
	34,  // 356: MsgUp.up_msg._crazy_market_buy:type_name -> MsgUp.crazy_market_buy
	298, // 357: MsgUp.up_msg._set_building_name_permission:type_name -> MsgUp.set_building_name_permission
	47,  // 358: MsgUp.up_msg._quick_synthesis_material:type_name -> MsgUp.quick_synthesis_material
	40,  // 359: MsgUp.up_msg._claim_share_gift:type_name -> MsgUp.claim_share_gift
	490, // 360: MsgUp.up_msg._claim_free_gift:type_name -> MsgUp.claim_free_gift
	444, // 361: MsgUp.up_msg._get_chapter_task_reward:type_name -> MsgUp.get_chapter_task_reward
	238, // 362: MsgUp.up_msg._get_chapter_task_list:type_name -> MsgUp.get_chapter_task_list
	491, // 363: MsgUp.up_msg._send_nps_result:type_name -> MsgUp.send_nps_result
	56,  // 364: MsgUp.up_msg._get_ads_reward:type_name -> MsgUp.get_ads_reward
	492, // 365: MsgUp.up_msg._request_special_gift:type_name -> MsgUp.request_special_gift
	493, // 366: MsgUp.up_msg._signup_small_battlefield:type_name -> MsgUp.signup_small_battlefield
	494, // 367: MsgUp.up_msg._invite_small_battlefield:type_name -> MsgUp.invite_small_battlefield
	495, // 368: MsgUp.up_msg._match_small_battlefield:type_name -> MsgUp.match_small_battlefield
	496, // 369: MsgUp.up_msg._start_small_battlefield:type_name -> MsgUp.start_small_battlefield
	497, // 370: MsgUp.up_msg._confirm_small_battlefield:type_name -> MsgUp.confirm_small_battlefield
	502, // 371: MsgUp.up_msg._select_small_battlefield_buff:type_name -> MsgUp.select_small_battlefield_buff
	498, // 372: MsgUp.up_msg._get_small_battlefield_info:type_name -> MsgUp.get_small_battlefield_info
	499, // 373: MsgUp.up_msg._get_small_battlefield_invite:type_name -> MsgUp.get_small_battlefield_invite
	500, // 374: MsgUp.up_msg._ready_small_battlefield:type_name -> MsgUp.ready_small_battlefield
	501, // 375: MsgUp.up_msg._get_activity_task_reward_items_batch:type_name -> MsgUp.get_activity_task_reward_items_batch
	39,  // 376: MsgUp.up_msg._share_reward:type_name -> MsgUp.share_reward
	503, // 377: MsgUp.up_msg._quit_small_battlefield:type_name -> MsgUp.quit_small_battlefield
	504, // 378: MsgUp.up_msg._get_small_battlefield_invite_list:type_name -> MsgUp.get_small_battlefield_invite_list
	505, // 379: MsgUp.up_msg._get_active_event_task_list:type_name -> MsgUp.get_active_event_task_list
	397, // 380: MsgUp.up_msg._get_battlefield_guildrank_season:type_name -> MsgUp.get_battlefield_guildrank_season
	97,  // 381: MsgUp.up_msg._change_gift_page:type_name -> MsgUp.change_gift_page
	98,  // 382: MsgUp.up_msg._get_gift_list:type_name -> MsgUp.get_gift_list
	506, // 383: MsgUp.up_msg._select_guild_building_skin:type_name -> MsgUp.select_guild_building_skin
	57,  // 384: MsgUp.up_msg._get_hw_ads_reward:type_name -> MsgUp.get_hw_ads_reward
	282, // 385: MsgUp.up_msg._new_roulette_turn:type_name -> MsgUp.new_roulette_turn
	283, // 386: MsgUp.up_msg._new_roulette_accumulate_awards:type_name -> MsgUp.new_roulette_accumulate_awards
	33,  // 387: MsgUp.up_msg._get_more_social_media_reward:type_name -> MsgUp.get_more_social_media_reward
	507, // 388: MsgUp.up_msg._secret_room_operation:type_name -> MsgUp.secret_room_operation
	508, // 389: MsgUp.up_msg._get_fire_coins_num_today:type_name -> MsgUp.get_fire_coins_num_today
	509, // 390: MsgUp.up_msg._get_growth_fund:type_name -> MsgUp.get_growth_fund
	510, // 391: MsgUp.up_msg._get_growth_fund_reward:type_name -> MsgUp.get_growth_fund_reward
	511, // 392: MsgUp.up_msg._get_war_loss_reward:type_name -> MsgUp.get_war_loss_reward
	13,  // 393: MsgUp.up_msg._reward_month_login:type_name -> MsgUp.reward_month_login
	512, // 394: MsgUp.up_msg._ghost_troops:type_name -> MsgUp.ghost_troops
	513, // 395: MsgUp.up_msg._cancel_ghost_troops:type_name -> MsgUp.cancel_ghost_troops
	409, // 396: MsgUp.up_msg._set_dragon_cliff_show:type_name -> MsgUp.set_dragon_cliff_show
	408, // 397: MsgUp.up_msg._set_dragon_talent_upgrade:type_name -> MsgUp.set_dragon_talent_upgrade
	89,  // 398: MsgUp.up_msg._wear_emblem:type_name -> MsgUp.wear_emblem
	514, // 399: MsgUp.up_msg._get_fame_task_list:type_name -> MsgUp.get_fame_task_list
	515, // 400: MsgUp.up_msg._get_fame_task_reward:type_name -> MsgUp.get_fame_task_reward
	516, // 401: MsgUp.up_msg._get_fame_process_reward:type_name -> MsgUp.get_fame_process_reward
	152, // 402: MsgUp.up_msg._get_fame_rank_list:type_name -> MsgUp.get_fame_rank_list
	517, // 403: MsgUp.up_msg._like_fame:type_name -> MsgUp.like_fame
	518, // 404: MsgUp.up_msg._get_like_fame_info:type_name -> MsgUp.get_like_fame_info
	519, // 405: MsgUp.up_msg._get_map_battle_flag_info_test:type_name -> MsgUp.get_map_battle_flag_info_test
	520, // 406: MsgUp.up_msg._get_guild_territory_res:type_name -> MsgUp.get_guild_territory_res
	628, // 407: MsgUp.up_msg._send_fame_message:type_name -> ChatMessage.send_fame_message
	521, // 408: MsgUp.up_msg._get_pve_rank_list:type_name -> MsgUp.get_pve_rank_list
	522, // 409: MsgUp.up_msg._get_barbarian_rank_list:type_name -> MsgUp.get_barbarian_rank_list
	523, // 410: MsgUp.up_msg._get_younier_rank_list:type_name -> MsgUp.get_younier_rank_list
	524, // 411: MsgUp.up_msg._get_popularity_reward_items:type_name -> MsgUp.get_popularity_reward_items
	526, // 412: MsgUp.up_msg._free_march_team:type_name -> MsgUp.free_march_team
	525, // 413: MsgUp.up_msg._freemarch_revive:type_name -> MsgUp.freemarch_revive
	539, // 414: MsgUp.up_msg._get_task_list:type_name -> MsgUp.get_task_list
	540, // 415: MsgUp.up_msg._get_task:type_name -> MsgUp.get_task
	541, // 416: MsgUp.up_msg._dis_task:type_name -> MsgUp.dis_task
	542, // 417: MsgUp.up_msg._sub_task:type_name -> MsgUp.sub_task
	543, // 418: MsgUp.up_msg._get_task_reward:type_name -> MsgUp.get_task_reward
	544, // 419: MsgUp.up_msg._unlock_temp_bag_cell:type_name -> MsgUp.unlock_temp_bag_cell
	545, // 420: MsgUp.up_msg._dis_temp_bag_item:type_name -> MsgUp.dis_temp_bag_item
	546, // 421: MsgUp.up_msg._get_guild_territory_res_use_record:type_name -> MsgUp.get_guild_territory_res_use_record
	547, // 422: MsgUp.up_msg._buy_guild_territory_res:type_name -> MsgUp.buy_guild_territory_res
	548, // 423: MsgUp.up_msg._distribute_guild_territory_res:type_name -> MsgUp.distribute_guild_territory_res
	550, // 424: MsgUp.up_msg._guild_depot_resource:type_name -> MsgUp.guild_depot_resource
	551, // 425: MsgUp.up_msg._guild_transport:type_name -> MsgUp.guild_transport
	552, // 426: MsgUp.up_msg._guild_transport_ask:type_name -> MsgUp.guild_transport_ask
	553, // 427: MsgUp.up_msg._guild_transport_list:type_name -> MsgUp.guild_transport_list
	554, // 428: MsgUp.up_msg._guild_transport_find:type_name -> MsgUp.guild_transport_find
	555, // 429: MsgUp.up_msg._cancel_heal_soldiers:type_name -> MsgUp.cancel_heal_soldiers
	556, // 430: MsgUp.up_msg._transport_info:type_name -> MsgUp.transport_info
	557, // 431: MsgUp.up_msg._produce_medicine_bag:type_name -> MsgUp.produce_medicine_bag
	558, // 432: MsgUp.up_msg._speedup_medicine_bag:type_name -> MsgUp.speedup_medicine_bag
	559, // 433: MsgUp.up_msg._charge_item:type_name -> MsgUp.charge_item
	560, // 434: MsgUp.up_msg._modify_building_position:type_name -> MsgUp.modify_building_position
	561, // 435: MsgUp.up_msg._pet_tech_upgrade:type_name -> MsgUp.pet_tech_upgrade
	565, // 436: MsgUp.up_msg._surrender_soldiers_finish:type_name -> MsgUp.surrender_soldiers_finish
	566, // 437: MsgUp.up_msg._speedup_surrender_soldiers:type_name -> MsgUp.speedup_surrender_soldiers
	567, // 438: MsgUp.up_msg._cancel_surrender_soldiers:type_name -> MsgUp.cancel_surrender_soldiers
	568, // 439: MsgUp.up_msg._work_finish:type_name -> MsgUp.work_finish
	569, // 440: MsgUp.up_msg._speedup_work:type_name -> MsgUp.speedup_work
	570, // 441: MsgUp.up_msg._cancel_work:type_name -> MsgUp.cancel_work
	571, // 442: MsgUp.up_msg._interaction:type_name -> MsgUp.interaction
	572, // 443: MsgUp.up_msg._interaction_ask:type_name -> MsgUp.interaction_ask
	573, // 444: MsgUp.up_msg._produce_medicine_bag_finish:type_name -> MsgUp.produce_medicine_bag_finish
	574, // 445: MsgUp.up_msg._cancel_produce_medicine_bag:type_name -> MsgUp.cancel_produce_medicine_bag
	575, // 446: MsgUp.up_msg._modify_troop_auto_relife:type_name -> MsgUp.modify_troop_auto_relife
	562, // 447: MsgUp.up_msg._pet_tech_upgrade_cancel:type_name -> MsgUp.pet_tech_upgrade_cancel
	563, // 448: MsgUp.up_msg._pet_tech_upgrade_speedup:type_name -> MsgUp.pet_tech_upgrade_speedup
	564, // 449: MsgUp.up_msg._init_data:type_name -> MsgUp.init_data
	576, // 450: MsgUp.up_msg._pet_summary_list:type_name -> MsgUp.pet_summary_list
	577, // 451: MsgUp.up_msg._equip_forge:type_name -> MsgUp.equip_forge
	579, // 452: MsgUp.up_msg._equip_streathen:type_name -> MsgUp.equip_streathen
	580, // 453: MsgUp.up_msg._equip_enchanting:type_name -> MsgUp.equip_enchanting
	581, // 454: MsgUp.up_msg._equip_fuse:type_name -> MsgUp.equip_fuse
	583, // 455: MsgUp.up_msg._equip_refine:type_name -> MsgUp.equip_refine
	584, // 456: MsgUp.up_msg._equip_tech_upgrad:type_name -> MsgUp.equip_tech_upgrad
	585, // 457: MsgUp.up_msg._pet_bind_hero:type_name -> MsgUp.pet_bind_hero
	586, // 458: MsgUp.up_msg._pet_merge:type_name -> MsgUp.pet_merge
	587, // 459: MsgUp.up_msg._visit:type_name -> MsgUp.visit
	588, // 460: MsgUp.up_msg._destruct_item_batch:type_name -> MsgUp.destruct_item_batch
	578, // 461: MsgUp.up_msg._equip_forge_finish:type_name -> MsgUp.equip_forge_finish
	88,  // 462: MsgUp.up_msg._wear_treasure:type_name -> MsgUp.wear_treasure
	357, // 463: MsgUp.up_msg._batch_wear_treasure:type_name -> MsgUp.batch_wear_treasure
	582, // 464: MsgUp.up_msg._player_treasure_fuse:type_name -> MsgUp.player_treasure_fuse
	589, // 465: MsgUp.up_msg._destruct_treasure:type_name -> MsgUp.destruct_treasure
	590, // 466: MsgUp.up_msg._destruct_treasure_batch:type_name -> MsgUp.destruct_treasure_batch
	591, // 467: MsgUp.up_msg._tavern_draw:type_name -> MsgUp.tavern_draw
	592, // 468: MsgUp.up_msg._hero_talent_upgrade:type_name -> MsgUp.hero_talent_upgrade
	593, // 469: MsgUp.up_msg._hero_talent_reset:type_name -> MsgUp.hero_talent_reset
	594, // 470: MsgUp.up_msg._use_player_gift:type_name -> MsgUp.use_player_gift
	76,  // 471: MsgUp.up_msg._get_alliance_maillist:type_name -> MsgUp.get_alliance_maillist
	79,  // 472: MsgUp.up_msg._get_report_tab_list:type_name -> MsgUp.get_report_tab_list
	595, // 473: MsgUp.up_msg._batch_read_mail:type_name -> MsgUp.batch_read_mail
	596, // 474: MsgUp.up_msg._batch_get_reward:type_name -> MsgUp.batch_get_reward
	104, // 475: MsgUp.up_msg._push_mapinfo_emoji:type_name -> MsgUp.push_mapinfo_emoji
	597, // 476: MsgUp.up_msg._ask_equip_info:type_name -> MsgUp.ask_equip_info
	599, // 477: MsgUp.up_msg._fps_finish_reward:type_name -> MsgUp.fps_finish_reward
	600, // 478: MsgUp.up_msg._fps_start:type_name -> MsgUp.fps_start
	601, // 479: MsgUp.up_msg._fps_out:type_name -> MsgUp.fps_out
	602, // 480: MsgUp.up_msg._world_search:type_name -> MsgUp.world_search
	603, // 481: MsgUp.up_msg._auto_rally:type_name -> MsgUp.auto_rally
	604, // 482: MsgUp.up_msg._sync_auto_rally:type_name -> MsgUp.sync_auto_rally
	605, // 483: MsgUp.up_msg._guild_sign:type_name -> MsgUp.guild_sign
	606, // 484: MsgUp.up_msg._guild_sign_info:type_name -> MsgUp.guild_sign_info
	607, // 485: MsgUp.up_msg._guild_sign_comment:type_name -> MsgUp.guild_sign_comment
	608, // 486: MsgUp.up_msg._guild_sign_list:type_name -> MsgUp.guild_sign_list
	609, // 487: MsgUp.up_msg._set_friend_player_data:type_name -> MsgUp.set_friend_player_data
	610, // 488: MsgUp.up_msg._open_gift_box:type_name -> MsgUp.open_gift_box
	14,  // 489: MsgUp.up_msg._auto_pickup_setting:type_name -> MsgUp.auto_pickup_setting
	15,  // 490: MsgUp.up_msg._save_new_user_guide_progress:type_name -> MsgUp.save_new_user_guide_progress
	16,  // 491: MsgUp.up_msg._get_gme_auth:type_name -> MsgUp.get_gme_auth
	17,  // 492: MsgUp.up_msg._get_cos_auth:type_name -> MsgUp.get_cos_auth
	612, // 493: MsgUp.up_msg._guide_fps:type_name -> MsgUp.guide_fps
	613, // 494: MsgUp.up_msg._send_troop_castle:type_name -> MsgUp.send_troop_castle
	614, // 495: MsgUp.up_msg._intel_strength:type_name -> MsgUp.intel_strength
	615, // 496: MsgUp.up_msg._intel_task_reward:type_name -> MsgUp.intel_task_reward
	616, // 497: MsgUp.up_msg._intel_task_refresh:type_name -> MsgUp.intel_task_refresh
	445, // 498: MsgUp.up_msg._get_new_chapter_task_reward:type_name -> MsgUp.get_new_chapter_task_reward
	617, // 499: MsgUp.up_msg._cloud_info:type_name -> MsgUp.cloud_info
	25,  // 500: MsgUp.up_msg._get_goods_list:type_name -> MsgUp.get_goods_list
	26,  // 501: MsgUp.up_msg._get_goods_favorite_list:type_name -> MsgUp.get_goods_favorite_list
	27,  // 502: MsgUp.up_msg._goods_favorite:type_name -> MsgUp.goods_favorite
	28,  // 503: MsgUp.up_msg._get_goods_hot_list:type_name -> MsgUp.get_goods_hot_list
	29,  // 504: MsgUp.up_msg._get_goods_sell_list:type_name -> MsgUp.get_goods_sell_list
	30,  // 505: MsgUp.up_msg._get_goods_deal_list:type_name -> MsgUp.get_goods_deal_list
	31,  // 506: MsgUp.up_msg._get_goods_blocking_list:type_name -> MsgUp.get_goods_blocking_list
	24,  // 507: MsgUp.up_msg._goods_sale:type_name -> MsgUp.goods_sale
	23,  // 508: MsgUp.up_msg._goods_sale_again:type_name -> MsgUp.goods_sale_again
	22,  // 509: MsgUp.up_msg._selected_goods_sale_info:type_name -> MsgUp.selected_goods_sale_info
	21,  // 510: MsgUp.up_msg._goods_not_sale:type_name -> MsgUp.goods_not_sale
	20,  // 511: MsgUp.up_msg._goods_purchase:type_name -> MsgUp.goods_purchase
	19,  // 512: MsgUp.up_msg._set_search_record:type_name -> MsgUp.set_search_record
	18,  // 513: MsgUp.up_msg._get_search_list:type_name -> MsgUp.get_search_list
	32,  // 514: MsgUp.up_msg._get_server_info_list:type_name -> MsgUp.get_server_info_list
	629, // 515: MsgUp.up_msg._send_goods_message:type_name -> ChatMessage.send_goods_message
	630, // 516: MsgUp.up_msg._send_pet_message:type_name -> ChatMessage.send_pet_message
	598, // 517: MsgUp.up_msg._get_pet_summary_info:type_name -> MsgUp.get_pet_summary_info
	631, // 518: MsgUp.auto_pickup_setting._auto_pickup_setting:type_name -> Msg.auto_pickup_setting
	632, // 519: MsgUp.save_new_user_guide_progress._new_user_guide_progress:type_name -> Msg.new_user_guide_progress
	633, // 520: MsgUp.goods_sale_again._goods_sale_info:type_name -> Msg.goods_info
	633, // 521: MsgUp.goods_sale._goods_sale_info:type_name -> Msg.goods_info
	634, // 522: MsgUp.equip_synthesis._type:type_name -> Msg.forge_type
	48,  // 523: MsgUp.quick_synthesis_material._cells:type_name -> MsgUp.synthesis_material_cell
	60,  // 524: MsgUp.synthesis_material_cell._parent_item_info:type_name -> MsgUp.item_info
	60,  // 525: MsgUp.synthesis_material_cell._child_item_id:type_name -> MsgUp.item_info
	635, // 526: MsgUp.dewel_synthesis._pos:type_name -> Msg.wear_position
	634, // 527: MsgUp.equip_reap._type:type_name -> Msg.forge_type
	0,   // 528: MsgUp.set_name._type:type_name -> MsgUp.set_name.set_type
	1,   // 529: MsgUp.ask_daily_login._status:type_name -> MsgUp.ask_daily_login.status
	636, // 530: MsgUp.send_mail._mtype:type_name -> Msg.mtype
	60,  // 531: MsgUp.send_mail._item:type_name -> MsgUp.item_info
	2,   // 532: MsgUp.teleport._mode:type_name -> MsgUp.teleport.teleport_mode
	636, // 533: MsgUp.read_mail._mail_type:type_name -> Msg.mtype
	637, // 534: MsgUp.read_mail._type:type_name -> Msg.mail_type
	638, // 535: MsgUp.read_mail._mail_tab_type:type_name -> Msg.mail_tab_type
	638, // 536: MsgUp.get_mail_reward._mail_tab_type:type_name -> Msg.mail_tab_type
	84,  // 537: MsgUp.reap_resource._reap_resource_data:type_name -> MsgUp.reap_resource_data
	3,   // 538: MsgUp.reap_resource_data._resource_type:type_name -> MsgUp.reap_resource_data.type
	639, // 539: MsgUp.send_troop._troop:type_name -> Msg.troop
	640, // 540: MsgUp.send_troop._type:type_name -> Msg.march_type
	641, // 541: MsgUp.send_troop._target_type:type_name -> Msg.mapinfo_type
	642, // 542: MsgUp.send_troop._resource:type_name -> Msg.resource_info
	643, // 543: MsgUp.send_troop._items:type_name -> Msg.com_item
	643, // 544: MsgUp.send_troop._task_items:type_name -> Msg.com_item
	644, // 545: MsgUp.wear_equip._action_id:type_name -> Msg.wear_action_type
	635, // 546: MsgUp.wear_equip._item_pos:type_name -> Msg.wear_position
	644, // 547: MsgUp.wear_treasure._action_id:type_name -> Msg.wear_action_type
	644, // 548: MsgUp.wear_emblem._action_id:type_name -> Msg.wear_action_type
	640, // 549: MsgUp.send_troop_garrison._type:type_name -> Msg.march_type
	641, // 550: MsgUp.send_troop_garrison._target_type:type_name -> Msg.mapinfo_type
	643, // 551: MsgUp.send_troop_garrison._task_items:type_name -> Msg.com_item
	645, // 552: MsgUp.request_mapinfo_new._main_region:type_name -> Msg.map_region
	645, // 553: MsgUp.request_mapinfo_new._sub_regions:type_name -> Msg.map_region
	60,  // 554: MsgUp.consume_item._new_item_id:type_name -> MsgUp.item_info
	60,  // 555: MsgUp.speedup_batch._new_item_id:type_name -> MsgUp.item_info
	60,  // 556: MsgUp.buy_item._new_iten_id:type_name -> MsgUp.item_info
	639, // 557: MsgUp.heal_soldiers._troop:type_name -> Msg.troop
	639, // 558: MsgUp.ambulance_soldiers._troop:type_name -> Msg.troop
	60,  // 559: MsgUp.ambulance_soldiers._item:type_name -> MsgUp.item_info
	639, // 560: MsgUp.callback_soldiers._troop:type_name -> Msg.troop
	639, // 561: MsgUp.revive_soldiers._troop:type_name -> Msg.troop
	639, // 562: MsgUp.surrender_soldiers._troop:type_name -> Msg.troop
	639, // 563: MsgUp.work._troop:type_name -> Msg.troop
	646, // 564: MsgUp.set_push._switch_type:type_name -> Msg.push_switch_type
	647, // 565: MsgUp.set_push._notification_type:type_name -> Msg.push_notification_type
	637, // 566: MsgUp.del_mail._mail_type:type_name -> Msg.mail_type
	638, // 567: MsgUp.del_mail._mail_tab_type:type_name -> Msg.mail_tab_type
	648, // 568: MsgUp.taxes._type:type_name -> Msg.item_resource_type
	637, // 569: MsgUp.favorite_mail._mail_type:type_name -> Msg.mail_type
	638, // 570: MsgUp.favorite_mail._mail_tab_type:type_name -> Msg.mail_tab_type
	649, // 571: MsgUp.chat_history_fecth._chat_history_fecth:type_name -> ChatMessage.chat_history_fecth
	650, // 572: MsgUp.report_message._report_message:type_name -> ChatMessage.report_message
	651, // 573: MsgUp.apply_help._type:type_name -> Msg.help_type
	642, // 574: MsgUp.resource_transport._resource:type_name -> Msg.resource_info
	639, // 575: MsgUp.create_union_war._troop:type_name -> Msg.troop
	639, // 576: MsgUp.join_union_war._troop:type_name -> Msg.troop
	4,   // 577: MsgUp.push_token._type:type_name -> MsgUp.push_token.type
	155, // 578: MsgUp.guild._create:type_name -> MsgUp.guild_create
	156, // 579: MsgUp.guild._dismiss:type_name -> MsgUp.guild_dismiss
	157, // 580: MsgUp.guild._list:type_name -> MsgUp.guild_list
	158, // 581: MsgUp.guild._search:type_name -> MsgUp.guild_search
	159, // 582: MsgUp.guild._join:type_name -> MsgUp.guild_join
	160, // 583: MsgUp.guild._join_confirm:type_name -> MsgUp.guild_join_confirm
	161, // 584: MsgUp.guild._join_refuse:type_name -> MsgUp.guild_join_refuse
	164, // 585: MsgUp.guild._leave:type_name -> MsgUp.guild_leave
	165, // 586: MsgUp.guild._kick:type_name -> MsgUp.guild_kick
	166, // 587: MsgUp.guild._set_avatar:type_name -> MsgUp.guild_set_avatar
	167, // 588: MsgUp.guild._set_name:type_name -> MsgUp.guild_set_name
	168, // 589: MsgUp.guild._set_short_name:type_name -> MsgUp.guild_set_short_name
	169, // 590: MsgUp.guild._set_join_type:type_name -> MsgUp.guild_set_join_type
	170, // 591: MsgUp.guild._set_slogan:type_name -> MsgUp.guild_set_slogan
	174, // 592: MsgUp.guild._set_lan:type_name -> MsgUp.guild_set_lan
	177, // 593: MsgUp.guild._open_pannel:type_name -> MsgUp.guild_open_pannel
	154, // 594: MsgUp.guild._members:type_name -> MsgUp.guild_members
	175, // 595: MsgUp.guild._query:type_name -> MsgUp.guild_query
	135, // 596: MsgUp.guild._apply_help:type_name -> MsgUp.apply_help
	136, // 597: MsgUp.guild._get_help:type_name -> MsgUp.get_help
	137, // 598: MsgUp.guild._provide_help:type_name -> MsgUp.provide_help
	139, // 599: MsgUp.guild._transport:type_name -> MsgUp.resource_transport
	140, // 600: MsgUp.guild._get_army_support:type_name -> MsgUp.get_army_support
	142, // 601: MsgUp.guild._create_union_war:type_name -> MsgUp.create_union_war
	143, // 602: MsgUp.guild._join_union_war:type_name -> MsgUp.join_union_war
	144, // 603: MsgUp.guild._cancel_union_war:type_name -> MsgUp.cancel_union_war
	145, // 604: MsgUp.guild._quit_union_war:type_name -> MsgUp.quit_union_war
	146, // 605: MsgUp.guild._guild_war_list:type_name -> MsgUp.guild_war_list
	178, // 606: MsgUp.guild._apply_members:type_name -> MsgUp.guild_apply_members
	141, // 607: MsgUp.guild._repatriate_army:type_name -> MsgUp.repatriate_army_support
	176, // 608: MsgUp.guild._my_query:type_name -> MsgUp.guild_my_query
	179, // 609: MsgUp.guild._inviter_members:type_name -> MsgUp.guild_invite_members
	183, // 610: MsgUp.guild._set_auth_title:type_name -> MsgUp.guild_set_auth_title
	184, // 611: MsgUp.guild._invite_member:type_name -> MsgUp.guild_invite_member
	187, // 612: MsgUp.guild._change_member_level:type_name -> MsgUp.guild_change_member_level
	188, // 613: MsgUp.guild._transfer:type_name -> MsgUp.guild_transfer
	185, // 614: MsgUp.guild._invite_confirm:type_name -> MsgUp.guild_invite_confirm
	186, // 615: MsgUp.guild._invite_refuse:type_name -> MsgUp.guild_invite_refuse
	191, // 616: MsgUp.guild._elect_owner:type_name -> MsgUp.guild_elect_owner
	192, // 617: MsgUp.guild._donate_tech:type_name -> MsgUp.guild_donate_tech
	193, // 618: MsgUp.guild._store_buy:type_name -> MsgUp.guild_store_buy
	171, // 619: MsgUp.guild._guild_set_headline:type_name -> MsgUp.guild_set_headline
	172, // 620: MsgUp.guild._guild_set_building:type_name -> MsgUp.guild_set_building
	173, // 621: MsgUp.guild._guild_get_log:type_name -> MsgUp.guild_get_log
	364, // 622: MsgUp.guild._getback_from_store:type_name -> MsgUp.getback_from_store
	162, // 623: MsgUp.guild._guild_join_confirm_pitch:type_name -> MsgUp.guild_join_confirm_pitch
	163, // 624: MsgUp.guild._guild_join_refuse_pitch:type_name -> MsgUp.guild_join_refuse_pitch
	154, // 625: MsgUp.guild._guild_members_honour:type_name -> MsgUp.guild_members
	154, // 626: MsgUp.guild._guild_members_donate_honour:type_name -> MsgUp.guild_members
	194, // 627: MsgUp.guild._guild_tech_clear_cd:type_name -> MsgUp.guild_tech_clear_cd
	195, // 628: MsgUp.guild._guild_camp_signup:type_name -> MsgUp.guild_camp_signup
	196, // 629: MsgUp.guild._guild_camp_list:type_name -> MsgUp.guild_camp_list
	197, // 630: MsgUp.guild._guild_camp_vote:type_name -> MsgUp.guild_camp_vote
	198, // 631: MsgUp.guild._guild_merge_apply:type_name -> MsgUp.guild_merge_apply
	206, // 632: MsgUp.guild._guild_merge_list:type_name -> MsgUp.guild_merge_list
	207, // 633: MsgUp.guild._guild_merge_agree:type_name -> MsgUp.guild_merge_agree
	208, // 634: MsgUp.guild._guild_merge_reject:type_name -> MsgUp.guild_merge_reject
	209, // 635: MsgUp.guild._guild_migrate:type_name -> MsgUp.guild_migrate
	210, // 636: MsgUp.guild._guild_set_master_city:type_name -> MsgUp.guild_set_master_city
	211, // 637: MsgUp.guild._guild_box_list:type_name -> MsgUp.guild_box_list
	212, // 638: MsgUp.guild._guild_box_open:type_name -> MsgUp.guild_box_open
	213, // 639: MsgUp.guild._guild_box_open_all:type_name -> MsgUp.guild_box_open_all
	214, // 640: MsgUp.guild._guild_tech_cancel:type_name -> MsgUp.guild_tech_cancel
	199, // 641: MsgUp.guild._guild_merge_cancel:type_name -> MsgUp.guild_merge_cancel
	200, // 642: MsgUp.guild._guild_box_anonymity:type_name -> MsgUp.guild_box_anonymity
	201, // 643: MsgUp.guild._guild_box_anony_cancel:type_name -> MsgUp.guild_box_anony_cancel
	202, // 644: MsgUp.guild._guild_tech_donate_ranking:type_name -> MsgUp.guild_tech_donate_ranking
	202, // 645: MsgUp.guild._guild_tech_daily_ranking:type_name -> MsgUp.guild_tech_donate_ranking
	202, // 646: MsgUp.guild._guild_tech_weekly_ranking:type_name -> MsgUp.guild_tech_donate_ranking
	203, // 647: MsgUp.guild._guild_tech_donate_award:type_name -> MsgUp.guild_tech_donate_award
	204, // 648: MsgUp.guild._guild_building_city_list:type_name -> MsgUp.guild_building_city_list
	205, // 649: MsgUp.guild._guild_building_set_cover:type_name -> MsgUp.guild_building_set_cover
	652, // 650: MsgUp.guild_create._lan:type_name -> Msg.lan_type
	653, // 651: MsgUp.guild_set_join_type._join_type:type_name -> Msg.guild_join_type
	641, // 652: MsgUp.guild_set_building._mapinfo_type:type_name -> Msg.mapinfo_type
	652, // 653: MsgUp.guild_set_lan._lan:type_name -> Msg.lan_type
	654, // 654: MsgUp.guild_change_member_level._level:type_name -> Msg.guild_mem_authority
	639, // 655: MsgUp.dismiss_soldiers._troop:type_name -> Msg.troop
	652, // 656: MsgUp.set_language._lan:type_name -> Msg.lan_type
	655, // 657: MsgUp.tavern_buy._general:type_name -> Msg.general
	639, // 658: MsgUp.heal_finish._troop:type_name -> Msg.troop
	634, // 659: MsgUp.synthesis_finish._type:type_name -> Msg.forge_type
	639, // 660: MsgUp.battle_guide_finished._troop:type_name -> Msg.troop
	656, // 661: MsgUp.set_guild_player_king_castle_job._guild_job_type:type_name -> Msg.king_castle_job_type
	247, // 662: MsgUp.general._upgrade_star:type_name -> MsgUp.general_upgrade_star
	248, // 663: MsgUp.general._general_fire:type_name -> MsgUp.general_fire
	249, // 664: MsgUp.general._upgrade_quality:type_name -> MsgUp.general_upgrade_quality
	250, // 665: MsgUp.general._ranking_list:type_name -> MsgUp.general_ranking_list
	251, // 666: MsgUp.general._relive:type_name -> MsgUp.general_relive
	253, // 667: MsgUp.general._relive_speedup:type_name -> MsgUp.general_relive_speedup
	252, // 668: MsgUp.general._relive_finished:type_name -> MsgUp.general_relive_finished
	254, // 669: MsgUp.general._baptize:type_name -> MsgUp.general_baptize
	255, // 670: MsgUp.general._baptize_confirm:type_name -> MsgUp.general_baptize_confirm
	256, // 671: MsgUp.general._learn_skill:type_name -> MsgUp.general_learn_skill
	257, // 672: MsgUp.general._learn_skill_v2:type_name -> MsgUp.general_learn_skill_v2
	258, // 673: MsgUp.general._learn_skill_confirm:type_name -> MsgUp.general_learn_skill_confirm
	461, // 674: MsgUp.general._upgrade_feature:type_name -> MsgUp.general_upgrade_feature
	657, // 675: MsgUp.general_upgrade_quality._current_quality_type:type_name -> Msg.general_quality_type
	658, // 676: MsgUp.general_baptize_confirm._item:type_name -> Msg.general_baptize_item
	659, // 677: MsgUp.active_sub_city._policy:type_name -> Msg.sub_city_policy
	659, // 678: MsgUp.modify_sub_city._policy:type_name -> Msg.sub_city_policy
	459, // 679: MsgUp.sub_city_speedup_building._item_list:type_name -> MsgUp.item_up
	639, // 680: MsgUp.sub_city_buy_troop._troop:type_name -> Msg.troop
	656, // 681: MsgUp.set_kindom_player_job_title._guild_job_type:type_name -> Msg.king_castle_job_type
	639, // 682: MsgUp.dismiss_subcity_soldiers._troop:type_name -> Msg.troop
	660, // 683: MsgUp.chat_history_whole_fetch._chat_history_whole_fetch:type_name -> ChatMessage.chat_history_whole_fetch
	5,   // 684: MsgUp.collect_patrol_award._type:type_name -> MsgUp.collect_patrol_award.collect_patrol_type
	661, // 685: MsgUp.check_buff._buff_list:type_name -> Msg.buff_info
	662, // 686: MsgUp.add_favorite_coord._info:type_name -> Msg.favorite_coord_info
	662, // 687: MsgUp.add_favorite_coord._batch:type_name -> Msg.favorite_coord_info
	663, // 688: MsgUp.create_guild_building._type:type_name -> Msg.guild_building_type
	6,   // 689: MsgUp.select_skin._mode:type_name -> MsgUp.select_skin.teleport_mode
	87,  // 690: MsgUp.batch_wear_equip._wear_equip:type_name -> MsgUp.wear_equip
	88,  // 691: MsgUp.batch_wear_treasure._wear_treasure:type_name -> MsgUp.wear_treasure
	7,   // 692: MsgUp.save_user_prefs._op_type:type_name -> MsgUp.save_user_prefs.op_type
	642, // 693: MsgUp.getback_from_store._resource:type_name -> Msg.resource_info
	60,  // 694: MsgUp.synthesis_item._item_info:type_name -> MsgUp.item_info
	664, // 695: MsgUp.get_rank_list._rank_type:type_name -> Msg.rank_type
	665, // 696: MsgUp.over_battlefield._list_battlefield_buildings:type_name -> Msg.battlefield_building_info
	459, // 697: MsgUp.destruct_equipment_batch._item_list:type_name -> MsgUp.item_up
	8,   // 698: MsgUp.get_user_data._type:type_name -> MsgUp.get_user_data.type
	9,   // 699: MsgUp.get_small_battlefield_invite._type:type_name -> MsgUp.get_small_battlefield_invite.type
	60,  // 700: MsgUp.secret_room_operation._item:type_name -> MsgUp.item_info
	639, // 701: MsgUp.ghost_troops._troop:type_name -> Msg.troop
	527, // 702: MsgUp.free_march_team._create:type_name -> MsgUp.fm_team_create
	528, // 703: MsgUp.free_march_team._info:type_name -> MsgUp.fm_team_info
	529, // 704: MsgUp.free_march_team._set_info:type_name -> MsgUp.fm_team_set_info
	530, // 705: MsgUp.free_march_team._dismiss:type_name -> MsgUp.fm_team_dismiss
	531, // 706: MsgUp.free_march_team._member_pause:type_name -> MsgUp.fm_team_member_pause
	532, // 707: MsgUp.free_march_team._member_leave:type_name -> MsgUp.fm_team_member_leave
	533, // 708: MsgUp.free_march_team._member_back:type_name -> MsgUp.fm_team_member_back
	534, // 709: MsgUp.free_march_team._invite:type_name -> MsgUp.fm_team_invite
	535, // 710: MsgUp.free_march_team._invite_confirm:type_name -> MsgUp.fm_team_invite_confirm
	536, // 711: MsgUp.free_march_team._rally:type_name -> MsgUp.fm_team_rally
	537, // 712: MsgUp.free_march_team._search_user:type_name -> MsgUp.fm_team_search_user
	538, // 713: MsgUp.free_march_team._rm_member:type_name -> MsgUp.fm_team_rm_member
	549, // 714: MsgUp.distribute_guild_territory_res._distribute_res_data:type_name -> MsgUp.distribute_res_data
	639, // 715: MsgUp.surrender_soldiers_finish._troop:type_name -> Msg.troop
	639, // 716: MsgUp.speedup_surrender_soldiers._troop:type_name -> Msg.troop
	639, // 717: MsgUp.cancel_surrender_soldiers._troop:type_name -> Msg.troop
	639, // 718: MsgUp.work_finish._troop:type_name -> Msg.troop
	639, // 719: MsgUp.speedup_work._troop:type_name -> Msg.troop
	639, // 720: MsgUp.cancel_work._troop:type_name -> Msg.troop
	634, // 721: MsgUp.equip_forge._type:type_name -> Msg.forge_type
	643, // 722: MsgUp.equip_forge._items:type_name -> Msg.com_item
	643, // 723: MsgUp.equip_forge._add_item:type_name -> Msg.com_item
	634, // 724: MsgUp.equip_streathen._type:type_name -> Msg.forge_type
	643, // 725: MsgUp.equip_streathen._items:type_name -> Msg.com_item
	643, // 726: MsgUp.equip_streathen._add_item:type_name -> Msg.com_item
	634, // 727: MsgUp.equip_enchanting._type:type_name -> Msg.forge_type
	643, // 728: MsgUp.equip_enchanting._items:type_name -> Msg.com_item
	634, // 729: MsgUp.equip_fuse._type:type_name -> Msg.forge_type
	643, // 730: MsgUp.equip_fuse._items:type_name -> Msg.com_item
	643, // 731: MsgUp.player_treasure_fuse._items:type_name -> Msg.com_item
	643, // 732: MsgUp.equip_refine._item:type_name -> Msg.com_item
	458, // 733: MsgUp.destruct_item_batch._destruct_items:type_name -> MsgUp.destruct_item
	589, // 734: MsgUp.destruct_treasure_batch._treasures:type_name -> MsgUp.destruct_treasure
	643, // 735: MsgUp.tavern_draw._items:type_name -> Msg.com_item
	666, // 736: MsgUp.batch_read_mail._batch_id_types:type_name -> Msg.more_id_type
	666, // 737: MsgUp.batch_get_reward._batch_id_types:type_name -> Msg.more_id_type
	10,  // 738: MsgUp.ask_equip_info._scene:type_name -> MsgUp.ask_equip_info.scene_type
	667, // 739: MsgUp.world_search._search_type:type_name -> Msg.world_search_type
	668, // 740: MsgUp.auto_rally._auto_rally_boss:type_name -> Msg.auto_rally_boss
	662, // 741: MsgUp.guild_sign._sign_info:type_name -> Msg.favorite_coord_info
	662, // 742: MsgUp.guild_sign._batch:type_name -> Msg.favorite_coord_info
	11,  // 743: MsgUp.open_gift_box._scene:type_name -> MsgUp.open_gift_box.scene_type
	103, // 744: MsgUp.request_world_Scale._map_info:type_name -> MsgUp.request_mapinfo
	639, // 745: MsgUp.send_troop_castle._troop:type_name -> Msg.troop
	746, // [746:746] is the sub-list for method output_type
	746, // [746:746] is the sub-list for method input_type
	746, // [746:746] is the sub-list for extension type_name
	746, // [746:746] is the sub-list for extension extendee
	0,   // [0:746] is the sub-list for field type_name
}

func init() { file_up_proto_init() }
func file_up_proto_init() {
	if File_up_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_up_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardMonthLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoPickupSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveNewUserGuideProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGmeAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSearchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSearchRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsNotSale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectedGoodsSaleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsSaleAgain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsSale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsFavoriteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsFavorite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsHotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsSellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsDealList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsBlockingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoreSocialMediaReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrazyMarketBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrazyMarketList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFreePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimInviteGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimShareGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInviteGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealWall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelHealWall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutfireWall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnWallOutlife); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipSynthesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickSynthesisMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesisMaterialCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupEquipSynthesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DewelSynthesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipReap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdsReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHwAdsReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskDailyLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Teleport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeleportRandom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeleportGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReapSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupTrain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaillist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSysmaillist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardmaillist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivitymaillist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFightMaillist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllianceMaillist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldMaillist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportTabList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMailReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMailReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReapResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReapResourceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimQuestReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTroop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearEmblem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMarch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnCastle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnCastleByItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTroopGarrison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGiftPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGiftList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerKingdomList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerKingdom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMapinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMapinfoEmoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMapinfoNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMapinfoBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopConsume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmbulanceSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviveSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupHealSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurrenderSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Work); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTrain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeaceShield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDailyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTaskRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sacrifice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoritelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryFecth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvideHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTaxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTransport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArmySupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepatriateArmySupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUnionWar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinUnionWar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUnionWar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitUnionWar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildWarList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKillRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllianceRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllianceKillRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFameRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDismiss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildJoinConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildJoinRefuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildJoinConfirmPitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildJoinRefusePitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetShortName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetJoinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetSlogan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetHeadline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildGetLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetLan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildOpenPannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildApplyMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildInviteMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactGetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactAddUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactRemoveUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetAuthTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildInviteMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildInviteConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildInviteRefuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildChangeMemberLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildElectOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDonateTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildStoreBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTechClearCd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCampSignup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCampList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCampVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMergeApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMergeCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxAnonymity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxAnonyCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTechDonateRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTechDonateAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBuildingCityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBuildingSetCover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMergeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMergeAgree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMergeReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMigrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSetMasterCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxOpenAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTechCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupMarch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopularityRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouletteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonTreasureBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRoulette); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRoulette); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenTreasureBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyRouletteCredits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackMarketRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackMarketBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TavernRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TavernBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSkillRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSkillBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SacrificeReliveGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechnologyFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePlayerSteps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesisFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleGuideFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChapterTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyFromStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshDailyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIapList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuinsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenRuins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKingCastleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGuildPlayerKingCastleJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*General); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralUpgradeStar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralFire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralUpgradeQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralRankingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralRelive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReliveFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReliveSpeedup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralBaptize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralBaptizeConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralLearnSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralLearnSkillV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralLearnSkillConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveSubCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifySubCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCityBuyBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCityUpgradeTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCitySpeedupBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCityBuyTroop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonSubCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEvony); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestructEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetLordGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildTechData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWheelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayWheel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectWheelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWheelVipPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWheelVipPlayList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWheelCredits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefendGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRouletteTurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRouletteAccumulateAwards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeKingPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKingNameLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallBackKingCastleArmy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKindomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKindomJobTitleUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKindomHistoryKings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKindomMarchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKindomPlayerJobTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKindomArmySupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdomAwardPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCityHealWall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserInfoPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVipPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAllienceGiftPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBuildingNamePermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissSubcitySoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoryWarList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGuildWarImmediately); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserToBlacklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserFromBlacklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmAddFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMailReportDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefuseAddFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnfavoriteFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestFriends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimMembershipReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryWholeFetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimConsumerReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshPatrol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectPatrolAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoPatrol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerActiveReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllianceUseGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingUseGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKingGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeServerCastle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRotary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRotaryAdvance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteWalkerActiveStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLordHourGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepatriateWarMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTarvenStamina); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFavoriteCoord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFavoriteCoordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReclaimGuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeGuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeGuildFarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelUpgradeGuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildTerritory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReclaimGuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubcityAutoFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseImprisonGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillImprisonGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedomImprisonGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInvitekey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSnowball); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuySkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facebook_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildTerritoryLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeSubcityColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchWearEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchWearTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCashcostAndGoldReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPreRechargeReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkReadGameNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserPrefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPrefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetbackFromStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorldBossInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyAttackBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossServerRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineDragon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubcityWallData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRefineEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRefineDragon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRefineSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearWorkCd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendGuildTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HitColorfulEgg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectOther); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesisItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComeInBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveUpRuins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeTechStone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupTechStone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMaterialQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradePet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignupBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMembersBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldRanklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldGuildrank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldGuildrankSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattleGarrison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldPersonalRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldPersonalSeasonRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIdNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDragonTalentUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDragonCliffShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDragonUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDragonFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDragonActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshDragonFood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHonorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlefieldBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleMarketRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleMarketBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFoundSubcity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFoundFamouscity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetFoundSubcity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetFoundFamouscity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReapSubcityItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSubcityByItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFamouscityByItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBuildingGovernmentGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteRobbersMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRobbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRobbersReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVipPopularityRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapinfoTriumph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapinfoTriumphRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapinfoTriumphFlowerrecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapinfoTriumphFlower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestructSkillBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAvatarFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAchievementList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHydraRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKingReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKingReturnReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChapterTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewChapterTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTempleBuildingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMonsterByItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildMonster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyRefreshTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKingBoxReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityTaskRewardItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMilestoneList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGaruaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimMilestoneReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewServerFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeStageReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestructItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestructEquipmentBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralUpgradeFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildFamouscityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummonViking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyViking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectVikingDifficulty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllFamouscity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildVikingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVikingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimVikingReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayoffMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitServerCompetition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildTreasureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimGuildTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivateTreasureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPrivateTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HonoursSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeportUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlepass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBattlepassReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentedReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPuzzleReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPuzzleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimFirstWeekGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimFamousGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMonthCardType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimConsumerGemsReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumerGemsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimFreeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendNpsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSpecialGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignupSmallBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteSmallBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSmallBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSmallBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmSmallBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmallBattlefieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmallBattlefieldInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadySmallBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityTaskRewardItemsBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectSmallBattlefieldBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitSmallBattlefield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSmallBattlefieldInviteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveEventTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectGuildBuildingSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretRoomOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFireCoinsNumToday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGrowthFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGrowthFundReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWarLossReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GhostTroops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelGhostTroops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFameTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFameTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFameProcessReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeFame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLikeFameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapBattleFlagInfoTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildTerritoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPveRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBarbarianRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYounierRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPopularityRewardItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreemarchRevive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeMarchTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamSetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamDismiss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamMemberPause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamMemberLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamMemberBack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamInviteConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamRally); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamSearchUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamRmMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockTempBagCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisTempBagItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuildTerritoryResUseRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyGuildTerritoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeGuildTerritoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributeResData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDepotResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTransport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTransportAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTransportList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTransportFind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelHealSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceMedicineBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupMedicineBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBuildingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetTechUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetTechUpgradeCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetTechUpgradeSpeedup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurrenderSoldiersFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupSurrenderSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSurrenderSoldiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedupWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceMedicineBagFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelProduceMedicineBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTroopAutoRelife); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetSummaryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipForge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipForgeFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipStreathen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipEnchanting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipFuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTreasureFuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipTechUpgrad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetBindHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetMerge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Visit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestructItemBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestructTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestructTreasureBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TavernDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroTalentUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroTalentReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsePlayerGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchReadMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskEquipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPetSummaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpsFinishReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpsStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRally); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAutoRally); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSignInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSignComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSignList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFriendPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenGiftBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWorld_Scale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideFps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTroopCastle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntelStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntelTaskReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntelTaskRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_up_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_up_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   606,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_up_proto_goTypes,
		DependencyIndexes: file_up_proto_depIdxs,
		EnumInfos:         file_up_proto_enumTypes,
		MessageInfos:      file_up_proto_msgTypes,
	}.Build()
	File_up_proto = out.File
	file_up_proto_rawDesc = nil
	file_up_proto_goTypes = nil
	file_up_proto_depIdxs = nil
}
