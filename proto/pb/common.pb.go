// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/////////////////////////////// BASE MSG ///////////////////////////////////////////
// 通用结果
type Result int32

const (
	Result_success Result = 0
	Result_fail    Result = 1
)

// Enum value maps for Result.
var (
	Result_name = map[int32]string{
		0: "success",
		1: "fail",
	}
	Result_value = map[string]int32{
		"success": 0,
		"fail":    1,
	}
)

func (x Result) Enum() *Result {
	p := new(Result)
	*p = x
	return p
}

func (x Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (Result) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Result(num)
	return nil
}

// Deprecated: Use Result.Descriptor instead.
func (Result) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// 战斗结果
type BattleResult int32

const (
	BattleResult_victory  BattleResult = 0
	BattleResult_defeat   BattleResult = 1
	BattleResult_canceled BattleResult = 2
	BattleResult_timeout  BattleResult = 3
)

// Enum value maps for BattleResult.
var (
	BattleResult_name = map[int32]string{
		0: "victory",
		1: "defeat",
		2: "canceled",
		3: "timeout",
	}
	BattleResult_value = map[string]int32{
		"victory":  0,
		"defeat":   1,
		"canceled": 2,
		"timeout":  3,
	}
)

func (x BattleResult) Enum() *BattleResult {
	p := new(BattleResult)
	*p = x
	return p
}

func (x BattleResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleResult) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (BattleResult) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x BattleResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BattleResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BattleResult(num)
	return nil
}

// Deprecated: Use BattleResult.Descriptor instead.
func (BattleResult) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

//兵种类型
type ArmyGroupType int32

const (
	ArmyGroupType_group_type_soldier ArmyGroupType = 1 //普通兵，与城墙
	ArmyGroupType_group_type_trap    ArmyGroupType = 2 //陷阱
	ArmyGroupType_group_type_npc     ArmyGroupType = 3 //野怪
)

// Enum value maps for ArmyGroupType.
var (
	ArmyGroupType_name = map[int32]string{
		1: "group_type_soldier",
		2: "group_type_trap",
		3: "group_type_npc",
	}
	ArmyGroupType_value = map[string]int32{
		"group_type_soldier": 1,
		"group_type_trap":    2,
		"group_type_npc":     3,
	}
)

func (x ArmyGroupType) Enum() *ArmyGroupType {
	p := new(ArmyGroupType)
	*p = x
	return p
}

func (x ArmyGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmyGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (ArmyGroupType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x ArmyGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArmyGroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArmyGroupType(num)
	return nil
}

// Deprecated: Use ArmyGroupType.Descriptor instead.
func (ArmyGroupType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

//地图块的类型
type MapinfoType int32

const (
	MapinfoType_mapinfo_field             MapinfoType = 0  //表示对应的是空地。
	MapinfoType_mapinfo_player            MapinfoType = 1  //表示地图是玩家的城
	MapinfoType_mapinfo_npc               MapinfoType = 2  //表示对应的是野怪
	MapinfoType_mapinfo_farm              MapinfoType = 3  //表示对应的是刷资源的地块。
	MapinfoType_mapinfo_garrison          MapinfoType = 4  //表示对应的是玩家驻军。
	MapinfoType_mapinfo_ruins             MapinfoType = 5  //遗迹
	MapinfoType_mapinfo_king_city         MapinfoType = 6  //王城
	MapinfoType_mapinfo_player_subcity    MapinfoType = 7  //表示地图是玩家的分城
	MapinfoType_mapinfo_snowberg          MapinfoType = 8  //表示雪山
	MapinfoType_mapinfo_guild_city        MapinfoType = 9  //表示联盟城市
	MapinfoType_mapinfo_guild_store       MapinfoType = 10 //表示联盟仓库
	MapinfoType_mapinfo_guild_farm        MapinfoType = 11 //表示联盟资源点
	MapinfoType_mapinfo_boss              MapinfoType = 12 //表示对应的是世界boss
	MapinfoType_battlefield_hospital      MapinfoType = 13 //战场医院
	MapinfoType_battlefield_blessing      MapinfoType = 14 //战场祝福之塔
	MapinfoType_battlefield_middle_city   MapinfoType = 15 //战场中心城
	MapinfoType_battlefield_cavalier      MapinfoType = 16 //战场骑士大厅
	MapinfoType_battlefield_teleporter    MapinfoType = 17 //战场传送点
	MapinfoType_battlefield_crystal       MapinfoType = 18 //战场水晶矿
	MapinfoType_battlefield_tower         MapinfoType = 19 //行军塔
	MapinfoType_mapinfo_triumph           MapinfoType = 20 //凯旋门
	MapinfoType_mapinfo_temple_create     MapinfoType = 21 //制造神庙
	MapinfoType_mapinfo_temple_bumper     MapinfoType = 22 //丰收神庙
	MapinfoType_mapinfo_temple_march      MapinfoType = 23 //行军神庙
	MapinfoType_mapinfo_fane_catapult     MapinfoType = 24 //投石机
	MapinfoType_mapinfo_fane_warrior      MapinfoType = 25 //武士塔
	MapinfoType_mapinfo_fane_wizard       MapinfoType = 26 //巫师塔
	MapinfoType_mapinfo_guild_banner      MapinfoType = 27 //表示联盟旗帜，只在联盟战列表中使用
	MapinfoType_mapinfo_famous_city       MapinfoType = 28 //世界名城
	MapinfoType_battlefield_tribal        MapinfoType = 29 //小战场关卡建筑
	MapinfoType_battlefield_guild_city    MapinfoType = 30 //小战场真实玩家建筑
	MapinfoType_battlefield_rally_tower   MapinfoType = 31 //集结大厅
	MapinfoType_mapinfo_guild_battle_flag MapinfoType = 32 //联盟领地战旗
	MapinfoType_mapinfo_village           MapinfoType = 33 //村庄
	MapinfoType_mapinfo_altar             MapinfoType = 34 //祭坛
	MapinfoType_battlefield_patrol        MapinfoType = 35 //小战场巡逻队
	MapinfoType_barbarian_castle          MapinfoType = 36 //蛮族城堡
	MapinfoType_mapinfo_red_city          MapinfoType = 37 //红色名城
	MapinfoType_mapinfo_tomb              MapinfoType = 38 //自由行军的墓碑
	MapinfoType_mapinfo_item              MapinfoType = 39 //怪物掉落道具
	MapinfoType_mapinfo_task_npc          MapinfoType = 40 //任务npc
	MapinfoType_mapinfo_fps_npc           MapinfoType = 41 // fps野怪
	MapinfoType_mapinfo_dangerous         MapinfoType = 42 // 危险物品
	MapinfoType_mapinfo_static_dangerous  MapinfoType = 43 // 静态危险物品
	MapinfoType_mapinfo_intel_monster     MapinfoType = 44 // 情报任务打怪类型
	MapinfoType_mapinfo_intel_help        MapinfoType = 45 // 情报任务救援类型
	MapinfoType_mapinfo_intel_fps         MapinfoType = 46 // 情报任务副本类型
	MapinfoType_mapinfo_untouchtable      MapinfoType = 47 // 不能点击的物品
)

// Enum value maps for MapinfoType.
var (
	MapinfoType_name = map[int32]string{
		0:  "mapinfo_field",
		1:  "mapinfo_player",
		2:  "mapinfo_npc",
		3:  "mapinfo_farm",
		4:  "mapinfo_garrison",
		5:  "mapinfo_ruins",
		6:  "mapinfo_king_city",
		7:  "mapinfo_player_subcity",
		8:  "mapinfo_snowberg",
		9:  "mapinfo_guild_city",
		10: "mapinfo_guild_store",
		11: "mapinfo_guild_farm",
		12: "mapinfo_boss",
		13: "battlefield_hospital",
		14: "battlefield_blessing",
		15: "battlefield_middle_city",
		16: "battlefield_cavalier",
		17: "battlefield_teleporter",
		18: "battlefield_crystal",
		19: "battlefield_tower",
		20: "mapinfo_triumph",
		21: "mapinfo_temple_create",
		22: "mapinfo_temple_bumper",
		23: "mapinfo_temple_march",
		24: "mapinfo_fane_catapult",
		25: "mapinfo_fane_warrior",
		26: "mapinfo_fane_wizard",
		27: "mapinfo_guild_banner",
		28: "mapinfo_famous_city",
		29: "battlefield_tribal",
		30: "battlefield_guild_city",
		31: "battlefield_rally_tower",
		32: "mapinfo_guild_battle_flag",
		33: "mapinfo_village",
		34: "mapinfo_altar",
		35: "battlefield_patrol",
		36: "barbarian_castle",
		37: "mapinfo_red_city",
		38: "mapinfo_tomb",
		39: "mapinfo_item",
		40: "mapinfo_task_npc",
		41: "mapinfo_fps_npc",
		42: "mapinfo_dangerous",
		43: "mapinfo_static_dangerous",
		44: "mapinfo_intel_monster",
		45: "mapinfo_intel_help",
		46: "mapinfo_intel_fps",
		47: "mapinfo_untouchtable",
	}
	MapinfoType_value = map[string]int32{
		"mapinfo_field":             0,
		"mapinfo_player":            1,
		"mapinfo_npc":               2,
		"mapinfo_farm":              3,
		"mapinfo_garrison":          4,
		"mapinfo_ruins":             5,
		"mapinfo_king_city":         6,
		"mapinfo_player_subcity":    7,
		"mapinfo_snowberg":          8,
		"mapinfo_guild_city":        9,
		"mapinfo_guild_store":       10,
		"mapinfo_guild_farm":        11,
		"mapinfo_boss":              12,
		"battlefield_hospital":      13,
		"battlefield_blessing":      14,
		"battlefield_middle_city":   15,
		"battlefield_cavalier":      16,
		"battlefield_teleporter":    17,
		"battlefield_crystal":       18,
		"battlefield_tower":         19,
		"mapinfo_triumph":           20,
		"mapinfo_temple_create":     21,
		"mapinfo_temple_bumper":     22,
		"mapinfo_temple_march":      23,
		"mapinfo_fane_catapult":     24,
		"mapinfo_fane_warrior":      25,
		"mapinfo_fane_wizard":       26,
		"mapinfo_guild_banner":      27,
		"mapinfo_famous_city":       28,
		"battlefield_tribal":        29,
		"battlefield_guild_city":    30,
		"battlefield_rally_tower":   31,
		"mapinfo_guild_battle_flag": 32,
		"mapinfo_village":           33,
		"mapinfo_altar":             34,
		"battlefield_patrol":        35,
		"barbarian_castle":          36,
		"mapinfo_red_city":          37,
		"mapinfo_tomb":              38,
		"mapinfo_item":              39,
		"mapinfo_task_npc":          40,
		"mapinfo_fps_npc":           41,
		"mapinfo_dangerous":         42,
		"mapinfo_static_dangerous":  43,
		"mapinfo_intel_monster":     44,
		"mapinfo_intel_help":        45,
		"mapinfo_intel_fps":         46,
		"mapinfo_untouchtable":      47,
	}
)

func (x MapinfoType) Enum() *MapinfoType {
	p := new(MapinfoType)
	*p = x
	return p
}

func (x MapinfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapinfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (MapinfoType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x MapinfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MapinfoType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MapinfoType(num)
	return nil
}

// Deprecated: Use MapinfoType.Descriptor instead.
func (MapinfoType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

// 商品类型
type GoodsType int32

const (
	GoodsType_goods_type_normal    GoodsType = 0 // 普通商品
	GoodsType_goods_type_important GoodsType = 1 // 珍品
)

// Enum value maps for GoodsType.
var (
	GoodsType_name = map[int32]string{
		0: "goods_type_normal",
		1: "goods_type_important",
	}
	GoodsType_value = map[string]int32{
		"goods_type_normal":    0,
		"goods_type_important": 1,
	}
)

func (x GoodsType) Enum() *GoodsType {
	p := new(GoodsType)
	*p = x
	return p
}

func (x GoodsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoodsType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (GoodsType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x GoodsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoodsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoodsType(num)
	return nil
}

// Deprecated: Use GoodsType.Descriptor instead.
func (GoodsType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

//商品交易后审核状态
type GoodsCheckStatus int32

const (
	GoodsCheckStatus_goods_check_status_no_check    GoodsCheckStatus = 0 // 无需审核
	GoodsCheckStatus_goods_check_status_wait_check  GoodsCheckStatus = 1 // 待审核
	GoodsCheckStatus_goods_check_status_checked     GoodsCheckStatus = 2 // 审核通过
	GoodsCheckStatus_goods_check_status_not_checked GoodsCheckStatus = 3 // 审核不通过
)

// Enum value maps for GoodsCheckStatus.
var (
	GoodsCheckStatus_name = map[int32]string{
		0: "goods_check_status_no_check",
		1: "goods_check_status_wait_check",
		2: "goods_check_status_checked",
		3: "goods_check_status_not_checked",
	}
	GoodsCheckStatus_value = map[string]int32{
		"goods_check_status_no_check":    0,
		"goods_check_status_wait_check":  1,
		"goods_check_status_checked":     2,
		"goods_check_status_not_checked": 3,
	}
)

func (x GoodsCheckStatus) Enum() *GoodsCheckStatus {
	p := new(GoodsCheckStatus)
	*p = x
	return p
}

func (x GoodsCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoodsCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (GoodsCheckStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x GoodsCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoodsCheckStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoodsCheckStatus(num)
	return nil
}

// Deprecated: Use GoodsCheckStatus.Descriptor instead.
func (GoodsCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

// 商品交易范围
type GoodsSaleScope int32

const (
	GoodsSaleScope_goods_sale_scope_cur_server GoodsSaleScope = 0 // 本服交易
	GoodsSaleScope_goods_sale_scope_cur_region GoodsSaleScope = 1 // 本区交易
	GoodsSaleScope_goods_sale_scope_all_region GoodsSaleScope = 2 // 跨区交易
)

// Enum value maps for GoodsSaleScope.
var (
	GoodsSaleScope_name = map[int32]string{
		0: "goods_sale_scope_cur_server",
		1: "goods_sale_scope_cur_region",
		2: "goods_sale_scope_all_region",
	}
	GoodsSaleScope_value = map[string]int32{
		"goods_sale_scope_cur_server": 0,
		"goods_sale_scope_cur_region": 1,
		"goods_sale_scope_all_region": 2,
	}
)

func (x GoodsSaleScope) Enum() *GoodsSaleScope {
	p := new(GoodsSaleScope)
	*p = x
	return p
}

func (x GoodsSaleScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoodsSaleScope) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (GoodsSaleScope) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x GoodsSaleScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoodsSaleScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoodsSaleScope(num)
	return nil
}

// Deprecated: Use GoodsSaleScope.Descriptor instead.
func (GoodsSaleScope) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

// 商品交易类型
type GoodsDealType int32

const (
	GoodsDealType_goods_deal_type_buy  GoodsDealType = 0 // 买
	GoodsDealType_goods_deal_type_sell GoodsDealType = 1 // 卖
)

// Enum value maps for GoodsDealType.
var (
	GoodsDealType_name = map[int32]string{
		0: "goods_deal_type_buy",
		1: "goods_deal_type_sell",
	}
	GoodsDealType_value = map[string]int32{
		"goods_deal_type_buy":  0,
		"goods_deal_type_sell": 1,
	}
)

func (x GoodsDealType) Enum() *GoodsDealType {
	p := new(GoodsDealType)
	*p = x
	return p
}

func (x GoodsDealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoodsDealType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (GoodsDealType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x GoodsDealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoodsDealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoodsDealType(num)
	return nil
}

// Deprecated: Use GoodsDealType.Descriptor instead.
func (GoodsDealType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

//类型1穿2脱
type WearActionType int32

const (
	WearActionType_wear_action_type_equip        WearActionType = 1 //穿装备
	WearActionType_wear_action_type_remove_equip WearActionType = 2 //脱
)

// Enum value maps for WearActionType.
var (
	WearActionType_name = map[int32]string{
		1: "wear_action_type_equip",
		2: "wear_action_type_remove_equip",
	}
	WearActionType_value = map[string]int32{
		"wear_action_type_equip":        1,
		"wear_action_type_remove_equip": 2,
	}
)

func (x WearActionType) Enum() *WearActionType {
	p := new(WearActionType)
	*p = x
	return p
}

func (x WearActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WearActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (WearActionType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x WearActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WearActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WearActionType(num)
	return nil
}

// Deprecated: Use WearActionType.Descriptor instead.
func (WearActionType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

//类型1头2胸3腿4脚5戒6武器7图纸8材料
type WearPosition int32

const (
	WearPosition_head     WearPosition = 1  //头部
	WearPosition_cloth    WearPosition = 2  //衣服
	WearPosition_pant     WearPosition = 3  //裤子
	WearPosition_shoe     WearPosition = 4  //鞋
	WearPosition_ring     WearPosition = 5  //戒指
	WearPosition_weapon   WearPosition = 6  //武器
	WearPosition_pet      WearPosition = 9  //宠物
	WearPosition_rarity   WearPosition = 10 //瑰宝
	WearPosition_bracelet WearPosition = 11 //手镯
	WearPosition_necklace WearPosition = 12 //项链
)

// Enum value maps for WearPosition.
var (
	WearPosition_name = map[int32]string{
		1:  "head",
		2:  "cloth",
		3:  "pant",
		4:  "shoe",
		5:  "ring",
		6:  "weapon",
		9:  "pet",
		10: "rarity",
		11: "bracelet",
		12: "necklace",
	}
	WearPosition_value = map[string]int32{
		"head":     1,
		"cloth":    2,
		"pant":     3,
		"shoe":     4,
		"ring":     5,
		"weapon":   6,
		"pet":      9,
		"rarity":   10,
		"bracelet": 11,
		"necklace": 12,
	}
)

func (x WearPosition) Enum() *WearPosition {
	p := new(WearPosition)
	*p = x
	return p
}

func (x WearPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WearPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (WearPosition) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x WearPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WearPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WearPosition(num)
	return nil
}

// Deprecated: Use WearPosition.Descriptor instead.
func (WearPosition) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

type MarchType int32

const (
	MarchType_castle               MarchType = 1  //攻打玩家城堡
	MarchType_monster              MarchType = 2  //攻打野怪
	MarchType_resource             MarchType = 3  //资源采集
	MarchType_field                MarchType = 4  //空地
	MarchType_ruins                MarchType = 5  //遗迹
	MarchType_garrison             MarchType = 6  //驻军
	MarchType_reap_resource        MarchType = 7  //资源采集中
	MarchType_ship                 MarchType = 8  //运输资源
	MarchType_scout                MarchType = 9  //侦查
	MarchType_return_castle        MarchType = 10 //返回
	MarchType_reinforcements       MarchType = 11 //士兵支援，路上
	MarchType_garrison_defend      MarchType = 12 //联盟防守，停在城里
	MarchType_union_war_wait       MarchType = 13 //联盟战集结完成
	MarchType_union_war_way        MarchType = 14 //联盟战集结中，路上
	MarchType_union_war            MarchType = 15 //联盟战出击
	MarchType_explore              MarchType = 16 //探索遗迹中
	MarchType_sub_city             MarchType = 17 //攻打分城
	MarchType_all_over             MarchType = 18 //全军覆灭
	MarchType_boss_war_wait        MarchType = 19 //Boss战集结
	MarchType_boss_war_way         MarchType = 20 //Boss战集结路上
	MarchType_boss_war             MarchType = 21 //Boss战出击
	MarchType_kingcastle           MarchType = 22 //王城
	MarchType_ghost                MarchType = 23 //异鬼来袭
	MarchType_guild_city           MarchType = 24 //联盟建筑
	MarchType_garrison_guild       MarchType = 25 //联盟防守，停在建筑
	MarchType_guild_resource       MarchType = 26 //联盟资源田采集
	MarchType_santa                MarchType = 27 //圣诞老人
	MarchType_guild_store          MarchType = 28 //存储资源
	MarchType_donate               MarchType = 29 //捐献资源
	MarchType_getback_resource     MarchType = 30 //取回资源
	MarchType_battlefield_building MarchType = 31 //战场建筑
	MarchType_garrison_field       MarchType = 32 //驻军在战场建筑
	MarchType_temple_building      MarchType = 33 //王城战跨服战建筑
	MarchType_garrison_temple      MarchType = 34 //驻军在王城战跨服战建筑
	MarchType_vehicle_coming       MarchType = 35 //补给车路线
	MarchType_altar_building       MarchType = 36 //远古祭坛建筑
	MarchType_garrison_altar       MarchType = 37 //驻军在远古祭坛建筑
	MarchType_barbarian            MarchType = 38 //蛮族城堡
	MarchType_garrison_barbarian   MarchType = 39 //驻军在蛮族城堡
	MarchType_portal_return_castle MarchType = 40 //回城卷轴回城
	MarchType_chase                MarchType = 41 //追击
	MarchType_tomb                 MarchType = 42 //墓碑
	MarchType_task_npc             MarchType = 43 //任务npc
	MarchType_collect_item         MarchType = 44 //拾取道具
	MarchType_collect_item_process MarchType = 45 //拾取道具进行
	MarchType_guild_ship           MarchType = 46 //联盟运输资源
	MarchType_capture_pets         MarchType = 47 //抓捕宠物
	MarchType_player_skill         MarchType = 48 //领主技能
	MarchType_intel_task           MarchType = 49 //情报任务
	MarchType_cloud_Exploration    MarchType = 50 // 迷雾探索
)

// Enum value maps for MarchType.
var (
	MarchType_name = map[int32]string{
		1:  "castle",
		2:  "monster",
		3:  "resource",
		4:  "field",
		5:  "ruins",
		6:  "garrison",
		7:  "reap_resource",
		8:  "ship",
		9:  "scout",
		10: "return_castle",
		11: "reinforcements",
		12: "garrison_defend",
		13: "union_war_wait",
		14: "union_war_way",
		15: "union_war",
		16: "explore",
		17: "sub_city",
		18: "all_over",
		19: "boss_war_wait",
		20: "boss_war_way",
		21: "boss_war",
		22: "kingcastle",
		23: "ghost",
		24: "guild_city",
		25: "garrison_guild",
		26: "guild_resource",
		27: "santa",
		28: "guild_store",
		29: "donate",
		30: "getback_resource",
		31: "battlefield_building",
		32: "garrison_field",
		33: "temple_building",
		34: "garrison_temple",
		35: "vehicle_coming",
		36: "altar_building",
		37: "garrison_altar",
		38: "barbarian",
		39: "garrison_barbarian",
		40: "portal_return_castle",
		41: "chase",
		42: "tomb",
		43: "task_npc",
		44: "collect_item",
		45: "collect_item_process",
		46: "guild_ship",
		47: "capture_pets",
		48: "player_skill",
		49: "intel_task",
		50: "cloud_Exploration",
	}
	MarchType_value = map[string]int32{
		"castle":               1,
		"monster":              2,
		"resource":             3,
		"field":                4,
		"ruins":                5,
		"garrison":             6,
		"reap_resource":        7,
		"ship":                 8,
		"scout":                9,
		"return_castle":        10,
		"reinforcements":       11,
		"garrison_defend":      12,
		"union_war_wait":       13,
		"union_war_way":        14,
		"union_war":            15,
		"explore":              16,
		"sub_city":             17,
		"all_over":             18,
		"boss_war_wait":        19,
		"boss_war_way":         20,
		"boss_war":             21,
		"kingcastle":           22,
		"ghost":                23,
		"guild_city":           24,
		"garrison_guild":       25,
		"guild_resource":       26,
		"santa":                27,
		"guild_store":          28,
		"donate":               29,
		"getback_resource":     30,
		"battlefield_building": 31,
		"garrison_field":       32,
		"temple_building":      33,
		"garrison_temple":      34,
		"vehicle_coming":       35,
		"altar_building":       36,
		"garrison_altar":       37,
		"barbarian":            38,
		"garrison_barbarian":   39,
		"portal_return_castle": 40,
		"chase":                41,
		"tomb":                 42,
		"task_npc":             43,
		"collect_item":         44,
		"collect_item_process": 45,
		"guild_ship":           46,
		"capture_pets":         47,
		"player_skill":         48,
		"intel_task":           49,
		"cloud_Exploration":    50,
	}
)

func (x MarchType) Enum() *MarchType {
	p := new(MarchType)
	*p = x
	return p
}

func (x MarchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarchType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (MarchType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x MarchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MarchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MarchType(num)
	return nil
}

// Deprecated: Use MarchType.Descriptor instead.
func (MarchType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

//道具的资源类型。
type ItemResourceType int32

const (
	ItemResourceType_resA          ItemResourceType = 1  //资源1
	ItemResourceType_resB          ItemResourceType = 2  //资源2
	ItemResourceType_resC          ItemResourceType = 3  //资源3
	ItemResourceType_resD          ItemResourceType = 4  //资源4
	ItemResourceType_gold          ItemResourceType = 5  //充值的gems
	ItemResourceType_exp           ItemResourceType = 6  //经验
	ItemResourceType_stamina       ItemResourceType = 7  //活力值
	ItemResourceType_vip_point     ItemResourceType = 8  //vip点数
	ItemResourceType_vip_expire    ItemResourceType = 9  //vip过期时间
	ItemResourceType_resE          ItemResourceType = 10 //资源E
	ItemResourceType_hero_exp      ItemResourceType = 11 //将军经验
	ItemResourceType_wheel_credits ItemResourceType = 12 //轮盘点数
	ItemResourceType_guild_credits ItemResourceType = 13 //联盟积分
	ItemResourceType_guild_honor   ItemResourceType = 14 //联盟荣誉
	ItemResourceType_pet_exp       ItemResourceType = 15 //宠物经验
	ItemResourceType_horn          ItemResourceType = 16 //号角
	ItemResourceType_skin          ItemResourceType = 17 //城堡装扮
	ItemResourceType_avatar        ItemResourceType = 18 //头像框
	ItemResourceType_buff          ItemResourceType = 19 //buff
	ItemResourceType_resG          ItemResourceType = 20 //黑金
	ItemResourceType_new_pet_exp   ItemResourceType = 21 //新宠物经验
)

// Enum value maps for ItemResourceType.
var (
	ItemResourceType_name = map[int32]string{
		1:  "resA",
		2:  "resB",
		3:  "resC",
		4:  "resD",
		5:  "gold",
		6:  "exp",
		7:  "stamina",
		8:  "vip_point",
		9:  "vip_expire",
		10: "resE",
		11: "hero_exp",
		12: "wheel_credits",
		13: "guild_credits",
		14: "guild_honor",
		15: "pet_exp",
		16: "horn",
		17: "skin",
		18: "avatar",
		19: "buff",
		20: "resG",
		21: "new_pet_exp",
	}
	ItemResourceType_value = map[string]int32{
		"resA":          1,
		"resB":          2,
		"resC":          3,
		"resD":          4,
		"gold":          5,
		"exp":           6,
		"stamina":       7,
		"vip_point":     8,
		"vip_expire":    9,
		"resE":          10,
		"hero_exp":      11,
		"wheel_credits": 12,
		"guild_credits": 13,
		"guild_honor":   14,
		"pet_exp":       15,
		"horn":          16,
		"skin":          17,
		"avatar":        18,
		"buff":          19,
		"resG":          20,
		"new_pet_exp":   21,
	}
)

func (x ItemResourceType) Enum() *ItemResourceType {
	p := new(ItemResourceType)
	*p = x
	return p
}

func (x ItemResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (ItemResourceType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x ItemResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemResourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemResourceType(num)
	return nil
}

// Deprecated: Use ItemResourceType.Descriptor instead.
func (ItemResourceType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

//0通常 1加速 2材料 3装备 4特殊 5君主宝物
type ItemCategory int32

const (
	ItemCategory_normal    ItemCategory = 0
	ItemCategory_speed_up  ItemCategory = 1
	ItemCategory_material  ItemCategory = 2
	ItemCategory_equipment ItemCategory = 3
	ItemCategory_other     ItemCategory = 4
	ItemCategory_treasure  ItemCategory = 5
)

// Enum value maps for ItemCategory.
var (
	ItemCategory_name = map[int32]string{
		0: "normal",
		1: "speed_up",
		2: "material",
		3: "equipment",
		4: "other",
		5: "treasure",
	}
	ItemCategory_value = map[string]int32{
		"normal":    0,
		"speed_up":  1,
		"material":  2,
		"equipment": 3,
		"other":     4,
		"treasure":  5,
	}
)

func (x ItemCategory) Enum() *ItemCategory {
	p := new(ItemCategory)
	*p = x
	return p
}

func (x ItemCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (ItemCategory) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x ItemCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemCategory(num)
	return nil
}

// Deprecated: Use ItemCategory.Descriptor instead.
func (ItemCategory) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

//锻造类型
type ForgeType int32

const (
	ForgeType_make       ForgeType = 1 //锻造
	ForgeType_upgrade    ForgeType = 2 //升品
	ForgeType_upstar     ForgeType = 3 //升星
	ForgeType_synthesis  ForgeType = 4 //合成材料
	ForgeType_update     ForgeType = 5 //升级装备
	ForgeType_strengthen ForgeType = 6 //强化
	ForgeType_enchanting ForgeType = 7 //附魔
	ForgeType_refine     ForgeType = 8 // 精炼
)

// Enum value maps for ForgeType.
var (
	ForgeType_name = map[int32]string{
		1: "make",
		2: "upgrade",
		3: "upstar",
		4: "synthesis",
		5: "update",
		6: "strengthen",
		7: "enchanting",
		8: "refine",
	}
	ForgeType_value = map[string]int32{
		"make":       1,
		"upgrade":    2,
		"upstar":     3,
		"synthesis":  4,
		"update":     5,
		"strengthen": 6,
		"enchanting": 7,
		"refine":     8,
	}
)

func (x ForgeType) Enum() *ForgeType {
	p := new(ForgeType)
	*p = x
	return p
}

func (x ForgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (ForgeType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x ForgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ForgeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ForgeType(num)
	return nil
}

// Deprecated: Use ForgeType.Descriptor instead.
func (ForgeType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

type Mtype int32

const (
	Mtype_system_mail                 Mtype = 1
	Mtype_private_mail                Mtype = 2
	Mtype_guild_mail                  Mtype = 3
	Mtype_gathering_report_mail       Mtype = 4  //采集报告
	Mtype_monster_report_mail         Mtype = 5  //打怪报告
	Mtype_ruins_report_mail           Mtype = 6  //遗迹探险报告
	Mtype_scout_report_mail           Mtype = 7  //侦查报告
	Mtype_detected_report_mail        Mtype = 8  //被侦查报告
	Mtype_attack_report_mail          Mtype = 9  //战斗报告
	Mtype_defend_report_mail          Mtype = 10 //防御报告
	Mtype_garrison_report_mail        Mtype = 11 //驻军报告
	Mtype_guild_invite_mail           Mtype = 12 //联盟邀请邮件
	Mtype_guild_notify_mail           Mtype = 13 //联盟通知邮件
	Mtype_forge_notify_mail           Mtype = 14 //锻造完成的通知邮件
	Mtype_kingdom_notify_mail         Mtype = 15 //王城开战的通知
	Mtype_resource_give_mail          Mtype = 16 //资源赠送的通知
	Mtype_reward_mail                 Mtype = 17 //奖励邮件
	Mtype_activity_mail               Mtype = 18 //活动邮件
	Mtype_peace_shield_report_mail    Mtype = 19 //采集或者驻军失败报告
	Mtype_king_mail                   Mtype = 20 //王国邮件
	Mtype_ghost_report_mail           Mtype = 21 //异鬼报告
	Mtype_activity_start_mail         Mtype = 22 //活动开启报告
	Mtype_field_scout_report_mail     Mtype = 23 //战场侦查报告
	Mtype_field_detected_report_mail  Mtype = 24 //战场被侦查报告
	Mtype_field_attack_report_mail    Mtype = 25 //战场战斗报告
	Mtype_field_defend_report_mail    Mtype = 26 //战场防御报告
	Mtype_catapult_report_mail        Mtype = 27 //投石机报告
	Mtype_catapult_occupy_report_mail Mtype = 28 //投石机占领者报告
	Mtype_binding_mail                Mtype = 29 //绑定账号提示
	Mtype_territory_report_mail       Mtype = 30 // 领土报告
	Mtype_appoint_report_mail         Mtype = 31 // 任命报告
	Mtype_tech_report_mail            Mtype = 32 // 科研报告
	Mtype_alliance_mark_mail          Mtype = 33 // 势力标记
	Mtype_occupy_report_mail          Mtype = 34 // 占领/被占领报告
	Mtype_alliance_donate_mail        Mtype = 35 // 联盟贡献排行（每日/每周）
	Mtype_res_send_mail               Mtype = 36 // 资源赠送
)

// Enum value maps for Mtype.
var (
	Mtype_name = map[int32]string{
		1:  "system_mail",
		2:  "private_mail",
		3:  "guild_mail",
		4:  "gathering_report_mail",
		5:  "monster_report_mail",
		6:  "ruins_report_mail",
		7:  "scout_report_mail",
		8:  "detected_report_mail",
		9:  "attack_report_mail",
		10: "defend_report_mail",
		11: "garrison_report_mail",
		12: "guild_invite_mail",
		13: "guild_notify_mail",
		14: "forge_notify_mail",
		15: "kingdom_notify_mail",
		16: "resource_give_mail",
		17: "reward_mail",
		18: "activity_mail",
		19: "peace_shield_report_mail",
		20: "king_mail",
		21: "ghost_report_mail",
		22: "activity_start_mail",
		23: "field_scout_report_mail",
		24: "field_detected_report_mail",
		25: "field_attack_report_mail",
		26: "field_defend_report_mail",
		27: "catapult_report_mail",
		28: "catapult_occupy_report_mail",
		29: "binding_mail",
		30: "territory_report_mail",
		31: "appoint_report_mail",
		32: "tech_report_mail",
		33: "alliance_mark_mail",
		34: "occupy_report_mail",
		35: "alliance_donate_mail",
		36: "res_send_mail",
	}
	Mtype_value = map[string]int32{
		"system_mail":                 1,
		"private_mail":                2,
		"guild_mail":                  3,
		"gathering_report_mail":       4,
		"monster_report_mail":         5,
		"ruins_report_mail":           6,
		"scout_report_mail":           7,
		"detected_report_mail":        8,
		"attack_report_mail":          9,
		"defend_report_mail":          10,
		"garrison_report_mail":        11,
		"guild_invite_mail":           12,
		"guild_notify_mail":           13,
		"forge_notify_mail":           14,
		"kingdom_notify_mail":         15,
		"resource_give_mail":          16,
		"reward_mail":                 17,
		"activity_mail":               18,
		"peace_shield_report_mail":    19,
		"king_mail":                   20,
		"ghost_report_mail":           21,
		"activity_start_mail":         22,
		"field_scout_report_mail":     23,
		"field_detected_report_mail":  24,
		"field_attack_report_mail":    25,
		"field_defend_report_mail":    26,
		"catapult_report_mail":        27,
		"catapult_occupy_report_mail": 28,
		"binding_mail":                29,
		"territory_report_mail":       30,
		"appoint_report_mail":         31,
		"tech_report_mail":            32,
		"alliance_mark_mail":          33,
		"occupy_report_mail":          34,
		"alliance_donate_mail":        35,
		"res_send_mail":               36,
	}
)

func (x Mtype) Enum() *Mtype {
	p := new(Mtype)
	*p = x
	return p
}

func (x Mtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mtype) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[14].Descriptor()
}

func (Mtype) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[14]
}

func (x Mtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Mtype) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Mtype(num)
	return nil
}

// Deprecated: Use Mtype.Descriptor instead.
func (Mtype) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

//push开关类型
type PushSwitchType int32

const (
	PushSwitchType_sound_and_text PushSwitchType = 0 //推送包括声音和文本
	PushSwitchType_only_text      PushSwitchType = 1 //仅文本
	PushSwitchType_close          PushSwitchType = 2 //推送关闭
)

// Enum value maps for PushSwitchType.
var (
	PushSwitchType_name = map[int32]string{
		0: "sound_and_text",
		1: "only_text",
		2: "close",
	}
	PushSwitchType_value = map[string]int32{
		"sound_and_text": 0,
		"only_text":      1,
		"close":          2,
	}
)

func (x PushSwitchType) Enum() *PushSwitchType {
	p := new(PushSwitchType)
	*p = x
	return p
}

func (x PushSwitchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushSwitchType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[15].Descriptor()
}

func (PushSwitchType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[15]
}

func (x PushSwitchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PushSwitchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PushSwitchType(num)
	return nil
}

// Deprecated: Use PushSwitchType.Descriptor instead.
func (PushSwitchType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

//0攻击，1防御，2血量
type ArmyBuffType int32

const (
	ArmyBuffType_attack     ArmyBuffType = 0
	ArmyBuffType_defense    ArmyBuffType = 1
	ArmyBuffType_blood      ArmyBuffType = 2
	ArmyBuffType_range      ArmyBuffType = 3 //攻击距离
	ArmyBuffType_speed      ArmyBuffType = 4 //移动速度
	ArmyBuffType_load       ArmyBuffType = 5 //负重
	ArmyBuffType_first_rate ArmyBuffType = 6 //先手值
)

// Enum value maps for ArmyBuffType.
var (
	ArmyBuffType_name = map[int32]string{
		0: "attack",
		1: "defense",
		2: "blood",
		3: "range",
		4: "speed",
		5: "load",
		6: "first_rate",
	}
	ArmyBuffType_value = map[string]int32{
		"attack":     0,
		"defense":    1,
		"blood":      2,
		"range":      3,
		"speed":      4,
		"load":       5,
		"first_rate": 6,
	}
)

func (x ArmyBuffType) Enum() *ArmyBuffType {
	p := new(ArmyBuffType)
	*p = x
	return p
}

func (x ArmyBuffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmyBuffType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[16].Descriptor()
}

func (ArmyBuffType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[16]
}

func (x ArmyBuffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArmyBuffType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArmyBuffType(num)
	return nil
}

// Deprecated: Use ArmyBuffType.Descriptor instead.
func (ArmyBuffType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

//push通知的种类
type PushNotificationType int32

const (
	PushNotificationType_timer                 PushNotificationType = 0  //计时器：建筑升级、部队训练完成、部队治疗完成、陷阱建造完成、锻造完成、任务完成、科技研发完成、仓库已满、体力回满
	PushNotificationType_battle                PushNotificationType = 1  //军队返回城市、城市被选为攻击目标、城市被侦查、增援。
	PushNotificationType_guild                 PushNotificationType = 2  //公会邀请、公会申请、公会交易、公会商店刷新
	PushNotificationType_guild_war             PushNotificationType = 3  //战争集结、王城争夺、联盟成员被攻击等有关的推送通知
	PushNotificationType_gift                  PushNotificationType = 4  //获得联盟礼物、联盟礼物即将消失（提前1小时）
	PushNotificationType_enhance               PushNotificationType = 5  //新手保护、道具增益、VIP状态消失或即将消失。
	PushNotificationType_social                PushNotificationType = 6  //玩家间的邮件、公会邮件
	PushNotificationType_event                 PushNotificationType = 7  //活动即将开始
	PushNotificationType_king_gift             PushNotificationType = 8  //系统王国礼物 每小时推送一次
	PushNotificationType_server_introduce      PushNotificationType = 9  //客服消息
	PushNotificationType_guild_chat            PushNotificationType = 10 //联盟聊天
	PushNotificationType_timer_building        PushNotificationType = 11 //建筑升级完成
	PushNotificationType_timer_troop_training  PushNotificationType = 12 //士兵训练完成
	PushNotificationType_timer_troop_treatment PushNotificationType = 13 //士兵治疗完成
	PushNotificationType_timer_trap            PushNotificationType = 14 //陷阱制造完成
	PushNotificationType_timer_forge           PushNotificationType = 15 // 装别锻造完成
	PushNotificationType_timer_tech            PushNotificationType = 16 //科技研发成
	PushNotificationType_timer_strength        PushNotificationType = 17 //体力已满
	PushNotificationType_timer_res_full        PushNotificationType = 18 //生产已满
)

// Enum value maps for PushNotificationType.
var (
	PushNotificationType_name = map[int32]string{
		0:  "timer",
		1:  "battle",
		2:  "guild",
		3:  "guild_war",
		4:  "gift",
		5:  "enhance",
		6:  "social",
		7:  "event",
		8:  "king_gift",
		9:  "server_introduce",
		10: "guild_chat",
		11: "timer_building",
		12: "timer_troop_training",
		13: "timer_troop_treatment",
		14: "timer_trap",
		15: "timer_forge",
		16: "timer_tech",
		17: "timer_strength",
		18: "timer_res_full",
	}
	PushNotificationType_value = map[string]int32{
		"timer":                 0,
		"battle":                1,
		"guild":                 2,
		"guild_war":             3,
		"gift":                  4,
		"enhance":               5,
		"social":                6,
		"event":                 7,
		"king_gift":             8,
		"server_introduce":      9,
		"guild_chat":            10,
		"timer_building":        11,
		"timer_troop_training":  12,
		"timer_troop_treatment": 13,
		"timer_trap":            14,
		"timer_forge":           15,
		"timer_tech":            16,
		"timer_strength":        17,
		"timer_res_full":        18,
	}
)

func (x PushNotificationType) Enum() *PushNotificationType {
	p := new(PushNotificationType)
	*p = x
	return p
}

func (x PushNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[17].Descriptor()
}

func (PushNotificationType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[17]
}

func (x PushNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PushNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PushNotificationType(num)
	return nil
}

// Deprecated: Use PushNotificationType.Descriptor instead.
func (PushNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

//task_type 1新建建筑2升级建筑3训练士兵4生产资源5锻造装备6击杀怪物7科技研究8收税9祭祀10推广11建筑的个数12击杀N级以上怪物13占领N级以上资源点14资源田生产量/H 15掠夺N级以上玩家 16世界频道任意发言1次 17给任意玩家写一封信
type TaskType int32

const (
	TaskType_new_building             TaskType = 1
	TaskType_upgrade_building         TaskType = 2
	TaskType_train_soldier            TaskType = 3
	TaskType_create_resource          TaskType = 4
	TaskType_equip_reap               TaskType = 5
	TaskType_kill_monsters            TaskType = 6
	TaskType_tech_research            TaskType = 7
	TaskType_use_tax                  TaskType = 8
	TaskType_use_sacrifice            TaskType = 9
	TaskType_facebook_adv             TaskType = 10 //
	TaskType_building_nums            TaskType = 11
	TaskType_times_kill_monsters_gt   TaskType = 12
	TaskType_times_occupy_resource_gt TaskType = 13
	TaskType_speed_create_resource    TaskType = 14
	TaskType_times_plunder_gt         TaskType = 15
	TaskType_begin_chat               TaskType = 16
	TaskType_begin_mail               TaskType = 17
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		1:  "new_building",
		2:  "upgrade_building",
		3:  "train_soldier",
		4:  "create_resource",
		5:  "equip_reap",
		6:  "kill_monsters",
		7:  "tech_research",
		8:  "use_tax",
		9:  "use_sacrifice",
		10: "facebook_adv",
		11: "building_nums",
		12: "times_kill_monsters_gt",
		13: "times_occupy_resource_gt",
		14: "speed_create_resource",
		15: "times_plunder_gt",
		16: "begin_chat",
		17: "begin_mail",
	}
	TaskType_value = map[string]int32{
		"new_building":             1,
		"upgrade_building":         2,
		"train_soldier":            3,
		"create_resource":          4,
		"equip_reap":               5,
		"kill_monsters":            6,
		"tech_research":            7,
		"use_tax":                  8,
		"use_sacrifice":            9,
		"facebook_adv":             10,
		"building_nums":            11,
		"times_kill_monsters_gt":   12,
		"times_occupy_resource_gt": 13,
		"speed_create_resource":    14,
		"times_plunder_gt":         15,
		"begin_chat":               16,
		"begin_mail":               17,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[18].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[18]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskType(num)
	return nil
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

type MailType int32

const (
	MailType_system      MailType = 0 //系统邮件
	MailType_unsystem    MailType = 1 //私人邮件
	MailType_report      MailType = 2 //报告
	MailType_reward      MailType = 3 //奖励邮件
	MailType_activity    MailType = 4 //活动邮件
	MailType_fight       MailType = 5 //战报邮件
	MailType_battlefield MailType = 6 //战场邮件
)

// Enum value maps for MailType.
var (
	MailType_name = map[int32]string{
		0: "system",
		1: "unsystem",
		2: "report",
		3: "reward",
		4: "activity",
		5: "fight",
		6: "battlefield",
	}
	MailType_value = map[string]int32{
		"system":      0,
		"unsystem":    1,
		"report":      2,
		"reward":      3,
		"activity":    4,
		"fight":       5,
		"battlefield": 6,
	}
)

func (x MailType) Enum() *MailType {
	p := new(MailType)
	*p = x
	return p
}

func (x MailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MailType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[19].Descriptor()
}

func (MailType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[19]
}

func (x MailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MailType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MailType(num)
	return nil
}

// Deprecated: Use MailType.Descriptor instead.
func (MailType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

// 邮件页签类型
type MailTabType int32

const (
	MailTabType_unknow_mail_tab_type MailTabType = 0 //没传时的默认值
	MailTabType_private_type         MailTabType = 1 //个人
	MailTabType_report_type          MailTabType = 2 //报告
	MailTabType_guild_type           MailTabType = 3 //势力
	MailTabType_system_type          MailTabType = 4 //系统
	MailTabType_activity_type        MailTabType = 5 //活动
)

// Enum value maps for MailTabType.
var (
	MailTabType_name = map[int32]string{
		0: "unknow_mail_tab_type",
		1: "private_type",
		2: "report_type",
		3: "guild_type",
		4: "system_type",
		5: "activity_type",
	}
	MailTabType_value = map[string]int32{
		"unknow_mail_tab_type": 0,
		"private_type":         1,
		"report_type":          2,
		"guild_type":           3,
		"system_type":          4,
		"activity_type":        5,
	}
)

func (x MailTabType) Enum() *MailTabType {
	p := new(MailTabType)
	*p = x
	return p
}

func (x MailTabType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MailTabType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[20].Descriptor()
}

func (MailTabType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[20]
}

func (x MailTabType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MailTabType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MailTabType(num)
	return nil
}

// Deprecated: Use MailTabType.Descriptor instead.
func (MailTabType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

type HelpType int32

const (
	HelpType_building     HelpType = 0 //建筑
	HelpType_tech         HelpType = 1 //科技
	HelpType_equip        HelpType = 3 //锻造
	HelpType_heal         HelpType = 4 //治疗
	HelpType_heal_produce HelpType = 5 //生产急救包
)

// Enum value maps for HelpType.
var (
	HelpType_name = map[int32]string{
		0: "building",
		1: "tech",
		3: "equip",
		4: "heal",
		5: "heal_produce",
	}
	HelpType_value = map[string]int32{
		"building":     0,
		"tech":         1,
		"equip":        3,
		"heal":         4,
		"heal_produce": 5,
	}
)

func (x HelpType) Enum() *HelpType {
	p := new(HelpType)
	*p = x
	return p
}

func (x HelpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HelpType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[21].Descriptor()
}

func (HelpType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[21]
}

func (x HelpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HelpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HelpType(num)
	return nil
}

// Deprecated: Use HelpType.Descriptor instead.
func (HelpType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

// 语言类型
type LanType int32

const (
	LanType_Afrikaans     LanType = 0
	LanType_Arabic        LanType = 1
	LanType_Basque        LanType = 2
	LanType_Belarusian    LanType = 3
	LanType_Bulgarian     LanType = 4
	LanType_Catalan       LanType = 5
	LanType_Chinese       LanType = 6
	LanType_Czech         LanType = 7
	LanType_Danish        LanType = 8
	LanType_Dutch         LanType = 9
	LanType_English       LanType = 10
	LanType_Estonian      LanType = 11
	LanType_Faroese       LanType = 12
	LanType_Finnish       LanType = 13
	LanType_French        LanType = 14
	LanType_German        LanType = 15
	LanType_Greek         LanType = 16
	LanType_Hebrew        LanType = 17
	LanType_Hungarian     LanType = 18
	LanType_Icelandic     LanType = 19
	LanType_Indonesian    LanType = 20
	LanType_Italian       LanType = 21
	LanType_Japanese      LanType = 22
	LanType_Korean        LanType = 23
	LanType_Latvian       LanType = 24
	LanType_Lithuanian    LanType = 25
	LanType_Norwegian     LanType = 26
	LanType_Polish        LanType = 27
	LanType_Portuguese    LanType = 28
	LanType_Romanian      LanType = 29
	LanType_Russian       LanType = 30
	LanType_SerboCroatian LanType = 31
	LanType_Slovak        LanType = 32
	LanType_Slovenian     LanType = 33
	LanType_Spanish       LanType = 34
	LanType_Swedish       LanType = 35
	LanType_Thai          LanType = 36
	LanType_Turkish       LanType = 37
	LanType_Ukrainian     LanType = 38
	LanType_Vietnamese    LanType = 39
	LanType_Cantonese     LanType = 40
	LanType_TaiWan        LanType = 41
	LanType_Unknown       LanType = 42
	LanType_ChineseICP    LanType = 43
	LanType_All           LanType = 44
	LanType_India         LanType = 45
)

// Enum value maps for LanType.
var (
	LanType_name = map[int32]string{
		0:  "Afrikaans",
		1:  "Arabic",
		2:  "Basque",
		3:  "Belarusian",
		4:  "Bulgarian",
		5:  "Catalan",
		6:  "Chinese",
		7:  "Czech",
		8:  "Danish",
		9:  "Dutch",
		10: "English",
		11: "Estonian",
		12: "Faroese",
		13: "Finnish",
		14: "French",
		15: "German",
		16: "Greek",
		17: "Hebrew",
		18: "Hungarian",
		19: "Icelandic",
		20: "Indonesian",
		21: "Italian",
		22: "Japanese",
		23: "Korean",
		24: "Latvian",
		25: "Lithuanian",
		26: "Norwegian",
		27: "Polish",
		28: "Portuguese",
		29: "Romanian",
		30: "Russian",
		31: "SerboCroatian",
		32: "Slovak",
		33: "Slovenian",
		34: "Spanish",
		35: "Swedish",
		36: "Thai",
		37: "Turkish",
		38: "Ukrainian",
		39: "Vietnamese",
		40: "Cantonese",
		41: "TaiWan",
		42: "Unknown",
		43: "ChineseICP",
		44: "All",
		45: "India",
	}
	LanType_value = map[string]int32{
		"Afrikaans":     0,
		"Arabic":        1,
		"Basque":        2,
		"Belarusian":    3,
		"Bulgarian":     4,
		"Catalan":       5,
		"Chinese":       6,
		"Czech":         7,
		"Danish":        8,
		"Dutch":         9,
		"English":       10,
		"Estonian":      11,
		"Faroese":       12,
		"Finnish":       13,
		"French":        14,
		"German":        15,
		"Greek":         16,
		"Hebrew":        17,
		"Hungarian":     18,
		"Icelandic":     19,
		"Indonesian":    20,
		"Italian":       21,
		"Japanese":      22,
		"Korean":        23,
		"Latvian":       24,
		"Lithuanian":    25,
		"Norwegian":     26,
		"Polish":        27,
		"Portuguese":    28,
		"Romanian":      29,
		"Russian":       30,
		"SerboCroatian": 31,
		"Slovak":        32,
		"Slovenian":     33,
		"Spanish":       34,
		"Swedish":       35,
		"Thai":          36,
		"Turkish":       37,
		"Ukrainian":     38,
		"Vietnamese":    39,
		"Cantonese":     40,
		"TaiWan":        41,
		"Unknown":       42,
		"ChineseICP":    43,
		"All":           44,
		"India":         45,
	}
)

func (x LanType) Enum() *LanType {
	p := new(LanType)
	*p = x
	return p
}

func (x LanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[22].Descriptor()
}

func (LanType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[22]
}

func (x LanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LanType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LanType(num)
	return nil
}

// Deprecated: Use LanType.Descriptor instead.
func (LanType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

// 联盟加入类型
type GuildJoinType int32

const (
	GuildJoinType_no_verify GuildJoinType = 1 //不需要验证
	GuildJoinType_verify    GuildJoinType = 2 //需要验证才能加入
	GuildJoinType_closed    GuildJoinType = 3 //不允许加入
)

// Enum value maps for GuildJoinType.
var (
	GuildJoinType_name = map[int32]string{
		1: "no_verify",
		2: "verify",
		3: "closed",
	}
	GuildJoinType_value = map[string]int32{
		"no_verify": 1,
		"verify":    2,
		"closed":    3,
	}
)

func (x GuildJoinType) Enum() *GuildJoinType {
	p := new(GuildJoinType)
	*p = x
	return p
}

func (x GuildJoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildJoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[23].Descriptor()
}

func (GuildJoinType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[23]
}

func (x GuildJoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildJoinType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildJoinType(num)
	return nil
}

// Deprecated: Use GuildJoinType.Descriptor instead.
func (GuildJoinType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

// 联盟成员权限
type GuildMemAuthority int32

const (
	GuildMemAuthority_R5 GuildMemAuthority = 1
	GuildMemAuthority_R4 GuildMemAuthority = 2
	GuildMemAuthority_R3 GuildMemAuthority = 3
	GuildMemAuthority_R2 GuildMemAuthority = 4
	GuildMemAuthority_R1 GuildMemAuthority = 5
)

// Enum value maps for GuildMemAuthority.
var (
	GuildMemAuthority_name = map[int32]string{
		1: "R5",
		2: "R4",
		3: "R3",
		4: "R2",
		5: "R1",
	}
	GuildMemAuthority_value = map[string]int32{
		"R5": 1,
		"R4": 2,
		"R3": 3,
		"R2": 4,
		"R1": 5,
	}
)

func (x GuildMemAuthority) Enum() *GuildMemAuthority {
	p := new(GuildMemAuthority)
	*p = x
	return p
}

func (x GuildMemAuthority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildMemAuthority) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[24].Descriptor()
}

func (GuildMemAuthority) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[24]
}

func (x GuildMemAuthority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildMemAuthority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildMemAuthority(num)
	return nil
}

// Deprecated: Use GuildMemAuthority.Descriptor instead.
func (GuildMemAuthority) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

// 联盟状态
type GuildStatus int32

const (
	GuildStatus_lol_normal           GuildStatus = 0 //正常状态，有盟主
	GuildStatus_lol_longtime_offline GuildStatus = 1 //盟主长时间年未上线，此时可以竞选联盟盟主
	GuildStatus_log_dismiss          GuildStatus = 2 //盟主解散联盟，此时可以竞选联盟，显示无盟主状态
	GuildStatus_lol_deleted          GuildStatus = 3 //对应的联盟已经解散
)

// Enum value maps for GuildStatus.
var (
	GuildStatus_name = map[int32]string{
		0: "lol_normal",
		1: "lol_longtime_offline",
		2: "log_dismiss",
		3: "lol_deleted",
	}
	GuildStatus_value = map[string]int32{
		"lol_normal":           0,
		"lol_longtime_offline": 1,
		"log_dismiss":          2,
		"lol_deleted":          3,
	}
)

func (x GuildStatus) Enum() *GuildStatus {
	p := new(GuildStatus)
	*p = x
	return p
}

func (x GuildStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[25].Descriptor()
}

func (GuildStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[25]
}

func (x GuildStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildStatus(num)
	return nil
}

// Deprecated: Use GuildStatus.Descriptor instead.
func (GuildStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

// 爵位
type TitleType int32

const (
	TitleType_none          TitleType = 0
	TitleType_knight        TitleType = 1 //骑士
	TitleType_baron         TitleType = 2 //男爵
	TitleType_viscount      TitleType = 3 //子爵
	TitleType_earl          TitleType = 4 //伯爵
	TitleType_duke          TitleType = 5 //公爵
	TitleType_royal_duke    TitleType = 6 //大公
	TitleType_prince_regent TitleType = 7 //摄政王
)

// Enum value maps for TitleType.
var (
	TitleType_name = map[int32]string{
		0: "none",
		1: "knight",
		2: "baron",
		3: "viscount",
		4: "earl",
		5: "duke",
		6: "royal_duke",
		7: "prince_regent",
	}
	TitleType_value = map[string]int32{
		"none":          0,
		"knight":        1,
		"baron":         2,
		"viscount":      3,
		"earl":          4,
		"duke":          5,
		"royal_duke":    6,
		"prince_regent": 7,
	}
)

func (x TitleType) Enum() *TitleType {
	p := new(TitleType)
	*p = x
	return p
}

func (x TitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[26].Descriptor()
}

func (TitleType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[26]
}

func (x TitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TitleType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TitleType(num)
	return nil
}

// Deprecated: Use TitleType.Descriptor instead.
func (TitleType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

type GeneralQualityType int32

const (
	GeneralQualityType_white_general  GeneralQualityType = 1 //白色（普通）
	GeneralQualityType_green_general  GeneralQualityType = 2 //绿色（优秀
	GeneralQualityType_blue_general   GeneralQualityType = 3 //蓝色（精英）
	GeneralQualityType_purple_general GeneralQualityType = 4 //紫色（史诗）
	GeneralQualityType_gold_general   GeneralQualityType = 5 //金色（传奇）
)

// Enum value maps for GeneralQualityType.
var (
	GeneralQualityType_name = map[int32]string{
		1: "white_general",
		2: "green_general",
		3: "blue_general",
		4: "purple_general",
		5: "gold_general",
	}
	GeneralQualityType_value = map[string]int32{
		"white_general":  1,
		"green_general":  2,
		"blue_general":   3,
		"purple_general": 4,
		"gold_general":   5,
	}
)

func (x GeneralQualityType) Enum() *GeneralQualityType {
	p := new(GeneralQualityType)
	*p = x
	return p
}

func (x GeneralQualityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneralQualityType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[27].Descriptor()
}

func (GeneralQualityType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[27]
}

func (x GeneralQualityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GeneralQualityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GeneralQualityType(num)
	return nil
}

// Deprecated: Use GeneralQualityType.Descriptor instead.
func (GeneralQualityType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

type GeneralPropertyType int32

const (
	GeneralPropertyType_general_command GeneralPropertyType = 1 //统帅 2022/11/2 to 领导
	GeneralPropertyType_general_attack  GeneralPropertyType = 2 //攻击 2022/11/2 to 力量
	GeneralPropertyType_general_defense GeneralPropertyType = 3 //防御 2022/11/2 to 耐力
	GeneralPropertyType_general_polity  GeneralPropertyType = 4 //政治 2022/11/2 to 智力
)

// Enum value maps for GeneralPropertyType.
var (
	GeneralPropertyType_name = map[int32]string{
		1: "general_command",
		2: "general_attack",
		3: "general_defense",
		4: "general_polity",
	}
	GeneralPropertyType_value = map[string]int32{
		"general_command": 1,
		"general_attack":  2,
		"general_defense": 3,
		"general_polity":  4,
	}
)

func (x GeneralPropertyType) Enum() *GeneralPropertyType {
	p := new(GeneralPropertyType)
	*p = x
	return p
}

func (x GeneralPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneralPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[28].Descriptor()
}

func (GeneralPropertyType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[28]
}

func (x GeneralPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GeneralPropertyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GeneralPropertyType(num)
	return nil
}

// Deprecated: Use GeneralPropertyType.Descriptor instead.
func (GeneralPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

//分城策略
type SubCityPolicy int32

const (
	SubCityPolicy_balance  SubCityPolicy = 0
	SubCityPolicy_military SubCityPolicy = 1
	SubCityPolicy_economic SubCityPolicy = 2
)

// Enum value maps for SubCityPolicy.
var (
	SubCityPolicy_name = map[int32]string{
		0: "balance",
		1: "military",
		2: "economic",
	}
	SubCityPolicy_value = map[string]int32{
		"balance":  0,
		"military": 1,
		"economic": 2,
	}
)

func (x SubCityPolicy) Enum() *SubCityPolicy {
	p := new(SubCityPolicy)
	*p = x
	return p
}

func (x SubCityPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubCityPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[29].Descriptor()
}

func (SubCityPolicy) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[29]
}

func (x SubCityPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SubCityPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SubCityPolicy(num)
	return nil
}

// Deprecated: Use SubCityPolicy.Descriptor instead.
func (SubCityPolicy) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

//---------------------------------------王城相关协议-----------------------------------------
//王城职位
type KingCastleJobType int32

const (
	KingCastleJobType_none_job            KingCastleJobType = 0
	KingCastleJobType_kingdom_job         KingCastleJobType = 1
	KingCastleJobType_prince_job          KingCastleJobType = 2
	KingCastleJobType_chancellor_job      KingCastleJobType = 3
	KingCastleJobType_bodyguard_job       KingCastleJobType = 4
	KingCastleJobType_scholar_job         KingCastleJobType = 5
	KingCastleJobType_paymaster_job       KingCastleJobType = 6
	KingCastleJobType_knight_job          KingCastleJobType = 7
	KingCastleJobType_flamen              KingCastleJobType = 8
	KingCastleJobType_craftsmanmaster_job KingCastleJobType = 9
	KingCastleJobType_vagrant_job         KingCastleJobType = 10
	KingCastleJobType_prisoner_job        KingCastleJobType = 11
	KingCastleJobType_traitor_job         KingCastleJobType = 12
	KingCastleJobType_servant_job         KingCastleJobType = 13
	KingCastleJobType_robbers_job         KingCastleJobType = 14
	KingCastleJobType_miser_job           KingCastleJobType = 15
	KingCastleJobType_fool_job            KingCastleJobType = 16
	KingCastleJobType_glutton_job         KingCastleJobType = 17
	KingCastleJobType_title_princess      KingCastleJobType = 18
	KingCastleJobType_title_lady          KingCastleJobType = 19
	KingCastleJobType_title_waiter        KingCastleJobType = 20
)

// Enum value maps for KingCastleJobType.
var (
	KingCastleJobType_name = map[int32]string{
		0:  "none_job",
		1:  "kingdom_job",
		2:  "prince_job",
		3:  "chancellor_job",
		4:  "bodyguard_job",
		5:  "scholar_job",
		6:  "paymaster_job",
		7:  "knight_job",
		8:  "flamen",
		9:  "craftsmanmaster_job",
		10: "vagrant_job",
		11: "prisoner_job",
		12: "traitor_job",
		13: "servant_job",
		14: "robbers_job",
		15: "miser_job",
		16: "fool_job",
		17: "glutton_job",
		18: "title_princess",
		19: "title_lady",
		20: "title_waiter",
	}
	KingCastleJobType_value = map[string]int32{
		"none_job":            0,
		"kingdom_job":         1,
		"prince_job":          2,
		"chancellor_job":      3,
		"bodyguard_job":       4,
		"scholar_job":         5,
		"paymaster_job":       6,
		"knight_job":          7,
		"flamen":              8,
		"craftsmanmaster_job": 9,
		"vagrant_job":         10,
		"prisoner_job":        11,
		"traitor_job":         12,
		"servant_job":         13,
		"robbers_job":         14,
		"miser_job":           15,
		"fool_job":            16,
		"glutton_job":         17,
		"title_princess":      18,
		"title_lady":          19,
		"title_waiter":        20,
	}
)

func (x KingCastleJobType) Enum() *KingCastleJobType {
	p := new(KingCastleJobType)
	*p = x
	return p
}

func (x KingCastleJobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KingCastleJobType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[30].Descriptor()
}

func (KingCastleJobType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[30]
}

func (x KingCastleJobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KingCastleJobType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KingCastleJobType(num)
	return nil
}

// Deprecated: Use KingCastleJobType.Descriptor instead.
func (KingCastleJobType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

//-------------联盟领地相关协议--------------
//联盟建筑类型
type GuildBuildingType int32

const (
	GuildBuildingType_guild_building_castle      GuildBuildingType = 0 //城堡
	GuildBuildingType_guild_building_farm        GuildBuildingType = 1 //农田
	GuildBuildingType_guild_building_wood        GuildBuildingType = 2 //伐木场
	GuildBuildingType_guild_building_stone       GuildBuildingType = 3 //采石矿
	GuildBuildingType_guild_building_iron        GuildBuildingType = 4 //铁矿
	GuildBuildingType_guild_building_storage     GuildBuildingType = 5 //联盟仓库
	GuildBuildingType_guild_building_battle_flag GuildBuildingType = 6 //联盟战旗
)

// Enum value maps for GuildBuildingType.
var (
	GuildBuildingType_name = map[int32]string{
		0: "guild_building_castle",
		1: "guild_building_farm",
		2: "guild_building_wood",
		3: "guild_building_stone",
		4: "guild_building_iron",
		5: "guild_building_storage",
		6: "guild_building_battle_flag",
	}
	GuildBuildingType_value = map[string]int32{
		"guild_building_castle":      0,
		"guild_building_farm":        1,
		"guild_building_wood":        2,
		"guild_building_stone":       3,
		"guild_building_iron":        4,
		"guild_building_storage":     5,
		"guild_building_battle_flag": 6,
	}
)

func (x GuildBuildingType) Enum() *GuildBuildingType {
	p := new(GuildBuildingType)
	*p = x
	return p
}

func (x GuildBuildingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildBuildingType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[31].Descriptor()
}

func (GuildBuildingType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[31]
}

func (x GuildBuildingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildBuildingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildBuildingType(num)
	return nil
}

// Deprecated: Use GuildBuildingType.Descriptor instead.
func (GuildBuildingType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

type FarmType int32

const (
	FarmType_farm_food  FarmType = 1 //农田
	FarmType_farm_wood  FarmType = 2 //伐木场
	FarmType_farm_stone FarmType = 3 //采石矿
	FarmType_farm_iron  FarmType = 4 //铁矿
)

// Enum value maps for FarmType.
var (
	FarmType_name = map[int32]string{
		1: "farm_food",
		2: "farm_wood",
		3: "farm_stone",
		4: "farm_iron",
	}
	FarmType_value = map[string]int32{
		"farm_food":  1,
		"farm_wood":  2,
		"farm_stone": 3,
		"farm_iron":  4,
	}
)

func (x FarmType) Enum() *FarmType {
	p := new(FarmType)
	*p = x
	return p
}

func (x FarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[32].Descriptor()
}

func (FarmType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[32]
}

func (x FarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FarmType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FarmType(num)
	return nil
}

// Deprecated: Use FarmType.Descriptor instead.
func (FarmType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

//联盟建筑状态
type GuildBuildingStatus int32

const (
	GuildBuildingStatus_guild_building_undone  GuildBuildingStatus = 0 //未建造
	GuildBuildingStatus_guild_building_done    GuildBuildingStatus = 1 //建造完成
	GuildBuildingStatus_guild_building_reclaim GuildBuildingStatus = 2 //回收中
	GuildBuildingStatus_guild_building_upgrade GuildBuildingStatus = 3 //升级中
)

// Enum value maps for GuildBuildingStatus.
var (
	GuildBuildingStatus_name = map[int32]string{
		0: "guild_building_undone",
		1: "guild_building_done",
		2: "guild_building_reclaim",
		3: "guild_building_upgrade",
	}
	GuildBuildingStatus_value = map[string]int32{
		"guild_building_undone":  0,
		"guild_building_done":    1,
		"guild_building_reclaim": 2,
		"guild_building_upgrade": 3,
	}
)

func (x GuildBuildingStatus) Enum() *GuildBuildingStatus {
	p := new(GuildBuildingStatus)
	*p = x
	return p
}

func (x GuildBuildingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildBuildingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[33].Descriptor()
}

func (GuildBuildingStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[33]
}

func (x GuildBuildingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildBuildingStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildBuildingStatus(num)
	return nil
}

// Deprecated: Use GuildBuildingStatus.Descriptor instead.
func (GuildBuildingStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

//排行榜类型
type RankType int32

const (
	RankType_active_stage       RankType = 0 //限时争霸赛各阶段排名
	RankType_active_total       RankType = 1 //限时争霸赛总排名
	RankType_ghost_guild        RankType = 2 //异鬼来袭联盟排名
	RankType_ghost_player       RankType = 3 //异鬼来袭玩家排名
	RankType_world_boss         RankType = 4 //世界boss排名
	RankType_world_boss_guild   RankType = 5 //世界boss联盟排名
	RankType_cross_active_total RankType = 6 //跨服限时争霸赛最强领主排名
)

// Enum value maps for RankType.
var (
	RankType_name = map[int32]string{
		0: "active_stage",
		1: "active_total",
		2: "ghost_guild",
		3: "ghost_player",
		4: "world_boss",
		5: "world_boss_guild",
		6: "cross_active_total",
	}
	RankType_value = map[string]int32{
		"active_stage":       0,
		"active_total":       1,
		"ghost_guild":        2,
		"ghost_player":       3,
		"world_boss":         4,
		"world_boss_guild":   5,
		"cross_active_total": 6,
	}
)

func (x RankType) Enum() *RankType {
	p := new(RankType)
	*p = x
	return p
}

func (x RankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[34].Descriptor()
}

func (RankType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[34]
}

func (x RankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RankType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RankType(num)
	return nil
}

// Deprecated: Use RankType.Descriptor instead.
func (RankType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

//战场建筑相关数据
//战场建筑类型
type BattlefieldBuildingType int32

const (
	BattlefieldBuildingType_battlefield_building__hospital    BattlefieldBuildingType = 13 //战场医院
	BattlefieldBuildingType_battlefield_building__blessing    BattlefieldBuildingType = 14 //战场祝福之塔
	BattlefieldBuildingType_battlefield_building__middle_city BattlefieldBuildingType = 15 //战场中心城
	BattlefieldBuildingType_battlefield_building__cavalier    BattlefieldBuildingType = 16 //战场骑士大厅
	BattlefieldBuildingType_battlefield_building__teleporter  BattlefieldBuildingType = 17 //战场传送点
	BattlefieldBuildingType_battlefield_building__crystal     BattlefieldBuildingType = 18 //战场水晶矿
	BattlefieldBuildingType_battlefield_building__tower       BattlefieldBuildingType = 19 //行军塔
	BattlefieldBuildingType_battlefield_rally__tower          BattlefieldBuildingType = 31 //集结大厅
)

// Enum value maps for BattlefieldBuildingType.
var (
	BattlefieldBuildingType_name = map[int32]string{
		13: "battlefield_building__hospital",
		14: "battlefield_building__blessing",
		15: "battlefield_building__middle_city",
		16: "battlefield_building__cavalier",
		17: "battlefield_building__teleporter",
		18: "battlefield_building__crystal",
		19: "battlefield_building__tower",
		31: "battlefield_rally__tower",
	}
	BattlefieldBuildingType_value = map[string]int32{
		"battlefield_building__hospital":    13,
		"battlefield_building__blessing":    14,
		"battlefield_building__middle_city": 15,
		"battlefield_building__cavalier":    16,
		"battlefield_building__teleporter":  17,
		"battlefield_building__crystal":     18,
		"battlefield_building__tower":       19,
		"battlefield_rally__tower":          31,
	}
)

func (x BattlefieldBuildingType) Enum() *BattlefieldBuildingType {
	p := new(BattlefieldBuildingType)
	*p = x
	return p
}

func (x BattlefieldBuildingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattlefieldBuildingType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[35].Descriptor()
}

func (BattlefieldBuildingType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[35]
}

func (x BattlefieldBuildingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BattlefieldBuildingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BattlefieldBuildingType(num)
	return nil
}

// Deprecated: Use BattlefieldBuildingType.Descriptor instead.
func (BattlefieldBuildingType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

//事件类型
type BattlefieldRecordType int32

const (
	BattlefieldRecordType_attack_success BattlefieldRecordType = 1 //进攻胜利
	BattlefieldRecordType_attack_faild   BattlefieldRecordType = 2 //进攻失败
	BattlefieldRecordType_support        BattlefieldRecordType = 3 //支援
	BattlefieldRecordType_occupy         BattlefieldRecordType = 4 //占领
)

// Enum value maps for BattlefieldRecordType.
var (
	BattlefieldRecordType_name = map[int32]string{
		1: "attack_success",
		2: "attack_faild",
		3: "support",
		4: "occupy",
	}
	BattlefieldRecordType_value = map[string]int32{
		"attack_success": 1,
		"attack_faild":   2,
		"support":        3,
		"occupy":         4,
	}
)

func (x BattlefieldRecordType) Enum() *BattlefieldRecordType {
	p := new(BattlefieldRecordType)
	*p = x
	return p
}

func (x BattlefieldRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattlefieldRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[36].Descriptor()
}

func (BattlefieldRecordType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[36]
}

func (x BattlefieldRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BattlefieldRecordType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BattlefieldRecordType(num)
	return nil
}

// Deprecated: Use BattlefieldRecordType.Descriptor instead.
func (BattlefieldRecordType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

type ErrorCode int32

const (
	ErrorCode_no_error               ErrorCode = 0 //正常
	ErrorCode_items_not_enough       ErrorCode = 1 //道具不足
	ErrorCode_soldier_type_not_match ErrorCode = 2 //兵种不匹配
	ErrorCode_soldiers_not_enough    ErrorCode = 3 //兵力不足
	ErrorCode_resource_not_enough    ErrorCode = 4 //资源不足
	ErrorCode_stamina_not_enough     ErrorCode = 5 //体力不足
	ErrorCode_assistant_error        ErrorCode = 6 //副将不对
	//自由行军队伍
	ErrorCode_error_intro_invalid   ErrorCode = 7  //简介存在非法字符
	ErrorCode_error_level_limit     ErrorCode = 8  //主城达到6级可以创建
	ErrorCode_error_exist           ErrorCode = 9  //玩家已经加入其他队伍
	ErrorCode_error_buy_empty       ErrorCode = 10 //已经被其他玩家购买
	ErrorCode_error_hot_goods_empty ErrorCode = 11 //优选商品已被其他玩家购买
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "no_error",
		1:  "items_not_enough",
		2:  "soldier_type_not_match",
		3:  "soldiers_not_enough",
		4:  "resource_not_enough",
		5:  "stamina_not_enough",
		6:  "assistant_error",
		7:  "error_intro_invalid",
		8:  "error_level_limit",
		9:  "error_exist",
		10: "error_buy_empty",
		11: "error_hot_goods_empty",
	}
	ErrorCode_value = map[string]int32{
		"no_error":               0,
		"items_not_enough":       1,
		"soldier_type_not_match": 2,
		"soldiers_not_enough":    3,
		"resource_not_enough":    4,
		"stamina_not_enough":     5,
		"assistant_error":        6,
		"error_intro_invalid":    7,
		"error_level_limit":      8,
		"error_exist":            9,
		"error_buy_empty":        10,
		"error_hot_goods_empty":  11,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[37].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[37]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ErrorCode(num)
	return nil
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

// 大地图搜索类型
type WorldSearchType int32

const (
	WorldSearchType_search_farm    WorldSearchType = 1 //农田
	WorldSearchType_search_wood    WorldSearchType = 2 //伐木场
	WorldSearchType_search_stone   WorldSearchType = 3 //石矿
	WorldSearchType_search_iron    WorldSearchType = 4 //铁矿
	WorldSearchType_search_monster WorldSearchType = 5 //野怪
)

// Enum value maps for WorldSearchType.
var (
	WorldSearchType_name = map[int32]string{
		1: "search_farm",
		2: "search_wood",
		3: "search_stone",
		4: "search_iron",
		5: "search_monster",
	}
	WorldSearchType_value = map[string]int32{
		"search_farm":    1,
		"search_wood":    2,
		"search_stone":   3,
		"search_iron":    4,
		"search_monster": 5,
	}
)

func (x WorldSearchType) Enum() *WorldSearchType {
	p := new(WorldSearchType)
	*p = x
	return p
}

func (x WorldSearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorldSearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[38].Descriptor()
}

func (WorldSearchType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[38]
}

func (x WorldSearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WorldSearchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WorldSearchType(num)
	return nil
}

// Deprecated: Use WorldSearchType.Descriptor instead.
func (WorldSearchType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

//单个地图块的数据结构
type Mapinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType         *int32          `protobuf:"varint,1,req,name=_type,json=Type" json:"_type,omitempty"`                          //地图块的类型: 参考  mapinfo_type
	XServerId     *int32          `protobuf:"varint,2,req,name=_server_id,json=ServerId" json:"_server_id,omitempty"`            //地图块在的服务器
	XWx           *int32          `protobuf:"varint,3,req,name=_wx,json=Wx" json:"_wx,omitempty"`                                //地图块所在的横坐标
	XWy           *int32          `protobuf:"varint,4,req,name=_wy,json=Wy" json:"_wy,omitempty"`                                //地图块所在的纵坐标
	XId           *int32          `protobuf:"varint,5,opt,name=_id,json=Id" json:"_id,omitempty"`                                //地图块player是玩家id,npc是npc配置的类型id,farm是farm配置的类型id,分城是分城id,蛮族城堡返回怪物id,掉落道具返回道具配置id,任务npc的id
	XLevel        *int32          `protobuf:"varint,6,opt,name=_level,json=Level" json:"_level,omitempty"`                       //地图块如果是player,就是player的等级,如果是npc,就是npc的等级,如果是farm就是farm的等级.//分城等级
	XStatus       *int32          `protobuf:"varint,7,opt,name=_status,json=Status" json:"_status,omitempty"`                    //标记0未占领,1:被占领 废墟 0未开启 1开启//分城 0表示npc城， 1表示已经给玩家占领  //凯旋门 0未开启,   | 1开启   //  蛮族城堡: 0-未占领 | 1-燃烧中 | 2-驻军中
	XOccupyId     *uint32         `protobuf:"varint,8,opt,name=_occupy_id,json=OccupyId" json:"_occupy_id,omitempty"`            //占领者的player的Id;如果是player,代表驱逐倒计时
	XResourceNum  *int64          `protobuf:"varint,9,opt,name=_resource_num,json=ResourceNum" json:"_resource_num,omitempty"`   //针对资源点剩余的资源量。| 抓捕宠物则是宠物剩余次数
	XCastleFire   *uint32         `protobuf:"varint,10,opt,name=_castle_fire,json=CastleFire" json:"_castle_fire,omitempty"`     //城堡是否着火。如果是爆礼盒则表示玩家当天剩余的访问次数，如果是维京野怪则输入联盟id（联盟id为空表示未求助） | 蛮族城堡, 标识未占领自动消失时间
	XPeaceShield  *uint32         `protobuf:"varint,11,opt,name=_peace_shield,json=PeaceShield" json:"_peace_shield,omitempty"`  //是否有防护罩。如果是召唤怪表示过期时间 | 如果是蛮族城堡，标识掠夺时间 和 摧毁时间 | 掉落道具则为生成时间 | 任务NPC则为
	XOwnerId      *uint32         `protobuf:"varint,12,opt,name=_owner_id,json=OwnerId" json:"_owner_id,omitempty"`              //遗迹拥有者的ID。如果是召唤怪表示联盟id | 掉落道具则为掉落拥有者
	XTask         []*Task         `protobuf:"bytes,13,rep,name=_task,json=Task" json:"_task,omitempty"`                          //任务列表
	XSrcWx        *int32          `protobuf:"varint,14,opt,name=_src_wx,json=SrcWx" json:"_src_wx,omitempty"`                    //起始横坐标 {物品掉落的来源横坐标}
	XSrcWy        *int32          `protobuf:"varint,15,opt,name=_src_wy,json=SrcWy" json:"_src_wy,omitempty"`                    //起始纵坐标 {物品掉落的来源横坐标}
	XDataId       *int64          `protobuf:"varint,16,opt,name=_data_id,json=DataId" json:"_data_id,omitempty"`                 //数据id-装备则为装备id
	XFpsMonster   *FpsMonsterInfo `protobuf:"bytes,17,opt,name=_fps_monster,json=FpsMonster" json:"_fps_monster,omitempty"`      //fps野怪信息
	XIntelInfo    *IntelInfo      `protobuf:"bytes,18,opt,name=_intel_info,json=IntelInfo" json:"_intel_info,omitempty"`         //情报信息
	XUntouchtable *int32          `protobuf:"varint,19,opt,name=_untouchtable,json=Untouchtable" json:"_untouchtable,omitempty"` // 是否是不可点击的物品
}

func (x *Mapinfo) Reset() {
	*x = Mapinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mapinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapinfo) ProtoMessage() {}

func (x *Mapinfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mapinfo.ProtoReflect.Descriptor instead.
func (*Mapinfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Mapinfo) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *Mapinfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *Mapinfo) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *Mapinfo) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *Mapinfo) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *Mapinfo) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *Mapinfo) GetXStatus() int32 {
	if x != nil && x.XStatus != nil {
		return *x.XStatus
	}
	return 0
}

func (x *Mapinfo) GetXOccupyId() uint32 {
	if x != nil && x.XOccupyId != nil {
		return *x.XOccupyId
	}
	return 0
}

func (x *Mapinfo) GetXResourceNum() int64 {
	if x != nil && x.XResourceNum != nil {
		return *x.XResourceNum
	}
	return 0
}

func (x *Mapinfo) GetXCastleFire() uint32 {
	if x != nil && x.XCastleFire != nil {
		return *x.XCastleFire
	}
	return 0
}

func (x *Mapinfo) GetXPeaceShield() uint32 {
	if x != nil && x.XPeaceShield != nil {
		return *x.XPeaceShield
	}
	return 0
}

func (x *Mapinfo) GetXOwnerId() uint32 {
	if x != nil && x.XOwnerId != nil {
		return *x.XOwnerId
	}
	return 0
}

func (x *Mapinfo) GetXTask() []*Task {
	if x != nil {
		return x.XTask
	}
	return nil
}

func (x *Mapinfo) GetXSrcWx() int32 {
	if x != nil && x.XSrcWx != nil {
		return *x.XSrcWx
	}
	return 0
}

func (x *Mapinfo) GetXSrcWy() int32 {
	if x != nil && x.XSrcWy != nil {
		return *x.XSrcWy
	}
	return 0
}

func (x *Mapinfo) GetXDataId() int64 {
	if x != nil && x.XDataId != nil {
		return *x.XDataId
	}
	return 0
}

func (x *Mapinfo) GetXFpsMonster() *FpsMonsterInfo {
	if x != nil {
		return x.XFpsMonster
	}
	return nil
}

func (x *Mapinfo) GetXIntelInfo() *IntelInfo {
	if x != nil {
		return x.XIntelInfo
	}
	return nil
}

func (x *Mapinfo) GetXUntouchtable() int32 {
	if x != nil && x.XUntouchtable != nil {
		return *x.XUntouchtable
	}
	return 0
}

type FpsMonsterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCurrentBlood *int32     `protobuf:"varint,1,opt,name=_current_blood,json=CurrentBlood" json:"_current_blood,omitempty"` // 当前血量
	XLeftTimes    *int32     `protobuf:"varint,2,opt,name=_left_times,json=LeftTimes" json:"_left_times,omitempty"`          // 剩余进入的次数
	XExpire       *int32     `protobuf:"varint,3,opt,name=_expire,json=Expire" json:"_expire,omitempty"`                     // 野怪的剩余时间
	XFpsRank      []*FpsRank `protobuf:"bytes,4,rep,name=_fps_rank,json=FpsRank" json:"_fps_rank,omitempty"`                 // 排行榜
	XUserId       *int32     `protobuf:"varint,5,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                   // 所属人ID
}

func (x *FpsMonsterInfo) Reset() {
	*x = FpsMonsterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpsMonsterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpsMonsterInfo) ProtoMessage() {}

func (x *FpsMonsterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpsMonsterInfo.ProtoReflect.Descriptor instead.
func (*FpsMonsterInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *FpsMonsterInfo) GetXCurrentBlood() int32 {
	if x != nil && x.XCurrentBlood != nil {
		return *x.XCurrentBlood
	}
	return 0
}

func (x *FpsMonsterInfo) GetXLeftTimes() int32 {
	if x != nil && x.XLeftTimes != nil {
		return *x.XLeftTimes
	}
	return 0
}

func (x *FpsMonsterInfo) GetXExpire() int32 {
	if x != nil && x.XExpire != nil {
		return *x.XExpire
	}
	return 0
}

func (x *FpsMonsterInfo) GetXFpsRank() []*FpsRank {
	if x != nil {
		return x.XFpsRank
	}
	return nil
}

func (x *FpsMonsterInfo) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

// 情报信息
type IntelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *int32   `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                                 // 主键ID
	XConfigId     *int32   `protobuf:"varint,2,req,name=_config_id,json=ConfigId" json:"_config_id,omitempty"`             // 配置ID
	XEndTime      *int32   `protobuf:"varint,3,opt,name=_end_time,json=EndTime" json:"_end_time,omitempty"`                // 过期时间
	XFinishStatus *int32   `protobuf:"varint,4,opt,name=_finish_status,json=FinishStatus" json:"_finish_status,omitempty"` // 0未完成 1已完成未领取奖励 2已领取奖励
	XMapinfo      *Mapinfo `protobuf:"bytes,5,opt,name=_mapinfo,json=Mapinfo" json:"_mapinfo,omitempty"`                   // 格子数据
	XMonsterId    *int32   `protobuf:"varint,6,opt,name=_monster_id,json=MonsterId" json:"_monster_id,omitempty"`          // 目标ID
}

func (x *IntelInfo) Reset() {
	*x = IntelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntelInfo) ProtoMessage() {}

func (x *IntelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntelInfo.ProtoReflect.Descriptor instead.
func (*IntelInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *IntelInfo) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *IntelInfo) GetXConfigId() int32 {
	if x != nil && x.XConfigId != nil {
		return *x.XConfigId
	}
	return 0
}

func (x *IntelInfo) GetXEndTime() int32 {
	if x != nil && x.XEndTime != nil {
		return *x.XEndTime
	}
	return 0
}

func (x *IntelInfo) GetXFinishStatus() int32 {
	if x != nil && x.XFinishStatus != nil {
		return *x.XFinishStatus
	}
	return 0
}

func (x *IntelInfo) GetXMapinfo() *Mapinfo {
	if x != nil {
		return x.XMapinfo
	}
	return nil
}

func (x *IntelInfo) GetXMonsterId() int32 {
	if x != nil && x.XMonsterId != nil {
		return *x.XMonsterId
	}
	return 0
}

// 商品信息
type GoodsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSku              *string           `protobuf:"bytes,1,opt,name=_sku,json=Sku" json:"_sku,omitempty"`                                                                             // sku 商品唯一ID
	XUserId           *int32            `protobuf:"varint,2,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                                                                 // 上架人ID
	XPrice            *int32            `protobuf:"varint,3,opt,name=_price,json=Price" json:"_price,omitempty"`                                                                      // 单价
	XNum              *int32            `protobuf:"varint,4,opt,name=_num,json=Num" json:"_num,omitempty"`                                                                            // 数量
	XItemId           *int32            `protobuf:"varint,5,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                                                                 // 物品ID
	XGoodsType        *GoodsType        `protobuf:"varint,6,opt,name=_goods_type,json=GoodsType,enum=Msg.GoodsType,def=0" json:"_goods_type,omitempty"`                               // 商品类型
	XGoodsCheckStatus *GoodsCheckStatus `protobuf:"varint,7,opt,name=_goods_check_status,json=GoodsCheckStatus,enum=Msg.GoodsCheckStatus,def=0" json:"_goods_check_status,omitempty"` // 审核状态 废弃
	XCheckEndTime     *int32            `protobuf:"varint,8,opt,name=_check_end_time,json=CheckEndTime" json:"_check_end_time,omitempty"`                                             // 审核结束时间 废弃
	XSaledTime        *int32            `protobuf:"varint,9,opt,name=_saled_time,json=SaledTime" json:"_saled_time,omitempty"`                                                        // 商品卖出时间 废弃
	XPublicEndTime    *int32            `protobuf:"varint,10,opt,name=_public_end_time,json=PublicEndTime" json:"_public_end_time,omitempty"`                                         // 商品公示结束时间
	XAboveEndTime     *int32            `protobuf:"varint,11,opt,name=_above_end_time,json=AboveEndTime" json:"_above_end_time,omitempty"`                                            // 上架结束时间
	XRegionId         *int32            `protobuf:"varint,12,opt,name=_region_id,json=RegionId" json:"_region_id,omitempty"`                                                          // 区ID
	XServerId         *int32            `protobuf:"varint,13,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                                                          // 服ID
	XFavoriteNum      *int32            `protobuf:"varint,14,opt,name=_favorite_num,json=FavoriteNum" json:"_favorite_num,omitempty"`                                                 // 关注人数
	XIsFavorite       *int32            `protobuf:"varint,15,opt,name=_is_favorite,json=IsFavorite" json:"_is_favorite,omitempty"`                                                    // 是否关注 0未关注 1已关注
	XAboveTime        *int32            `protobuf:"varint,16,opt,name=_above_time,json=AboveTime" json:"_above_time,omitempty"`                                                       // 上架时间
	XSaleScope        *GoodsSaleScope   `protobuf:"varint,17,opt,name=_sale_scope,json=SaleScope,enum=Msg.GoodsSaleScope,def=0" json:"_sale_scope,omitempty"`                         // 物品售卖范围
	XDealType         *GoodsDealType    `protobuf:"varint,18,opt,name=_deal_type,json=DealType,enum=Msg.GoodsDealType" json:"_deal_type,omitempty"`                                   // 交易类型
	XItem             *ComItem          `protobuf:"bytes,19,opt,name=_item,json=Item" json:"_item,omitempty"`                                                                         // 道具
	XSummaryInfo      *PetSummaryInfo   `protobuf:"bytes,20,opt,name=_summary_info,json=SummaryInfo" json:"_summary_info,omitempty"`                                                  // 战宠
	XGoodsSaleType    *int32            `protobuf:"varint,21,opt,name=_goods_sale_type,json=GoodsSaleType" json:"_goods_sale_type,omitempty"`                                         // 上架类型 0本服上架 1跨服上架
}

// Default values for GoodsInfo fields.
const (
	Default_GoodsInfo_XGoodsType        = GoodsType_goods_type_normal
	Default_GoodsInfo_XGoodsCheckStatus = GoodsCheckStatus_goods_check_status_no_check
	Default_GoodsInfo_XSaleScope        = GoodsSaleScope_goods_sale_scope_cur_server
)

func (x *GoodsInfo) Reset() {
	*x = GoodsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsInfo) ProtoMessage() {}

func (x *GoodsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsInfo.ProtoReflect.Descriptor instead.
func (*GoodsInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *GoodsInfo) GetXSku() string {
	if x != nil && x.XSku != nil {
		return *x.XSku
	}
	return ""
}

func (x *GoodsInfo) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GoodsInfo) GetXPrice() int32 {
	if x != nil && x.XPrice != nil {
		return *x.XPrice
	}
	return 0
}

func (x *GoodsInfo) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *GoodsInfo) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *GoodsInfo) GetXGoodsType() GoodsType {
	if x != nil && x.XGoodsType != nil {
		return *x.XGoodsType
	}
	return Default_GoodsInfo_XGoodsType
}

func (x *GoodsInfo) GetXGoodsCheckStatus() GoodsCheckStatus {
	if x != nil && x.XGoodsCheckStatus != nil {
		return *x.XGoodsCheckStatus
	}
	return Default_GoodsInfo_XGoodsCheckStatus
}

func (x *GoodsInfo) GetXCheckEndTime() int32 {
	if x != nil && x.XCheckEndTime != nil {
		return *x.XCheckEndTime
	}
	return 0
}

func (x *GoodsInfo) GetXSaledTime() int32 {
	if x != nil && x.XSaledTime != nil {
		return *x.XSaledTime
	}
	return 0
}

func (x *GoodsInfo) GetXPublicEndTime() int32 {
	if x != nil && x.XPublicEndTime != nil {
		return *x.XPublicEndTime
	}
	return 0
}

func (x *GoodsInfo) GetXAboveEndTime() int32 {
	if x != nil && x.XAboveEndTime != nil {
		return *x.XAboveEndTime
	}
	return 0
}

func (x *GoodsInfo) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *GoodsInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *GoodsInfo) GetXFavoriteNum() int32 {
	if x != nil && x.XFavoriteNum != nil {
		return *x.XFavoriteNum
	}
	return 0
}

func (x *GoodsInfo) GetXIsFavorite() int32 {
	if x != nil && x.XIsFavorite != nil {
		return *x.XIsFavorite
	}
	return 0
}

func (x *GoodsInfo) GetXAboveTime() int32 {
	if x != nil && x.XAboveTime != nil {
		return *x.XAboveTime
	}
	return 0
}

func (x *GoodsInfo) GetXSaleScope() GoodsSaleScope {
	if x != nil && x.XSaleScope != nil {
		return *x.XSaleScope
	}
	return Default_GoodsInfo_XSaleScope
}

func (x *GoodsInfo) GetXDealType() GoodsDealType {
	if x != nil && x.XDealType != nil {
		return *x.XDealType
	}
	return GoodsDealType_goods_deal_type_buy
}

func (x *GoodsInfo) GetXItem() *ComItem {
	if x != nil {
		return x.XItem
	}
	return nil
}

func (x *GoodsInfo) GetXSummaryInfo() *PetSummaryInfo {
	if x != nil {
		return x.XSummaryInfo
	}
	return nil
}

func (x *GoodsInfo) GetXGoodsSaleType() int32 {
	if x != nil && x.XGoodsSaleType != nil {
		return *x.XGoodsSaleType
	}
	return 0
}

// 交易记录info
type DealGoodsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId       *int32  `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                     // 交易记录唯一ID
	XSku      *string `protobuf:"bytes,2,opt,name=_sku,json=Sku" json:"_sku,omitempty"`                   // sku 商品唯一ID
	XItemId   *int32  `protobuf:"varint,3,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`       // 物品ID
	XNum      *int32  `protobuf:"varint,4,opt,name=_num,json=Num" json:"_num,omitempty"`                  // 数量
	XPrice    *int32  `protobuf:"varint,5,opt,name=_price,json=Price" json:"_price,omitempty"`            // 单价
	XAddTime  *int32  `protobuf:"varint,6,opt,name=_add_time,json=AddTime" json:"_add_time,omitempty"`    // 交易时间
	XRegionId *int32  `protobuf:"varint,7,opt,name=_region_id,json=RegionId" json:"_region_id,omitempty"` // 区ID
	XServerId *int32  `protobuf:"varint,8,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 服ID
}

func (x *DealGoodsInfo) Reset() {
	*x = DealGoodsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealGoodsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealGoodsInfo) ProtoMessage() {}

func (x *DealGoodsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealGoodsInfo.ProtoReflect.Descriptor instead.
func (*DealGoodsInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *DealGoodsInfo) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *DealGoodsInfo) GetXSku() string {
	if x != nil && x.XSku != nil {
		return *x.XSku
	}
	return ""
}

func (x *DealGoodsInfo) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *DealGoodsInfo) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *DealGoodsInfo) GetXPrice() int32 {
	if x != nil && x.XPrice != nil {
		return *x.XPrice
	}
	return 0
}

func (x *DealGoodsInfo) GetXAddTime() int32 {
	if x != nil && x.XAddTime != nil {
		return *x.XAddTime
	}
	return 0
}

func (x *DealGoodsInfo) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *DealGoodsInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

// server_info
type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId   *int32  `protobuf:"varint,1,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`      //
	XRegionId   *int32  `protobuf:"varint,2,opt,name=_region_id,json=RegionId" json:"_region_id,omitempty"`      //
	XRegionName *string `protobuf:"bytes,3,opt,name=_region_name,json=RegionName" json:"_region_name,omitempty"` //
	XServerName *string `protobuf:"bytes,4,opt,name=_server_name,json=ServerName" json:"_server_name,omitempty"` //
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *ServerInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *ServerInfo) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *ServerInfo) GetXRegionName() string {
	if x != nil && x.XRegionName != nil {
		return *x.XRegionName
	}
	return ""
}

func (x *ServerInfo) GetXServerName() string {
	if x != nil && x.XServerName != nil {
		return *x.XServerName
	}
	return ""
}

// 新章节任务信息
type TaskChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChapterId          *int32                `protobuf:"varint,1,req,name=_chapter_id,json=ChapterId" json:"_chapter_id,omitempty"`                               // 章节ID
	XTaskSubChapterInfo []*TaskSubChapterInfo `protobuf:"bytes,2,rep,name=_task_sub_chapter_info,json=TaskSubChapterInfo" json:"_task_sub_chapter_info,omitempty"` // 子任务信息
}

func (x *TaskChapterInfo) Reset() {
	*x = TaskChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskChapterInfo) ProtoMessage() {}

func (x *TaskChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskChapterInfo.ProtoReflect.Descriptor instead.
func (*TaskChapterInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *TaskChapterInfo) GetXChapterId() int32 {
	if x != nil && x.XChapterId != nil {
		return *x.XChapterId
	}
	return 0
}

func (x *TaskChapterInfo) GetXTaskSubChapterInfo() []*TaskSubChapterInfo {
	if x != nil {
		return x.XTaskSubChapterInfo
	}
	return nil
}

// 章节子任务
type TaskSubChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                 // 配置ID
	XTaskId       *int32 `protobuf:"varint,2,req,name=_task_id,json=TaskId" json:"_task_id,omitempty"`                   // 配置ID
	XTaskTarget   *int32 `protobuf:"varint,3,opt,name=_task_target,json=TaskTarget" json:"_task_target,omitempty"`       // 任务进度
	XFinishStatus *int32 `protobuf:"varint,4,opt,name=_finish_status,json=FinishStatus" json:"_finish_status,omitempty"` // 1领取未完成任务 2已完成未领取奖励 3已领取奖励
}

func (x *TaskSubChapterInfo) Reset() {
	*x = TaskSubChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSubChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSubChapterInfo) ProtoMessage() {}

func (x *TaskSubChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSubChapterInfo.ProtoReflect.Descriptor instead.
func (*TaskSubChapterInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *TaskSubChapterInfo) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *TaskSubChapterInfo) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *TaskSubChapterInfo) GetXTaskTarget() int32 {
	if x != nil && x.XTaskTarget != nil {
		return *x.XTaskTarget
	}
	return 0
}

func (x *TaskSubChapterInfo) GetXFinishStatus() int32 {
	if x != nil && x.XFinishStatus != nil {
		return *x.XFinishStatus
	}
	return 0
}

type FpsRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserInfo *UserSummary `protobuf:"bytes,1,opt,name=_user_info,json=UserInfo" json:"_user_info,omitempty"`
	XScore    *int64       `protobuf:"varint,2,opt,name=_score,json=Score" json:"_score,omitempty"` // 积分
}

func (x *FpsRank) Reset() {
	*x = FpsRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpsRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpsRank) ProtoMessage() {}

func (x *FpsRank) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpsRank.ProtoReflect.Descriptor instead.
func (*FpsRank) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *FpsRank) GetXUserInfo() *UserSummary {
	if x != nil {
		return x.XUserInfo
	}
	return nil
}

func (x *FpsRank) GetXScore() int64 {
	if x != nil && x.XScore != nil {
		return *x.XScore
	}
	return 0
}

//任务完成条件
type TaskCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param0 *int32 `protobuf:"varint,1,opt,name=param0" json:"param0,omitempty"` //任务类型
	Param1 *int32 `protobuf:"varint,2,opt,name=param1" json:"param1,omitempty"` //任务数量
	Param2 *int32 `protobuf:"varint,3,opt,name=param2" json:"param2,omitempty"` //任务其它变量
	Param3 *int32 `protobuf:"varint,4,opt,name=param3" json:"param3,omitempty"` //任务其它变量
	Param4 *int32 `protobuf:"varint,5,opt,name=param4" json:"param4,omitempty"` //任务其它变量
}

func (x *TaskCondition) Reset() {
	*x = TaskCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCondition) ProtoMessage() {}

func (x *TaskCondition) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCondition.ProtoReflect.Descriptor instead.
func (*TaskCondition) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *TaskCondition) GetParam0() int32 {
	if x != nil && x.Param0 != nil {
		return *x.Param0
	}
	return 0
}

func (x *TaskCondition) GetParam1() int32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return 0
}

func (x *TaskCondition) GetParam2() int32 {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return 0
}

func (x *TaskCondition) GetParam3() int32 {
	if x != nil && x.Param3 != nil {
		return *x.Param3
	}
	return 0
}

func (x *TaskCondition) GetParam4() int32 {
	if x != nil && x.Param4 != nil {
		return *x.Param4
	}
	return 0
}

//任务拜访条件
type TaskTargetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId *int32 `protobuf:"varint,1,opt,name=npc_id,json=npcId" json:"npc_id,omitempty"` //任务npc_id
	NpcWx *int32 `protobuf:"varint,2,opt,name=npc_wx,json=npcWx" json:"npc_wx,omitempty"` //任务npc_wx坐标
	NpcWy *int32 `protobuf:"varint,3,opt,name=npc_wy,json=npcWy" json:"npc_wy,omitempty"` //任务npc_wy坐标
}

func (x *TaskTargetCondition) Reset() {
	*x = TaskTargetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTargetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTargetCondition) ProtoMessage() {}

func (x *TaskTargetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTargetCondition.ProtoReflect.Descriptor instead.
func (*TaskTargetCondition) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *TaskTargetCondition) GetNpcId() int32 {
	if x != nil && x.NpcId != nil {
		return *x.NpcId
	}
	return 0
}

func (x *TaskTargetCondition) GetNpcWx() int32 {
	if x != nil && x.NpcWx != nil {
		return *x.NpcWx
	}
	return 0
}

func (x *TaskTargetCondition) GetNpcWy() int32 {
	if x != nil && x.NpcWy != nil {
		return *x.NpcWy
	}
	return 0
}

//任务
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskId              *int32               `protobuf:"varint,1,req,name=_task_id,json=TaskId" json:"_task_id,omitempty"`                                          //任务id
	XTaskConfId          *int32               `protobuf:"varint,2,req,name=_task_conf_id,json=TaskConfId" json:"_task_conf_id,omitempty"`                            //任务配置id
	XTaskTagType         *int32               `protobuf:"varint,3,opt,name=_task_tag_type,json=TaskTagType" json:"_task_tag_type,omitempty"`                         //1-线性配置表，2-环任务组配置表，3-随机组配置表
	XTaskTagId           *int32               `protobuf:"varint,4,opt,name=_task_tag_id,json=TaskTagId" json:"_task_tag_id,omitempty"`                               //线性配置表id,环任务组配置表id,随机组配置表id
	XTaskProcess         *int32               `protobuf:"varint,5,req,name=_task_process,json=TaskProcess" json:"_task_process,omitempty"`                           //进度
	XTaskStatus          *int32               `protobuf:"varint,6,req,name=_task_status,json=TaskStatus" json:"_task_status,omitempty"`                              //状态,0-未接取,1-进行,2-完成,3-已领奖
	XTaskCycleProcess    *int32               `protobuf:"varint,7,opt,name=_task_cycle_process,json=TaskCycleProcess" json:"_task_cycle_process,omitempty"`          //(环任务才有)环进度,如果是跑环就是环的进度(只有任务组表中的任务环数不为0的任务才有)
	XTaskCycleNum        *int32               `protobuf:"varint,8,opt,name=_task_cycle_num,json=TaskCycleNum" json:"_task_cycle_num,omitempty"`                      //(环任务才有)环完成次数(限制某一个环任务的最大次数)
	XTaskNpcId           *int32               `protobuf:"varint,9,opt,name=_task_npc_id,json=TaskNpcId" json:"_task_npc_id,omitempty"`                               //接任务npc_id
	XTaskNpcWx           *int32               `protobuf:"varint,10,opt,name=_task_npc_wx,json=TaskNpcWx" json:"_task_npc_wx,omitempty"`                              //接任务npc_wx坐标
	XTaskNpcWy           *int32               `protobuf:"varint,11,opt,name=_task_npc_wy,json=TaskNpcWy" json:"_task_npc_wy,omitempty"`                              //接任务npc_wy坐标
	XTaskCondition       *TaskCondition       `protobuf:"bytes,12,opt,name=_task_condition,json=TaskCondition" json:"_task_condition,omitempty"`                     //任务完成条件
	XTaskTargetCondition *TaskTargetCondition `protobuf:"bytes,13,opt,name=_task_target_condition,json=TaskTargetCondition" json:"_task_target_condition,omitempty"` //任务拜访目标条件
	XTaskStarttime       *int32               `protobuf:"varint,14,opt,name=_task_starttime,json=TaskStarttime" json:"_task_starttime,omitempty"`                    //任务开始时间
	XTaskActionType      *int32               `protobuf:"varint,15,opt,name=_task_action_type,json=TaskActionType,def=0" json:"_task_action_type,omitempty"`         //任务动作类型：0-默认,1-新增,2-更新,3-删除
}

// Default values for Task fields.
const (
	Default_Task_XTaskActionType = int32(0)
)

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *Task) GetXTaskId() int32 {
	if x != nil && x.XTaskId != nil {
		return *x.XTaskId
	}
	return 0
}

func (x *Task) GetXTaskConfId() int32 {
	if x != nil && x.XTaskConfId != nil {
		return *x.XTaskConfId
	}
	return 0
}

func (x *Task) GetXTaskTagType() int32 {
	if x != nil && x.XTaskTagType != nil {
		return *x.XTaskTagType
	}
	return 0
}

func (x *Task) GetXTaskTagId() int32 {
	if x != nil && x.XTaskTagId != nil {
		return *x.XTaskTagId
	}
	return 0
}

func (x *Task) GetXTaskProcess() int32 {
	if x != nil && x.XTaskProcess != nil {
		return *x.XTaskProcess
	}
	return 0
}

func (x *Task) GetXTaskStatus() int32 {
	if x != nil && x.XTaskStatus != nil {
		return *x.XTaskStatus
	}
	return 0
}

func (x *Task) GetXTaskCycleProcess() int32 {
	if x != nil && x.XTaskCycleProcess != nil {
		return *x.XTaskCycleProcess
	}
	return 0
}

func (x *Task) GetXTaskCycleNum() int32 {
	if x != nil && x.XTaskCycleNum != nil {
		return *x.XTaskCycleNum
	}
	return 0
}

func (x *Task) GetXTaskNpcId() int32 {
	if x != nil && x.XTaskNpcId != nil {
		return *x.XTaskNpcId
	}
	return 0
}

func (x *Task) GetXTaskNpcWx() int32 {
	if x != nil && x.XTaskNpcWx != nil {
		return *x.XTaskNpcWx
	}
	return 0
}

func (x *Task) GetXTaskNpcWy() int32 {
	if x != nil && x.XTaskNpcWy != nil {
		return *x.XTaskNpcWy
	}
	return 0
}

func (x *Task) GetXTaskCondition() *TaskCondition {
	if x != nil {
		return x.XTaskCondition
	}
	return nil
}

func (x *Task) GetXTaskTargetCondition() *TaskTargetCondition {
	if x != nil {
		return x.XTaskTargetCondition
	}
	return nil
}

func (x *Task) GetXTaskStarttime() int32 {
	if x != nil && x.XTaskStarttime != nil {
		return *x.XTaskStarttime
	}
	return 0
}

func (x *Task) GetXTaskActionType() int32 {
	if x != nil && x.XTaskActionType != nil {
		return *x.XTaskActionType
	}
	return Default_Task_XTaskActionType
}

//任务环
type TaskCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTaskTagType        *int32 `protobuf:"varint,1,opt,name=_task_tag_type,json=TaskTagType" json:"_task_tag_type,omitempty"`                      //1-线性配置表，2-环任务组配置表，3-随机组配置表
	XTaskTagId          *int32 `protobuf:"varint,2,opt,name=_task_tag_id,json=TaskTagId" json:"_task_tag_id,omitempty"`                            //线性配置表id,环任务组配置表id,随机组配置表id
	XTaskCycleLastNum   *int32 `protobuf:"varint,3,opt,name=_task_cycle_last_num,json=TaskCycleLastNum" json:"_task_cycle_last_num,omitempty"`     //环任务周期内剩余次数
	XTaskCycleStarttime *int32 `protobuf:"varint,4,opt,name=_task_cycle_starttime,json=TaskCycleStarttime" json:"_task_cycle_starttime,omitempty"` //环任务周期内开始时间
	XTaskNpcId          *int32 `protobuf:"varint,5,opt,name=_task_npc_id,json=TaskNpcId" json:"_task_npc_id,omitempty"`                            //接任务npc_id
	XTaskNpcWx          *int32 `protobuf:"varint,6,opt,name=_task_npc_wx,json=TaskNpcWx" json:"_task_npc_wx,omitempty"`                            //接任务npc_wx坐标
	XTaskNpcWy          *int32 `protobuf:"varint,7,opt,name=_task_npc_wy,json=TaskNpcWy" json:"_task_npc_wy,omitempty"`                            //接任务npc_wy坐标
}

func (x *TaskCycle) Reset() {
	*x = TaskCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCycle) ProtoMessage() {}

func (x *TaskCycle) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCycle.ProtoReflect.Descriptor instead.
func (*TaskCycle) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *TaskCycle) GetXTaskTagType() int32 {
	if x != nil && x.XTaskTagType != nil {
		return *x.XTaskTagType
	}
	return 0
}

func (x *TaskCycle) GetXTaskTagId() int32 {
	if x != nil && x.XTaskTagId != nil {
		return *x.XTaskTagId
	}
	return 0
}

func (x *TaskCycle) GetXTaskCycleLastNum() int32 {
	if x != nil && x.XTaskCycleLastNum != nil {
		return *x.XTaskCycleLastNum
	}
	return 0
}

func (x *TaskCycle) GetXTaskCycleStarttime() int32 {
	if x != nil && x.XTaskCycleStarttime != nil {
		return *x.XTaskCycleStarttime
	}
	return 0
}

func (x *TaskCycle) GetXTaskNpcId() int32 {
	if x != nil && x.XTaskNpcId != nil {
		return *x.XTaskNpcId
	}
	return 0
}

func (x *TaskCycle) GetXTaskNpcWx() int32 {
	if x != nil && x.XTaskNpcWx != nil {
		return *x.XTaskNpcWx
	}
	return 0
}

func (x *TaskCycle) GetXTaskNpcWy() int32 {
	if x != nil && x.XTaskNpcWy != nil {
		return *x.XTaskNpcWy
	}
	return 0
}

//兵种
type Troop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"` //兵种
	XNum    *int32 `protobuf:"varint,2,req,name=_num,json=Num" json:"_num,omitempty"`            //兵的个数
	XTotal  *int32 `protobuf:"varint,3,opt,name=_total,json=Total" json:"_total,omitempty"`      //出征时兵的个数
}

func (x *Troop) Reset() {
	*x = Troop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Troop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Troop) ProtoMessage() {}

func (x *Troop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Troop.ProtoReflect.Descriptor instead.
func (*Troop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *Troop) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *Troop) GetXNum() int32 {
	if x != nil && x.XNum != nil {
		return *x.XNum
	}
	return 0
}

func (x *Troop) GetXTotal() int32 {
	if x != nil && x.XTotal != nil {
		return *x.XTotal
	}
	return 0
}

//装备穿戴
type WearEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPos                    *WearPosition          `protobuf:"varint,1,req,name=_pos,json=Pos,enum=Msg.WearPosition" json:"_pos,omitempty"` // 穿戴部位
	XItemId                 *int32                 `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`
	XRefineAttribute        []*RefineAttribute     `protobuf:"bytes,3,rep,name=_refine_attribute,json=RefineAttribute" json:"_refine_attribute,omitempty"`
	XId                     *int64                 `protobuf:"varint,4,opt,name=_id,json=Id" json:"_id,omitempty"` //精炼唯一ID  废弃
	XPendingRefineAttribute []*RefineAttribute     `protobuf:"bytes,5,rep,name=_pending_refine_attribute,json=PendingRefineAttribute" json:"_pending_refine_attribute,omitempty"`
	XEquipId                *uint32                `protobuf:"varint,6,opt,name=_equip_id,json=EquipId" json:"_equip_id,omitempty"`                                          // 装备唯一ID
	XMLevelState            *uint32                `protobuf:"varint,7,opt,name=_m_level_state,json=MLevelState" json:"_m_level_state,omitempty"`                            // 是否是无级别 0：否 1：是
	XForgeQuality           *uint32                `protobuf:"varint,8,opt,name=_forge_quality,json=ForgeQuality" json:"_forge_quality,omitempty"`                           // 锻造出来的品质 1：优秀 2：精英 3：史诗 4：传说 5:不朽（不朽是文明神装独有的）
	XMForger                *string                `protobuf:"bytes,9,opt,name=_m_forger,json=MForger" json:"_m_forger,omitempty"`                                           // 锻造者
	XMDropState             *uint32                `protobuf:"varint,10,opt,name=_m_drop_state,json=MDropState" json:"_m_drop_state,omitempty"`                              // 能否掉落 0：否 1：是
	XMOwnerGeneral          *uint32                `protobuf:"varint,11,opt,name=_m_owner_general,json=MOwnerGeneral" json:"_m_owner_general,omitempty"`                     // 归属英雄
	XMStrengthenLevel       *uint32                `protobuf:"varint,12,opt,name=_m_strengthen_level,json=MStrengthenLevel" json:"_m_strengthen_level,omitempty"`            // 强化等级
	XMBaseAttribute         []*BaseAttribute       `protobuf:"bytes,13,rep,name=_m_base_attribute,json=MBaseAttribute" json:"_m_base_attribute,omitempty"`                   // 基础属性
	XMAdditionalAttribute   []*AdditionalAttribute `protobuf:"bytes,14,rep,name=_m_additional_attribute,json=MAdditionalAttribute" json:"_m_additional_attribute,omitempty"` // 附加属性
	XTime                   *int32                 `protobuf:"varint,15,opt,name=_time,json=Time" json:"_time,omitempty"`                                                    //获取到道具的时间戳
	XEnchanting             *uint32                `protobuf:"varint,16,opt,name=_enchanting,json=Enchanting" json:"_enchanting,omitempty"`                                  // 附魔属性
	XMarketState            *int32                 `protobuf:"varint,17,opt,name=_market_state,json=MarketState" json:"_market_state,omitempty"`                             //是否可交易 0：否 1：是
}

func (x *WearEquip) Reset() {
	*x = WearEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearEquip) ProtoMessage() {}

func (x *WearEquip) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearEquip.ProtoReflect.Descriptor instead.
func (*WearEquip) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *WearEquip) GetXPos() WearPosition {
	if x != nil && x.XPos != nil {
		return *x.XPos
	}
	return WearPosition_head
}

func (x *WearEquip) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *WearEquip) GetXRefineAttribute() []*RefineAttribute {
	if x != nil {
		return x.XRefineAttribute
	}
	return nil
}

func (x *WearEquip) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *WearEquip) GetXPendingRefineAttribute() []*RefineAttribute {
	if x != nil {
		return x.XPendingRefineAttribute
	}
	return nil
}

func (x *WearEquip) GetXEquipId() uint32 {
	if x != nil && x.XEquipId != nil {
		return *x.XEquipId
	}
	return 0
}

func (x *WearEquip) GetXMLevelState() uint32 {
	if x != nil && x.XMLevelState != nil {
		return *x.XMLevelState
	}
	return 0
}

func (x *WearEquip) GetXForgeQuality() uint32 {
	if x != nil && x.XForgeQuality != nil {
		return *x.XForgeQuality
	}
	return 0
}

func (x *WearEquip) GetXMForger() string {
	if x != nil && x.XMForger != nil {
		return *x.XMForger
	}
	return ""
}

func (x *WearEquip) GetXMDropState() uint32 {
	if x != nil && x.XMDropState != nil {
		return *x.XMDropState
	}
	return 0
}

func (x *WearEquip) GetXMOwnerGeneral() uint32 {
	if x != nil && x.XMOwnerGeneral != nil {
		return *x.XMOwnerGeneral
	}
	return 0
}

func (x *WearEquip) GetXMStrengthenLevel() uint32 {
	if x != nil && x.XMStrengthenLevel != nil {
		return *x.XMStrengthenLevel
	}
	return 0
}

func (x *WearEquip) GetXMBaseAttribute() []*BaseAttribute {
	if x != nil {
		return x.XMBaseAttribute
	}
	return nil
}

func (x *WearEquip) GetXMAdditionalAttribute() []*AdditionalAttribute {
	if x != nil {
		return x.XMAdditionalAttribute
	}
	return nil
}

func (x *WearEquip) GetXTime() int32 {
	if x != nil && x.XTime != nil {
		return *x.XTime
	}
	return 0
}

func (x *WearEquip) GetXEnchanting() uint32 {
	if x != nil && x.XEnchanting != nil {
		return *x.XEnchanting
	}
	return 0
}

func (x *WearEquip) GetXMarketState() int32 {
	if x != nil && x.XMarketState != nil {
		return *x.XMarketState
	}
	return 0
}

// 新手引导进度
type NewUserGuideProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId   *int32  `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`    //
	XProgress *string `protobuf:"bytes,2,opt,name=_progress,json=Progress" json:"_progress,omitempty"` //  进度
}

func (x *NewUserGuideProgress) Reset() {
	*x = NewUserGuideProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserGuideProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserGuideProgress) ProtoMessage() {}

func (x *NewUserGuideProgress) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserGuideProgress.ProtoReflect.Descriptor instead.
func (*NewUserGuideProgress) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *NewUserGuideProgress) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *NewUserGuideProgress) GetXProgress() string {
	if x != nil && x.XProgress != nil {
		return *x.XProgress
	}
	return ""
}

//君主身上的装备。
type HeroEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XIndex  *uint32 `protobuf:"varint,1,req,name=_index,json=Index" json:"_index,omitempty"`      // 装备的位置
	XItemId *int32  `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"` // 装备ID
	XExp    *uint32 `protobuf:"varint,3,opt,name=_exp,json=Exp" json:"_exp,omitempty"`            // 英雄经验
}

func (x *HeroEquip) Reset() {
	*x = HeroEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroEquip) ProtoMessage() {}

func (x *HeroEquip) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroEquip.ProtoReflect.Descriptor instead.
func (*HeroEquip) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *HeroEquip) GetXIndex() uint32 {
	if x != nil && x.XIndex != nil {
		return *x.XIndex
	}
	return 0
}

func (x *HeroEquip) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *HeroEquip) GetXExp() uint32 {
	if x != nil && x.XExp != nil {
		return *x.XExp
	}
	return 0
}

type KingdomTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTitle  *KingCastleJobType `protobuf:"varint,1,req,name=_title,json=Title,enum=Msg.KingCastleJobType" json:"_title,omitempty"` //头衔
	XCdTime *int64             `protobuf:"varint,2,opt,name=_cd_time,json=CdTime" json:"_cd_time,omitempty"`                       //赋予头衔解冻时间戳
}

func (x *KingdomTitle) Reset() {
	*x = KingdomTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingdomTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingdomTitle) ProtoMessage() {}

func (x *KingdomTitle) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingdomTitle.ProtoReflect.Descriptor instead.
func (*KingdomTitle) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *KingdomTitle) GetXTitle() KingCastleJobType {
	if x != nil && x.XTitle != nil {
		return *x.XTitle
	}
	return KingCastleJobType_none_job
}

func (x *KingdomTitle) GetXCdTime() int64 {
	if x != nil && x.XCdTime != nil {
		return *x.XCdTime
	}
	return 0
}

type UserSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId        *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`                        //玩家ID
	XAvatar        *int32  `protobuf:"varint,2,req,name=_avatar,json=Avatar" json:"_avatar,omitempty"`                          //玩家头像
	XName          *string `protobuf:"bytes,3,req,name=_name,json=Name" json:"_name,omitempty"`                                 //玩家名
	XVip           *int32  `protobuf:"varint,4,opt,name=_vip,json=Vip" json:"_vip,omitempty"`                                   //玩家vip
	XLevel         *int32  `protobuf:"varint,5,opt,name=_level,json=Level,def=-1" json:"_level,omitempty"`                      //玩家等级
	XCastleLevel   *int32  `protobuf:"varint,6,opt,name=_castle_level,json=CastleLevel" json:"_castle_level,omitempty"`         //玩家城堡level.
	XServerId      *int32  `protobuf:"varint,7,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                  //玩家服务器id
	XWx            *int32  `protobuf:"varint,8,opt,name=_wx,json=Wx" json:"_wx,omitempty"`                                      //玩家坐标
	XWy            *int32  `protobuf:"varint,9,opt,name=_wy,json=Wy" json:"_wy,omitempty"`                                      //玩家坐标
	XGuildId       *uint32 `protobuf:"varint,10,opt,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`                    //guild id
	XGuildBaseName *string `protobuf:"bytes,11,opt,name=_guild_base_name,json=GuildBaseName" json:"_guild_base_name,omitempty"` //公会名字
	XGuildAvatar   *int32  `protobuf:"varint,12,opt,name=_guild_avatar,json=GuildAvatar" json:"_guild_avatar,omitempty"`        //公会标志
	//以下2个数据移到mapinfo数据里，
	XCastleFire  *uint32  `protobuf:"varint,13,opt,name=_castle_fire,json=CastleFire" json:"_castle_fire,omitempty"`    //城堡是否着火
	XPeaceShield *uint32  `protobuf:"varint,14,opt,name=_peace_shield,json=PeaceShield" json:"_peace_shield,omitempty"` //是否有防护罩
	XLan         *LanType `protobuf:"varint,15,opt,name=_lan,json=Lan,enum=Msg.LanType" json:"_lan,omitempty"`          //玩家语言
	XLastseen    *uint32  `protobuf:"varint,16,opt,name=_lastseen,json=Lastseen" json:"_lastseen,omitempty"`            //玩家上次登录时间，0：不确定即离线，1：在线，其他情况表示上次登录时间戳
	//optional guild_summary _guild_summary = 17;//玩家的联盟信息
	XPower                 *int64                `protobuf:"varint,18,opt,name=_power,json=Power" json:"_power,omitempty"`
	XStatisticalData       *StatisticalData      `protobuf:"bytes,19,opt,name=_statistical_data,json=StatisticalData" json:"_statistical_data,omitempty"`                      //统计数据
	XTitle                 *TitleType            `protobuf:"varint,20,opt,name=_title,json=Title,enum=Msg.TitleType" json:"_title,omitempty"`                                  //爵位
	XGuildName             *string               `protobuf:"bytes,21,opt,name=_guild_name,json=GuildName" json:"_guild_name,omitempty"`                                        //联盟全称
	XAvatarUrl             *string               `protobuf:"bytes,22,opt,name=_avatar_url,json=AvatarUrl" json:"_avatar_url,omitempty"`                                        //头像URL地址
	XEvony                 *int32                `protobuf:"varint,23,opt,name=_evony,json=Evony" json:"_evony,omitempty"`                                                     //用户文明
	XJobTitleType          *KingCastleJobType    `protobuf:"varint,24,opt,name=_job_title_type,json=JobTitleType,enum=Msg.KingCastleJobType" json:"_job_title_type,omitempty"` //头衔
	XEquips                []*WearEquip          `protobuf:"bytes,25,rep,name=_equips,json=Equips" json:"_equips,omitempty"`                                                   //玩家的装备
	XExp                   *int32                `protobuf:"varint,26,opt,name=_exp,json=Exp" json:"_exp,omitempty"`                                                           //玩家经验
	XFavorite              *int32                `protobuf:"varint,27,opt,name=_favorite,json=Favorite" json:"_favorite,omitempty"`                                            //0：非星标好友，1：星标好友 2跨服好友
	XFriend                *int32                `protobuf:"varint,28,opt,name=_friend,json=Friend" json:"_friend,omitempty"`                                                  //0：非好友，1：好友 3已发好友请求
	XBlockTime             *int64                `protobuf:"varint,29,opt,name=_block_time,json=BlockTime" json:"_block_time,omitempty"`                                       //用户被屏蔽的时间戳, 单位秒
	XSkinData              []*SkinData           `protobuf:"bytes,30,rep,name=_skin_data,json=SkinData" json:"_skin_data,omitempty"`                                           //装扮数据
	XCrossServerId         *int32                `protobuf:"varint,31,opt,name=_cross_server_id,json=CrossServerId" json:"_cross_server_id,omitempty"`                         //用户跨服id
	XCrossServerMatchId    *int32                `protobuf:"varint,32,opt,name=_cross_server_match_id,json=CrossServerMatchId" json:"_cross_server_match_id,omitempty"`        //跨服战匹配id
	XCreateTime            *int64                `protobuf:"varint,33,opt,name=_create_time,json=CreateTime" json:"_create_time,omitempty"`                                    //用创建时间戳, 单位秒
	XFieldId               *int32                `protobuf:"varint,34,opt,name=_field_id,json=FieldId" json:"_field_id,omitempty"`                                             //战场id
	XMiracleLevel          *int32                `protobuf:"varint,35,opt,name=_miracle_level,json=MiracleLevel" json:"_miracle_level,omitempty"`                              //奇迹等级
	XAvatarFrame           *int32                `protobuf:"varint,36,opt,name=_avatar_frame,json=AvatarFrame" json:"_avatar_frame,omitempty"`                                 //头像框 0代表没有，1..代表头像框id
	XPlayoffScore          *int32                `protobuf:"varint,37,opt,name=_playoff_score,json=PlayoffScore" json:"_playoff_score,omitempty"`                              //季后赛分数
	XFireEndTime           *int32                `protobuf:"varint,38,opt,name=_fire_end_time,json=FireEndTime" json:"_fire_end_time,omitempty"`                               //花火特效结束时间
	XEmblems               []int32               `protobuf:"varint,39,rep,name=_emblems,json=Emblems" json:"_emblems,omitempty"`                                               //展示徽章
	XPlayerOfflineTime     *uint32               `protobuf:"varint,40,opt,name=_player_offline_time,json=PlayerOfflineTime" json:"_player_offline_time,omitempty"`             //玩家离线时间戳
	XFamousGeneralId       *int64                `protobuf:"varint,41,opt,name=_famous_general_id,json=FamousGeneralId" json:"_famous_general_id,omitempty"`                   //形象名将ID
	XTreasure              []*PlayerTreasureInfo `protobuf:"bytes,42,rep,name=_treasure,json=Treasure" json:"_treasure,omitempty"`                                             //领主宝物
	XPermission            *UserInfoPermission   `protobuf:"bytes,43,opt,name=_permission,json=Permission" json:"_permission,omitempty"`
	XRemarkName            *string               `protobuf:"bytes,44,opt,name=_remark_name,json=RemarkName" json:"_remark_name,omitempty"`                                         //用户昵称
	XGoodEvilValue         *int32                `protobuf:"varint,45,opt,name=_good_evil_value,json=GoodEvilValue" json:"_good_evil_value,omitempty"`                             //用户善恶值
	XGoodEvilValueDecrTime *int32                `protobuf:"varint,46,opt,name=_good_evil_value_decr_time,json=GoodEvilValueDecrTime" json:"_good_evil_value_decr_time,omitempty"` //用户善恶值上次自动减少时间戳
	XGreyNameExpire        *int32                `protobuf:"varint,47,opt,name=_grey_name_expire,json=GreyNameExpire" json:"_grey_name_expire,omitempty"`                          //用户灰名过期时间戳
}

// Default values for UserSummary fields.
const (
	Default_UserSummary_XLevel = int32(-1)
)

func (x *UserSummary) Reset() {
	*x = UserSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSummary) ProtoMessage() {}

func (x *UserSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSummary.ProtoReflect.Descriptor instead.
func (*UserSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *UserSummary) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *UserSummary) GetXAvatar() int32 {
	if x != nil && x.XAvatar != nil {
		return *x.XAvatar
	}
	return 0
}

func (x *UserSummary) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *UserSummary) GetXVip() int32 {
	if x != nil && x.XVip != nil {
		return *x.XVip
	}
	return 0
}

func (x *UserSummary) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return Default_UserSummary_XLevel
}

func (x *UserSummary) GetXCastleLevel() int32 {
	if x != nil && x.XCastleLevel != nil {
		return *x.XCastleLevel
	}
	return 0
}

func (x *UserSummary) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *UserSummary) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *UserSummary) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *UserSummary) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *UserSummary) GetXGuildBaseName() string {
	if x != nil && x.XGuildBaseName != nil {
		return *x.XGuildBaseName
	}
	return ""
}

func (x *UserSummary) GetXGuildAvatar() int32 {
	if x != nil && x.XGuildAvatar != nil {
		return *x.XGuildAvatar
	}
	return 0
}

func (x *UserSummary) GetXCastleFire() uint32 {
	if x != nil && x.XCastleFire != nil {
		return *x.XCastleFire
	}
	return 0
}

func (x *UserSummary) GetXPeaceShield() uint32 {
	if x != nil && x.XPeaceShield != nil {
		return *x.XPeaceShield
	}
	return 0
}

func (x *UserSummary) GetXLan() LanType {
	if x != nil && x.XLan != nil {
		return *x.XLan
	}
	return LanType_Afrikaans
}

func (x *UserSummary) GetXLastseen() uint32 {
	if x != nil && x.XLastseen != nil {
		return *x.XLastseen
	}
	return 0
}

func (x *UserSummary) GetXPower() int64 {
	if x != nil && x.XPower != nil {
		return *x.XPower
	}
	return 0
}

func (x *UserSummary) GetXStatisticalData() *StatisticalData {
	if x != nil {
		return x.XStatisticalData
	}
	return nil
}

func (x *UserSummary) GetXTitle() TitleType {
	if x != nil && x.XTitle != nil {
		return *x.XTitle
	}
	return TitleType_none
}

func (x *UserSummary) GetXGuildName() string {
	if x != nil && x.XGuildName != nil {
		return *x.XGuildName
	}
	return ""
}

func (x *UserSummary) GetXAvatarUrl() string {
	if x != nil && x.XAvatarUrl != nil {
		return *x.XAvatarUrl
	}
	return ""
}

func (x *UserSummary) GetXEvony() int32 {
	if x != nil && x.XEvony != nil {
		return *x.XEvony
	}
	return 0
}

func (x *UserSummary) GetXJobTitleType() KingCastleJobType {
	if x != nil && x.XJobTitleType != nil {
		return *x.XJobTitleType
	}
	return KingCastleJobType_none_job
}

func (x *UserSummary) GetXEquips() []*WearEquip {
	if x != nil {
		return x.XEquips
	}
	return nil
}

func (x *UserSummary) GetXExp() int32 {
	if x != nil && x.XExp != nil {
		return *x.XExp
	}
	return 0
}

func (x *UserSummary) GetXFavorite() int32 {
	if x != nil && x.XFavorite != nil {
		return *x.XFavorite
	}
	return 0
}

func (x *UserSummary) GetXFriend() int32 {
	if x != nil && x.XFriend != nil {
		return *x.XFriend
	}
	return 0
}

func (x *UserSummary) GetXBlockTime() int64 {
	if x != nil && x.XBlockTime != nil {
		return *x.XBlockTime
	}
	return 0
}

func (x *UserSummary) GetXSkinData() []*SkinData {
	if x != nil {
		return x.XSkinData
	}
	return nil
}

func (x *UserSummary) GetXCrossServerId() int32 {
	if x != nil && x.XCrossServerId != nil {
		return *x.XCrossServerId
	}
	return 0
}

func (x *UserSummary) GetXCrossServerMatchId() int32 {
	if x != nil && x.XCrossServerMatchId != nil {
		return *x.XCrossServerMatchId
	}
	return 0
}

func (x *UserSummary) GetXCreateTime() int64 {
	if x != nil && x.XCreateTime != nil {
		return *x.XCreateTime
	}
	return 0
}

func (x *UserSummary) GetXFieldId() int32 {
	if x != nil && x.XFieldId != nil {
		return *x.XFieldId
	}
	return 0
}

func (x *UserSummary) GetXMiracleLevel() int32 {
	if x != nil && x.XMiracleLevel != nil {
		return *x.XMiracleLevel
	}
	return 0
}

func (x *UserSummary) GetXAvatarFrame() int32 {
	if x != nil && x.XAvatarFrame != nil {
		return *x.XAvatarFrame
	}
	return 0
}

func (x *UserSummary) GetXPlayoffScore() int32 {
	if x != nil && x.XPlayoffScore != nil {
		return *x.XPlayoffScore
	}
	return 0
}

func (x *UserSummary) GetXFireEndTime() int32 {
	if x != nil && x.XFireEndTime != nil {
		return *x.XFireEndTime
	}
	return 0
}

func (x *UserSummary) GetXEmblems() []int32 {
	if x != nil {
		return x.XEmblems
	}
	return nil
}

func (x *UserSummary) GetXPlayerOfflineTime() uint32 {
	if x != nil && x.XPlayerOfflineTime != nil {
		return *x.XPlayerOfflineTime
	}
	return 0
}

func (x *UserSummary) GetXFamousGeneralId() int64 {
	if x != nil && x.XFamousGeneralId != nil {
		return *x.XFamousGeneralId
	}
	return 0
}

func (x *UserSummary) GetXTreasure() []*PlayerTreasureInfo {
	if x != nil {
		return x.XTreasure
	}
	return nil
}

func (x *UserSummary) GetXPermission() *UserInfoPermission {
	if x != nil {
		return x.XPermission
	}
	return nil
}

func (x *UserSummary) GetXRemarkName() string {
	if x != nil && x.XRemarkName != nil {
		return *x.XRemarkName
	}
	return ""
}

func (x *UserSummary) GetXGoodEvilValue() int32 {
	if x != nil && x.XGoodEvilValue != nil {
		return *x.XGoodEvilValue
	}
	return 0
}

func (x *UserSummary) GetXGoodEvilValueDecrTime() int32 {
	if x != nil && x.XGoodEvilValueDecrTime != nil {
		return *x.XGoodEvilValueDecrTime
	}
	return 0
}

func (x *UserSummary) GetXGreyNameExpire() int32 {
	if x != nil && x.XGreyNameExpire != nil {
		return *x.XGreyNameExpire
	}
	return 0
}

//查看用户权限设置
type UserInfoPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XEquipment        *int32 `protobuf:"varint,1,opt,name=_equipment,json=Equipment" json:"_equipment,omitempty"`
	XVip              *int32 `protobuf:"varint,2,opt,name=_vip,json=Vip" json:"_vip,omitempty"`
	XAllienceGiftFrom *int32 `protobuf:"varint,3,opt,name=_allience_gift_from,json=AllienceGiftFrom" json:"_allience_gift_from,omitempty"`
	XBuildingNameShow *int32 `protobuf:"varint,4,opt,name=_building_name_show,json=BuildingNameShow" json:"_building_name_show,omitempty"`
}

func (x *UserInfoPermission) Reset() {
	*x = UserInfoPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoPermission) ProtoMessage() {}

func (x *UserInfoPermission) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoPermission.ProtoReflect.Descriptor instead.
func (*UserInfoPermission) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *UserInfoPermission) GetXEquipment() int32 {
	if x != nil && x.XEquipment != nil {
		return *x.XEquipment
	}
	return 0
}

func (x *UserInfoPermission) GetXVip() int32 {
	if x != nil && x.XVip != nil {
		return *x.XVip
	}
	return 0
}

func (x *UserInfoPermission) GetXAllienceGiftFrom() int32 {
	if x != nil && x.XAllienceGiftFrom != nil {
		return *x.XAllienceGiftFrom
	}
	return 0
}

func (x *UserInfoPermission) GetXBuildingNameShow() int32 {
	if x != nil && x.XBuildingNameShow != nil {
		return *x.XBuildingNameShow
	}
	return 0
}

// 资源信息
type ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XResB *int64 `protobuf:"varint,1,opt,name=_resB,json=ResB" json:"_resB,omitempty"` //掠夺到的木头
	XResA *int64 `protobuf:"varint,2,opt,name=_resA,json=ResA" json:"_resA,omitempty"` //掠夺到的粮食
	XResC *int64 `protobuf:"varint,3,opt,name=_resC,json=ResC" json:"_resC,omitempty"` //掠夺到的铁
	XResD *int64 `protobuf:"varint,4,opt,name=_resD,json=ResD" json:"_resD,omitempty"` //掠夺到的秘银
	XResE *int64 `protobuf:"varint,5,opt,name=_resE,json=ResE" json:"_resE,omitempty"` //金币
	XGem  *int64 `protobuf:"varint,6,opt,name=_Gem,json=Gem" json:"_Gem,omitempty"`    //钻石
	XResG *int64 `protobuf:"varint,7,opt,name=_resG,json=ResG" json:"_resG,omitempty"` //黑金
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *ResourceInfo) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *ResourceInfo) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *ResourceInfo) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *ResourceInfo) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *ResourceInfo) GetXResE() int64 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

func (x *ResourceInfo) GetXGem() int64 {
	if x != nil && x.XGem != nil {
		return *x.XGem
	}
	return 0
}

func (x *ResourceInfo) GetXResG() int64 {
	if x != nil && x.XResG != nil {
		return *x.XResG
	}
	return 0
}

// 联盟成员信息
type GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSummary                  *UserSummary       `protobuf:"bytes,1,req,name=_summary,json=Summary" json:"_summary,omitempty"`                                                            // 用户简要信息
	XAuth                     *GuildMemAuthority `protobuf:"varint,2,req,name=_auth,json=Auth,enum=Msg.GuildMemAuthority" json:"_auth,omitempty"`                                         // 联盟成员权限
	XHonour                   *uint32            `protobuf:"varint,3,opt,name=_honour,json=Honour" json:"_honour,omitempty"`                                                              // 联盟荣誉，总的荣誉
	XScore                    *uint32            `protobuf:"varint,4,opt,name=_score,json=Score" json:"_score,omitempty"`                                                                 // 联盟积分
	XWeekHonour               *uint32            `protobuf:"varint,5,opt,name=_week_honour,json=WeekHonour" json:"_week_honour,omitempty"`                                                // 本周联盟荣誉，每周日上午6点，服务器清零重新计算
	XDonateHonour             *uint32            `protobuf:"varint,6,opt,name=_donate_honour,json=DonateHonour" json:"_donate_honour,omitempty"`                                          // 总联盟捐献荣誉
	XWeekDonateHonour         *uint32            `protobuf:"varint,7,opt,name=_week_donate_honour,json=WeekDonateHonour" json:"_week_donate_honour,omitempty"`                            // 本周联盟捐献荣誉
	XLastweekDonateHonour     *uint32            `protobuf:"varint,8,opt,name=_lastweek_donate_honour,json=LastweekDonateHonour" json:"_lastweek_donate_honour,omitempty"`                // 上周联盟捐献荣誉
	XJoinGuildTime            *int64             `protobuf:"varint,9,opt,name=_join_guild_time,json=JoinGuildTime" json:"_join_guild_time,omitempty"`                                     //加入联盟时间
	XDailyLastDistributionRes *uint32            `protobuf:"varint,10,opt,name=_daily_last_distribution_res,json=DailyLastDistributionRes" json:"_daily_last_distribution_res,omitempty"` //剩余可分配联盟资源（领地内功能）
	XBlackGold                *uint32            `protobuf:"varint,11,opt,name=_black_gold,json=BlackGold" json:"_black_gold,omitempty"`                                                  // 每日已领取的黑金数量
}

func (x *GuildMember) Reset() {
	*x = GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMember) ProtoMessage() {}

func (x *GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMember.ProtoReflect.Descriptor instead.
func (*GuildMember) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *GuildMember) GetXSummary() *UserSummary {
	if x != nil {
		return x.XSummary
	}
	return nil
}

func (x *GuildMember) GetXAuth() GuildMemAuthority {
	if x != nil && x.XAuth != nil {
		return *x.XAuth
	}
	return GuildMemAuthority_R5
}

func (x *GuildMember) GetXHonour() uint32 {
	if x != nil && x.XHonour != nil {
		return *x.XHonour
	}
	return 0
}

func (x *GuildMember) GetXScore() uint32 {
	if x != nil && x.XScore != nil {
		return *x.XScore
	}
	return 0
}

func (x *GuildMember) GetXWeekHonour() uint32 {
	if x != nil && x.XWeekHonour != nil {
		return *x.XWeekHonour
	}
	return 0
}

func (x *GuildMember) GetXDonateHonour() uint32 {
	if x != nil && x.XDonateHonour != nil {
		return *x.XDonateHonour
	}
	return 0
}

func (x *GuildMember) GetXWeekDonateHonour() uint32 {
	if x != nil && x.XWeekDonateHonour != nil {
		return *x.XWeekDonateHonour
	}
	return 0
}

func (x *GuildMember) GetXLastweekDonateHonour() uint32 {
	if x != nil && x.XLastweekDonateHonour != nil {
		return *x.XLastweekDonateHonour
	}
	return 0
}

func (x *GuildMember) GetXJoinGuildTime() int64 {
	if x != nil && x.XJoinGuildTime != nil {
		return *x.XJoinGuildTime
	}
	return 0
}

func (x *GuildMember) GetXDailyLastDistributionRes() uint32 {
	if x != nil && x.XDailyLastDistributionRes != nil {
		return *x.XDailyLastDistributionRes
	}
	return 0
}

func (x *GuildMember) GetXBlackGold() uint32 {
	if x != nil && x.XBlackGold != nil {
		return *x.XBlackGold
	}
	return 0
}

// 联盟成员信息公会相关数据
type GuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildBoxOpenNum *uint32 `protobuf:"varint,1,opt,name=_guild_box_open_num,json=GuildBoxOpenNum" json:"_guild_box_open_num,omitempty"` //玩家今日开宝箱次数
}

func (x *GuildData) Reset() {
	*x = GuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildData) ProtoMessage() {}

func (x *GuildData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildData.ProtoReflect.Descriptor instead.
func (*GuildData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *GuildData) GetXGuildBoxOpenNum() uint32 {
	if x != nil && x.XGuildBoxOpenNum != nil {
		return *x.XGuildBoxOpenNum
	}
	return 0
}

// 联盟成员荣誉信息
type GuildMemberHonour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId               *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`                                             // 玩家ID
	XHonour               *uint32 `protobuf:"varint,2,opt,name=_honour,json=Honour" json:"_honour,omitempty"`                                               // 联盟荣誉，总的荣誉
	XScore                *uint32 `protobuf:"varint,3,opt,name=_score,json=Score" json:"_score,omitempty"`                                                  // 联盟积分
	XWeekHonour           *uint32 `protobuf:"varint,4,opt,name=_week_honour,json=WeekHonour" json:"_week_honour,omitempty"`                                 // 本周联盟荣誉，每周日上午6点，服务器清零重新计算
	XDonateHonour         *uint32 `protobuf:"varint,5,opt,name=_donate_honour,json=DonateHonour" json:"_donate_honour,omitempty"`                           // 总联盟捐献荣誉
	XWeekDonateHonour     *uint32 `protobuf:"varint,6,opt,name=_week_donate_honour,json=WeekDonateHonour" json:"_week_donate_honour,omitempty"`             // 本周联盟捐献荣誉
	XLastweekDonateHonour *uint32 `protobuf:"varint,7,opt,name=_lastweek_donate_honour,json=LastweekDonateHonour" json:"_lastweek_donate_honour,omitempty"` // 上周联盟捐献荣誉
}

func (x *GuildMemberHonour) Reset() {
	*x = GuildMemberHonour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberHonour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberHonour) ProtoMessage() {}

func (x *GuildMemberHonour) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberHonour.ProtoReflect.Descriptor instead.
func (*GuildMemberHonour) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *GuildMemberHonour) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildMemberHonour) GetXHonour() uint32 {
	if x != nil && x.XHonour != nil {
		return *x.XHonour
	}
	return 0
}

func (x *GuildMemberHonour) GetXScore() uint32 {
	if x != nil && x.XScore != nil {
		return *x.XScore
	}
	return 0
}

func (x *GuildMemberHonour) GetXWeekHonour() uint32 {
	if x != nil && x.XWeekHonour != nil {
		return *x.XWeekHonour
	}
	return 0
}

func (x *GuildMemberHonour) GetXDonateHonour() uint32 {
	if x != nil && x.XDonateHonour != nil {
		return *x.XDonateHonour
	}
	return 0
}

func (x *GuildMemberHonour) GetXWeekDonateHonour() uint32 {
	if x != nil && x.XWeekDonateHonour != nil {
		return *x.XWeekDonateHonour
	}
	return 0
}

func (x *GuildMemberHonour) GetXLastweekDonateHonour() uint32 {
	if x != nil && x.XLastweekDonateHonour != nil {
		return *x.XLastweekDonateHonour
	}
	return 0
}

// 联盟简要信息
type GuildSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              *uint32        `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                            //联盟id
	XName            *string        `protobuf:"bytes,2,req,name=_name,json=Name" json:"_name,omitempty"`                                       //联盟名称
	XShortName       *string        `protobuf:"bytes,3,req,name=_short_name,json=ShortName" json:"_short_name,omitempty"`                      //联盟简称
	XAvatar          *int32         `protobuf:"varint,4,req,name=_avatar,json=Avatar" json:"_avatar,omitempty"`                                //联盟头像
	XSlogan          *string        `protobuf:"bytes,5,opt,name=_slogan,json=Slogan" json:"_slogan,omitempty"`                                 //联盟宣言
	XJoinType        *GuildJoinType `protobuf:"varint,6,opt,name=_join_type,json=JoinType,enum=Msg.GuildJoinType" json:"_join_type,omitempty"` //联盟申请限制类型
	XJoinLimit       *uint32        `protobuf:"varint,7,opt,name=_join_limit,json=JoinLimit" json:"_join_limit,omitempty"`                     //联盟人数上限
	XMemberCnt       *uint32        `protobuf:"varint,8,opt,name=_member_cnt,json=MemberCnt" json:"_member_cnt,omitempty"`                     //联盟人数
	XOwner           *GuildMember   `protobuf:"bytes,9,opt,name=_owner,json=Owner" json:"_owner,omitempty"`                                    //盟主简要信息
	XLan             *LanType       `protobuf:"varint,10,opt,name=_lan,json=Lan,enum=Msg.LanType" json:"_lan,omitempty"`                       //联盟交流语言
	XPower           *int64         `protobuf:"varint,11,opt,name=_power,json=Power" json:"_power,omitempty"`                                  //联盟战斗力
	XStatus          *GuildStatus   `protobuf:"varint,12,opt,name=_status,json=Status,enum=Msg.GuildStatus" json:"_status,omitempty"`          //联盟状态
	XListAuthTitle   []string       `protobuf:"bytes,13,rep,name=_list_auth_title,json=ListAuthTitle" json:"_list_auth_title,omitempty"`       //从R5到R1的称谓数组
	XElector         *GuildMember   `protobuf:"bytes,14,opt,name=_elector,json=Elector" json:"_elector,omitempty"`                             //当前联盟的竞选者
	XElectEndTime    *uint32        `protobuf:"varint,15,opt,name=_elect_end_time,json=ElectEndTime" json:"_elect_end_time,omitempty"`         //竞选终止时间
	XHeadline        *string        `protobuf:"bytes,16,opt,name=_headline,json=Headline" json:"_headline,omitempty"`                          //联盟头条
	XServerId        *int32         `protobuf:"varint,17,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                       //联盟所在服id
	XCreateTimestamp *uint32        `protobuf:"varint,18,opt,name=_create_timestamp,json=CreateTimestamp" json:"_create_timestamp,omitempty"`  //联盟创建时间
	XLevel           *uint32        `protobuf:"varint,19,opt,name=_level,json=Level" json:"_level,omitempty"`                                  //联盟等级
	XPoint           *uint32        `protobuf:"varint,20,opt,name=_point,json=Point" json:"_point,omitempty"`                                  //联盟荣耀点数
	XActivty         *uint32        `protobuf:"varint,21,opt,name=_activty,json=Activty" json:"_activty,omitempty"`                            //联盟活跃度
	XResA            *uint32        `protobuf:"varint,22,opt,name=_resA,json=ResA" json:"_resA,omitempty"`                                     //联盟resA
	XResB            *uint32        `protobuf:"varint,23,opt,name=_resB,json=ResB" json:"_resB,omitempty"`                                     //联盟resB
	XResC            *uint32        `protobuf:"varint,24,opt,name=_resC,json=ResC" json:"_resC,omitempty"`                                     //联盟resC
	XResD            *uint32        `protobuf:"varint,25,opt,name=_resD,json=ResD" json:"_resD,omitempty"`                                     //联盟resD
	XBlackGold       *uint32        `protobuf:"varint,26,opt,name=_black_gold,json=BlackGold" json:"_black_gold,omitempty"`                    //联盟black gold
}

func (x *GuildSummary) Reset() {
	*x = GuildSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSummary) ProtoMessage() {}

func (x *GuildSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSummary.ProtoReflect.Descriptor instead.
func (*GuildSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *GuildSummary) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GuildSummary) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *GuildSummary) GetXShortName() string {
	if x != nil && x.XShortName != nil {
		return *x.XShortName
	}
	return ""
}

func (x *GuildSummary) GetXAvatar() int32 {
	if x != nil && x.XAvatar != nil {
		return *x.XAvatar
	}
	return 0
}

func (x *GuildSummary) GetXSlogan() string {
	if x != nil && x.XSlogan != nil {
		return *x.XSlogan
	}
	return ""
}

func (x *GuildSummary) GetXJoinType() GuildJoinType {
	if x != nil && x.XJoinType != nil {
		return *x.XJoinType
	}
	return GuildJoinType_no_verify
}

func (x *GuildSummary) GetXJoinLimit() uint32 {
	if x != nil && x.XJoinLimit != nil {
		return *x.XJoinLimit
	}
	return 0
}

func (x *GuildSummary) GetXMemberCnt() uint32 {
	if x != nil && x.XMemberCnt != nil {
		return *x.XMemberCnt
	}
	return 0
}

func (x *GuildSummary) GetXOwner() *GuildMember {
	if x != nil {
		return x.XOwner
	}
	return nil
}

func (x *GuildSummary) GetXLan() LanType {
	if x != nil && x.XLan != nil {
		return *x.XLan
	}
	return LanType_Afrikaans
}

func (x *GuildSummary) GetXPower() int64 {
	if x != nil && x.XPower != nil {
		return *x.XPower
	}
	return 0
}

func (x *GuildSummary) GetXStatus() GuildStatus {
	if x != nil && x.XStatus != nil {
		return *x.XStatus
	}
	return GuildStatus_lol_normal
}

func (x *GuildSummary) GetXListAuthTitle() []string {
	if x != nil {
		return x.XListAuthTitle
	}
	return nil
}

func (x *GuildSummary) GetXElector() *GuildMember {
	if x != nil {
		return x.XElector
	}
	return nil
}

func (x *GuildSummary) GetXElectEndTime() uint32 {
	if x != nil && x.XElectEndTime != nil {
		return *x.XElectEndTime
	}
	return 0
}

func (x *GuildSummary) GetXHeadline() string {
	if x != nil && x.XHeadline != nil {
		return *x.XHeadline
	}
	return ""
}

func (x *GuildSummary) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *GuildSummary) GetXCreateTimestamp() uint32 {
	if x != nil && x.XCreateTimestamp != nil {
		return *x.XCreateTimestamp
	}
	return 0
}

func (x *GuildSummary) GetXLevel() uint32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *GuildSummary) GetXPoint() uint32 {
	if x != nil && x.XPoint != nil {
		return *x.XPoint
	}
	return 0
}

func (x *GuildSummary) GetXActivty() uint32 {
	if x != nil && x.XActivty != nil {
		return *x.XActivty
	}
	return 0
}

func (x *GuildSummary) GetXResA() uint32 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *GuildSummary) GetXResB() uint32 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *GuildSummary) GetXResC() uint32 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *GuildSummary) GetXResD() uint32 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *GuildSummary) GetXBlackGold() uint32 {
	if x != nil && x.XBlackGold != nil {
		return *x.XBlackGold
	}
	return 0
}

// 联盟竞选信息
type GuildCampSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildId  *uint32 `protobuf:"varint,1,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`    //联盟id
	XUserId   *uint32 `protobuf:"varint,2,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`       //参选者ID
	XUserName *string `protobuf:"bytes,3,req,name=_user_name,json=UserName" json:"_user_name,omitempty"`  //参选者名称
	XAvatar   *int32  `protobuf:"varint,4,req,name=_avatar,json=Avatar" json:"_avatar,omitempty"`         //玩家头像
	XScore    *int32  `protobuf:"varint,5,req,name=_score,json=Score" json:"_score,omitempty"`            //玩家分数
	XIntro    *string `protobuf:"bytes,6,req,name=_intro,json=Intro" json:"_intro,omitempty"`             //联盟宣言
	XDataTime *int32  `protobuf:"varint,7,req,name=_data_time,json=DataTime" json:"_data_time,omitempty"` //参选时间
	XPower    *uint64 `protobuf:"varint,8,req,name=_power,json=Power" json:"_power,omitempty"`            //战力
}

func (x *GuildCampSummary) Reset() {
	*x = GuildCampSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCampSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCampSummary) ProtoMessage() {}

func (x *GuildCampSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCampSummary.ProtoReflect.Descriptor instead.
func (*GuildCampSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *GuildCampSummary) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GuildCampSummary) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildCampSummary) GetXUserName() string {
	if x != nil && x.XUserName != nil {
		return *x.XUserName
	}
	return ""
}

func (x *GuildCampSummary) GetXAvatar() int32 {
	if x != nil && x.XAvatar != nil {
		return *x.XAvatar
	}
	return 0
}

func (x *GuildCampSummary) GetXScore() int32 {
	if x != nil && x.XScore != nil {
		return *x.XScore
	}
	return 0
}

func (x *GuildCampSummary) GetXIntro() string {
	if x != nil && x.XIntro != nil {
		return *x.XIntro
	}
	return ""
}

func (x *GuildCampSummary) GetXDataTime() int32 {
	if x != nil && x.XDataTime != nil {
		return *x.XDataTime
	}
	return 0
}

func (x *GuildCampSummary) GetXPower() uint64 {
	if x != nil && x.XPower != nil {
		return *x.XPower
	}
	return 0
}

// 联盟竞选合并信息
type GuildMergeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGuildIdDes            *int32       `protobuf:"varint,1,req,name=_guild_id_des,json=GuildIdDes" json:"_guild_id_des,omitempty"`                                    //联盟合并,目标联盟id
	XGuildId               *int32       `protobuf:"varint,2,req,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`                                               //联盟合并,被合并联盟id
	XGuildName             *string      `protobuf:"bytes,3,req,name=_guild_name,json=GuildName" json:"_guild_name,omitempty"`                                          //联盟名称
	XGuildShortName        *string      `protobuf:"bytes,4,req,name=_guild_short_name,json=GuildShortName" json:"_guild_short_name,omitempty"`                         //联盟简称
	XGuildAvatar           *int32       `protobuf:"varint,5,req,name=_guild_avatar,json=GuildAvatar" json:"_guild_avatar,omitempty"`                                   //联盟头像
	XGuildLevel            *int32       `protobuf:"varint,6,req,name=_guild_level,json=GuildLevel" json:"_guild_level,omitempty"`                                      //联盟等级
	XGuildMemberCount      *int32       `protobuf:"varint,7,req,name=_guild_member_count,json=GuildMemberCount" json:"_guild_member_count,omitempty"`                  //联盟成员数量
	XGuildMemberCountLimit *int32       `protobuf:"varint,8,req,name=_guild_member_count_limit,json=GuildMemberCountLimit" json:"_guild_member_count_limit,omitempty"` //联盟成员数量上限
	XGuildSlogan           *string      `protobuf:"bytes,9,req,name=_guild_slogan,json=GuildSlogan" json:"_guild_slogan,omitempty"`                                    //联盟宣言
	XLeader                *GuildMember `protobuf:"bytes,10,req,name=_leader,json=Leader" json:"_leader,omitempty"`                                                    //盟主简要信息
	XCurrentGuild          *int32       `protobuf:"varint,11,opt,name=_current_guild,json=CurrentGuild" json:"_current_guild,omitempty"`                               //是否为当前联盟发出去的申请
}

func (x *GuildMergeSummary) Reset() {
	*x = GuildMergeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMergeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMergeSummary) ProtoMessage() {}

func (x *GuildMergeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMergeSummary.ProtoReflect.Descriptor instead.
func (*GuildMergeSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *GuildMergeSummary) GetXGuildIdDes() int32 {
	if x != nil && x.XGuildIdDes != nil {
		return *x.XGuildIdDes
	}
	return 0
}

func (x *GuildMergeSummary) GetXGuildId() int32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GuildMergeSummary) GetXGuildName() string {
	if x != nil && x.XGuildName != nil {
		return *x.XGuildName
	}
	return ""
}

func (x *GuildMergeSummary) GetXGuildShortName() string {
	if x != nil && x.XGuildShortName != nil {
		return *x.XGuildShortName
	}
	return ""
}

func (x *GuildMergeSummary) GetXGuildAvatar() int32 {
	if x != nil && x.XGuildAvatar != nil {
		return *x.XGuildAvatar
	}
	return 0
}

func (x *GuildMergeSummary) GetXGuildLevel() int32 {
	if x != nil && x.XGuildLevel != nil {
		return *x.XGuildLevel
	}
	return 0
}

func (x *GuildMergeSummary) GetXGuildMemberCount() int32 {
	if x != nil && x.XGuildMemberCount != nil {
		return *x.XGuildMemberCount
	}
	return 0
}

func (x *GuildMergeSummary) GetXGuildMemberCountLimit() int32 {
	if x != nil && x.XGuildMemberCountLimit != nil {
		return *x.XGuildMemberCountLimit
	}
	return 0
}

func (x *GuildMergeSummary) GetXGuildSlogan() string {
	if x != nil && x.XGuildSlogan != nil {
		return *x.XGuildSlogan
	}
	return ""
}

func (x *GuildMergeSummary) GetXLeader() *GuildMember {
	if x != nil {
		return x.XLeader
	}
	return nil
}

func (x *GuildMergeSummary) GetXCurrentGuild() int32 {
	if x != nil && x.XCurrentGuild != nil {
		return *x.XCurrentGuild
	}
	return 0
}

// 玩家的统计数据
type StatisticalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XBattleWin     *uint32 `protobuf:"varint,1,opt,name=_battle_win,json=BattleWin" json:"_battle_win,omitempty"`              //战斗胜利次数
	XBattleLose    *uint32 `protobuf:"varint,2,opt,name=_battle_lose,json=BattleLose" json:"_battle_lose,omitempty"`           //战斗失败次数
	XAttackWin     *uint32 `protobuf:"varint,3,opt,name=_attack_win,json=AttackWin" json:"_attack_win,omitempty"`              //进攻胜利次数
	XAttackLose    *uint32 `protobuf:"varint,4,opt,name=_attack_lose,json=AttackLose" json:"_attack_lose,omitempty"`           //进攻失败次数
	XDefendWin     *uint32 `protobuf:"varint,5,opt,name=_defend_win,json=DefendWin" json:"_defend_win,omitempty"`              //防守成功次数
	XDefendLose    *uint32 `protobuf:"varint,6,opt,name=_defend_lose,json=DefendLose" json:"_defend_lose,omitempty"`           //防守失败次数
	XWinPercentage *uint32 `protobuf:"varint,7,opt,name=_win_percentage,json=WinPercentage" json:"_win_percentage,omitempty"`  //胜率
	XKillSoldier   *uint32 `protobuf:"varint,8,opt,name=_kill_soldier,json=KillSoldier" json:"_kill_soldier,omitempty"`        //杀敌数
	XLoseSoldier   *uint32 `protobuf:"varint,9,opt,name=_lose_soldier,json=LoseSoldier" json:"_lose_soldier,omitempty"`        //损失士兵数
	XHealSoldier   *uint32 `protobuf:"varint,10,opt,name=_heal_soldier,json=HealSoldier" json:"_heal_soldier,omitempty"`       //治疗士兵数
	XScout         *uint32 `protobuf:"varint,11,opt,name=_scout,json=Scout" json:"_scout,omitempty"`                           //侦查次数
	XPrisoner      *uint32 `protobuf:"varint,12,opt,name=_prisoner,json=Prisoner" json:"_prisoner,omitempty"`                  //抓获俘虏数量
	XRuins         *uint32 `protobuf:"varint,13,opt,name=_ruins,json=Ruins" json:"_ruins,omitempty"`                           //探险次数
	XKillMonster   *uint32 `protobuf:"varint,14,opt,name=_kill_monster,json=KillMonster" json:"_kill_monster,omitempty"`       //击杀中立怪物数量
	XKillBoss      *uint32 `protobuf:"varint,15,opt,name=_kill_boss,json=KillBoss" json:"_kill_boss,omitempty"`                //击杀boss的数量
	XKillGeneral   *uint32 `protobuf:"varint,16,opt,name=_kill_general,json=KillGeneral" json:"_kill_general,omitempty"`       //击杀将军的数量
	XGeneralKilled *uint32 `protobuf:"varint,17,opt,name=_general_killed,json=GeneralKilled" json:"_general_killed,omitempty"` //被击杀将军的数量
}

func (x *StatisticalData) Reset() {
	*x = StatisticalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticalData) ProtoMessage() {}

func (x *StatisticalData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticalData.ProtoReflect.Descriptor instead.
func (*StatisticalData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *StatisticalData) GetXBattleWin() uint32 {
	if x != nil && x.XBattleWin != nil {
		return *x.XBattleWin
	}
	return 0
}

func (x *StatisticalData) GetXBattleLose() uint32 {
	if x != nil && x.XBattleLose != nil {
		return *x.XBattleLose
	}
	return 0
}

func (x *StatisticalData) GetXAttackWin() uint32 {
	if x != nil && x.XAttackWin != nil {
		return *x.XAttackWin
	}
	return 0
}

func (x *StatisticalData) GetXAttackLose() uint32 {
	if x != nil && x.XAttackLose != nil {
		return *x.XAttackLose
	}
	return 0
}

func (x *StatisticalData) GetXDefendWin() uint32 {
	if x != nil && x.XDefendWin != nil {
		return *x.XDefendWin
	}
	return 0
}

func (x *StatisticalData) GetXDefendLose() uint32 {
	if x != nil && x.XDefendLose != nil {
		return *x.XDefendLose
	}
	return 0
}

func (x *StatisticalData) GetXWinPercentage() uint32 {
	if x != nil && x.XWinPercentage != nil {
		return *x.XWinPercentage
	}
	return 0
}

func (x *StatisticalData) GetXKillSoldier() uint32 {
	if x != nil && x.XKillSoldier != nil {
		return *x.XKillSoldier
	}
	return 0
}

func (x *StatisticalData) GetXLoseSoldier() uint32 {
	if x != nil && x.XLoseSoldier != nil {
		return *x.XLoseSoldier
	}
	return 0
}

func (x *StatisticalData) GetXHealSoldier() uint32 {
	if x != nil && x.XHealSoldier != nil {
		return *x.XHealSoldier
	}
	return 0
}

func (x *StatisticalData) GetXScout() uint32 {
	if x != nil && x.XScout != nil {
		return *x.XScout
	}
	return 0
}

func (x *StatisticalData) GetXPrisoner() uint32 {
	if x != nil && x.XPrisoner != nil {
		return *x.XPrisoner
	}
	return 0
}

func (x *StatisticalData) GetXRuins() uint32 {
	if x != nil && x.XRuins != nil {
		return *x.XRuins
	}
	return 0
}

func (x *StatisticalData) GetXKillMonster() uint32 {
	if x != nil && x.XKillMonster != nil {
		return *x.XKillMonster
	}
	return 0
}

func (x *StatisticalData) GetXKillBoss() uint32 {
	if x != nil && x.XKillBoss != nil {
		return *x.XKillBoss
	}
	return 0
}

func (x *StatisticalData) GetXKillGeneral() uint32 {
	if x != nil && x.XKillGeneral != nil {
		return *x.XKillGeneral
	}
	return 0
}

func (x *StatisticalData) GetXGeneralKilled() uint32 {
	if x != nil && x.XGeneralKilled != nil {
		return *x.XGeneralKilled
	}
	return 0
}

type GeneralSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId      *int64 `protobuf:"varint,1,opt,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                  //将军服务器存储ID
	XFamousConfigId *int32 `protobuf:"varint,2,opt,name=_famous_config_id,json=FamousConfigId" json:"_famous_config_id,omitempty"` //配置ID，现在所有将军都是名将
	XStarLevel      *int32 `protobuf:"varint,3,opt,name=_star_level,json=StarLevel,def=0" json:"_star_level,omitempty"`            //将军的星级
	XType           *int32 `protobuf:"varint,4,opt,name=_type,json=Type" json:"_type,omitempty"`                                   //1-主将，2-副将
	XLevel          *int32 `protobuf:"varint,5,opt,name=_level,json=Level" json:"_level,omitempty"`                                //将军等级
	XPetTypeId      *int32 `protobuf:"varint,6,opt,name=_pet_type_id,json=PetTypeId" json:"_pet_type_id,omitempty"`                // 配置表战宠ID
}

// Default values for GeneralSummary fields.
const (
	Default_GeneralSummary_XStarLevel = int32(0)
)

func (x *GeneralSummary) Reset() {
	*x = GeneralSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSummary) ProtoMessage() {}

func (x *GeneralSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSummary.ProtoReflect.Descriptor instead.
func (*GeneralSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *GeneralSummary) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *GeneralSummary) GetXFamousConfigId() int32 {
	if x != nil && x.XFamousConfigId != nil {
		return *x.XFamousConfigId
	}
	return 0
}

func (x *GeneralSummary) GetXStarLevel() int32 {
	if x != nil && x.XStarLevel != nil {
		return *x.XStarLevel
	}
	return Default_GeneralSummary_XStarLevel
}

func (x *GeneralSummary) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *GeneralSummary) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *GeneralSummary) GetXPetTypeId() int32 {
	if x != nil && x.XPetTypeId != nil {
		return *x.XPetTypeId
	}
	return 0
}

// 将军信息
type General struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGeneralId       *int64              `protobuf:"varint,1,req,name=_general_id,json=GeneralId" json:"_general_id,omitempty"`                           //将军服务器存储ID
	XQuality         *GeneralQualityType `protobuf:"varint,2,req,name=_quality,json=Quality,enum=Msg.GeneralQualityType,def=1" json:"_quality,omitempty"` //将军品质
	XRank            *int32              `protobuf:"varint,3,req,name=_rank,json=Rank,def=1" json:"_rank,omitempty"`                                      //将军等级
	XNameKey         *string             `protobuf:"bytes,4,opt,name=_name_key,json=NameKey" json:"_name_key,omitempty"`                                  //将军名字多语言key，将军名字库
	XCommand         *int32              `protobuf:"varint,5,opt,name=_command,json=Command" json:"_command,omitempty"`                                   //将军统帅属性值
	XAttack          *int32              `protobuf:"varint,6,opt,name=_attack,json=Attack" json:"_attack,omitempty"`                                      //将军攻击属性值
	XDefense         *int32              `protobuf:"varint,7,opt,name=_defense,json=Defense" json:"_defense,omitempty"`                                   //将军防御属性值
	XPolity          *int32              `protobuf:"varint,8,opt,name=_polity,json=Polity" json:"_polity,omitempty"`                                      //将军政治属性值
	XEquips          []*WearEquip        `protobuf:"bytes,9,rep,name=_equips,json=Equips" json:"_equips,omitempty"`                                       //将军的装备
	XResId           *int32              `protobuf:"varint,10,opt,name=_res_id,json=ResId" json:"_res_id,omitempty"`                                      //将军资源ID，将军资源库,普通将军才有，名称资源不走这个
	XStarLevel       *int32              `protobuf:"varint,11,req,name=_star_level,json=StarLevel,def=0" json:"_star_level,omitempty"`                    //将军的星级
	XFamousConfigId  *int32              `protobuf:"varint,12,opt,name=_famous_config_id,json=FamousConfigId" json:"_famous_config_id,omitempty"`         //名将配置ID, 0:普通将领
	XDesKey          *string             `protobuf:"bytes,13,opt,name=_des_key,json=DesKey" json:"_des_key,omitempty"`                                    //将军描述多语言key
	XPower           *int32              `protobuf:"varint,14,opt,name=_power,json=Power" json:"_power,omitempty"`                                        //将军战力
	XCommandBuff     *int32              `protobuf:"varint,15,opt,name=_command_buff,json=CommandBuff" json:"_command_buff,omitempty"`                    //统率洗练加成值
	XAttackBuff      *int32              `protobuf:"varint,16,opt,name=_attack_buff,json=AttackBuff" json:"_attack_buff,omitempty"`                       //攻击洗练加成值
	XDefenseBuff     *int32              `protobuf:"varint,17,opt,name=_defense_buff,json=DefenseBuff" json:"_defense_buff,omitempty"`                    //防御洗练加成值
	XPolityBuff      *int32              `protobuf:"varint,18,opt,name=_polity_buff,json=PolityBuff" json:"_polity_buff,omitempty"`                       //政治洗练加成值
	XBaptizeItem     *GeneralBaptizeItem `protobuf:"bytes,19,opt,name=_baptize_item,json=BaptizeItem" json:"_baptize_item,omitempty"`                     //用户未确认的洗练数据
	XExp             *int64              `protobuf:"varint,20,opt,name=_exp,json=Exp" json:"_exp,omitempty"`                                              //将军经验
	XWin             *int32              `protobuf:"varint,21,opt,name=_win,json=Win" json:"_win,omitempty"`                                              //胜利
	XLose            *int32              `protobuf:"varint,22,opt,name=_lose,json=Lose" json:"_lose,omitempty"`                                           //失败
	XSkillList       []int32             `protobuf:"varint,23,rep,name=_skill_list,json=SkillList" json:"_skill_list,omitempty"`                          //拥有技能list
	XCommandGrowth   *int32              `protobuf:"varint,24,opt,name=_command_growth,json=CommandGrowth" json:"_command_growth,omitempty"`              //统帅成长*100
	XAttackGrowth    *int32              `protobuf:"varint,25,opt,name=_attack_growth,json=AttackGrowth" json:"_attack_growth,omitempty"`                 //攻击成长*100
	XDefenseGrowth   *int32              `protobuf:"varint,26,opt,name=_defense_growth,json=DefenseGrowth" json:"_defense_growth,omitempty"`              //防御成长*100
	XPolityGrowth    *int32              `protobuf:"varint,27,opt,name=_polity_growth,json=PolityGrowth" json:"_polity_growth,omitempty"`                 //政治成长*100
	XOwner           *string             `protobuf:"bytes,28,opt,name=_owner,json=Owner" json:"_owner,omitempty"`                                         //拥有者
	XCaptor          *string             `protobuf:"bytes,29,opt,name=_captor,json=Captor" json:"_captor,omitempty"`                                      //俘虏者
	XIsDead          *int32              `protobuf:"varint,30,opt,name=_is_dead,json=IsDead,def=1" json:"_is_dead,omitempty"`                             //是否死亡(0:未死 1:死亡)
	XImprisonedTime  *int32              `protobuf:"varint,31,opt,name=_imprisoned_time,json=ImprisonedTime" json:"_imprisoned_time,omitempty"`           //俘获开始时间
	XAutoReleaseTime *int32              `protobuf:"varint,32,opt,name=_auto_releaseTime,json=AutoReleaseTime" json:"_auto_releaseTime,omitempty"`        //自动释放时间
	XFeature         []*GeneralFeature   `protobuf:"bytes,33,rep,name=_feature,json=Feature" json:"_feature,omitempty"`                                   //将军特性
	XPetId           *int32              `protobuf:"varint,34,opt,name=_pet_id,json=PetId" json:"_pet_id,omitempty"`                                      // 绑定的战宠id
	XData            *GeneralData        `protobuf:"bytes,35,opt,name=_data,json=Data" json:"_data,omitempty"`                                            // 扩展数据
	XTalentPoint     *int64              `protobuf:"varint,36,opt,name=_talent_point,json=TalentPoint" json:"_talent_point,omitempty"`                    // 将军天赋点
}

// Default values for General fields.
const (
	Default_General_XQuality   = GeneralQualityType_white_general
	Default_General_XRank      = int32(1)
	Default_General_XStarLevel = int32(0)
	Default_General_XIsDead    = int32(1)
)

func (x *General) Reset() {
	*x = General{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *General) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*General) ProtoMessage() {}

func (x *General) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use General.ProtoReflect.Descriptor instead.
func (*General) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *General) GetXGeneralId() int64 {
	if x != nil && x.XGeneralId != nil {
		return *x.XGeneralId
	}
	return 0
}

func (x *General) GetXQuality() GeneralQualityType {
	if x != nil && x.XQuality != nil {
		return *x.XQuality
	}
	return Default_General_XQuality
}

func (x *General) GetXRank() int32 {
	if x != nil && x.XRank != nil {
		return *x.XRank
	}
	return Default_General_XRank
}

func (x *General) GetXNameKey() string {
	if x != nil && x.XNameKey != nil {
		return *x.XNameKey
	}
	return ""
}

func (x *General) GetXCommand() int32 {
	if x != nil && x.XCommand != nil {
		return *x.XCommand
	}
	return 0
}

func (x *General) GetXAttack() int32 {
	if x != nil && x.XAttack != nil {
		return *x.XAttack
	}
	return 0
}

func (x *General) GetXDefense() int32 {
	if x != nil && x.XDefense != nil {
		return *x.XDefense
	}
	return 0
}

func (x *General) GetXPolity() int32 {
	if x != nil && x.XPolity != nil {
		return *x.XPolity
	}
	return 0
}

func (x *General) GetXEquips() []*WearEquip {
	if x != nil {
		return x.XEquips
	}
	return nil
}

func (x *General) GetXResId() int32 {
	if x != nil && x.XResId != nil {
		return *x.XResId
	}
	return 0
}

func (x *General) GetXStarLevel() int32 {
	if x != nil && x.XStarLevel != nil {
		return *x.XStarLevel
	}
	return Default_General_XStarLevel
}

func (x *General) GetXFamousConfigId() int32 {
	if x != nil && x.XFamousConfigId != nil {
		return *x.XFamousConfigId
	}
	return 0
}

func (x *General) GetXDesKey() string {
	if x != nil && x.XDesKey != nil {
		return *x.XDesKey
	}
	return ""
}

func (x *General) GetXPower() int32 {
	if x != nil && x.XPower != nil {
		return *x.XPower
	}
	return 0
}

func (x *General) GetXCommandBuff() int32 {
	if x != nil && x.XCommandBuff != nil {
		return *x.XCommandBuff
	}
	return 0
}

func (x *General) GetXAttackBuff() int32 {
	if x != nil && x.XAttackBuff != nil {
		return *x.XAttackBuff
	}
	return 0
}

func (x *General) GetXDefenseBuff() int32 {
	if x != nil && x.XDefenseBuff != nil {
		return *x.XDefenseBuff
	}
	return 0
}

func (x *General) GetXPolityBuff() int32 {
	if x != nil && x.XPolityBuff != nil {
		return *x.XPolityBuff
	}
	return 0
}

func (x *General) GetXBaptizeItem() *GeneralBaptizeItem {
	if x != nil {
		return x.XBaptizeItem
	}
	return nil
}

func (x *General) GetXExp() int64 {
	if x != nil && x.XExp != nil {
		return *x.XExp
	}
	return 0
}

func (x *General) GetXWin() int32 {
	if x != nil && x.XWin != nil {
		return *x.XWin
	}
	return 0
}

func (x *General) GetXLose() int32 {
	if x != nil && x.XLose != nil {
		return *x.XLose
	}
	return 0
}

func (x *General) GetXSkillList() []int32 {
	if x != nil {
		return x.XSkillList
	}
	return nil
}

func (x *General) GetXCommandGrowth() int32 {
	if x != nil && x.XCommandGrowth != nil {
		return *x.XCommandGrowth
	}
	return 0
}

func (x *General) GetXAttackGrowth() int32 {
	if x != nil && x.XAttackGrowth != nil {
		return *x.XAttackGrowth
	}
	return 0
}

func (x *General) GetXDefenseGrowth() int32 {
	if x != nil && x.XDefenseGrowth != nil {
		return *x.XDefenseGrowth
	}
	return 0
}

func (x *General) GetXPolityGrowth() int32 {
	if x != nil && x.XPolityGrowth != nil {
		return *x.XPolityGrowth
	}
	return 0
}

func (x *General) GetXOwner() string {
	if x != nil && x.XOwner != nil {
		return *x.XOwner
	}
	return ""
}

func (x *General) GetXCaptor() string {
	if x != nil && x.XCaptor != nil {
		return *x.XCaptor
	}
	return ""
}

func (x *General) GetXIsDead() int32 {
	if x != nil && x.XIsDead != nil {
		return *x.XIsDead
	}
	return Default_General_XIsDead
}

func (x *General) GetXImprisonedTime() int32 {
	if x != nil && x.XImprisonedTime != nil {
		return *x.XImprisonedTime
	}
	return 0
}

func (x *General) GetXAutoReleaseTime() int32 {
	if x != nil && x.XAutoReleaseTime != nil {
		return *x.XAutoReleaseTime
	}
	return 0
}

func (x *General) GetXFeature() []*GeneralFeature {
	if x != nil {
		return x.XFeature
	}
	return nil
}

func (x *General) GetXPetId() int32 {
	if x != nil && x.XPetId != nil {
		return *x.XPetId
	}
	return 0
}

func (x *General) GetXData() *GeneralData {
	if x != nil {
		return x.XData
	}
	return nil
}

func (x *General) GetXTalentPoint() int64 {
	if x != nil && x.XTalentPoint != nil {
		return *x.XTalentPoint
	}
	return 0
}

// 将军特性
type GeneralFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32 `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`          //特性Id
	XLevel *int32 `protobuf:"varint,2,opt,name=_level,json=Level" json:"_level,omitempty"` //特性等级
	XExp   *int32 `protobuf:"varint,3,opt,name=_exp,json=Exp" json:"_exp,omitempty"`       //当前等级经验值
}

func (x *GeneralFeature) Reset() {
	*x = GeneralFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralFeature) ProtoMessage() {}

func (x *GeneralFeature) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralFeature.ProtoReflect.Descriptor instead.
func (*GeneralFeature) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *GeneralFeature) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GeneralFeature) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *GeneralFeature) GetXExp() int32 {
	if x != nil && x.XExp != nil {
		return *x.XExp
	}
	return 0
}

// 将军洗练结果
type GeneralBaptizeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommandBuff *int32 `protobuf:"varint,1,req,name=_command_buff,json=CommandBuff" json:"_command_buff,omitempty"` //统率洗练加成值
	XAttackBuff  *int32 `protobuf:"varint,2,req,name=_attack_buff,json=AttackBuff" json:"_attack_buff,omitempty"`    //攻击洗练加成值
	XDefenseBuff *int32 `protobuf:"varint,3,req,name=_defense_buff,json=DefenseBuff" json:"_defense_buff,omitempty"` //防御洗练加成值
	XPolityBuff  *int32 `protobuf:"varint,4,req,name=_polity_buff,json=PolityBuff" json:"_polity_buff,omitempty"`    //政治洗练加成值
}

func (x *GeneralBaptizeItem) Reset() {
	*x = GeneralBaptizeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralBaptizeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralBaptizeItem) ProtoMessage() {}

func (x *GeneralBaptizeItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralBaptizeItem.ProtoReflect.Descriptor instead.
func (*GeneralBaptizeItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *GeneralBaptizeItem) GetXCommandBuff() int32 {
	if x != nil && x.XCommandBuff != nil {
		return *x.XCommandBuff
	}
	return 0
}

func (x *GeneralBaptizeItem) GetXAttackBuff() int32 {
	if x != nil && x.XAttackBuff != nil {
		return *x.XAttackBuff
	}
	return 0
}

func (x *GeneralBaptizeItem) GetXDefenseBuff() int32 {
	if x != nil && x.XDefenseBuff != nil {
		return *x.XDefenseBuff
	}
	return 0
}

func (x *GeneralBaptizeItem) GetXPolityBuff() int32 {
	if x != nil && x.XPolityBuff != nil {
		return *x.XPolityBuff
	}
	return 0
}

// 将军 - 扩展数据
type GeneralData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTalentList   []*HeroTalent `protobuf:"bytes,1,rep,name=_talent_list,json=TalentList" json:"_talent_list,omitempty"`          //将军天赋
	XFpsEquipStar *int32        `protobuf:"varint,2,opt,name=_fps_equip_star,json=FpsEquipStar" json:"_fps_equip_star,omitempty"` // fps绑定武器的星级
}

func (x *GeneralData) Reset() {
	*x = GeneralData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralData) ProtoMessage() {}

func (x *GeneralData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralData.ProtoReflect.Descriptor instead.
func (*GeneralData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

func (x *GeneralData) GetXTalentList() []*HeroTalent {
	if x != nil {
		return x.XTalentList
	}
	return nil
}

func (x *GeneralData) GetXFpsEquipStar() int32 {
	if x != nil && x.XFpsEquipStar != nil {
		return *x.XFpsEquipStar
	}
	return 0
}

//王城奖励
type KingAwardRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemID *int32       `protobuf:"varint,1,opt,name=itemID" json:"itemID,omitempty"` //封赏礼包
	User   *UserSummary `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`      //封赏对象
	Time   *int32       `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`     //封赏时间
}

func (x *KingAwardRecord) Reset() {
	*x = KingAwardRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingAwardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingAwardRecord) ProtoMessage() {}

func (x *KingAwardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingAwardRecord.ProtoReflect.Descriptor instead.
func (*KingAwardRecord) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

func (x *KingAwardRecord) GetItemID() int32 {
	if x != nil && x.ItemID != nil {
		return *x.ItemID
	}
	return 0
}

func (x *KingAwardRecord) GetUser() *UserSummary {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *KingAwardRecord) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//新接口
//王城相关信息
type KindomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XProtectStartTime         *int32                `protobuf:"varint,1,opt,name=_protect_start_time,json=ProtectStartTime" json:"_protect_start_time,omitempty"`                              //王城保护开始时间
	XWarStartTime             *int32                `protobuf:"varint,2,opt,name=_war_start_time,json=WarStartTime" json:"_war_start_time,omitempty"`                                          //争夺开始时间
	XOccupyStartTime          *int32                `protobuf:"varint,3,opt,name=_occupy_start_time,json=OccupyStartTime" json:"_occupy_start_time,omitempty"`                                 //占领开始时间
	XOccupier                 *UserSummary          `protobuf:"bytes,4,opt,name=_occupier,json=Occupier" json:"_occupier,omitempty"`                                                           //当前占领者
	XKing                     *UserSummary          `protobuf:"bytes,5,opt,name=_king,json=King" json:"_king,omitempty"`                                                                       //当前国王
	XKindomName               *string               `protobuf:"bytes,6,opt,name=_kindom_name,json=KindomName" json:"_kindom_name,omitempty"`                                                   //国家名字
	XCountryCode              *int32                `protobuf:"varint,7,opt,name=_country_code,json=CountryCode" json:"_country_code,omitempty"`                                               //国家码
	XLan                      *LanType              `protobuf:"varint,8,opt,name=_lan,json=Lan,enum=Msg.LanType,def=10" json:"_lan,omitempty"`                                                 //国家语言
	XServerId                 *int32                `protobuf:"varint,9,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`                                                        //服务器id
	XKingTime                 *int32                `protobuf:"varint,10,opt,name=_king_time,json=KingTime" json:"_king_time,omitempty"`                                                       //争夺结束后，成为国王的时间
	XKingdomLeftTroopNumLimit *int32                `protobuf:"varint,11,opt,name=_kingdom_left_troop_num_limit,json=KingdomLeftTroopNumLimit" json:"_kingdom_left_troop_num_limit,omitempty"` //王城剩余出兵上限，已当前占领者或者国王的上限为计算标准
	Awards                    []*KingAwardRecord    `protobuf:"bytes,12,rep,name=awards" json:"awards,omitempty"`                                                                              //封赏信息
	XCastleId                 *int32                `protobuf:"varint,13,opt,name=_castle_id,json=CastleId,def=1" json:"_castle_id,omitempty"`                                                 //王城形象
	XServerName               *string               `protobuf:"bytes,14,opt,name=_server_name,json=ServerName" json:"_server_name,omitempty"`                                                  //服务器名字
	XPoint                    *uint64               `protobuf:"varint,15,opt,name=_point,json=Point" json:"_point,omitempty"`                                                                  //跨服战积分
	XServerStartTime          *int32                `protobuf:"varint,16,opt,name=_server_start_time,json=ServerStartTime" json:"_server_start_time,omitempty"`                                //服务器开启时间
	XContainNpc               *int32                `protobuf:"varint,17,opt,name=_contain_npc,json=ContainNpc" json:"_contain_npc,omitempty"`                                                 //是否NPC占领（0：无 1：有）
	XMergeId                  *int32                `protobuf:"varint,18,opt,name=_merge_id,json=MergeId" json:"_merge_id,omitempty"`                                                          //合并的服务器id
	XOriginalId               *int32                `protobuf:"varint,19,opt,name=_original_id,json=OriginalId" json:"_original_id,omitempty"`                                                 //客户端用
	XTempleBuildingInfo       []*TempleBuildingInfo `protobuf:"bytes,20,rep,name=_temple_building_info,json=TempleBuildingInfo" json:"_temple_building_info,omitempty"`                        //王城战建筑信息
	XPointStartTime           *int32                `protobuf:"varint,21,opt,name=_point_start_time,json=PointStartTime" json:"_point_start_time,omitempty"`                                   //积分计算开始时间
	XPointOccupied            *int32                `protobuf:"varint,22,opt,name=_point_occupied,json=PointOccupied" json:"_point_occupied,omitempty"`                                        //初始积分（以出征战力为准）
}

// Default values for KindomInfo fields.
const (
	Default_KindomInfo_XLan      = LanType_English
	Default_KindomInfo_XCastleId = int32(1)
)

func (x *KindomInfo) Reset() {
	*x = KindomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindomInfo) ProtoMessage() {}

func (x *KindomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindomInfo.ProtoReflect.Descriptor instead.
func (*KindomInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

func (x *KindomInfo) GetXProtectStartTime() int32 {
	if x != nil && x.XProtectStartTime != nil {
		return *x.XProtectStartTime
	}
	return 0
}

func (x *KindomInfo) GetXWarStartTime() int32 {
	if x != nil && x.XWarStartTime != nil {
		return *x.XWarStartTime
	}
	return 0
}

func (x *KindomInfo) GetXOccupyStartTime() int32 {
	if x != nil && x.XOccupyStartTime != nil {
		return *x.XOccupyStartTime
	}
	return 0
}

func (x *KindomInfo) GetXOccupier() *UserSummary {
	if x != nil {
		return x.XOccupier
	}
	return nil
}

func (x *KindomInfo) GetXKing() *UserSummary {
	if x != nil {
		return x.XKing
	}
	return nil
}

func (x *KindomInfo) GetXKindomName() string {
	if x != nil && x.XKindomName != nil {
		return *x.XKindomName
	}
	return ""
}

func (x *KindomInfo) GetXCountryCode() int32 {
	if x != nil && x.XCountryCode != nil {
		return *x.XCountryCode
	}
	return 0
}

func (x *KindomInfo) GetXLan() LanType {
	if x != nil && x.XLan != nil {
		return *x.XLan
	}
	return Default_KindomInfo_XLan
}

func (x *KindomInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *KindomInfo) GetXKingTime() int32 {
	if x != nil && x.XKingTime != nil {
		return *x.XKingTime
	}
	return 0
}

func (x *KindomInfo) GetXKingdomLeftTroopNumLimit() int32 {
	if x != nil && x.XKingdomLeftTroopNumLimit != nil {
		return *x.XKingdomLeftTroopNumLimit
	}
	return 0
}

func (x *KindomInfo) GetAwards() []*KingAwardRecord {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *KindomInfo) GetXCastleId() int32 {
	if x != nil && x.XCastleId != nil {
		return *x.XCastleId
	}
	return Default_KindomInfo_XCastleId
}

func (x *KindomInfo) GetXServerName() string {
	if x != nil && x.XServerName != nil {
		return *x.XServerName
	}
	return ""
}

func (x *KindomInfo) GetXPoint() uint64 {
	if x != nil && x.XPoint != nil {
		return *x.XPoint
	}
	return 0
}

func (x *KindomInfo) GetXServerStartTime() int32 {
	if x != nil && x.XServerStartTime != nil {
		return *x.XServerStartTime
	}
	return 0
}

func (x *KindomInfo) GetXContainNpc() int32 {
	if x != nil && x.XContainNpc != nil {
		return *x.XContainNpc
	}
	return 0
}

func (x *KindomInfo) GetXMergeId() int32 {
	if x != nil && x.XMergeId != nil {
		return *x.XMergeId
	}
	return 0
}

func (x *KindomInfo) GetXOriginalId() int32 {
	if x != nil && x.XOriginalId != nil {
		return *x.XOriginalId
	}
	return 0
}

func (x *KindomInfo) GetXTempleBuildingInfo() []*TempleBuildingInfo {
	if x != nil {
		return x.XTempleBuildingInfo
	}
	return nil
}

func (x *KindomInfo) GetXPointStartTime() int32 {
	if x != nil && x.XPointStartTime != nil {
		return *x.XPointStartTime
	}
	return 0
}

func (x *KindomInfo) GetXPointOccupied() int32 {
	if x != nil && x.XPointOccupied != nil {
		return *x.XPointOccupied
	}
	return 0
}

//王城战建筑信息
type TempleBuildingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWx              *int32       `protobuf:"varint,1,req,name=_wx,json=Wx" json:"_wx,omitempty"`                                            //地图块所在的横坐标
	XWy              *int32       `protobuf:"varint,2,req,name=_wy,json=Wy" json:"_wy,omitempty"`                                            //地图块所在的纵坐标
	XType            *MapinfoType `protobuf:"varint,3,req,name=_type,json=Type,enum=Msg.MapinfoType" json:"_type,omitempty"`                 //地图类型
	XOccupyStartTime *int32       `protobuf:"varint,4,opt,name=_occupy_start_time,json=OccupyStartTime" json:"_occupy_start_time,omitempty"` //开始占领时间
	XOccupyUser      *UserSummary `protobuf:"bytes,5,opt,name=_occupy_user,json=OccupyUser" json:"_occupy_user,omitempty"`                   //占领者
	XOccupyTotalTime *int32       `protobuf:"varint,6,opt,name=_occupy_total_time,json=OccupyTotalTime" json:"_occupy_total_time,omitempty"` //跨服战建筑累计占领时间
	XPointStartTime  *int32       `protobuf:"varint,7,opt,name=_point_start_time,json=PointStartTime" json:"_point_start_time,omitempty"`    //积分计算开始时间
	XPoint           *int32       `protobuf:"varint,8,opt,name=_point,json=Point" json:"_point,omitempty"`                                   //初始积分（以出征战力为准，低于下限时神庙的占领时间不累积）
	XStatus          *int32       `protobuf:"varint,9,opt,name=_status,json=Status" json:"_status,omitempty"`                                //状态 0保护状态 1争夺状态
	XId              *int32       `protobuf:"varint,10,opt,name=_id,json=Id" json:"_id,omitempty"`                                           //配置表中的id
}

func (x *TempleBuildingInfo) Reset() {
	*x = TempleBuildingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempleBuildingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempleBuildingInfo) ProtoMessage() {}

func (x *TempleBuildingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempleBuildingInfo.ProtoReflect.Descriptor instead.
func (*TempleBuildingInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

func (x *TempleBuildingInfo) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *TempleBuildingInfo) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *TempleBuildingInfo) GetXType() MapinfoType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return MapinfoType_mapinfo_field
}

func (x *TempleBuildingInfo) GetXOccupyStartTime() int32 {
	if x != nil && x.XOccupyStartTime != nil {
		return *x.XOccupyStartTime
	}
	return 0
}

func (x *TempleBuildingInfo) GetXOccupyUser() *UserSummary {
	if x != nil {
		return x.XOccupyUser
	}
	return nil
}

func (x *TempleBuildingInfo) GetXOccupyTotalTime() int32 {
	if x != nil && x.XOccupyTotalTime != nil {
		return *x.XOccupyTotalTime
	}
	return 0
}

func (x *TempleBuildingInfo) GetXPointStartTime() int32 {
	if x != nil && x.XPointStartTime != nil {
		return *x.XPointStartTime
	}
	return 0
}

func (x *TempleBuildingInfo) GetXPoint() int32 {
	if x != nil && x.XPoint != nil {
		return *x.XPoint
	}
	return 0
}

func (x *TempleBuildingInfo) GetXStatus() int32 {
	if x != nil && x.XStatus != nil {
		return *x.XStatus
	}
	return 0
}

func (x *TempleBuildingInfo) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

//国王的信息
type KingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUser        *UserSummary `protobuf:"bytes,1,req,name=_user,json=User" json:"_user,omitempty"`                        //国王的user对象
	XKingTime    *int32       `protobuf:"varint,2,req,name=_king_time,json=KingTime" json:"_king_time,omitempty"`         //争夺结束后，成为国王的时间
	XCountryName *string      `protobuf:"bytes,3,opt,name=_country_name,json=CountryName" json:"_country_name,omitempty"` //成为国王时的国家名字
}

func (x *KingInfo) Reset() {
	*x = KingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KingInfo) ProtoMessage() {}

func (x *KingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KingInfo.ProtoReflect.Descriptor instead.
func (*KingInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

func (x *KingInfo) GetXUser() *UserSummary {
	if x != nil {
		return x.XUser
	}
	return nil
}

func (x *KingInfo) GetXKingTime() int32 {
	if x != nil && x.XKingTime != nil {
		return *x.XKingTime
	}
	return 0
}

func (x *KingInfo) GetXCountryName() string {
	if x != nil && x.XCountryName != nil {
		return *x.XCountryName
	}
	return ""
}

//buff信息
type BuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *int32   `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`
	XClientValue *float32 `protobuf:"fixed32,2,opt,name=_client_value,json=ClientValue" json:"_client_value,omitempty"`
	XServerValue *float32 `protobuf:"fixed32,3,opt,name=_server_value,json=ServerValue" json:"_server_value,omitempty"`
	XName        *string  `protobuf:"bytes,4,opt,name=_name,json=Name" json:"_name,omitempty"`
	XClientFix   *float32 `protobuf:"fixed32,5,opt,name=_client_fix,json=ClientFix" json:"_client_fix,omitempty"`
	XServerFix   *float32 `protobuf:"fixed32,6,opt,name=_server_fix,json=ServerFix" json:"_server_fix,omitempty"`
}

func (x *BuffInfo) Reset() {
	*x = BuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfo) ProtoMessage() {}

func (x *BuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfo.ProtoReflect.Descriptor instead.
func (*BuffInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

func (x *BuffInfo) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *BuffInfo) GetXClientValue() float32 {
	if x != nil && x.XClientValue != nil {
		return *x.XClientValue
	}
	return 0
}

func (x *BuffInfo) GetXServerValue() float32 {
	if x != nil && x.XServerValue != nil {
		return *x.XServerValue
	}
	return 0
}

func (x *BuffInfo) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *BuffInfo) GetXClientFix() float32 {
	if x != nil && x.XClientFix != nil {
		return *x.XClientFix
	}
	return 0
}

func (x *BuffInfo) GetXServerFix() float32 {
	if x != nil && x.XServerFix != nil {
		return *x.XServerFix
	}
	return 0
}

//buff信息
type BuffInfoNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32   `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`           //配置id
	XType  *int32   `protobuf:"varint,2,opt,name=_type,json=Type" json:"_type,omitempty"`     //1-百分比，2-绝对值
	XValue *float32 `protobuf:"fixed32,3,opt,name=_value,json=Value" json:"_value,omitempty"` //buff值
}

func (x *BuffInfoNew) Reset() {
	*x = BuffInfoNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffInfoNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfoNew) ProtoMessage() {}

func (x *BuffInfoNew) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfoNew.ProtoReflect.Descriptor instead.
func (*BuffInfoNew) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

func (x *BuffInfoNew) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *BuffInfoNew) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *BuffInfoNew) GetXValue() float32 {
	if x != nil && x.XValue != nil {
		return *x.XValue
	}
	return 0
}

//轮盘抽中高品质物品信息
type RotaryGoodItemRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XVip  *int32  `protobuf:"varint,1,opt,name=_vip,json=Vip,def=-1" json:"_vip,omitempty"` //vip等级
	XName *string `protobuf:"bytes,2,opt,name=_name,json=Name" json:"_name,omitempty"`      //玩家名字
	XItem *int32  `protobuf:"varint,3,opt,name=_item,json=Item" json:"_item,omitempty"`     //物品Id
}

// Default values for RotaryGoodItemRecord fields.
const (
	Default_RotaryGoodItemRecord_XVip = int32(-1)
)

func (x *RotaryGoodItemRecord) Reset() {
	*x = RotaryGoodItemRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotaryGoodItemRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotaryGoodItemRecord) ProtoMessage() {}

func (x *RotaryGoodItemRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotaryGoodItemRecord.ProtoReflect.Descriptor instead.
func (*RotaryGoodItemRecord) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39}
}

func (x *RotaryGoodItemRecord) GetXVip() int32 {
	if x != nil && x.XVip != nil {
		return *x.XVip
	}
	return Default_RotaryGoodItemRecord_XVip
}

func (x *RotaryGoodItemRecord) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *RotaryGoodItemRecord) GetXItem() int32 {
	if x != nil && x.XItem != nil {
		return *x.XItem
	}
	return 0
}

//收藏坐标信息
type FavoriteCoordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XServerId *int32  `protobuf:"varint,1,opt,name=_serverId,json=ServerId" json:"_serverId,omitempty"`
	XX        *int32  `protobuf:"varint,2,opt,name=_x,json=X" json:"_x,omitempty"`
	XY        *int32  `protobuf:"varint,3,opt,name=_y,json=Y" json:"_y,omitempty"`
	XInfo     *string `protobuf:"bytes,4,opt,name=_info,json=Info" json:"_info,omitempty"`
	XSignId   *int32  `protobuf:"varint,5,opt,name=_sign_id,json=SignId" json:"_sign_id,omitempty"` //联盟标记专用 唯一id
}

func (x *FavoriteCoordInfo) Reset() {
	*x = FavoriteCoordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteCoordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteCoordInfo) ProtoMessage() {}

func (x *FavoriteCoordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteCoordInfo.ProtoReflect.Descriptor instead.
func (*FavoriteCoordInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{40}
}

func (x *FavoriteCoordInfo) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *FavoriteCoordInfo) GetXX() int32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *FavoriteCoordInfo) GetXY() int32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

func (x *FavoriteCoordInfo) GetXInfo() string {
	if x != nil && x.XInfo != nil {
		return *x.XInfo
	}
	return ""
}

func (x *FavoriteCoordInfo) GetXSignId() int32 {
	if x != nil && x.XSignId != nil {
		return *x.XSignId
	}
	return 0
}

//装扮信息
type SkinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeId   *int32 `protobuf:"varint,1,req,name=_type_id,json=TypeId" json:"_type_id,omitempty"`     //装扮类型
	XStatus   *int32 `protobuf:"varint,2,req,name=_status,json=Status" json:"_status,omitempty"`       //状态（0. 失效; 1. 生效）
	XEndTime  *int32 `protobuf:"varint,3,opt,name=_end_time,json=EndTime" json:"_end_time,omitempty"`  //结束时间（生效时需要填写）
	XDuration *int32 `protobuf:"varint,4,opt,name=_duration,json=Duration" json:"_duration,omitempty"` //持续时间（失效时需要填写）
	XTotal    *int32 `protobuf:"varint,5,opt,name=_total,json=Total" json:"_total,omitempty"`          // 装扮拥有的总时间
}

func (x *SkinData) Reset() {
	*x = SkinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinData) ProtoMessage() {}

func (x *SkinData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinData.ProtoReflect.Descriptor instead.
func (*SkinData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41}
}

func (x *SkinData) GetXTypeId() int32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *SkinData) GetXStatus() int32 {
	if x != nil && x.XStatus != nil {
		return *x.XStatus
	}
	return 0
}

func (x *SkinData) GetXEndTime() int32 {
	if x != nil && x.XEndTime != nil {
		return *x.XEndTime
	}
	return 0
}

func (x *SkinData) GetXDuration() int32 {
	if x != nil && x.XDuration != nil {
		return *x.XDuration
	}
	return 0
}

func (x *SkinData) GetXTotal() int32 {
	if x != nil && x.XTotal != nil {
		return *x.XTotal
	}
	return 0
}

type MapRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XX *float32 `protobuf:"fixed32,1,req,name=_x,json=X" json:"_x,omitempty"` //地图的横坐标
	XY *float32 `protobuf:"fixed32,2,req,name=_y,json=Y" json:"_y,omitempty"` //地图的纵坐标
	XW *float32 `protobuf:"fixed32,3,req,name=_w,json=W" json:"_w,omitempty"` //获取地图的宽度，即横行的格子数量
	XH *float32 `protobuf:"fixed32,4,req,name=_h,json=H" json:"_h,omitempty"` //获取地图的高度，即纵向的格子数量
}

func (x *MapRegion) Reset() {
	*x = MapRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRegion) ProtoMessage() {}

func (x *MapRegion) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRegion.ProtoReflect.Descriptor instead.
func (*MapRegion) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{42}
}

func (x *MapRegion) GetXX() float32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *MapRegion) GetXY() float32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

func (x *MapRegion) GetXW() float32 {
	if x != nil && x.XW != nil {
		return *x.XW
	}
	return 0
}

func (x *MapRegion) GetXH() float32 {
	if x != nil && x.XH != nil {
		return *x.XH
	}
	return 0
}

type Jwelset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId      *int32  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                //宝物组合
	XName    *string `protobuf:"bytes,2,req,name=_name,json=Name" json:"_name,omitempty"`           //组合名称
	XEquipID *int32  `protobuf:"varint,3,opt,name=_equipID,json=EquipID" json:"_equipID,omitempty"` //宝物的组合id
}

func (x *Jwelset) Reset() {
	*x = Jwelset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jwelset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jwelset) ProtoMessage() {}

func (x *Jwelset) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jwelset.ProtoReflect.Descriptor instead.
func (*Jwelset) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{43}
}

func (x *Jwelset) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *Jwelset) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *Jwelset) GetXEquipID() int32 {
	if x != nil && x.XEquipID != nil {
		return *x.XEquipID
	}
	return 0
}

type CrossServerRank_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId         *int32  `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`
	XServerName *string `protobuf:"bytes,2,req,name=_server_name,json=ServerName" json:"_server_name,omitempty"`
	XPoints     *int32  `protobuf:"varint,3,req,name=_points,json=Points" json:"_points,omitempty"`
	XRank       *int32  `protobuf:"varint,4,req,name=_rank,json=Rank" json:"_rank,omitempty"` //名次
}

func (x *CrossServerRank_Info) Reset() {
	*x = CrossServerRank_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossServerRank_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossServerRank_Info) ProtoMessage() {}

func (x *CrossServerRank_Info) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossServerRank_Info.ProtoReflect.Descriptor instead.
func (*CrossServerRank_Info) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{44}
}

func (x *CrossServerRank_Info) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *CrossServerRank_Info) GetXServerName() string {
	if x != nil && x.XServerName != nil {
		return *x.XServerName
	}
	return ""
}

func (x *CrossServerRank_Info) GetXPoints() int32 {
	if x != nil && x.XPoints != nil {
		return *x.XPoints
	}
	return 0
}

func (x *CrossServerRank_Info) GetXRank() int32 {
	if x != nil && x.XRank != nil {
		return *x.XRank
	}
	return 0
}

//精炼属性
type RefineAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32   `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`           //id
	XValue *float32 `protobuf:"fixed32,2,req,name=_value,json=Value" json:"_value,omitempty"` //随机值
	XPos   *uint32  `protobuf:"varint,3,req,name=_pos,json=Pos" json:"_pos,omitempty"`        //标记位置
	XLock  *uint32  `protobuf:"varint,4,opt,name=_lock,json=Lock" json:"_lock,omitempty"`     //0未锁定 1锁定
}

func (x *RefineAttribute) Reset() {
	*x = RefineAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineAttribute) ProtoMessage() {}

func (x *RefineAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineAttribute.ProtoReflect.Descriptor instead.
func (*RefineAttribute) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{45}
}

func (x *RefineAttribute) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *RefineAttribute) GetXValue() float32 {
	if x != nil && x.XValue != nil {
		return *x.XValue
	}
	return 0
}

func (x *RefineAttribute) GetXPos() uint32 {
	if x != nil && x.XPos != nil {
		return *x.XPos
	}
	return 0
}

func (x *RefineAttribute) GetXLock() uint32 {
	if x != nil && x.XLock != nil {
		return *x.XLock
	}
	return 0
}

//战场建筑的信息
type BattlefieldBuildingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType                       *BattlefieldBuildingType      `protobuf:"varint,1,req,name=_type,json=Type,enum=Msg.BattlefieldBuildingType" json:"_type,omitempty"`                                     //战场建筑类型
	XX                          *int32                        `protobuf:"varint,2,req,name=_x,json=X" json:"_x,omitempty"`                                                                               //坐标信息
	XY                          *int32                        `protobuf:"varint,3,req,name=_y,json=Y" json:"_y,omitempty"`                                                                               //坐标信息
	XOccupyStartTime            *int32                        `protobuf:"varint,4,opt,name=_occupy_start_time,json=OccupyStartTime" json:"_occupy_start_time,omitempty"`                                 //占领开始时间
	XOccupyUser                 *UserSummary                  `protobuf:"bytes,5,opt,name=_occupy_user,json=OccupyUser" json:"_occupy_user,omitempty"`                                                   //占领者
	XBattleRecordInfo           []*BattleRecordInfo           `protobuf:"bytes,6,rep,name=_battle_record_info,json=BattleRecordInfo" json:"_battle_record_info,omitempty"`                               //建筑战场记录
	XBattlefieldBuildingSupport []*BattlefieldBuildingSupport `protobuf:"bytes,7,rep,name=_battlefield_building_support,json=BattlefieldBuildingSupport" json:"_battlefield_building_support,omitempty"` //支援玩家数据
	XScoreActive                *float32                      `protobuf:"fixed32,8,opt,name=_score_active,json=ScoreActive" json:"_score_active,omitempty"`                                              //客户端上报积分时使用
}

func (x *BattlefieldBuildingInfo) Reset() {
	*x = BattlefieldBuildingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlefieldBuildingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlefieldBuildingInfo) ProtoMessage() {}

func (x *BattlefieldBuildingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlefieldBuildingInfo.ProtoReflect.Descriptor instead.
func (*BattlefieldBuildingInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{46}
}

func (x *BattlefieldBuildingInfo) GetXType() BattlefieldBuildingType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return BattlefieldBuildingType_battlefield_building__hospital
}

func (x *BattlefieldBuildingInfo) GetXX() int32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *BattlefieldBuildingInfo) GetXY() int32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

func (x *BattlefieldBuildingInfo) GetXOccupyStartTime() int32 {
	if x != nil && x.XOccupyStartTime != nil {
		return *x.XOccupyStartTime
	}
	return 0
}

func (x *BattlefieldBuildingInfo) GetXOccupyUser() *UserSummary {
	if x != nil {
		return x.XOccupyUser
	}
	return nil
}

func (x *BattlefieldBuildingInfo) GetXBattleRecordInfo() []*BattleRecordInfo {
	if x != nil {
		return x.XBattleRecordInfo
	}
	return nil
}

func (x *BattlefieldBuildingInfo) GetXBattlefieldBuildingSupport() []*BattlefieldBuildingSupport {
	if x != nil {
		return x.XBattlefieldBuildingSupport
	}
	return nil
}

func (x *BattlefieldBuildingInfo) GetXScoreActive() float32 {
	if x != nil && x.XScoreActive != nil {
		return *x.XScoreActive
	}
	return 0
}

//支援玩家数据
type BattlefieldBuildingSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId    *int32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`          //支援玩家id
	XStartTime *int32 `protobuf:"varint,2,req,name=_start_time,json=StartTime" json:"_start_time,omitempty"` //支援开始时间
}

func (x *BattlefieldBuildingSupport) Reset() {
	*x = BattlefieldBuildingSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlefieldBuildingSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlefieldBuildingSupport) ProtoMessage() {}

func (x *BattlefieldBuildingSupport) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlefieldBuildingSupport.ProtoReflect.Descriptor instead.
func (*BattlefieldBuildingSupport) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{47}
}

func (x *BattlefieldBuildingSupport) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *BattlefieldBuildingSupport) GetXStartTime() int32 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

//战场建筑记录
type BattleRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUser                  *UserSummary           `protobuf:"bytes,1,opt,name=_user,json=User" json:"_user,omitempty"`                                                                                        //发起者
	XBattlefieldRecordType *BattlefieldRecordType `protobuf:"varint,2,opt,name=_battlefield_record_type,json=BattlefieldRecordType,enum=Msg.BattlefieldRecordType" json:"_battlefield_record_type,omitempty"` //时间类型
	XTime                  *int32                 `protobuf:"varint,3,opt,name=_time,json=Time" json:"_time,omitempty"`                                                                                       //时间发生时间
	XPsvUser               *UserSummary           `protobuf:"bytes,4,opt,name=_psv_user,json=PsvUser" json:"_psv_user,omitempty"`                                                                             //被动方
}

func (x *BattleRecordInfo) Reset() {
	*x = BattleRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRecordInfo) ProtoMessage() {}

func (x *BattleRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRecordInfo.ProtoReflect.Descriptor instead.
func (*BattleRecordInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{48}
}

func (x *BattleRecordInfo) GetXUser() *UserSummary {
	if x != nil {
		return x.XUser
	}
	return nil
}

func (x *BattleRecordInfo) GetXBattlefieldRecordType() BattlefieldRecordType {
	if x != nil && x.XBattlefieldRecordType != nil {
		return *x.XBattlefieldRecordType
	}
	return BattlefieldRecordType_attack_success
}

func (x *BattleRecordInfo) GetXTime() int32 {
	if x != nil && x.XTime != nil {
		return *x.XTime
	}
	return 0
}

func (x *BattleRecordInfo) GetXPsvUser() *UserSummary {
	if x != nil {
		return x.XPsvUser
	}
	return nil
}

//登录IP变化或到期
type IpExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XTypeName []string `protobuf:"bytes,1,rep,name=_type_name,json=TypeName" json:"_type_name,omitempty"` //对应的操作类型
}

func (x *IpExpired) Reset() {
	*x = IpExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpExpired) ProtoMessage() {}

func (x *IpExpired) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpExpired.ProtoReflect.Descriptor instead.
func (*IpExpired) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{49}
}

func (x *IpExpired) GetXTypeName() []string {
	if x != nil {
		return x.XTypeName
	}
	return nil
}

//自由行军队伍信息
type FmTeamSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *int64          `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                  //编号
	XTarget       *int32          `protobuf:"varint,2,req,name=_target,json=Target" json:"_target,omitempty"`                      //目标
	XIntro        *string         `protobuf:"bytes,3,req,name=_intro,json=Intro" json:"_intro,omitempty"`                          //简介
	XType         *int32          `protobuf:"varint,4,req,name=_type,json=Type" json:"_type,omitempty"`                            //类型
	XPasswd       *string         `protobuf:"bytes,5,req,name=_passwd,json=Passwd" json:"_passwd,omitempty"`                       //密码
	XRewardType   *int32          `protobuf:"varint,6,req,name=_reward_type,json=RewardType" json:"_reward_type,omitempty"`        //奖励类型
	XRewardList   *string         `protobuf:"bytes,7,opt,name=_reward_list,json=RewardList" json:"_reward_list,omitempty"`         //列表
	XPowerLimit   *int64          `protobuf:"varint,8,req,name=_power_limit,json=PowerLimit" json:"_power_limit,omitempty"`        //战力限制
	XFmTeamMember []*FmTeamMember `protobuf:"bytes,9,rep,name=_fm_team_member,json=FmTeamMember" json:"_fm_team_member,omitempty"` //成员信息
}

func (x *FmTeamSummary) Reset() {
	*x = FmTeamSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamSummary) ProtoMessage() {}

func (x *FmTeamSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamSummary.ProtoReflect.Descriptor instead.
func (*FmTeamSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{50}
}

func (x *FmTeamSummary) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *FmTeamSummary) GetXTarget() int32 {
	if x != nil && x.XTarget != nil {
		return *x.XTarget
	}
	return 0
}

func (x *FmTeamSummary) GetXIntro() string {
	if x != nil && x.XIntro != nil {
		return *x.XIntro
	}
	return ""
}

func (x *FmTeamSummary) GetXType() int32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *FmTeamSummary) GetXPasswd() string {
	if x != nil && x.XPasswd != nil {
		return *x.XPasswd
	}
	return ""
}

func (x *FmTeamSummary) GetXRewardType() int32 {
	if x != nil && x.XRewardType != nil {
		return *x.XRewardType
	}
	return 0
}

func (x *FmTeamSummary) GetXRewardList() string {
	if x != nil && x.XRewardList != nil {
		return *x.XRewardList
	}
	return ""
}

func (x *FmTeamSummary) GetXPowerLimit() int64 {
	if x != nil && x.XPowerLimit != nil {
		return *x.XPowerLimit
	}
	return 0
}

func (x *FmTeamSummary) GetXFmTeamMember() []*FmTeamMember {
	if x != nil {
		return x.XFmTeamMember
	}
	return nil
}

// 自由行军成员信息
type FmTeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSummary   *UserSummary `protobuf:"bytes,1,req,name=_summary,json=Summary" json:"_summary,omitempty"`          //用户简要信息
	XAuth      *int32       `protobuf:"varint,2,req,name=_auth,json=Auth" json:"_auth,omitempty"`                  //联盟成员权限,1-队长,2-成员
	XStatus    *int32       `protobuf:"varint,3,req,name=_status,json=Status" json:"_status,omitempty"`            //状态,1-到达,2-暂离,3-回归中
	XStartTime *uint32      `protobuf:"varint,4,opt,name=_start_time,json=StartTime" json:"_start_time,omitempty"` //回归开始时间
	XEndTime   *uint32      `protobuf:"varint,5,opt,name=_end_time,json=EndTime" json:"_end_time,omitempty"`       //回归结束时间
	XPower     *int64       `protobuf:"varint,6,req,name=_power,json=Power" json:"_power,omitempty"`               //战力
	XTroopNum  *int64       `protobuf:"varint,7,req,name=_troop_num,json=TroopNum" json:"_troop_num,omitempty"`    //兵力
}

func (x *FmTeamMember) Reset() {
	*x = FmTeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmTeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmTeamMember) ProtoMessage() {}

func (x *FmTeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmTeamMember.ProtoReflect.Descriptor instead.
func (*FmTeamMember) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{51}
}

func (x *FmTeamMember) GetXSummary() *UserSummary {
	if x != nil {
		return x.XSummary
	}
	return nil
}

func (x *FmTeamMember) GetXAuth() int32 {
	if x != nil && x.XAuth != nil {
		return *x.XAuth
	}
	return 0
}

func (x *FmTeamMember) GetXStatus() int32 {
	if x != nil && x.XStatus != nil {
		return *x.XStatus
	}
	return 0
}

func (x *FmTeamMember) GetXStartTime() uint32 {
	if x != nil && x.XStartTime != nil {
		return *x.XStartTime
	}
	return 0
}

func (x *FmTeamMember) GetXEndTime() uint32 {
	if x != nil && x.XEndTime != nil {
		return *x.XEndTime
	}
	return 0
}

func (x *FmTeamMember) GetXPower() int64 {
	if x != nil && x.XPower != nil {
		return *x.XPower
	}
	return 0
}

func (x *FmTeamMember) GetXTroopNum() int64 {
	if x != nil && x.XTroopNum != nil {
		return *x.XTroopNum
	}
	return 0
}

//道具
type ComItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId                  *int32              `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`                                                    //道具ID
	ItemAmount              *int32              `protobuf:"varint,2,opt,name=item_amount,json=itemAmount" json:"item_amount,omitempty"`                                        //道具数量
	XId                     *int64              `protobuf:"varint,3,opt,name=_id,json=Id" json:"_id,omitempty"`                                                                //唯一ID
	XRefineAttribute        []*RefineAttribute  `protobuf:"bytes,4,rep,name=_refine_attribute,json=RefineAttribute" json:"_refine_attribute,omitempty"`                        //精炼属性
	XPendingRefineAttribute []*RefineAttribute  `protobuf:"bytes,5,rep,name=_pending_refine_attribute,json=PendingRefineAttribute" json:"_pending_refine_attribute,omitempty"` //待确认精炼属性
	XTime                   *int32              `protobuf:"varint,6,opt,name=_time,json=Time" json:"_time,omitempty"`                                                          //获取到道具的时间戳
	XMarketState            *int32              `protobuf:"varint,7,opt,name=_market_state,json=MarketState" json:"_market_state,omitempty"`                                   //是否可交易 0：否 1：是
	XEquip                  *WearEquip          `protobuf:"bytes,8,opt,name=_equip,json=Equip" json:"_equip,omitempty"`                                                        //装备
	XPlayerTreasureInfo     *PlayerTreasureInfo `protobuf:"bytes,9,opt,name=_player_treasure_info,json=PlayerTreasureInfo" json:"_player_treasure_info,omitempty"`             //宝物 暂时只有服务端用
}

func (x *ComItem) Reset() {
	*x = ComItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComItem) ProtoMessage() {}

func (x *ComItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComItem.ProtoReflect.Descriptor instead.
func (*ComItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{52}
}

func (x *ComItem) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *ComItem) GetItemAmount() int32 {
	if x != nil && x.ItemAmount != nil {
		return *x.ItemAmount
	}
	return 0
}

func (x *ComItem) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *ComItem) GetXRefineAttribute() []*RefineAttribute {
	if x != nil {
		return x.XRefineAttribute
	}
	return nil
}

func (x *ComItem) GetXPendingRefineAttribute() []*RefineAttribute {
	if x != nil {
		return x.XPendingRefineAttribute
	}
	return nil
}

func (x *ComItem) GetXTime() int32 {
	if x != nil && x.XTime != nil {
		return *x.XTime
	}
	return 0
}

func (x *ComItem) GetXMarketState() int32 {
	if x != nil && x.XMarketState != nil {
		return *x.XMarketState
	}
	return 0
}

func (x *ComItem) GetXEquip() *WearEquip {
	if x != nil {
		return x.XEquip
	}
	return nil
}

func (x *ComItem) GetXPlayerTreasureInfo() *PlayerTreasureInfo {
	if x != nil {
		return x.XPlayerTreasureInfo
	}
	return nil
}

//联盟商品购买次数
type GuildShopBuyNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`          //物品ID
	XCount *int32 `protobuf:"varint,2,req,name=_count,json=Count" json:"_count,omitempty"` //购买次数
}

func (x *GuildShopBuyNew) Reset() {
	*x = GuildShopBuyNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildShopBuyNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildShopBuyNew) ProtoMessage() {}

func (x *GuildShopBuyNew) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildShopBuyNew.ProtoReflect.Descriptor instead.
func (*GuildShopBuyNew) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{53}
}

func (x *GuildShopBuyNew) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GuildShopBuyNew) GetXCount() int32 {
	if x != nil && x.XCount != nil {
		return *x.XCount
	}
	return 0
}

//联盟宝箱简介
type GuildBoxSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *uint32             `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                                   //唯一ID
	XBoxId        *uint32             `protobuf:"varint,2,opt,name=_box_id,json=BoxId" json:"_box_id,omitempty"`                        //宝箱ID
	XType         *uint32             `protobuf:"varint,3,opt,name=_type,json=Type" json:"_type,omitempty"`                             //宝箱类型
	XExpire       *uint32             `protobuf:"varint,4,opt,name=_expire,json=Expire" json:"_expire,omitempty"`                       //宝箱过期时间戳
	XUserName     *string             `protobuf:"bytes,5,opt,name=_user_name,json=UserName" json:"_user_name,omitempty"`                //宝箱产生者
	XUserAvatar   *uint32             `protobuf:"varint,6,opt,name=_user_avatar,json=UserAvatar" json:"_user_avatar,omitempty"`         //宝箱产生者头像
	XOpenCount    *uint32             `protobuf:"varint,7,opt,name=_open_count,json=OpenCount" json:"_open_count,omitempty"`            //打开次数
	XOpenMaxCount *uint32             `protobuf:"varint,8,opt,name=_open_max_count,json=OpenMaxCount" json:"_open_max_count,omitempty"` //最大打开次数
	XOpenInfo     []*GuildBoxOpenUser `protobuf:"bytes,9,rep,name=_open_info,json=OpenInfo" json:"_open_info,omitempty"`                //打开信息
}

func (x *GuildBoxSummary) Reset() {
	*x = GuildBoxSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxSummary) ProtoMessage() {}

func (x *GuildBoxSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxSummary.ProtoReflect.Descriptor instead.
func (*GuildBoxSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{54}
}

func (x *GuildBoxSummary) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GuildBoxSummary) GetXBoxId() uint32 {
	if x != nil && x.XBoxId != nil {
		return *x.XBoxId
	}
	return 0
}

func (x *GuildBoxSummary) GetXType() uint32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

func (x *GuildBoxSummary) GetXExpire() uint32 {
	if x != nil && x.XExpire != nil {
		return *x.XExpire
	}
	return 0
}

func (x *GuildBoxSummary) GetXUserName() string {
	if x != nil && x.XUserName != nil {
		return *x.XUserName
	}
	return ""
}

func (x *GuildBoxSummary) GetXUserAvatar() uint32 {
	if x != nil && x.XUserAvatar != nil {
		return *x.XUserAvatar
	}
	return 0
}

func (x *GuildBoxSummary) GetXOpenCount() uint32 {
	if x != nil && x.XOpenCount != nil {
		return *x.XOpenCount
	}
	return 0
}

func (x *GuildBoxSummary) GetXOpenMaxCount() uint32 {
	if x != nil && x.XOpenMaxCount != nil {
		return *x.XOpenMaxCount
	}
	return 0
}

func (x *GuildBoxSummary) GetXOpenInfo() []*GuildBoxOpenUser {
	if x != nil {
		return x.XOpenInfo
	}
	return nil
}

//联盟宝箱打开
type GuildBoxOpenUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XNickName *string         `protobuf:"bytes,1,opt,name=_nick_name,json=NickName" json:"_nick_name,omitempty"` //开宝箱玩家昵称
	XUserId   *uint32         `protobuf:"varint,2,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`      //开宝箱玩家ID
	XItems    []*GuildBoxItem `protobuf:"bytes,3,rep,name=_items,json=Items" json:"_items,omitempty"`            //开宝箱所获道具
}

func (x *GuildBoxOpenUser) Reset() {
	*x = GuildBoxOpenUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxOpenUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxOpenUser) ProtoMessage() {}

func (x *GuildBoxOpenUser) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxOpenUser.ProtoReflect.Descriptor instead.
func (*GuildBoxOpenUser) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{55}
}

func (x *GuildBoxOpenUser) GetXNickName() string {
	if x != nil && x.XNickName != nil {
		return *x.XNickName
	}
	return ""
}

func (x *GuildBoxOpenUser) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildBoxOpenUser) GetXItems() []*GuildBoxItem {
	if x != nil {
		return x.XItems
	}
	return nil
}

//联盟宝箱:打开宝箱所得道具属性
type GuildBoxItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId         *uint32 `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                           //道具唯一ID
	XItemId     *uint32 `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`             //道具ID
	XItemAmount *uint32 `protobuf:"varint,3,opt,name=_item_amount,json=ItemAmount" json:"_item_amount,omitempty"` //道具数量
}

func (x *GuildBoxItem) Reset() {
	*x = GuildBoxItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBoxItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBoxItem) ProtoMessage() {}

func (x *GuildBoxItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBoxItem.ProtoReflect.Descriptor instead.
func (*GuildBoxItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{56}
}

func (x *GuildBoxItem) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GuildBoxItem) GetXItemId() uint32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *GuildBoxItem) GetXItemAmount() uint32 {
	if x != nil && x.XItemAmount != nil {
		return *x.XItemAmount
	}
	return 0
}

//联盟科技:捐献排行榜(总榜)
type GuildTechDonateRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId       *uint32 `protobuf:"varint,1,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                 //玩家ID
	XNickName     *string `protobuf:"bytes,2,opt,name=_nick_name,json=NickName" json:"_nick_name,omitempty"`            //玩家昵称
	XAvatar       *uint32 `protobuf:"varint,3,opt,name=_avatar,json=Avatar" json:"_avatar,omitempty"`                   //玩家头像
	XHonor        *uint32 `protobuf:"varint,4,opt,name=_honor,json=Honor" json:"_honor,omitempty"`                      //玩家联盟荣誉值
	XCivilization *uint32 `protobuf:"varint,5,opt,name=_civilization,json=Civilization" json:"_civilization,omitempty"` //文明
}

func (x *GuildTechDonateRanking) Reset() {
	*x = GuildTechDonateRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTechDonateRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTechDonateRanking) ProtoMessage() {}

func (x *GuildTechDonateRanking) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTechDonateRanking.ProtoReflect.Descriptor instead.
func (*GuildTechDonateRanking) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{57}
}

func (x *GuildTechDonateRanking) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildTechDonateRanking) GetXNickName() string {
	if x != nil && x.XNickName != nil {
		return *x.XNickName
	}
	return ""
}

func (x *GuildTechDonateRanking) GetXAvatar() uint32 {
	if x != nil && x.XAvatar != nil {
		return *x.XAvatar
	}
	return 0
}

func (x *GuildTechDonateRanking) GetXHonor() uint32 {
	if x != nil && x.XHonor != nil {
		return *x.XHonor
	}
	return 0
}

func (x *GuildTechDonateRanking) GetXCivilization() uint32 {
	if x != nil && x.XCivilization != nil {
		return *x.XCivilization
	}
	return 0
}

//联盟:建筑信息
type GuildBuildingSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *uint32 `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                               //建筑ID
	XUserId      *uint32 `protobuf:"varint,2,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                 //玩家ID
	XGuildId     *uint32 `protobuf:"varint,3,opt,name=_guild_id,json=GuildId" json:"_guild_id,omitempty"`              //联盟ID
	XTypeId      *uint32 `protobuf:"varint,4,opt,name=_type_id,json=TypeId" json:"_type_id,omitempty"`                 //建筑类型
	XLevel       *uint32 `protobuf:"varint,5,opt,name=_level,json=Level" json:"_level,omitempty"`                      //建筑等级
	XGid         *uint32 `protobuf:"varint,6,opt,name=_gid,json=Gid" json:"_gid,omitempty"`                            //建筑所占地图格子
	XX           *uint32 `protobuf:"varint,7,opt,name=_x,json=X" json:"_x,omitempty"`                                  //坐标X
	XY           *uint32 `protobuf:"varint,8,opt,name=_y,json=Y" json:"_y,omitempty"`                                  //坐标Y
	XCapital     *uint32 `protobuf:"varint,9,opt,name=_capital,json=Capital" json:"_capital,omitempty"`                //是否为都城
	XCoverExpire *uint32 `protobuf:"varint,10,opt,name=_cover_expire,json=CoverExpire" json:"_cover_expire,omitempty"` //保护罩过期时间: 0无保护罩
}

func (x *GuildBuildingSummary) Reset() {
	*x = GuildBuildingSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBuildingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBuildingSummary) ProtoMessage() {}

func (x *GuildBuildingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBuildingSummary.ProtoReflect.Descriptor instead.
func (*GuildBuildingSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{58}
}

func (x *GuildBuildingSummary) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *GuildBuildingSummary) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *GuildBuildingSummary) GetXGuildId() uint32 {
	if x != nil && x.XGuildId != nil {
		return *x.XGuildId
	}
	return 0
}

func (x *GuildBuildingSummary) GetXTypeId() uint32 {
	if x != nil && x.XTypeId != nil {
		return *x.XTypeId
	}
	return 0
}

func (x *GuildBuildingSummary) GetXLevel() uint32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *GuildBuildingSummary) GetXGid() uint32 {
	if x != nil && x.XGid != nil {
		return *x.XGid
	}
	return 0
}

func (x *GuildBuildingSummary) GetXX() uint32 {
	if x != nil && x.XX != nil {
		return *x.XX
	}
	return 0
}

func (x *GuildBuildingSummary) GetXY() uint32 {
	if x != nil && x.XY != nil {
		return *x.XY
	}
	return 0
}

func (x *GuildBuildingSummary) GetXCapital() uint32 {
	if x != nil && x.XCapital != nil {
		return *x.XCapital
	}
	return 0
}

func (x *GuildBuildingSummary) GetXCoverExpire() uint32 {
	if x != nil && x.XCoverExpire != nil {
		return *x.XCoverExpire
	}
	return 0
}

//联盟运输:请求简介
type GuildTransportSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUser           *UserSummary `protobuf:"bytes,1,opt,name=_user,json=User" json:"_user,omitempty"` //玩家简介
	XFood           *uint32      `protobuf:"varint,2,opt,name=_food,json=Food" json:"_food,omitempty"`
	XWood           *uint32      `protobuf:"varint,3,opt,name=_wood,json=Wood" json:"_wood,omitempty"`
	XIron           *uint32      `protobuf:"varint,4,opt,name=_iron,json=Iron" json:"_iron,omitempty"`
	XStone          *uint32      `protobuf:"varint,5,opt,name=_stone,json=Stone" json:"_stone,omitempty"`
	XReceivedFood   *uint32      `protobuf:"varint,6,opt,name=_received_food,json=ReceivedFood" json:"_received_food,omitempty"` //已接收的资源数量
	XReceivedWood   *uint32      `protobuf:"varint,7,opt,name=_received_wood,json=ReceivedWood" json:"_received_wood,omitempty"`
	XReceivedIron   *uint32      `protobuf:"varint,8,opt,name=_received_iron,json=ReceivedIron" json:"_received_iron,omitempty"`
	XReceivedStone  *uint32      `protobuf:"varint,9,opt,name=_received_stone,json=ReceivedStone" json:"_received_stone,omitempty"`
	XGuildShortName *string      `protobuf:"bytes,10,opt,name=_guild_short_name,json=GuildShortName" json:"_guild_short_name,omitempty"` //联盟简称
	XWx             *uint32      `protobuf:"varint,11,opt,name=_wx,json=Wx" json:"_wx,omitempty"`                                        //主城坐标x
	XWy             *uint32      `protobuf:"varint,12,opt,name=_wy,json=Wy" json:"_wy,omitempty"`                                        //主城坐标y
	XExpireTime     *uint32      `protobuf:"varint,13,opt,name=_expire_time,json=ExpireTime" json:"_expire_time,omitempty"`              //请求过期时间
}

func (x *GuildTransportSummary) Reset() {
	*x = GuildTransportSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTransportSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTransportSummary) ProtoMessage() {}

func (x *GuildTransportSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTransportSummary.ProtoReflect.Descriptor instead.
func (*GuildTransportSummary) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{59}
}

func (x *GuildTransportSummary) GetXUser() *UserSummary {
	if x != nil {
		return x.XUser
	}
	return nil
}

func (x *GuildTransportSummary) GetXFood() uint32 {
	if x != nil && x.XFood != nil {
		return *x.XFood
	}
	return 0
}

func (x *GuildTransportSummary) GetXWood() uint32 {
	if x != nil && x.XWood != nil {
		return *x.XWood
	}
	return 0
}

func (x *GuildTransportSummary) GetXIron() uint32 {
	if x != nil && x.XIron != nil {
		return *x.XIron
	}
	return 0
}

func (x *GuildTransportSummary) GetXStone() uint32 {
	if x != nil && x.XStone != nil {
		return *x.XStone
	}
	return 0
}

func (x *GuildTransportSummary) GetXReceivedFood() uint32 {
	if x != nil && x.XReceivedFood != nil {
		return *x.XReceivedFood
	}
	return 0
}

func (x *GuildTransportSummary) GetXReceivedWood() uint32 {
	if x != nil && x.XReceivedWood != nil {
		return *x.XReceivedWood
	}
	return 0
}

func (x *GuildTransportSummary) GetXReceivedIron() uint32 {
	if x != nil && x.XReceivedIron != nil {
		return *x.XReceivedIron
	}
	return 0
}

func (x *GuildTransportSummary) GetXReceivedStone() uint32 {
	if x != nil && x.XReceivedStone != nil {
		return *x.XReceivedStone
	}
	return 0
}

func (x *GuildTransportSummary) GetXGuildShortName() string {
	if x != nil && x.XGuildShortName != nil {
		return *x.XGuildShortName
	}
	return ""
}

func (x *GuildTransportSummary) GetXWx() uint32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *GuildTransportSummary) GetXWy() uint32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *GuildTransportSummary) GetXExpireTime() uint32 {
	if x != nil && x.XExpireTime != nil {
		return *x.XExpireTime
	}
	return 0
}

// 装备基础属性
type BaseAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *GeneralPropertyType `protobuf:"varint,1,req,name=_id,json=Id,enum=Msg.GeneralPropertyType" json:"_id,omitempty"` //属性id
	XValue *float32             `protobuf:"fixed32,2,req,name=_value,json=Value" json:"_value,omitempty"`                    //随机值
}

func (x *BaseAttribute) Reset() {
	*x = BaseAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseAttribute) ProtoMessage() {}

func (x *BaseAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseAttribute.ProtoReflect.Descriptor instead.
func (*BaseAttribute) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{60}
}

func (x *BaseAttribute) GetXId() GeneralPropertyType {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return GeneralPropertyType_general_command
}

func (x *BaseAttribute) GetXValue() float32 {
	if x != nil && x.XValue != nil {
		return *x.XValue
	}
	return 0
}

// 装备附加属性
type AdditionalAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int32   `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`           //属性id
	XValue *float32 `protobuf:"fixed32,2,opt,name=_value,json=Value" json:"_value,omitempty"` //随机值
	XType  *uint32  `protobuf:"varint,3,opt,name=_type,json=Type" json:"_type,omitempty"`     // 1：固定值 2：百分比
}

func (x *AdditionalAttribute) Reset() {
	*x = AdditionalAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalAttribute) ProtoMessage() {}

func (x *AdditionalAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalAttribute.ProtoReflect.Descriptor instead.
func (*AdditionalAttribute) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{61}
}

func (x *AdditionalAttribute) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *AdditionalAttribute) GetXValue() float32 {
	if x != nil && x.XValue != nil {
		return *x.XValue
	}
	return 0
}

func (x *AdditionalAttribute) GetXType() uint32 {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return 0
}

// 战宠信息
type PetSummaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                  *uint32                `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                                          // (数据库)战宠唯一ID
	XPetTypeId           *uint32                `protobuf:"varint,2,opt,name=_pet_type_id,json=PetTypeId" json:"_pet_type_id,omitempty"`                                 // 配置表战宠ID
	XLevel               *uint32                `protobuf:"varint,3,opt,name=_level,json=Level" json:"_level,omitempty"`                                                 // 等级
	XExp                 *uint32                `protobuf:"varint,4,opt,name=_exp,json=Exp" json:"_exp,omitempty"`                                                       // 经验值
	XCommand             *uint32                `protobuf:"varint,5,opt,name=_command,json=Command" json:"_command,omitempty"`                                           // 基础四维-领导
	XPower               *uint32                `protobuf:"varint,6,opt,name=_power,json=Power" json:"_power,omitempty"`                                                 // 基础四维-力量
	XEndurance           *uint32                `protobuf:"varint,7,opt,name=_endurance,json=Endurance" json:"_endurance,omitempty"`                                     // 基础四维 - 耐力
	XIntelligence        *uint32                `protobuf:"varint,8,opt,name=_intelligence,json=Intelligence" json:"_intelligence,omitempty"`                            // 基础四维 - 智力
	XGrowCommand         *uint32                `protobuf:"varint,9,opt,name=_grow_command,json=GrowCommand" json:"_grow_command,omitempty"`                             // 四维成长值 - 领导
	XGrowPower           *uint32                `protobuf:"varint,10,opt,name=_grow_power,json=GrowPower" json:"_grow_power,omitempty"`                                  // 四维成长值 - 力量
	XGrowEndurance       *uint32                `protobuf:"varint,11,opt,name=_grow_endurance,json=GrowEndurance" json:"_grow_endurance,omitempty"`                      // 四维成长值 - 耐力
	XGrowIntelligence    *uint32                `protobuf:"varint,12,opt,name=_grow_intelligence,json=GrowIntelligence" json:"_grow_intelligence,omitempty"`             // 四维成长值 - 智力
	XIsBind              *uint32                `protobuf:"varint,13,opt,name=_is_bind,json=IsBind" json:"_is_bind,omitempty"`                                           // 是否绑定
	XHeroId              *uint32                `protobuf:"varint,14,opt,name=_hero_id,json=HeroId" json:"_hero_id,omitempty"`                                           // 数据库将军ID
	XPetPower            *uint32                `protobuf:"varint,15,opt,name=_pet_power,json=PetPower" json:"_pet_power,omitempty"`                                     // 战宠战力
	XPetSummarySkillList []*PetSummarySkillInfo `protobuf:"bytes,16,rep,name=_pet_summary_skill_list,json=PetSummarySkillList" json:"_pet_summary_skill_list,omitempty"` // 技能列表
	XIsNew               *int32                 `protobuf:"varint,17,opt,name=_is_new,json=IsNew" json:"_is_new,omitempty"`                                              // 是否是新增加的战宠 1是
	XMarketState         *uint32                `protobuf:"varint,18,opt,name=_market_state,json=MarketState" json:"_market_state,omitempty"`                            // 是否可交易 0不可交易 1可交易
}

func (x *PetSummaryInfo) Reset() {
	*x = PetSummaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetSummaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetSummaryInfo) ProtoMessage() {}

func (x *PetSummaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetSummaryInfo.ProtoReflect.Descriptor instead.
func (*PetSummaryInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{62}
}

func (x *PetSummaryInfo) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *PetSummaryInfo) GetXPetTypeId() uint32 {
	if x != nil && x.XPetTypeId != nil {
		return *x.XPetTypeId
	}
	return 0
}

func (x *PetSummaryInfo) GetXLevel() uint32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *PetSummaryInfo) GetXExp() uint32 {
	if x != nil && x.XExp != nil {
		return *x.XExp
	}
	return 0
}

func (x *PetSummaryInfo) GetXCommand() uint32 {
	if x != nil && x.XCommand != nil {
		return *x.XCommand
	}
	return 0
}

func (x *PetSummaryInfo) GetXPower() uint32 {
	if x != nil && x.XPower != nil {
		return *x.XPower
	}
	return 0
}

func (x *PetSummaryInfo) GetXEndurance() uint32 {
	if x != nil && x.XEndurance != nil {
		return *x.XEndurance
	}
	return 0
}

func (x *PetSummaryInfo) GetXIntelligence() uint32 {
	if x != nil && x.XIntelligence != nil {
		return *x.XIntelligence
	}
	return 0
}

func (x *PetSummaryInfo) GetXGrowCommand() uint32 {
	if x != nil && x.XGrowCommand != nil {
		return *x.XGrowCommand
	}
	return 0
}

func (x *PetSummaryInfo) GetXGrowPower() uint32 {
	if x != nil && x.XGrowPower != nil {
		return *x.XGrowPower
	}
	return 0
}

func (x *PetSummaryInfo) GetXGrowEndurance() uint32 {
	if x != nil && x.XGrowEndurance != nil {
		return *x.XGrowEndurance
	}
	return 0
}

func (x *PetSummaryInfo) GetXGrowIntelligence() uint32 {
	if x != nil && x.XGrowIntelligence != nil {
		return *x.XGrowIntelligence
	}
	return 0
}

func (x *PetSummaryInfo) GetXIsBind() uint32 {
	if x != nil && x.XIsBind != nil {
		return *x.XIsBind
	}
	return 0
}

func (x *PetSummaryInfo) GetXHeroId() uint32 {
	if x != nil && x.XHeroId != nil {
		return *x.XHeroId
	}
	return 0
}

func (x *PetSummaryInfo) GetXPetPower() uint32 {
	if x != nil && x.XPetPower != nil {
		return *x.XPetPower
	}
	return 0
}

func (x *PetSummaryInfo) GetXPetSummarySkillList() []*PetSummarySkillInfo {
	if x != nil {
		return x.XPetSummarySkillList
	}
	return nil
}

func (x *PetSummaryInfo) GetXIsNew() int32 {
	if x != nil && x.XIsNew != nil {
		return *x.XIsNew
	}
	return 0
}

func (x *PetSummaryInfo) GetXMarketState() uint32 {
	if x != nil && x.XMarketState != nil {
		return *x.XMarketState
	}
	return 0
}

// 宝物信息 暂时只有服务端调用
type PlayerTreasureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *uint32       `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                         // (数据库)宝物唯一ID
	XTreasureId  *uint32       `protobuf:"varint,2,opt,name=_treasure_id,json=TreasureId" json:"_treasure_id,omitempty"`               // 配置表宝物ID
	XUserId      *uint32       `protobuf:"varint,3,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                           // 用户ID
	XMarketState *uint32       `protobuf:"varint,4,opt,name=_market_state,json=MarketState" json:"_market_state,omitempty"`            // 是否可交易 0不可交易 1可交易
	XCount       *uint32       `protobuf:"varint,5,opt,name=_count,json=Count" json:"_count,omitempty"`                                // 数量
	XPosition    *WearPosition `protobuf:"varint,6,opt,name=_position,json=Position,enum=Msg.WearPosition" json:"_position,omitempty"` // 部位
}

func (x *PlayerTreasureInfo) Reset() {
	*x = PlayerTreasureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTreasureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTreasureInfo) ProtoMessage() {}

func (x *PlayerTreasureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTreasureInfo.ProtoReflect.Descriptor instead.
func (*PlayerTreasureInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{63}
}

func (x *PlayerTreasureInfo) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *PlayerTreasureInfo) GetXTreasureId() uint32 {
	if x != nil && x.XTreasureId != nil {
		return *x.XTreasureId
	}
	return 0
}

func (x *PlayerTreasureInfo) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *PlayerTreasureInfo) GetXMarketState() uint32 {
	if x != nil && x.XMarketState != nil {
		return *x.XMarketState
	}
	return 0
}

func (x *PlayerTreasureInfo) GetXCount() uint32 {
	if x != nil && x.XCount != nil {
		return *x.XCount
	}
	return 0
}

func (x *PlayerTreasureInfo) GetXPosition() WearPosition {
	if x != nil && x.XPosition != nil {
		return *x.XPosition
	}
	return WearPosition_head
}

// 技能信息
type PetSummarySkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId *uint32 `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"` // 配置表中的技能ID
}

func (x *PetSummarySkillInfo) Reset() {
	*x = PetSummarySkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetSummarySkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetSummarySkillInfo) ProtoMessage() {}

func (x *PetSummarySkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetSummarySkillInfo.ProtoReflect.Descriptor instead.
func (*PetSummarySkillInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{64}
}

func (x *PetSummarySkillInfo) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

// 击杀怪物信息
type KillMonsterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMonsterConfigId *uint32 `protobuf:"varint,1,req,name=_monster_config_id,json=MonsterConfigId" json:"_monster_config_id,omitempty"` // 怪物ID
	XCount           *uint32 `protobuf:"varint,2,opt,name=_count,json=Count" json:"_count,omitempty"`                                   // 击杀数量
}

func (x *KillMonsterInfo) Reset() {
	*x = KillMonsterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillMonsterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillMonsterInfo) ProtoMessage() {}

func (x *KillMonsterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillMonsterInfo.ProtoReflect.Descriptor instead.
func (*KillMonsterInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{65}
}

func (x *KillMonsterInfo) GetXMonsterConfigId() uint32 {
	if x != nil && x.XMonsterConfigId != nil {
		return *x.XMonsterConfigId
	}
	return 0
}

func (x *KillMonsterInfo) GetXCount() uint32 {
	if x != nil && x.XCount != nil {
		return *x.XCount
	}
	return 0
}

type UserResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XResA *int64 `protobuf:"varint,1,opt,name=_resA,json=ResA" json:"_resA,omitempty"`
	XResB *int64 `protobuf:"varint,2,opt,name=_resB,json=ResB" json:"_resB,omitempty"`
	XResC *int64 `protobuf:"varint,3,opt,name=_resC,json=ResC" json:"_resC,omitempty"`
	XResD *int64 `protobuf:"varint,4,opt,name=_resD,json=ResD" json:"_resD,omitempty"`
	XResG *int64 `protobuf:"varint,5,opt,name=_resG,json=ResG" json:"_resG,omitempty"` // 黑金
	XGold *int64 `protobuf:"varint,6,opt,name=_gold,json=Gold" json:"_gold,omitempty"` // 钻石
	XResE *int64 `protobuf:"varint,7,opt,name=_resE,json=ResE" json:"_resE,omitempty"` // 金币
}

func (x *UserResource) Reset() {
	*x = UserResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResource) ProtoMessage() {}

func (x *UserResource) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResource.ProtoReflect.Descriptor instead.
func (*UserResource) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{66}
}

func (x *UserResource) GetXResA() int64 {
	if x != nil && x.XResA != nil {
		return *x.XResA
	}
	return 0
}

func (x *UserResource) GetXResB() int64 {
	if x != nil && x.XResB != nil {
		return *x.XResB
	}
	return 0
}

func (x *UserResource) GetXResC() int64 {
	if x != nil && x.XResC != nil {
		return *x.XResC
	}
	return 0
}

func (x *UserResource) GetXResD() int64 {
	if x != nil && x.XResD != nil {
		return *x.XResD
	}
	return 0
}

func (x *UserResource) GetXResG() int64 {
	if x != nil && x.XResG != nil {
		return *x.XResG
	}
	return 0
}

func (x *UserResource) GetXGold() int64 {
	if x != nil && x.XGold != nil {
		return *x.XGold
	}
	return 0
}

func (x *UserResource) GetXResE() int64 {
	if x != nil && x.XResE != nil {
		return *x.XResE
	}
	return 0
}

// 玩家抽奖信息
type TavernDrawInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUserId       *uint32 `protobuf:"varint,1,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`                   // 用户ID
	XPoint        *uint32 `protobuf:"varint,2,opt,name=_point,json=Point" json:"_point,omitempty"`                        // 积分
	XOrdinary     *uint32 `protobuf:"varint,3,opt,name=_ordinary,json=Ordinary" json:"_ordinary,omitempty"`               // 免费普通抽奖次数
	XOrdinaryTime *int64  `protobuf:"varint,4,opt,name=_ordinary_time,json=OrdinaryTime" json:"_ordinary_time,omitempty"` // 最后一次普通抽奖时间
	XSenior       *uint32 `protobuf:"varint,5,opt,name=_senior,json=Senior" json:"_senior,omitempty"`                     // 免费高级抽奖次数
	XSeniorTime   *int64  `protobuf:"varint,6,opt,name=_senior_time,json=SeniorTime" json:"_senior_time,omitempty"`       // 最后一次高级抽奖时间
}

func (x *TavernDrawInfo) Reset() {
	*x = TavernDrawInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TavernDrawInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TavernDrawInfo) ProtoMessage() {}

func (x *TavernDrawInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TavernDrawInfo.ProtoReflect.Descriptor instead.
func (*TavernDrawInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{67}
}

func (x *TavernDrawInfo) GetXUserId() uint32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *TavernDrawInfo) GetXPoint() uint32 {
	if x != nil && x.XPoint != nil {
		return *x.XPoint
	}
	return 0
}

func (x *TavernDrawInfo) GetXOrdinary() uint32 {
	if x != nil && x.XOrdinary != nil {
		return *x.XOrdinary
	}
	return 0
}

func (x *TavernDrawInfo) GetXOrdinaryTime() int64 {
	if x != nil && x.XOrdinaryTime != nil {
		return *x.XOrdinaryTime
	}
	return 0
}

func (x *TavernDrawInfo) GetXSenior() uint32 {
	if x != nil && x.XSenior != nil {
		return *x.XSenior
	}
	return 0
}

func (x *TavernDrawInfo) GetXSeniorTime() int64 {
	if x != nil && x.XSeniorTime != nil {
		return *x.XSeniorTime
	}
	return 0
}

//英雄天赋
type HeroTalent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId       *uint32 `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`                     //天赋唯一ID
	XTalentId *uint32 `protobuf:"varint,2,opt,name=_talent_id,json=TalentId" json:"_talent_id,omitempty"` //天赋ID
	XLevel    *uint32 `protobuf:"varint,3,opt,name=_level,json=Level" json:"_level,omitempty"`            //天赋等级
}

func (x *HeroTalent) Reset() {
	*x = HeroTalent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroTalent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroTalent) ProtoMessage() {}

func (x *HeroTalent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroTalent.ProtoReflect.Descriptor instead.
func (*HeroTalent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{68}
}

func (x *HeroTalent) GetXId() uint32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *HeroTalent) GetXTalentId() uint32 {
	if x != nil && x.XTalentId != nil {
		return *x.XTalentId
	}
	return 0
}

func (x *HeroTalent) GetXLevel() uint32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

// 读邮件  多封邮件返回
type MoreIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          *int32       `protobuf:"varint,1,req,name=_id,json=Id" json:"_id,omitempty"`                                                           // 邮件id
	XMailTabType *MailTabType `protobuf:"varint,2,opt,name=_mail_tab_type,json=MailTabType,enum=Msg.MailTabType,def=0" json:"_mail_tab_type,omitempty"` // 邮件页签类型
	XConfigId    *int32       `protobuf:"varint,3,opt,name=_config_id,json=ConfigId" json:"_config_id,omitempty"`                                       // 模板id
}

// Default values for MoreIdType fields.
const (
	Default_MoreIdType_XMailTabType = MailTabType_unknow_mail_tab_type
)

func (x *MoreIdType) Reset() {
	*x = MoreIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreIdType) ProtoMessage() {}

func (x *MoreIdType) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreIdType.ProtoReflect.Descriptor instead.
func (*MoreIdType) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{69}
}

func (x *MoreIdType) GetXId() int32 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *MoreIdType) GetXMailTabType() MailTabType {
	if x != nil && x.XMailTabType != nil {
		return *x.XMailTabType
	}
	return Default_MoreIdType_XMailTabType
}

func (x *MoreIdType) GetXConfigId() int32 {
	if x != nil && x.XConfigId != nil {
		return *x.XConfigId
	}
	return 0
}

//上场战斗信息，客户端处理5S延迟使用
type LastBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starttime    *int32     `protobuf:"varint,1,opt,name=starttime" json:"starttime,omitempty"`                                        //开始时间
	Duration     *int32     `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`                                          //持续时间
	BattleResult *int32     `protobuf:"varint,3,opt,name=battle_result,json=battleResult" json:"battle_result,omitempty"`              //攻击方的战斗结果，1-成功,2-失败
	XWx          *int32     `protobuf:"varint,4,opt,name=_wx,json=Wx" json:"_wx,omitempty"`                                            //发生行为横坐标
	XWy          *int32     `protobuf:"varint,5,opt,name=_wy,json=Wy" json:"_wy,omitempty"`                                            //发生行为纵坐标
	XAttUid      *uint32    `protobuf:"varint,7,opt,name=_att_uid,json=AttUid" json:"_att_uid,omitempty"`                              //攻击者用户id
	XAttTid      *uint32    `protobuf:"varint,8,opt,name=_att_tid,json=AttTid" json:"_att_tid,omitempty"`                              //攻击者行军id
	XDefUid      *uint32    `protobuf:"varint,9,opt,name=_def_uid,json=DefUid" json:"_def_uid,omitempty"`                              //被攻击者用户id,野怪则为野怪配置id
	XDefTid      *uint32    `protobuf:"varint,10,opt,name=_def_tid,json=DefTid" json:"_def_tid,omitempty"`                             //被攻击者行军id,野怪则为0
	XMarchType   *MarchType `protobuf:"varint,11,opt,name=_march_type,json=MarchType,enum=Msg.MarchType" json:"_march_type,omitempty"` //这场战斗发生应该是什么行军类型，打怪物:monster,打主堡:castle,打行军:garrsion
}

func (x *LastBattleInfo) Reset() {
	*x = LastBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastBattleInfo) ProtoMessage() {}

func (x *LastBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastBattleInfo.ProtoReflect.Descriptor instead.
func (*LastBattleInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{70}
}

func (x *LastBattleInfo) GetStarttime() int32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *LastBattleInfo) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *LastBattleInfo) GetBattleResult() int32 {
	if x != nil && x.BattleResult != nil {
		return *x.BattleResult
	}
	return 0
}

func (x *LastBattleInfo) GetXWx() int32 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *LastBattleInfo) GetXWy() int32 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

func (x *LastBattleInfo) GetXAttUid() uint32 {
	if x != nil && x.XAttUid != nil {
		return *x.XAttUid
	}
	return 0
}

func (x *LastBattleInfo) GetXAttTid() uint32 {
	if x != nil && x.XAttTid != nil {
		return *x.XAttTid
	}
	return 0
}

func (x *LastBattleInfo) GetXDefUid() uint32 {
	if x != nil && x.XDefUid != nil {
		return *x.XDefUid
	}
	return 0
}

func (x *LastBattleInfo) GetXDefTid() uint32 {
	if x != nil && x.XDefTid != nil {
		return *x.XDefTid
	}
	return 0
}

func (x *LastBattleInfo) GetXMarchType() MarchType {
	if x != nil && x.XMarchType != nil {
		return *x.XMarchType
	}
	return MarchType_castle
}

type AutoRallyBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActivityBoss *int32  `protobuf:"varint,1,opt,name=is_activity_boss,json=isActivityBoss" json:"is_activity_boss,omitempty"` //是否是活动boss 0不是 1是
	BossId         *int32  `protobuf:"varint,2,opt,name=boss_id,json=bossId" json:"boss_id,omitempty"`                           // 活动boss的type 常规boss为0
	Level          []int32 `protobuf:"varint,3,rep,name=level" json:"level,omitempty"`                                           // 勾选的等级 区间的最大值
}

func (x *AutoRallyBoss) Reset() {
	*x = AutoRallyBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRallyBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRallyBoss) ProtoMessage() {}

func (x *AutoRallyBoss) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRallyBoss.ProtoReflect.Descriptor instead.
func (*AutoRallyBoss) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{71}
}

func (x *AutoRallyBoss) GetIsActivityBoss() int32 {
	if x != nil && x.IsActivityBoss != nil {
		return *x.IsActivityBoss
	}
	return 0
}

func (x *AutoRallyBoss) GetBossId() int32 {
	if x != nil && x.BossId != nil {
		return *x.BossId
	}
	return 0
}

func (x *AutoRallyBoss) GetLevel() []int32 {
	if x != nil {
		return x.Level
	}
	return nil
}

// 自动拾取设置
type AutoPickupSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XState              *int32                `protobuf:"varint,1,req,name=_state,json=State" json:"_state,omitempty"`                                           //1:开启 2：关闭
	XPickupSettingGroup []*PickupSettingGroup `protobuf:"bytes,2,rep,name=_pickup_setting_group,json=PickupSettingGroup" json:"_pickup_setting_group,omitempty"` // 自动拾取设置
	XDropShowSetting    []*PickupSettingGroup `protobuf:"bytes,3,rep,name=_drop_show_setting,json=DropShowSetting" json:"_drop_show_setting,omitempty"`          // 掉落显示设置
}

func (x *AutoPickupSetting) Reset() {
	*x = AutoPickupSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoPickupSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoPickupSetting) ProtoMessage() {}

func (x *AutoPickupSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoPickupSetting.ProtoReflect.Descriptor instead.
func (*AutoPickupSetting) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{72}
}

func (x *AutoPickupSetting) GetXState() int32 {
	if x != nil && x.XState != nil {
		return *x.XState
	}
	return 0
}

func (x *AutoPickupSetting) GetXPickupSettingGroup() []*PickupSettingGroup {
	if x != nil {
		return x.XPickupSettingGroup
	}
	return nil
}

func (x *AutoPickupSetting) GetXDropShowSetting() []*PickupSettingGroup {
	if x != nil {
		return x.XDropShowSetting
	}
	return nil
}

// 自动拾取组设置
type PickupSettingGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XGroupId           *int32               `protobuf:"varint,1,req,name=_group_id,json=GroupId" json:"_group_id,omitempty"`                                // 组ID
	XIsEnable          *int32               `protobuf:"varint,2,opt,name=_is_enable,json=IsEnable" json:"_is_enable,omitempty"`                             // 是否开启 0未开启 1开启
	XPickupSettingItem []*PickupSettingItem `protobuf:"bytes,3,rep,name=_pickup_setting_item,json=PickupSettingItem" json:"_pickup_setting_item,omitempty"` // 子项列表
}

func (x *PickupSettingGroup) Reset() {
	*x = PickupSettingGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupSettingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupSettingGroup) ProtoMessage() {}

func (x *PickupSettingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupSettingGroup.ProtoReflect.Descriptor instead.
func (*PickupSettingGroup) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{73}
}

func (x *PickupSettingGroup) GetXGroupId() int32 {
	if x != nil && x.XGroupId != nil {
		return *x.XGroupId
	}
	return 0
}

func (x *PickupSettingGroup) GetXIsEnable() int32 {
	if x != nil && x.XIsEnable != nil {
		return *x.XIsEnable
	}
	return 0
}

func (x *PickupSettingGroup) GetXPickupSettingItem() []*PickupSettingItem {
	if x != nil {
		return x.XPickupSettingItem
	}
	return nil
}

// 项设置
type PickupSettingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XItemId   *int32 `protobuf:"varint,1,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`       // 道具配置表ID
	XIsEnable *int32 `protobuf:"varint,2,opt,name=_is_enable,json=IsEnable" json:"_is_enable,omitempty"` // 是否开启 0未开启 1开启
}

func (x *PickupSettingItem) Reset() {
	*x = PickupSettingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupSettingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupSettingItem) ProtoMessage() {}

func (x *PickupSettingItem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupSettingItem.ProtoReflect.Descriptor instead.
func (*PickupSettingItem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{74}
}

func (x *PickupSettingItem) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *PickupSettingItem) GetXIsEnable() int32 {
	if x != nil && x.XIsEnable != nil {
		return *x.XIsEnable
	}
	return 0
}

// 联盟标志留言
type GuildSignComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUser      *UserSummary `protobuf:"bytes,1,opt,name=_user,json=User" json:"_user,omitempty"`                   // 留言玩家
	XContent   *string      `protobuf:"bytes,2,opt,name=_content,json=Content" json:"_content,omitempty"`          // 留言 内容
	XTime      *uint32      `protobuf:"varint,3,opt,name=_time,json=Time" json:"_time,omitempty"`                  //留言时间
	XCommentId *int64       `protobuf:"varint,4,opt,name=_comment_id,json=CommentId" json:"_comment_id,omitempty"` // 留言id
}

func (x *GuildSignComment) Reset() {
	*x = GuildSignComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSignComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSignComment) ProtoMessage() {}

func (x *GuildSignComment) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSignComment.ProtoReflect.Descriptor instead.
func (*GuildSignComment) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{75}
}

func (x *GuildSignComment) GetXUser() *UserSummary {
	if x != nil {
		return x.XUser
	}
	return nil
}

func (x *GuildSignComment) GetXContent() string {
	if x != nil && x.XContent != nil {
		return *x.XContent
	}
	return ""
}

func (x *GuildSignComment) GetXTime() uint32 {
	if x != nil && x.XTime != nil {
		return *x.XTime
	}
	return 0
}

func (x *GuildSignComment) GetXCommentId() int64 {
	if x != nil && x.XCommentId != nil {
		return *x.XCommentId
	}
	return 0
}

type FpsMonster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XWx *int64 `protobuf:"varint,1,opt,name=_wx,json=Wx" json:"_wx,omitempty"`
	XWy *int64 `protobuf:"varint,2,opt,name=_wy,json=Wy" json:"_wy,omitempty"`
}

func (x *FpsMonster) Reset() {
	*x = FpsMonster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpsMonster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpsMonster) ProtoMessage() {}

func (x *FpsMonster) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpsMonster.ProtoReflect.Descriptor instead.
func (*FpsMonster) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{76}
}

func (x *FpsMonster) GetXWx() int64 {
	if x != nil && x.XWx != nil {
		return *x.XWx
	}
	return 0
}

func (x *FpsMonster) GetXWy() int64 {
	if x != nil && x.XWy != nil {
		return *x.XWy
	}
	return 0
}

type CloudInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId    *int64 `protobuf:"varint,1,opt,name=_id,json=Id" json:"_id,omitempty"`          // 0:代表第1个到第32个格子 1：代表第32到第64个格子 依次递推
	XState *int64 `protobuf:"varint,2,opt,name=_state,json=State" json:"_state,omitempty"` // 一个数字代表32个格子的状态，转为32位二进制之后 每个位代表一个格子 0：未解锁 1:解锁
}

func (x *CloudInfo) Reset() {
	*x = CloudInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInfo) ProtoMessage() {}

func (x *CloudInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInfo.ProtoReflect.Descriptor instead.
func (*CloudInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{77}
}

func (x *CloudInfo) GetXId() int64 {
	if x != nil && x.XId != nil {
		return *x.XId
	}
	return 0
}

func (x *CloudInfo) GetXState() int64 {
	if x != nil && x.XState != nil {
		return *x.XState
	}
	return 0
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x4d, 0x73, 0x67, 0x22, 0xbc, 0x04, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x57, 0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x73, 0x74,
	0x6c, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43,
	0x61, 0x73, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x70, 0x65,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x50, 0x65, 0x61, 0x63, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x09, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x05, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x77, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x72, 0x63, 0x57,
	0x78, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x72, 0x63, 0x57, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x66, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x46, 0x70, 0x73, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x5f, 0x75, 0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x55, 0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x66, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x66, 0x70, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x07, 0x46, 0x70, 0x73, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x5f,
	0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4d, 0x61, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xef, 0x06, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x10, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0f, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x62, 0x6f,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x3a, 0x1b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x09, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x05, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x70, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x61,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x6c, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f,
	0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8a, 0x01, 0x0a, 0x15, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a,
	0x08, 0x66, 0x70, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2f, 0x0a, 0x0a, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x30, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x22, 0x5c, 0x0a, 0x15,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x70, 0x63, 0x5f, 0x77, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x70,
	0x63, 0x57, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x70, 0x63, 0x5f, 0x77, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x57, 0x79, 0x22, 0xec, 0x04, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63,
	0x5f, 0x77, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x70, 0x63, 0x57, 0x78, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70,
	0x63, 0x5f, 0x77, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x70, 0x63, 0x57, 0x79, 0x12, 0x3b, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x16, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x14, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x31,
	0x0a, 0x15, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x5f,
	0x77, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x70,
	0x63, 0x57, 0x78, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63,
	0x5f, 0x77, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x70, 0x63, 0x57, 0x79, 0x22, 0x4b, 0x0a, 0x05, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xdd, 0x05, 0x0a, 0x0a, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x12, 0x25, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x19, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x72,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x16, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x66, 0x6f, 0x72,
	0x67, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x09, 0x5f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0d, 0x5f, 0x6d,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x4d, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x10, 0x5f, 0x6d, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x6d, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x11, 0x5f, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0e, 0x4d, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x5f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x14, 0x4d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x5f, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a,
	0x0d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x50, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x45, 0x78, 0x70, 0x22, 0x5b, 0x0a, 0x0d, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x63, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x80, 0x0d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f,
	0x76, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x69, 0x70, 0x12, 0x19,
	0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x2d, 0x31, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x63, 0x61,
	0x73, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x77, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03,
	0x5f, 0x77, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x57, 0x79, 0x12, 0x1a, 0x0a,
	0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c,
	0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61,
	0x73, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x70, 0x65, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x50, 0x65, 0x61, 0x63, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x04,
	0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x4c, 0x61, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a,
	0x06, 0x5f, 0x65, 0x76, 0x6f, 0x6e, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45,
	0x76, 0x6f, 0x6e, 0x79, 0x12, 0x40, 0x0a, 0x0f, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77, 0x65,
	0x61, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x52, 0x06, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73,
	0x12, 0x11, 0x0a, 0x04, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x45, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x5f, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x53,
	0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x16, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x69, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x69, 0x72, 0x65,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6d, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x65, 0x76, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x76, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x1a, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x76, 0x69, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x76, 0x69, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x63, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x5f, 0x67,
	0x72, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x47, 0x72, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a,
	0x04, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x69, 0x70,
	0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x41,
	0x6c, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x69, 0x66, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x2d, 0x0a, 0x13, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x22, 0xa0,
	0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x52, 0x65, 0x73, 0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x41, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72,
	0x65, 0x73, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12,
	0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x52, 0x65, 0x73, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x45, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x45, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x47, 0x65,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x47, 0x65, 0x6d, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x72, 0x65, 0x73, 0x47, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73,
	0x47, 0x22, 0xd2, 0x03, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x6f, 0x6e, 0x6f, 0x75,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x6e,
	0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x77,
	0x65, 0x65, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x77, 0x65, 0x65,
	0x6b, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x27, 0x0a,
	0x10, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0x3a, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x13, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62,
	0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x4e,
	0x75, 0x6d, 0x22, 0x8d, 0x02, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x68, 0x6f,
	0x6e, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x57, 0x65, 0x65, 0x6b,
	0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x2d, 0x0a, 0x13,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x6e,
	0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x57, 0x65, 0x65, 0x6b, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x61,
	0x73, 0x74, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6e, 0x6f,
	0x75, 0x72, 0x22, 0xac, 0x06, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x0a,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x5f, 0x6c,
	0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x03, 0x4c, 0x61, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x5f, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x74, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x76, 0x74, 0x79, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x72, 0x65, 0x73, 0x41, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x65,
	0x73, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x52, 0x65, 0x73, 0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x72, 0x65, 0x73, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x65, 0x73,
	0x44, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6c,
	0x64, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xc4, 0x03, 0x0a, 0x13, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x0d, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x44, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x11, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20,
	0x0a, 0x0c, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x19, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x6c, 0x6f, 0x67, 0x61, 0x6e, 0x12, 0x2a, 0x0a,
	0x07, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x22,
	0xc5, 0x04, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x77,
	0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x57, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4c,
	0x6f, 0x73, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x53, 0x63, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x72, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x52, 0x75, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x0a, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x4b, 0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x5f,
	0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xc5, 0x09, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x1a, 0x0a, 0x09, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x6f, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x52, 0x06, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x52, 0x65, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x5f, 0x66, 0x61, 0x6d,
	0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12, 0x20,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66,
	0x12, 0x3d, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x42, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45,
	0x78, 0x70, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x57, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x43, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x61, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x49, 0x73, 0x44,
	0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x49,
	0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x70,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x74,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x4c,
	0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x65, 0x78,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x45, 0x78, 0x70, 0x22, 0xa2, 0x01, 0x0a,
	0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x70, 0x74, 0x69, 0x7a, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0d, 0x5f,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x75, 0x66,
	0x66, 0x22, 0x69, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x46, 0x70, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x74, 0x61, 0x72, 0x22, 0x66, 0x0a, 0x11,
	0x4b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x07, 0x0a, 0x0b, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x57, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x69, 0x6e, 0x64, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x07, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x03, 0x4c, 0x61, 0x6e,
	0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1d,
	0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x6f, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x4c, 0x65, 0x66, 0x74,
	0x54, 0x72, 0x6f, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a,
	0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x4b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x43, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x70, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x4e, 0x70, 0x63, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x12,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x69, 0x65, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x78, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x57, 0x79,
	0x12, 0x26, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x46, 0x69, 0x78, 0x22, 0x4c, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6e, 0x65, 0x77, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x17, 0x72, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x15, 0x0a, 0x04, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x03, 0x56, 0x69, 0x70, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d,
	0x22, 0x7f, 0x0a, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x58, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x48, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x58, 0x12,
	0x0d, 0x0a, 0x02, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x59, 0x12, 0x0d,
	0x0a, 0x02, 0x5f, 0x77, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x57, 0x12, 0x0d, 0x0a,
	0x02, 0x5f, 0x68, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x48, 0x22, 0x4a, 0x0a, 0x07,
	0x6a, 0x77, 0x65, 0x6c, 0x73, 0x65, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x16, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x22, 0x62, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x50,
	0x6f, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0xa2, 0x03, 0x0a, 0x19, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x78,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x58, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x79, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x59, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x13, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x64, 0x0a, 0x1d, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x73, 0x67, 0x2e,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1a, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x58, 0x0a, 0x1c,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x18, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x5f, 0x70, 0x73, 0x76, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x50, 0x73, 0x76, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x2a, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x02, 0x0a,
	0x0f, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x5f, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0c, 0x46, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x66, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x54, 0x72, 0x6f, 0x6f, 0x70, 0x4e, 0x75,
	0x6d, 0x22, 0x99, 0x03, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x72, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x19,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x16, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77, 0x65,
	0x61, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x52, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12,
	0x4c, 0x0a, 0x15, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a,
	0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x6e, 0x65, 0x77, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x11,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x08, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x5f, 0x63, 0x69, 0x76, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x43, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a,
	0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x11, 0x0a, 0x04, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x47,
	0x69, 0x64, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x58, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x59,
	0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22,
	0xa0, 0x03, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x77, 0x6f, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x57, 0x6f, 0x6f, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x5f, 0x69, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x72,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x6f,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x57, 0x6f, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x69, 0x72, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x72, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x57, 0x78, 0x12,
	0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x57, 0x79,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdf, 0x04,
	0x0a, 0x10, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x04, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x72, 0x6f,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f,
	0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x67, 0x72, 0x6f,
	0x77, 0x5f, 0x65, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x47, 0x72,
	0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x49, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x17, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x50, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x22, 0x0a, 0x0d, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xcf, 0x01, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x29, 0x0a, 0x16, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x11,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x41,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x41, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x72, 0x65, 0x73, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73,
	0x42, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x52, 0x65, 0x73, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x5f,
	0x72, 0x65, 0x73, 0x47, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x47,
	0x12, 0x13, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x45, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x65, 0x73, 0x45, 0x22, 0xc1, 0x01, 0x0a, 0x10, 0x74,
	0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53,
	0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x57, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x61, 0x74, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x74, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x61, 0x74, 0x74, 0x5f, 0x74, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x74, 0x74, 0x54, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x08,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x44, 0x65, 0x66, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x65, 0x66, 0x54, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x6d, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x6a, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x5f,
	0x62, 0x6f, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc2, 0x01,
	0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x15,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x12, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x09, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x50,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x22, 0x4d, 0x0a, 0x13, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2f,
	0x0a, 0x0b, 0x66, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x77, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x57, 0x78, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x77, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x57, 0x79, 0x22,
	0x34, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x66, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x76, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x0f, 0x61,
	0x72, 0x6d, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6f, 0x6c,
	0x64, 0x69, 0x65, 0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x70, 0x63, 0x10, 0x03, 0x2a,
	0x86, 0x09, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6e, 0x70, 0x63, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x75, 0x69, 0x6e,
	0x73, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x6d, 0x61,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x63, 0x69, 0x74, 0x79, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x62, 0x65, 0x72, 0x67, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12,
	0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x0a, 0x12, 0x16, 0x0a,
	0x12, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66,
	0x61, 0x72, 0x6d, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x62, 0x6f, 0x73, 0x73, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10,
	0x0d, 0x12, 0x18, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x65, 0x72,
	0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x10, 0x11, 0x12, 0x17,
	0x0a, 0x13, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x13, 0x12, 0x13,
	0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x75, 0x6d, 0x70,
	0x68, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x15, 0x12, 0x19,
	0x0a, 0x15, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x62, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x6d, 0x61, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x63,
	0x68, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66,
	0x61, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x70, 0x75, 0x6c, 0x74, 0x10, 0x18, 0x12, 0x18,
	0x0a, 0x14, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x61, 0x6e, 0x65, 0x5f, 0x77,
	0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x10,
	0x1a, 0x12, 0x18, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x6d,
	0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x62, 0x61, 0x6c, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x10, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x61, 0x70,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x6c, 0x74, 0x61, 0x72, 0x10, 0x22, 0x12, 0x16, 0x0a, 0x12,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x72,
	0x6f, 0x6c, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x10, 0x25,
	0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x6d, 0x62,
	0x10, 0x26, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x61,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x6e, 0x70, 0x63, 0x10, 0x29, 0x12,
	0x15, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x6f, 0x75, 0x73, 0x10, 0x2a, 0x12, 0x1c, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f,
	0x75, 0x73, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x10, 0x2c, 0x12,
	0x16, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x5f, 0x68, 0x65, 0x6c, 0x70, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x66, 0x70, 0x73, 0x10, 0x2e, 0x12, 0x18,
	0x0a, 0x14, 0x6d, 0x61, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x6e, 0x74, 0x6f, 0x75, 0x63,
	0x68, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x2f, 0x2a, 0x3d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6e, 0x74, 0x10, 0x01, 0x2a, 0x9c, 0x01, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x1b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x75, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x44, 0x0a,
	0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x10, 0x01, 0x2a, 0x51, 0x0a, 0x10, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x77, 0x65, 0x61, 0x72, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x0d, 0x77, 0x65, 0x61, 0x72, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x70, 0x61, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x77, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x65, 0x74, 0x10, 0x09, 0x12,
	0x0a, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x62,
	0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x74, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x65, 0x63,
	0x6b, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x0c, 0x2a, 0xdd, 0x06, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x75, 0x69, 0x6e,
	0x73, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x10,
	0x06, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x68, 0x69, 0x70, 0x10, 0x08, 0x12, 0x09,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e,
	0x72, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x0b,
	0x12, 0x13, 0x0a, 0x0f, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x77, 0x61, 0x79, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x61, 0x72,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x77, 0x61, 0x72, 0x5f, 0x77, 0x61, 0x79, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x77, 0x61, 0x72, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x69, 0x6e, 0x67, 0x63,
	0x61, 0x73, 0x74, 0x6c, 0x65, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74,
	0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x67,
	0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0x22,
	0x12, 0x12, 0x0a, 0x0e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x61, 0x72, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x61, 0x72, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x74, 0x61, 0x72, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09,
	0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x10, 0x26, 0x12, 0x16, 0x0a, 0x12, 0x67,
	0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x10, 0x28, 0x12, 0x09, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0x29, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x6f, 0x6d, 0x62,
	0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x70, 0x63, 0x10, 0x2b,
	0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x10, 0x2c, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x2d, 0x12, 0x0e, 0x0a, 0x0a,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x73, 0x10, 0x2f, 0x12, 0x10,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x30,
	0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x10, 0x31,
	0x12, 0x15, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x32, 0x2a, 0x9c, 0x02, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x72, 0x65, 0x73, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x42,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x43, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x76, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x45, 0x10, 0x0a, 0x12,
	0x0c, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x10, 0x0b, 0x12, 0x11, 0x0a,
	0x0d, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x10, 0x0c,
	0x12, 0x11, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x68, 0x6f, 0x6e,
	0x6f, 0x72, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x10,
	0x0f, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x72, 0x6e, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x73,
	0x6b, 0x69, 0x6e, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x10,
	0x12, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x10, 0x13, 0x12, 0x08, 0x0a, 0x04, 0x72,
	0x65, 0x73, 0x47, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x10, 0x15, 0x2a, 0x5f, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x10, 0x05, 0x2a, 0x76, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x75, 0x70, 0x73, 0x74, 0x61, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x65,
	0x6e, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x10, 0x08, 0x2a,
	0xe4, 0x06, 0x0a, 0x05, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x72, 0x75, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x09,
	0x12, 0x16, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x67, 0x61, 0x72, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x0d,
	0x12, 0x15, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x0f,
	0x12, 0x16, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18,
	0x70, 0x65, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x15,
	0x12, 0x17, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x61, 0x74, 0x61, 0x70, 0x75, 0x6c, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x1b, 0x12, 0x1f, 0x0a, 0x1b,
	0x63, 0x61, 0x74, 0x61, 0x70, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x1c, 0x12, 0x10, 0x0a,
	0x0c, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x1d, 0x12,
	0x19, 0x0a, 0x15, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x6c, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10,
	0x21, 0x12, 0x16, 0x0a, 0x12, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x61, 0x6c, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x10, 0x24, 0x2a, 0x40, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x0e, 0x61, 0x72, 0x6d, 0x79,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x06, 0x2a, 0xce,
	0x02, 0x0a, 0x16, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x69,
	0x66, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x0b, 0x12, 0x18, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x6f, 0x6f, 0x70, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x61, 0x70, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x63, 0x68, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x10, 0x12, 0x2a,
	0xe1, 0x02, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x10, 0x06,
	0x12, 0x11, 0x0a, 0x0d, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x10, 0x08,
	0x12, 0x11, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x61, 0x63, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x65, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x61, 0x64, 0x76, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x67, 0x74, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x74,
	0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x0e, 0x12, 0x14, 0x0a,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x67,
	0x74, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69,
	0x6c, 0x10, 0x11, 0x2a, 0x67, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x75, 0x6e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x66, 0x69, 0x67, 0x68, 0x74, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x06, 0x2a, 0x80, 0x01, 0x0a,
	0x0d, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x61,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x05, 0x2a,
	0x4a, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65,
	0x63, 0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x68, 0x65, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x10, 0x05, 0x2a, 0xf2, 0x04, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x72, 0x69,
	0x6b, 0x61, 0x61, 0x6e, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x72, 0x61, 0x62, 0x69,
	0x63, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x71, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x6c, 0x61, 0x72, 0x75, 0x73, 0x69, 0x61, 0x6e, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x7a, 0x65, 0x63,
	0x68, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x08, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x75, 0x74, 0x63, 0x68, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e,
	0x67, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x61, 0x6e, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x72, 0x6f, 0x65, 0x73, 0x65,
	0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x0d, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x65, 0x65, 0x6b,
	0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x10, 0x11, 0x12, 0x0d,
	0x0a, 0x09, 0x48, 0x75, 0x6e, 0x67, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x10, 0x12, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x63, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x61, 0x70,
	0x61, 0x6e, 0x65, 0x73, 0x65, 0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x6f, 0x72, 0x65, 0x61,
	0x6e, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x61, 0x74, 0x76, 0x69, 0x61, 0x6e, 0x10, 0x18,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x69, 0x74, 0x68, 0x75, 0x61, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x19,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x72, 0x77, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x10, 0x1a, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x65, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x6f, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x73,
	0x73, 0x69, 0x61, 0x6e, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x62, 0x6f, 0x43,
	0x72, 0x6f, 0x61, 0x74, 0x69, 0x61, 0x6e, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6c, 0x6f,
	0x76, 0x61, 0x6b, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x6c, 0x6f, 0x76, 0x65, 0x6e, 0x69,
	0x61, 0x6e, 0x10, 0x21, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x10,
	0x22, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x77, 0x65, 0x64, 0x69, 0x73, 0x68, 0x10, 0x23, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x68, 0x61, 0x69, 0x10, 0x24, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x75, 0x72, 0x6b,
	0x69, 0x73, 0x68, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6b, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x61, 0x6e, 0x10, 0x26, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x10, 0x27, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x65, 0x73,
	0x65, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x61, 0x69, 0x57, 0x61, 0x6e, 0x10, 0x29, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x2a, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x49, 0x43, 0x50, 0x10, 0x2b, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x10, 0x2c, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x10, 0x2d,
	0x2a, 0x38, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x3d, 0x0a, 0x13, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x35, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x34, 0x10,
	0x02, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x33, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x32, 0x10,
	0x04, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x31, 0x10, 0x05, 0x2a, 0x5a, 0x0a, 0x0c, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x6c, 0x6f, 0x6c,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6c, 0x6f, 0x6c,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x61, 0x72,
	0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x76, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x61, 0x72, 0x6c, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x64, 0x75, 0x6b, 0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x5f,
	0x64, 0x75, 0x6b, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x2a, 0x74, 0x0a, 0x14, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x62, 0x6c, 0x75, 0x65, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x75, 0x72,
	0x70, 0x6c, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x05, 0x2a,
	0x69, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x04, 0x2a, 0x3a, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0b, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x69,
	0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x10, 0x02, 0x2a, 0xff, 0x02, 0x0a, 0x14, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x62,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f,
	0x6a, 0x6f, 0x62, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72,
	0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x6c, 0x61,
	0x6d, 0x65, 0x6e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d,
	0x61, 0x6e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x09, 0x12, 0x0f,
	0x0a, 0x0b, 0x76, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x10, 0x0a, 0x12,
	0x10, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x10,
	0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x62,
	0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x6a, 0x6f,
	0x62, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x6a,
	0x6f, 0x62, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x6a, 0x6f,
	0x62, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x6f, 0x6f, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x10,
	0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x6c, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62,
	0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x6c, 0x61, 0x64, 0x79, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x65, 0x72, 0x10, 0x14, 0x2a, 0xd1, 0x01, 0x0a, 0x13, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x72, 0x6d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x72, 0x6f, 0x6e, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x10, 0x06, 0x2a, 0x48, 0x0a, 0x09,
	0x66, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d,
	0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x61, 0x72, 0x6d, 0x5f,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f,
	0x69, 0x72, 0x6f, 0x6e, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x06, 0x2a,
	0xb6, 0x02, 0x0a, 0x19, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10,
	0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5f, 0x63, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x65, 0x72, 0x10, 0x10,
	0x12, 0x24, 0x0a, 0x20, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5f,
	0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x5f,
	0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x1f, 0x2a, 0x58, 0x0a, 0x17, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x10, 0x04, 0x2a, 0x9c, 0x02, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x6f,
	0x75, 0x67, 0x68, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x10,
	0x09, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x68, 0x6f, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x10,
	0x0b, 0x2a, 0x6c, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x66, 0x61, 0x72, 0x6d, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x77, 0x6f, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x72, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x10, 0x05, 0x42,
	0x11, 0x5a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x62,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 39)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_common_proto_goTypes = []interface{}{
	(Result)(0),                        // 0: Msg.result
	(BattleResult)(0),                  // 1: Msg.battle_result
	(ArmyGroupType)(0),                 // 2: Msg.army_group_type
	(MapinfoType)(0),                   // 3: Msg.mapinfo_type
	(GoodsType)(0),                     // 4: Msg.goods_type
	(GoodsCheckStatus)(0),              // 5: Msg.goods_check_status
	(GoodsSaleScope)(0),                // 6: Msg.goods_sale_scope
	(GoodsDealType)(0),                 // 7: Msg.goods_deal_type
	(WearActionType)(0),                // 8: Msg.wear_action_type
	(WearPosition)(0),                  // 9: Msg.wear_position
	(MarchType)(0),                     // 10: Msg.march_type
	(ItemResourceType)(0),              // 11: Msg.item_resource_type
	(ItemCategory)(0),                  // 12: Msg.item_category
	(ForgeType)(0),                     // 13: Msg.forge_type
	(Mtype)(0),                         // 14: Msg.mtype
	(PushSwitchType)(0),                // 15: Msg.push_switch_type
	(ArmyBuffType)(0),                  // 16: Msg.army_buff_type
	(PushNotificationType)(0),          // 17: Msg.push_notification_type
	(TaskType)(0),                      // 18: Msg.task_type
	(MailType)(0),                      // 19: Msg.mail_type
	(MailTabType)(0),                   // 20: Msg.mail_tab_type
	(HelpType)(0),                      // 21: Msg.help_type
	(LanType)(0),                       // 22: Msg.lan_type
	(GuildJoinType)(0),                 // 23: Msg.guild_join_type
	(GuildMemAuthority)(0),             // 24: Msg.guild_mem_authority
	(GuildStatus)(0),                   // 25: Msg.guild_status
	(TitleType)(0),                     // 26: Msg.title_type
	(GeneralQualityType)(0),            // 27: Msg.general_quality_type
	(GeneralPropertyType)(0),           // 28: Msg.general_property_type
	(SubCityPolicy)(0),                 // 29: Msg.sub_city_policy
	(KingCastleJobType)(0),             // 30: Msg.king_castle_job_type
	(GuildBuildingType)(0),             // 31: Msg.guild_building_type
	(FarmType)(0),                      // 32: Msg.farm_type
	(GuildBuildingStatus)(0),           // 33: Msg.guild_building_status
	(RankType)(0),                      // 34: Msg.rank_type
	(BattlefieldBuildingType)(0),       // 35: Msg.battlefield_building_type
	(BattlefieldRecordType)(0),         // 36: Msg.battlefield_record_type
	(ErrorCode)(0),                     // 37: Msg.error_code
	(WorldSearchType)(0),               // 38: Msg.world_search_type
	(*Mapinfo)(nil),                    // 39: Msg.mapinfo
	(*FpsMonsterInfo)(nil),             // 40: Msg.fps_monster_info
	(*IntelInfo)(nil),                  // 41: Msg.intel_info
	(*GoodsInfo)(nil),                  // 42: Msg.goods_info
	(*DealGoodsInfo)(nil),              // 43: Msg.deal_goods_info
	(*ServerInfo)(nil),                 // 44: Msg.server_info
	(*TaskChapterInfo)(nil),            // 45: Msg.task_chapter_info
	(*TaskSubChapterInfo)(nil),         // 46: Msg.task_sub_chapter_info
	(*FpsRank)(nil),                    // 47: Msg.fps_rank
	(*TaskCondition)(nil),              // 48: Msg.task_condition
	(*TaskTargetCondition)(nil),        // 49: Msg.task_target_condition
	(*Task)(nil),                       // 50: Msg.task
	(*TaskCycle)(nil),                  // 51: Msg.task_cycle
	(*Troop)(nil),                      // 52: Msg.troop
	(*WearEquip)(nil),                  // 53: Msg.wear_equip
	(*NewUserGuideProgress)(nil),       // 54: Msg.new_user_guide_progress
	(*HeroEquip)(nil),                  // 55: Msg.hero_equip
	(*KingdomTitle)(nil),               // 56: Msg.kingdom_title
	(*UserSummary)(nil),                // 57: Msg.user_summary
	(*UserInfoPermission)(nil),         // 58: Msg.user_info_permission
	(*ResourceInfo)(nil),               // 59: Msg.resource_info
	(*GuildMember)(nil),                // 60: Msg.guild_member
	(*GuildData)(nil),                  // 61: Msg.guild_data
	(*GuildMemberHonour)(nil),          // 62: Msg.guild_member_honour
	(*GuildSummary)(nil),               // 63: Msg.guild_summary
	(*GuildCampSummary)(nil),           // 64: Msg.guild_camp_summary
	(*GuildMergeSummary)(nil),          // 65: Msg.guild_merge_summary
	(*StatisticalData)(nil),            // 66: Msg.statistical_data
	(*GeneralSummary)(nil),             // 67: Msg.general_summary
	(*General)(nil),                    // 68: Msg.general
	(*GeneralFeature)(nil),             // 69: Msg.general_feature
	(*GeneralBaptizeItem)(nil),         // 70: Msg.general_baptize_item
	(*GeneralData)(nil),                // 71: Msg.general_data
	(*KingAwardRecord)(nil),            // 72: Msg.King_award_record
	(*KindomInfo)(nil),                 // 73: Msg.kindom_info
	(*TempleBuildingInfo)(nil),         // 74: Msg.temple_building_info
	(*KingInfo)(nil),                   // 75: Msg.king_info
	(*BuffInfo)(nil),                   // 76: Msg.buff_info
	(*BuffInfoNew)(nil),                // 77: Msg.buff_info_new
	(*RotaryGoodItemRecord)(nil),       // 78: Msg.rotary_good_item_record
	(*FavoriteCoordInfo)(nil),          // 79: Msg.favorite_coord_info
	(*SkinData)(nil),                   // 80: Msg.skin_data
	(*MapRegion)(nil),                  // 81: Msg.map_region
	(*Jwelset)(nil),                    // 82: Msg.jwelset
	(*CrossServerRank_Info)(nil),       // 83: Msg.cross_server_rank_Info
	(*RefineAttribute)(nil),            // 84: Msg.refine_attribute
	(*BattlefieldBuildingInfo)(nil),    // 85: Msg.battlefield_building_info
	(*BattlefieldBuildingSupport)(nil), // 86: Msg.battlefield_building_support
	(*BattleRecordInfo)(nil),           // 87: Msg.battle_record_info
	(*IpExpired)(nil),                  // 88: Msg.ip_expired
	(*FmTeamSummary)(nil),              // 89: Msg.fm_team_summary
	(*FmTeamMember)(nil),               // 90: Msg.fm_team_member
	(*ComItem)(nil),                    // 91: Msg.com_item
	(*GuildShopBuyNew)(nil),            // 92: Msg.guild_shop_buy_new
	(*GuildBoxSummary)(nil),            // 93: Msg.guild_box_summary
	(*GuildBoxOpenUser)(nil),           // 94: Msg.guild_box_open_user
	(*GuildBoxItem)(nil),               // 95: Msg.guild_box_item
	(*GuildTechDonateRanking)(nil),     // 96: Msg.guild_tech_donate_ranking
	(*GuildBuildingSummary)(nil),       // 97: Msg.guild_building_summary
	(*GuildTransportSummary)(nil),      // 98: Msg.guild_transport_summary
	(*BaseAttribute)(nil),              // 99: Msg.base_attribute
	(*AdditionalAttribute)(nil),        // 100: Msg.additional_attribute
	(*PetSummaryInfo)(nil),             // 101: Msg.pet_summary_info
	(*PlayerTreasureInfo)(nil),         // 102: Msg.player_treasure_info
	(*PetSummarySkillInfo)(nil),        // 103: Msg.pet_summary_skill_info
	(*KillMonsterInfo)(nil),            // 104: Msg.kill_monster_info
	(*UserResource)(nil),               // 105: Msg.user_resource
	(*TavernDrawInfo)(nil),             // 106: Msg.tavern_draw_info
	(*HeroTalent)(nil),                 // 107: Msg.hero_talent
	(*MoreIdType)(nil),                 // 108: Msg.more_id_type
	(*LastBattleInfo)(nil),             // 109: Msg.last_battle_info
	(*AutoRallyBoss)(nil),              // 110: Msg.auto_rally_boss
	(*AutoPickupSetting)(nil),          // 111: Msg.auto_pickup_setting
	(*PickupSettingGroup)(nil),         // 112: Msg.pickup_setting_group
	(*PickupSettingItem)(nil),          // 113: Msg.pickup_setting_item
	(*GuildSignComment)(nil),           // 114: Msg.guild_sign_comment
	(*FpsMonster)(nil),                 // 115: Msg.fps_monster
	(*CloudInfo)(nil),                  // 116: Msg.cloud_info
}
var file_common_proto_depIdxs = []int32{
	50,  // 0: Msg.mapinfo._task:type_name -> Msg.task
	40,  // 1: Msg.mapinfo._fps_monster:type_name -> Msg.fps_monster_info
	41,  // 2: Msg.mapinfo._intel_info:type_name -> Msg.intel_info
	47,  // 3: Msg.fps_monster_info._fps_rank:type_name -> Msg.fps_rank
	39,  // 4: Msg.intel_info._mapinfo:type_name -> Msg.mapinfo
	4,   // 5: Msg.goods_info._goods_type:type_name -> Msg.goods_type
	5,   // 6: Msg.goods_info._goods_check_status:type_name -> Msg.goods_check_status
	6,   // 7: Msg.goods_info._sale_scope:type_name -> Msg.goods_sale_scope
	7,   // 8: Msg.goods_info._deal_type:type_name -> Msg.goods_deal_type
	91,  // 9: Msg.goods_info._item:type_name -> Msg.com_item
	101, // 10: Msg.goods_info._summary_info:type_name -> Msg.pet_summary_info
	46,  // 11: Msg.task_chapter_info._task_sub_chapter_info:type_name -> Msg.task_sub_chapter_info
	57,  // 12: Msg.fps_rank._user_info:type_name -> Msg.user_summary
	48,  // 13: Msg.task._task_condition:type_name -> Msg.task_condition
	49,  // 14: Msg.task._task_target_condition:type_name -> Msg.task_target_condition
	9,   // 15: Msg.wear_equip._pos:type_name -> Msg.wear_position
	84,  // 16: Msg.wear_equip._refine_attribute:type_name -> Msg.refine_attribute
	84,  // 17: Msg.wear_equip._pending_refine_attribute:type_name -> Msg.refine_attribute
	99,  // 18: Msg.wear_equip._m_base_attribute:type_name -> Msg.base_attribute
	100, // 19: Msg.wear_equip._m_additional_attribute:type_name -> Msg.additional_attribute
	30,  // 20: Msg.kingdom_title._title:type_name -> Msg.king_castle_job_type
	22,  // 21: Msg.user_summary._lan:type_name -> Msg.lan_type
	66,  // 22: Msg.user_summary._statistical_data:type_name -> Msg.statistical_data
	26,  // 23: Msg.user_summary._title:type_name -> Msg.title_type
	30,  // 24: Msg.user_summary._job_title_type:type_name -> Msg.king_castle_job_type
	53,  // 25: Msg.user_summary._equips:type_name -> Msg.wear_equip
	80,  // 26: Msg.user_summary._skin_data:type_name -> Msg.skin_data
	102, // 27: Msg.user_summary._treasure:type_name -> Msg.player_treasure_info
	58,  // 28: Msg.user_summary._permission:type_name -> Msg.user_info_permission
	57,  // 29: Msg.guild_member._summary:type_name -> Msg.user_summary
	24,  // 30: Msg.guild_member._auth:type_name -> Msg.guild_mem_authority
	23,  // 31: Msg.guild_summary._join_type:type_name -> Msg.guild_join_type
	60,  // 32: Msg.guild_summary._owner:type_name -> Msg.guild_member
	22,  // 33: Msg.guild_summary._lan:type_name -> Msg.lan_type
	25,  // 34: Msg.guild_summary._status:type_name -> Msg.guild_status
	60,  // 35: Msg.guild_summary._elector:type_name -> Msg.guild_member
	60,  // 36: Msg.guild_merge_summary._leader:type_name -> Msg.guild_member
	27,  // 37: Msg.general._quality:type_name -> Msg.general_quality_type
	53,  // 38: Msg.general._equips:type_name -> Msg.wear_equip
	70,  // 39: Msg.general._baptize_item:type_name -> Msg.general_baptize_item
	69,  // 40: Msg.general._feature:type_name -> Msg.general_feature
	71,  // 41: Msg.general._data:type_name -> Msg.general_data
	107, // 42: Msg.general_data._talent_list:type_name -> Msg.hero_talent
	57,  // 43: Msg.King_award_record.user:type_name -> Msg.user_summary
	57,  // 44: Msg.kindom_info._occupier:type_name -> Msg.user_summary
	57,  // 45: Msg.kindom_info._king:type_name -> Msg.user_summary
	22,  // 46: Msg.kindom_info._lan:type_name -> Msg.lan_type
	72,  // 47: Msg.kindom_info.awards:type_name -> Msg.King_award_record
	74,  // 48: Msg.kindom_info._temple_building_info:type_name -> Msg.temple_building_info
	3,   // 49: Msg.temple_building_info._type:type_name -> Msg.mapinfo_type
	57,  // 50: Msg.temple_building_info._occupy_user:type_name -> Msg.user_summary
	57,  // 51: Msg.king_info._user:type_name -> Msg.user_summary
	35,  // 52: Msg.battlefield_building_info._type:type_name -> Msg.battlefield_building_type
	57,  // 53: Msg.battlefield_building_info._occupy_user:type_name -> Msg.user_summary
	87,  // 54: Msg.battlefield_building_info._battle_record_info:type_name -> Msg.battle_record_info
	86,  // 55: Msg.battlefield_building_info._battlefield_building_support:type_name -> Msg.battlefield_building_support
	57,  // 56: Msg.battle_record_info._user:type_name -> Msg.user_summary
	36,  // 57: Msg.battle_record_info._battlefield_record_type:type_name -> Msg.battlefield_record_type
	57,  // 58: Msg.battle_record_info._psv_user:type_name -> Msg.user_summary
	90,  // 59: Msg.fm_team_summary._fm_team_member:type_name -> Msg.fm_team_member
	57,  // 60: Msg.fm_team_member._summary:type_name -> Msg.user_summary
	84,  // 61: Msg.com_item._refine_attribute:type_name -> Msg.refine_attribute
	84,  // 62: Msg.com_item._pending_refine_attribute:type_name -> Msg.refine_attribute
	53,  // 63: Msg.com_item._equip:type_name -> Msg.wear_equip
	102, // 64: Msg.com_item._player_treasure_info:type_name -> Msg.player_treasure_info
	94,  // 65: Msg.guild_box_summary._open_info:type_name -> Msg.guild_box_open_user
	95,  // 66: Msg.guild_box_open_user._items:type_name -> Msg.guild_box_item
	57,  // 67: Msg.guild_transport_summary._user:type_name -> Msg.user_summary
	28,  // 68: Msg.base_attribute._id:type_name -> Msg.general_property_type
	103, // 69: Msg.pet_summary_info._pet_summary_skill_list:type_name -> Msg.pet_summary_skill_info
	9,   // 70: Msg.player_treasure_info._position:type_name -> Msg.wear_position
	20,  // 71: Msg.more_id_type._mail_tab_type:type_name -> Msg.mail_tab_type
	10,  // 72: Msg.last_battle_info._march_type:type_name -> Msg.march_type
	112, // 73: Msg.auto_pickup_setting._pickup_setting_group:type_name -> Msg.pickup_setting_group
	112, // 74: Msg.auto_pickup_setting._drop_show_setting:type_name -> Msg.pickup_setting_group
	113, // 75: Msg.pickup_setting_group._pickup_setting_item:type_name -> Msg.pickup_setting_item
	57,  // 76: Msg.guild_sign_comment._user:type_name -> Msg.user_summary
	77,  // [77:77] is the sub-list for method output_type
	77,  // [77:77] is the sub-list for method input_type
	77,  // [77:77] is the sub-list for extension type_name
	77,  // [77:77] is the sub-list for extension extendee
	0,   // [0:77] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mapinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpsMonsterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealGoodsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSubChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpsRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTargetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Troop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserGuideProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingdomTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberHonour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCampSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMergeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*General); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralBaptizeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingAwardRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempleBuildingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffInfoNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotaryGoodItemRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteCoordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jwelset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossServerRank_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlefieldBuildingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlefieldBuildingSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmTeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildShopBuyNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxOpenUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBoxItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTechDonateRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBuildingSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTransportSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetSummaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTreasureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetSummarySkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillMonsterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TavernDrawInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroTalent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRallyBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoPickupSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupSettingGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupSettingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSignComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpsMonster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      39,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
