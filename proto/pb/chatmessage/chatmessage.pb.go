// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: chatmessage.proto

package chatmessage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	pb "proxy/proto/pb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//聊天消息类型
type MessageType int32

const (
	MessageType_message_type_text     MessageType = 0  //文本消息
	MessageType_message_type_voice    MessageType = 1  //语音消息
	MessageType_message_type_sys_text MessageType = 2  //系统文本消息
	MessageType_message_type_photo    MessageType = 3  //图片消息
	MessageType_message_type_mail     MessageType = 4  //邮件消息
	MessageType_message_type_coord    MessageType = 5  //坐标消息
	MessageType_message_type_equip    MessageType = 6  //装备消息
	MessageType_message_type_general  MessageType = 7  //将军消息
	MessageType_message_type_fame     MessageType = 8  //成就消息
	MessageType_message_type_goods    MessageType = 9  //商品消息
	MessageType_message_type_pet      MessageType = 10 //宠物消息
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "message_type_text",
		1:  "message_type_voice",
		2:  "message_type_sys_text",
		3:  "message_type_photo",
		4:  "message_type_mail",
		5:  "message_type_coord",
		6:  "message_type_equip",
		7:  "message_type_general",
		8:  "message_type_fame",
		9:  "message_type_goods",
		10: "message_type_pet",
	}
	MessageType_value = map[string]int32{
		"message_type_text":     0,
		"message_type_voice":    1,
		"message_type_sys_text": 2,
		"message_type_photo":    3,
		"message_type_mail":     4,
		"message_type_coord":    5,
		"message_type_equip":    6,
		"message_type_general":  7,
		"message_type_fame":     8,
		"message_type_goods":    9,
		"message_type_pet":      10,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatmessage_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_chatmessage_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MessageType(num)
	return nil
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{0}
}

//聊天消息发起者类型
type MessageSenderType int32

const (
	MessageSenderType_message_sender_normal       MessageSenderType = 0 //玩家发送的正常聊天消息
	MessageSenderType_message_sender_notice       MessageSenderType = 1 //玩家利用道具发起的公告消息
	MessageSenderType_message_sender_force_notice MessageSenderType = 2 //广播消息循环过程中，不被中断
)

// Enum value maps for MessageSenderType.
var (
	MessageSenderType_name = map[int32]string{
		0: "message_sender_normal",
		1: "message_sender_notice",
		2: "message_sender_force_notice",
	}
	MessageSenderType_value = map[string]int32{
		"message_sender_normal":       0,
		"message_sender_notice":       1,
		"message_sender_force_notice": 2,
	}
)

func (x MessageSenderType) Enum() *MessageSenderType {
	p := new(MessageSenderType)
	*p = x
	return p
}

func (x MessageSenderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSenderType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatmessage_proto_enumTypes[1].Descriptor()
}

func (MessageSenderType) Type() protoreflect.EnumType {
	return &file_chatmessage_proto_enumTypes[1]
}

func (x MessageSenderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MessageSenderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MessageSenderType(num)
	return nil
}

// Deprecated: Use MessageSenderType.Descriptor instead.
func (MessageSenderType) EnumDescriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{1}
}

//聊天频道
type ChatChannelType int32

const (
	ChatChannelType_world_channel       ChatChannelType = 0 // 世界频道
	ChatChannelType_guild_channel       ChatChannelType = 1 // 公会频道
	ChatChannelType_personal_channel    ChatChannelType = 2 // 私聊频道
	ChatChannelType_room_channel        ChatChannelType = 3 // 聊天室
	ChatChannelType_cross_channel       ChatChannelType = 4 // 跨服战频道
	ChatChannelType_battlefield_channel ChatChannelType = 5 //战场频道
)

// Enum value maps for ChatChannelType.
var (
	ChatChannelType_name = map[int32]string{
		0: "world_channel",
		1: "guild_channel",
		2: "personal_channel",
		3: "room_channel",
		4: "cross_channel",
		5: "battlefield_channel",
	}
	ChatChannelType_value = map[string]int32{
		"world_channel":       0,
		"guild_channel":       1,
		"personal_channel":    2,
		"room_channel":        3,
		"cross_channel":       4,
		"battlefield_channel": 5,
	}
)

func (x ChatChannelType) Enum() *ChatChannelType {
	p := new(ChatChannelType)
	*p = x
	return p
}

func (x ChatChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatmessage_proto_enumTypes[2].Descriptor()
}

func (ChatChannelType) Type() protoreflect.EnumType {
	return &file_chatmessage_proto_enumTypes[2]
}

func (x ChatChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatChannelType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatChannelType(num)
	return nil
}

// Deprecated: Use ChatChannelType.Descriptor instead.
func (ChatChannelType) EnumDescriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{2}
}

//坐标类型
type CoordType int32

const (
	CoordType_plain            CoordType = 0  //空地
	CoordType_resource         CoordType = 1  //资源点
	CoordType_city             CoordType = 2  //主城
	CoordType_npc_subcity      CoordType = 3  //npc分城
	CoordType_subcity          CoordType = 4  //分城
	CoordType_kingdom          CoordType = 5  //王城
	CoordType_monster          CoordType = 6  //野怪
	CoordType_relic            CoordType = 7  //遗迹
	CoordType_garrison         CoordType = 8  //驻军
	CoordType_snowberg         CoordType = 9  //异鬼雪山
	CoordType_guild_city       CoordType = 10 //联盟城市
	CoordType_guild_res        CoordType = 11 //联盟资源
	CoordType_triumph          CoordType = 12 //凯旋门
	CoordType_temple_create    CoordType = 13 //制造神庙
	CoordType_temple_bumper    CoordType = 14 //丰收神庙
	CoordType_temple_march     CoordType = 15 //行军神庙
	CoordType_fane_catapult    CoordType = 16 //投石机
	CoordType_fane_warrior     CoordType = 17 //武士塔
	CoordType_fane_wizard      CoordType = 18 //巫师塔
	CoordType_world_boss       CoordType = 19
	CoordType_famous_city      CoordType = 20 //世界名城
	CoordType_barbarian_castle CoordType = 21 //蛮族城堡
)

// Enum value maps for CoordType.
var (
	CoordType_name = map[int32]string{
		0:  "plain",
		1:  "resource",
		2:  "city",
		3:  "npc_subcity",
		4:  "subcity",
		5:  "kingdom",
		6:  "monster",
		7:  "relic",
		8:  "garrison",
		9:  "snowberg",
		10: "guild_city",
		11: "guild_res",
		12: "triumph",
		13: "temple_create",
		14: "temple_bumper",
		15: "temple_march",
		16: "fane_catapult",
		17: "fane_warrior",
		18: "fane_wizard",
		19: "world_boss",
		20: "famous_city",
		21: "barbarian_castle",
	}
	CoordType_value = map[string]int32{
		"plain":            0,
		"resource":         1,
		"city":             2,
		"npc_subcity":      3,
		"subcity":          4,
		"kingdom":          5,
		"monster":          6,
		"relic":            7,
		"garrison":         8,
		"snowberg":         9,
		"guild_city":       10,
		"guild_res":        11,
		"triumph":          12,
		"temple_create":    13,
		"temple_bumper":    14,
		"temple_march":     15,
		"fane_catapult":    16,
		"fane_warrior":     17,
		"fane_wizard":      18,
		"world_boss":       19,
		"famous_city":      20,
		"barbarian_castle": 21,
	}
)

func (x CoordType) Enum() *CoordType {
	p := new(CoordType)
	*p = x
	return p
}

func (x CoordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoordType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatmessage_proto_enumTypes[3].Descriptor()
}

func (CoordType) Type() protoreflect.EnumType {
	return &file_chatmessage_proto_enumTypes[3]
}

func (x CoordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CoordType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CoordType(num)
	return nil
}

// Deprecated: Use CoordType.Descriptor instead.
func (CoordType) EnumDescriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{3}
}

// 发送消耗类型
type SendConsumeType int32

const (
	SendConsumeType_free SendConsumeType = 0 // 免费
	SendConsumeType_gold SendConsumeType = 1 // 钻石
	SendConsumeType_item SendConsumeType = 2 // 道具
)

// Enum value maps for SendConsumeType.
var (
	SendConsumeType_name = map[int32]string{
		0: "free",
		1: "gold",
		2: "item",
	}
	SendConsumeType_value = map[string]int32{
		"free": 0,
		"gold": 1,
		"item": 2,
	}
)

func (x SendConsumeType) Enum() *SendConsumeType {
	p := new(SendConsumeType)
	*p = x
	return p
}

func (x SendConsumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendConsumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatmessage_proto_enumTypes[4].Descriptor()
}

func (SendConsumeType) Type() protoreflect.EnumType {
	return &file_chatmessage_proto_enumTypes[4]
}

func (x SendConsumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SendConsumeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SendConsumeType(num)
	return nil
}

// Deprecated: Use SendConsumeType.Descriptor instead.
func (SendConsumeType) EnumDescriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{4}
}

type ReportMessageReportType int32

const (
	ReportMessage_racism              ReportMessageReportType = 0 //种族主义
	ReportMessage_illegal_information ReportMessageReportType = 1 //不良信息
	ReportMessage_pornographic        ReportMessageReportType = 2 //色情宣传
	ReportMessage_ads                 ReportMessageReportType = 3 //广告
	ReportMessage_rail                ReportMessageReportType = 4 //谩骂
)

// Enum value maps for ReportMessageReportType.
var (
	ReportMessageReportType_name = map[int32]string{
		0: "racism",
		1: "illegal_information",
		2: "pornographic",
		3: "ads",
		4: "rail",
	}
	ReportMessageReportType_value = map[string]int32{
		"racism":              0,
		"illegal_information": 1,
		"pornographic":        2,
		"ads":                 3,
		"rail":                4,
	}
)

func (x ReportMessageReportType) Enum() *ReportMessageReportType {
	p := new(ReportMessageReportType)
	*p = x
	return p
}

func (x ReportMessageReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportMessageReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatmessage_proto_enumTypes[5].Descriptor()
}

func (ReportMessageReportType) Type() protoreflect.EnumType {
	return &file_chatmessage_proto_enumTypes[5]
}

func (x ReportMessageReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReportMessageReportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReportMessageReportType(num)
	return nil
}

// Deprecated: Use ReportMessageReportType.Descriptor instead.
func (ReportMessageReportType) EnumDescriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{16, 0}
}

//聊天相关部分
//获取整体的最新的聊天历史记录
type ChatHistoryWholeFetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XLatestMessageId *uint64 `protobuf:"varint,1,req,name=_latest_message_id,json=LatestMessageId" json:"_latest_message_id,omitempty"` //最新聊天消息id，0表示获取最新的，大于0则获取比当前id大的聊天记录
}

func (x *ChatHistoryWholeFetch) Reset() {
	*x = ChatHistoryWholeFetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryWholeFetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryWholeFetch) ProtoMessage() {}

func (x *ChatHistoryWholeFetch) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryWholeFetch.ProtoReflect.Descriptor instead.
func (*ChatHistoryWholeFetch) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{0}
}

func (x *ChatHistoryWholeFetch) GetXLatestMessageId() uint64 {
	if x != nil && x.XLatestMessageId != nil {
		return *x.XLatestMessageId
	}
	return 0
}

//获取聊天历史记录
type ChatHistoryFecth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XOrientation   *uint32          `protobuf:"varint,1,req,name=_orientation,json=Orientation" json:"_orientation,omitempty"`                      //0: 获取新的聊天消息，1: 获取老的聊天消息
	XBaseMessageId *uint64          `protobuf:"varint,2,req,name=_base_message_id,json=BaseMessageId" json:"_base_message_id,omitempty"`            //获取新的聊天消息情况下，0获取最新的，大于0则获取比当前id大的聊天记录； 获取老的聊天消息，获取比当前id小的聊天记录
	XFetchNumber   *uint32          `protobuf:"varint,3,req,name=_fetch_number,json=FetchNumber" json:"_fetch_number,omitempty"`                    //返回的聊天消息个数
	XChannel       *ChatChannelType `protobuf:"varint,4,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //聊天频道
	XSessionId     *uint32          `protobuf:"varint,5,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
}

func (x *ChatHistoryFecth) Reset() {
	*x = ChatHistoryFecth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryFecth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryFecth) ProtoMessage() {}

func (x *ChatHistoryFecth) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryFecth.ProtoReflect.Descriptor instead.
func (*ChatHistoryFecth) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{1}
}

func (x *ChatHistoryFecth) GetXOrientation() uint32 {
	if x != nil && x.XOrientation != nil {
		return *x.XOrientation
	}
	return 0
}

func (x *ChatHistoryFecth) GetXBaseMessageId() uint64 {
	if x != nil && x.XBaseMessageId != nil {
		return *x.XBaseMessageId
	}
	return 0
}

func (x *ChatHistoryFecth) GetXFetchNumber() uint32 {
	if x != nil && x.XFetchNumber != nil {
		return *x.XFetchNumber
	}
	return 0
}

func (x *ChatHistoryFecth) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *ChatHistoryFecth) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

//发送聊天消息的公共部分
type SendCommonMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientId    *string            `protobuf:"bytes,1,req,name=_client_id,json=ClientId" json:"_client_id,omitempty"`                                                  //客户端生成的id，用于服务器排重
	XChannel     *ChatChannelType   `protobuf:"varint,2,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"`                     //发送消息到对应的频道
	XSenderType  *MessageSenderType `protobuf:"varint,3,req,name=_sender_type,json=SenderType,enum=ChatMessage.MessageSenderType" json:"_sender_type,omitempty"`        ////聊天消息发起者类型
	XSessionId   *uint32            `protobuf:"varint,4,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                                              //会话id
	XConsumeType *SendConsumeType   `protobuf:"varint,5,opt,name=_consume_type,json=ConsumeType,enum=ChatMessage.SendConsumeType,def=0" json:"_consume_type,omitempty"` //消耗类型
}

// Default values for SendCommonMessage fields.
const (
	Default_SendCommonMessage_XConsumeType = SendConsumeType_free
)

func (x *SendCommonMessage) Reset() {
	*x = SendCommonMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCommonMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCommonMessage) ProtoMessage() {}

func (x *SendCommonMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCommonMessage.ProtoReflect.Descriptor instead.
func (*SendCommonMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{2}
}

func (x *SendCommonMessage) GetXClientId() string {
	if x != nil && x.XClientId != nil {
		return *x.XClientId
	}
	return ""
}

func (x *SendCommonMessage) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *SendCommonMessage) GetXSenderType() MessageSenderType {
	if x != nil && x.XSenderType != nil {
		return *x.XSenderType
	}
	return MessageSenderType_message_sender_normal
}

func (x *SendCommonMessage) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *SendCommonMessage) GetXConsumeType() SendConsumeType {
	if x != nil && x.XConsumeType != nil {
		return *x.XConsumeType
	}
	return Default_SendCommonMessage_XConsumeType
}

//发送文本消息
type SendTextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XText          *string            `protobuf:"bytes,1,req,name=_text,json=Text" json:"_text,omitempty"`                              //发送的文本内容
	XCommonMessage *SendCommonMessage `protobuf:"bytes,2,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"` //发送消息的公共部分
	XMultiLanText  *MultiLanText      `protobuf:"bytes,3,opt,name=_multi_lan_text,json=MultiLanText" json:"_multi_lan_text,omitempty"`  //文本翻译
}

func (x *SendTextMessage) Reset() {
	*x = SendTextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextMessage) ProtoMessage() {}

func (x *SendTextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextMessage.ProtoReflect.Descriptor instead.
func (*SendTextMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{3}
}

func (x *SendTextMessage) GetXText() string {
	if x != nil && x.XText != nil {
		return *x.XText
	}
	return ""
}

func (x *SendTextMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendTextMessage) GetXMultiLanText() *MultiLanText {
	if x != nil {
		return x.XMultiLanText
	}
	return nil
}

//发送语音消息
type SendVoiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XText          *string            `protobuf:"bytes,1,opt,name=_text,json=Text" json:"_text,omitempty"`                              //语音消息转换文本的内容
	XCommonMessage *SendCommonMessage `protobuf:"bytes,2,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"` //发送消息的公共部分
	XPlayTime      *float32           `protobuf:"fixed32,3,req,name=_play_time,json=PlayTime" json:"_play_time,omitempty"`              //语音播放时间
	XHashid        *string            `protobuf:"bytes,4,req,name=_hashid,json=Hashid" json:"_hashid,omitempty"`                        //语音文件hashid
	XMultiLanText  *MultiLanText      `protobuf:"bytes,5,opt,name=_multi_lan_text,json=MultiLanText" json:"_multi_lan_text,omitempty"`  //文本翻译
}

func (x *SendVoiceMessage) Reset() {
	*x = SendVoiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVoiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVoiceMessage) ProtoMessage() {}

func (x *SendVoiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVoiceMessage.ProtoReflect.Descriptor instead.
func (*SendVoiceMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{4}
}

func (x *SendVoiceMessage) GetXText() string {
	if x != nil && x.XText != nil {
		return *x.XText
	}
	return ""
}

func (x *SendVoiceMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendVoiceMessage) GetXPlayTime() float32 {
	if x != nil && x.XPlayTime != nil {
		return *x.XPlayTime
	}
	return 0
}

func (x *SendVoiceMessage) GetXHashid() string {
	if x != nil && x.XHashid != nil {
		return *x.XHashid
	}
	return ""
}

func (x *SendVoiceMessage) GetXMultiLanText() *MultiLanText {
	if x != nil {
		return x.XMultiLanText
	}
	return nil
}

//发送图片消息
type SendPhotoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage *SendCommonMessage `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"` //发送消息的公共部分
	XHashid        *string            `protobuf:"bytes,2,req,name=_hashid,json=Hashid" json:"_hashid,omitempty"`                        //图片文件hashid
	XWidth         *int32             `protobuf:"varint,3,req,name=_width,json=Width" json:"_width,omitempty"`                          //图片宽
	XHeight        *int32             `protobuf:"varint,4,req,name=_height,json=Height" json:"_height,omitempty"`                       //图片高
}

func (x *SendPhotoMessage) Reset() {
	*x = SendPhotoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPhotoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPhotoMessage) ProtoMessage() {}

func (x *SendPhotoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPhotoMessage.ProtoReflect.Descriptor instead.
func (*SendPhotoMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{5}
}

func (x *SendPhotoMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendPhotoMessage) GetXHashid() string {
	if x != nil && x.XHashid != nil {
		return *x.XHashid
	}
	return ""
}

func (x *SendPhotoMessage) GetXWidth() int32 {
	if x != nil && x.XWidth != nil {
		return *x.XWidth
	}
	return 0
}

func (x *SendPhotoMessage) GetXHeight() int32 {
	if x != nil && x.XHeight != nil {
		return *x.XHeight
	}
	return 0
}

//发送邮件消息
type SendMailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage     *SendCommonMessage `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"`               //发送消息的公共部分
	XMailTitle         *string            `protobuf:"bytes,2,opt,name=_mail_title,json=MailTitle" json:"_mail_title,omitempty"`                           // 第一个参数值
	XMailSummary       *string            `protobuf:"bytes,3,opt,name=_mail_summary,json=MailSummary" json:"_mail_summary,omitempty"`                     //邮件摘要 废弃
	XMailId            *uint64            `protobuf:"varint,4,req,name=_mail_id,json=MailId" json:"_mail_id,omitempty"`                                   //邮件id 邮件主键ID
	XMailTitleFormat   *string            `protobuf:"bytes,5,opt,name=_mail_title_format,json=MailTitleFormat" json:"_mail_title_format,omitempty"`       //邮件title format 废弃
	XMailSummaryFormat *string            `protobuf:"bytes,6,opt,name=_mail_summary_format,json=MailSummaryFormat" json:"_mail_summary_format,omitempty"` //邮件summary format 废弃
	XTargetIcon        *string            `protobuf:"bytes,7,opt,name=_target_icon,json=TargetIcon" json:"_target_icon,omitempty"`                        //邮件 目标图标url 废弃
	XTargetType        *string            `protobuf:"bytes,8,opt,name=_target_type,json=TargetType" json:"_target_type,omitempty"`                        //邮件 目标类型 废弃
	XTargetId          *string            `protobuf:"bytes,9,opt,name=_target_id,json=TargetId" json:"_target_id,omitempty"`                              //邮件 目标id 废弃
	XBattleResult      *int32             `protobuf:"varint,10,opt,name=_battle_result,json=BattleResult" json:"_battle_result,omitempty"`                //战斗结果 0：失败，1：胜利
	XTemplateId        *int32             `protobuf:"varint,11,opt,name=_template_id,json=TemplateId" json:"_template_id,omitempty"`                      // 邮件模板ID
	XParamsInfo        []*ParamsInfo      `protobuf:"bytes,12,rep,name=_params_info,json=ParamsInfo" json:"_params_info,omitempty"`                       // 动态参数信息
	MsgText            *string            `protobuf:"bytes,13,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                                  // 消息内容
}

func (x *SendMailMessage) Reset() {
	*x = SendMailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMailMessage) ProtoMessage() {}

func (x *SendMailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMailMessage.ProtoReflect.Descriptor instead.
func (*SendMailMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{6}
}

func (x *SendMailMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendMailMessage) GetXMailTitle() string {
	if x != nil && x.XMailTitle != nil {
		return *x.XMailTitle
	}
	return ""
}

func (x *SendMailMessage) GetXMailSummary() string {
	if x != nil && x.XMailSummary != nil {
		return *x.XMailSummary
	}
	return ""
}

func (x *SendMailMessage) GetXMailId() uint64 {
	if x != nil && x.XMailId != nil {
		return *x.XMailId
	}
	return 0
}

func (x *SendMailMessage) GetXMailTitleFormat() string {
	if x != nil && x.XMailTitleFormat != nil {
		return *x.XMailTitleFormat
	}
	return ""
}

func (x *SendMailMessage) GetXMailSummaryFormat() string {
	if x != nil && x.XMailSummaryFormat != nil {
		return *x.XMailSummaryFormat
	}
	return ""
}

func (x *SendMailMessage) GetXTargetIcon() string {
	if x != nil && x.XTargetIcon != nil {
		return *x.XTargetIcon
	}
	return ""
}

func (x *SendMailMessage) GetXTargetType() string {
	if x != nil && x.XTargetType != nil {
		return *x.XTargetType
	}
	return ""
}

func (x *SendMailMessage) GetXTargetId() string {
	if x != nil && x.XTargetId != nil {
		return *x.XTargetId
	}
	return ""
}

func (x *SendMailMessage) GetXBattleResult() int32 {
	if x != nil && x.XBattleResult != nil {
		return *x.XBattleResult
	}
	return 0
}

func (x *SendMailMessage) GetXTemplateId() int32 {
	if x != nil && x.XTemplateId != nil {
		return *x.XTemplateId
	}
	return 0
}

func (x *SendMailMessage) GetXParamsInfo() []*ParamsInfo {
	if x != nil {
		return x.XParamsInfo
	}
	return nil
}

func (x *SendMailMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

// 动态参数对象
type ParamsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`   // 参数名
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"` // 参数值
}

func (x *ParamsInfo) Reset() {
	*x = ParamsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamsInfo) ProtoMessage() {}

func (x *ParamsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamsInfo.ProtoReflect.Descriptor instead.
func (*ParamsInfo) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{7}
}

func (x *ParamsInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ParamsInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

//发送坐标消息
type SendCoordMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage *SendCommonMessage `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"`  //发送消息的公共部分
	CoordX         *int32             `protobuf:"varint,2,req,name=coord_x,json=coordX" json:"coord_x,omitempty"`                        //x坐标
	CoordY         *int32             `protobuf:"varint,3,req,name=coord_y,json=coordY" json:"coord_y,omitempty"`                        //y坐标
	XType          *CoordType         `protobuf:"varint,4,opt,name=_type,json=Type,enum=ChatMessage.CoordType" json:"_type,omitempty"`   //坐标类型 废弃
	XLevel         *int32             `protobuf:"varint,5,opt,name=_level,json=Level" json:"_level,omitempty"`                           //坐标对应类型的level 废弃
	XDes           *string            `protobuf:"bytes,6,opt,name=_des,json=Des" json:"_des,omitempty"`                                  //坐标的描述 废弃
	XFormat        *string            `protobuf:"bytes,7,opt,name=_format,json=Format" json:"_format,omitempty"`                         //用于多语言处理 废弃
	ServerId       *int32             `protobuf:"varint,8,opt,name=server_id,json=serverId" json:"server_id,omitempty"`                  //坐标消息对应的服务器id
	XSpecialType   *int32             `protobuf:"varint,9,opt,name=_special_type,json=SpecialType,def=0" json:"_special_type,omitempty"` //特殊类型，0：正常的坐标消息，1：战争集结消息
	XMassId        *int32             `protobuf:"varint,10,opt,name=_mass_id,json=MassId" json:"_mass_id,omitempty"`                     //战争集结的情况下，集结id
	MsgText        *string            `protobuf:"bytes,11,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                     // 消息内容
}

// Default values for SendCoordMessage fields.
const (
	Default_SendCoordMessage_XSpecialType = int32(0)
)

func (x *SendCoordMessage) Reset() {
	*x = SendCoordMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCoordMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCoordMessage) ProtoMessage() {}

func (x *SendCoordMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCoordMessage.ProtoReflect.Descriptor instead.
func (*SendCoordMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{8}
}

func (x *SendCoordMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendCoordMessage) GetCoordX() int32 {
	if x != nil && x.CoordX != nil {
		return *x.CoordX
	}
	return 0
}

func (x *SendCoordMessage) GetCoordY() int32 {
	if x != nil && x.CoordY != nil {
		return *x.CoordY
	}
	return 0
}

func (x *SendCoordMessage) GetXType() CoordType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return CoordType_plain
}

func (x *SendCoordMessage) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *SendCoordMessage) GetXDes() string {
	if x != nil && x.XDes != nil {
		return *x.XDes
	}
	return ""
}

func (x *SendCoordMessage) GetXFormat() string {
	if x != nil && x.XFormat != nil {
		return *x.XFormat
	}
	return ""
}

func (x *SendCoordMessage) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *SendCoordMessage) GetXSpecialType() int32 {
	if x != nil && x.XSpecialType != nil {
		return *x.XSpecialType
	}
	return Default_SendCoordMessage_XSpecialType
}

func (x *SendCoordMessage) GetXMassId() int32 {
	if x != nil && x.XMassId != nil {
		return *x.XMassId
	}
	return 0
}

func (x *SendCoordMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//发送装备消息
type SendEquipMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage  *SendCommonMessage    `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"`     //发送消息的公共部分
	ItemId          *int32                `protobuf:"varint,2,req,name=item_id,json=itemId" json:"item_id,omitempty"`                           //装备对应的道具id
	RefineAttribute []*pb.RefineAttribute `protobuf:"bytes,3,rep,name=refine_attribute,json=refineAttribute" json:"refine_attribute,omitempty"` //精炼属性  废弃
	Id              *int32                `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`                                                 //装备主键ID
	MsgText         *string               `protobuf:"bytes,5,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                         // 消息内容
	XUserId         *int32                `protobuf:"varint,6,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                         // 所属用户ID
}

func (x *SendEquipMessage) Reset() {
	*x = SendEquipMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEquipMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEquipMessage) ProtoMessage() {}

func (x *SendEquipMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEquipMessage.ProtoReflect.Descriptor instead.
func (*SendEquipMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{9}
}

func (x *SendEquipMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendEquipMessage) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *SendEquipMessage) GetRefineAttribute() []*pb.RefineAttribute {
	if x != nil {
		return x.RefineAttribute
	}
	return nil
}

func (x *SendEquipMessage) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SendEquipMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *SendEquipMessage) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//发送将军消息
type SendGeneralMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage  *SendCommonMessage `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"`        //发送消息的公共部分
	GeneralId       *int32             `protobuf:"varint,2,req,name=general_id,json=generalId" json:"general_id,omitempty"`                     //将军id
	XName           *string            `protobuf:"bytes,3,opt,name=_name,json=Name" json:"_name,omitempty"`                                     //将军名称  废弃
	XStarLevel      *int32             `protobuf:"varint,4,req,name=_star_level,json=StarLevel" json:"_star_level,omitempty"`                   //将军星级
	XQualityLevel   *int32             `protobuf:"varint,5,opt,name=_quality_level,json=QualityLevel" json:"_quality_level,omitempty"`          //将军品质 废弃
	GeneralFamousId *int32             `protobuf:"varint,6,opt,name=general_famous_id,json=generalFamousId" json:"general_famous_id,omitempty"` //将军名将id	废弃
	Id              *int32             `protobuf:"varint,7,req,name=id" json:"id,omitempty"`                                                    //将军主键ID
	MsgText         *string            `protobuf:"bytes,8,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                            // 消息内容
	ServerId        *int32             `protobuf:"varint,9,opt,name=server_id,json=serverId" json:"server_id,omitempty"`                        // 服务器Id
}

func (x *SendGeneralMessage) Reset() {
	*x = SendGeneralMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGeneralMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGeneralMessage) ProtoMessage() {}

func (x *SendGeneralMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGeneralMessage.ProtoReflect.Descriptor instead.
func (*SendGeneralMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{10}
}

func (x *SendGeneralMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendGeneralMessage) GetGeneralId() int32 {
	if x != nil && x.GeneralId != nil {
		return *x.GeneralId
	}
	return 0
}

func (x *SendGeneralMessage) GetXName() string {
	if x != nil && x.XName != nil {
		return *x.XName
	}
	return ""
}

func (x *SendGeneralMessage) GetXStarLevel() int32 {
	if x != nil && x.XStarLevel != nil {
		return *x.XStarLevel
	}
	return 0
}

func (x *SendGeneralMessage) GetXQualityLevel() int32 {
	if x != nil && x.XQualityLevel != nil {
		return *x.XQualityLevel
	}
	return 0
}

func (x *SendGeneralMessage) GetGeneralFamousId() int32 {
	if x != nil && x.GeneralFamousId != nil {
		return *x.GeneralFamousId
	}
	return 0
}

func (x *SendGeneralMessage) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SendGeneralMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *SendGeneralMessage) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

//发送商品消息
type SendGoodsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage *SendCommonMessage `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"` //发送消息的公共部分
	XItemId        *int32             `protobuf:"varint,2,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                     // 物品ID
	XSku           *string            `protobuf:"bytes,3,req,name=_sku,json=Sku" json:"_sku,omitempty"`                                 // sku
	MsgText        *string            `protobuf:"bytes,4,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                     // 消息内容
	XRegionId      *int32             `protobuf:"varint,5,opt,name=_region_id,json=RegionId" json:"_region_id,omitempty"`               // 服ID
	XServerId      *int32             `protobuf:"varint,6,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`               // 区ID
}

func (x *SendGoodsMessage) Reset() {
	*x = SendGoodsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGoodsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGoodsMessage) ProtoMessage() {}

func (x *SendGoodsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGoodsMessage.ProtoReflect.Descriptor instead.
func (*SendGoodsMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{11}
}

func (x *SendGoodsMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendGoodsMessage) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SendGoodsMessage) GetXSku() string {
	if x != nil && x.XSku != nil {
		return *x.XSku
	}
	return ""
}

func (x *SendGoodsMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *SendGoodsMessage) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *SendGoodsMessage) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

//发送成就消息
type SendFameMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage *SendCommonMessage `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"` //发送消息的公共部分
	XFameId        *int32             `protobuf:"varint,2,req,name=_fame_id,json=FameId" json:"_fame_id,omitempty"`                     //成就任务id
	XIsComplete    *int32             `protobuf:"varint,3,req,name=_is_complete,json=IsComplete" json:"_is_complete,omitempty"`         // 是否完成，0未完成，1完成
	XUserId        *int32             `protobuf:"varint,4,req,name=_user_id,json=UserId" json:"_user_id,omitempty"`                     // 玩家ID
	XCompleteTime  *uint64            `protobuf:"varint,5,opt,name=_complete_time,json=CompleteTime" json:"_complete_time,omitempty"`   // 完成时间
	XEmblemPath    *string            `protobuf:"bytes,6,opt,name=_emblem_path,json=EmblemPath" json:"_emblem_path,omitempty"`          // 成就徽章
	XFameName      *string            `protobuf:"bytes,7,opt,name=_fame_name,json=FameName" json:"_fame_name,omitempty"`                // 任务名称
	XFameSummary   *string            `protobuf:"bytes,8,opt,name=_fame_summary,json=FameSummary" json:"_fame_summary,omitempty"`       // 任务简介
}

func (x *SendFameMessage) Reset() {
	*x = SendFameMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFameMessage) ProtoMessage() {}

func (x *SendFameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFameMessage.ProtoReflect.Descriptor instead.
func (*SendFameMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{12}
}

func (x *SendFameMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendFameMessage) GetXFameId() int32 {
	if x != nil && x.XFameId != nil {
		return *x.XFameId
	}
	return 0
}

func (x *SendFameMessage) GetXIsComplete() int32 {
	if x != nil && x.XIsComplete != nil {
		return *x.XIsComplete
	}
	return 0
}

func (x *SendFameMessage) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *SendFameMessage) GetXCompleteTime() uint64 {
	if x != nil && x.XCompleteTime != nil {
		return *x.XCompleteTime
	}
	return 0
}

func (x *SendFameMessage) GetXEmblemPath() string {
	if x != nil && x.XEmblemPath != nil {
		return *x.XEmblemPath
	}
	return ""
}

func (x *SendFameMessage) GetXFameName() string {
	if x != nil && x.XFameName != nil {
		return *x.XFameName
	}
	return ""
}

func (x *SendFameMessage) GetXFameSummary() string {
	if x != nil && x.XFameSummary != nil {
		return *x.XFameSummary
	}
	return ""
}

//发送宠物消息
type SendPetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XCommonMessage *SendCommonMessage `protobuf:"bytes,1,req,name=_common_message,json=CommonMessage" json:"_common_message,omitempty"` //发送消息的公共部分
	XPetId         *int32             `protobuf:"varint,2,req,name=_pet_id,json=PetId" json:"_pet_id,omitempty"`                        //宠物主键ID
	XItemId        *int32             `protobuf:"varint,3,req,name=_item_id,json=ItemId" json:"_item_id,omitempty"`                     //
	MsgText        *string            `protobuf:"bytes,4,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                     // 消息内容
	XServerId      *int32             `protobuf:"varint,5,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"`               // 服务器Id
	XUserId        *int32             `protobuf:"varint,6,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                     // 所属用户ID
}

func (x *SendPetMessage) Reset() {
	*x = SendPetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPetMessage) ProtoMessage() {}

func (x *SendPetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPetMessage.ProtoReflect.Descriptor instead.
func (*SendPetMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{13}
}

func (x *SendPetMessage) GetXCommonMessage() *SendCommonMessage {
	if x != nil {
		return x.XCommonMessage
	}
	return nil
}

func (x *SendPetMessage) GetXPetId() int32 {
	if x != nil && x.XPetId != nil {
		return *x.XPetId
	}
	return 0
}

func (x *SendPetMessage) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *SendPetMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *SendPetMessage) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *SendPetMessage) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//标记已读
type MarkRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChannel   *ChatChannelType `protobuf:"varint,1,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //频道
	XSessionId *uint32          `protobuf:"varint,2,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
	XMsgId     *uint64          `protobuf:"varint,3,req,name=_msg_id,json=MsgId" json:"_msg_id,omitempty"`                                      //消息id
}

func (x *MarkRead) Reset() {
	*x = MarkRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkRead) ProtoMessage() {}

func (x *MarkRead) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkRead.ProtoReflect.Descriptor instead.
func (*MarkRead) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{14}
}

func (x *MarkRead) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *MarkRead) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *MarkRead) GetXMsgId() uint64 {
	if x != nil && x.XMsgId != nil {
		return *x.XMsgId
	}
	return 0
}

//文本翻译数据结构
type MultiLanText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XOriLanType   *string `protobuf:"bytes,1,req,name=_ori_lan_type,json=OriLanType" json:"_ori_lan_type,omitempty"`       //翻译文本的源语言类型
	XMultiLanText *string `protobuf:"bytes,2,opt,name=_multi_lan_text,json=MultiLanText" json:"_multi_lan_text,omitempty"` //翻译的语言内容
}

func (x *MultiLanText) Reset() {
	*x = MultiLanText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLanText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLanText) ProtoMessage() {}

func (x *MultiLanText) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLanText.ProtoReflect.Descriptor instead.
func (*MultiLanText) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{15}
}

func (x *MultiLanText) GetXOriLanType() string {
	if x != nil && x.XOriLanType != nil {
		return *x.XOriLanType
	}
	return ""
}

func (x *MultiLanText) GetXMultiLanText() string {
	if x != nil && x.XMultiLanText != nil {
		return *x.XMultiLanText
	}
	return ""
}

//举报聊天消息
type ReportMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType      *ReportMessageReportType `protobuf:"varint,1,req,name=_type,json=Type,enum=ChatMessage.ReportMessageReportType" json:"_type,omitempty"` //举报类型
	XMessageId *uint64                  `protobuf:"varint,2,req,name=_message_id,json=MessageId" json:"_message_id,omitempty"`                         //举报的聊天消息id
	XComment   *string                  `protobuf:"bytes,3,opt,name=_comment,json=Comment" json:"_comment,omitempty"`                                  //举报额外内容
}

func (x *ReportMessage) Reset() {
	*x = ReportMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessage) ProtoMessage() {}

func (x *ReportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessage.ProtoReflect.Descriptor instead.
func (*ReportMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{16}
}

func (x *ReportMessage) GetXType() ReportMessageReportType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return ReportMessage_racism
}

func (x *ReportMessage) GetXMessageId() uint64 {
	if x != nil && x.XMessageId != nil {
		return *x.XMessageId
	}
	return 0
}

func (x *ReportMessage) GetXComment() string {
	if x != nil && x.XComment != nil {
		return *x.XComment
	}
	return ""
}

//聊天消息相关
//文本消息
type TextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XText         *string       `protobuf:"bytes,1,req,name=_text,json=Text" json:"_text,omitempty"`                             //文本消息原始内容
	XMultiLanText *MultiLanText `protobuf:"bytes,2,opt,name=_multi_lan_text,json=MultiLanText" json:"_multi_lan_text,omitempty"` //文本翻译
	MsgText       *string       `protobuf:"bytes,3,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                    // 消息内容
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{17}
}

func (x *TextMessage) GetXText() string {
	if x != nil && x.XText != nil {
		return *x.XText
	}
	return ""
}

func (x *TextMessage) GetXMultiLanText() *MultiLanText {
	if x != nil {
		return x.XMultiLanText
	}
	return nil
}

func (x *TextMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//语音消息
type VoiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUrl          *string       `protobuf:"bytes,1,req,name=_url,json=Url" json:"_url,omitempty"`                                //语音消息文件的下载地址
	XPlayTime     *float32      `protobuf:"fixed32,2,req,name=_play_time,json=PlayTime" json:"_play_time,omitempty"`             //播放时长
	XText         *string       `protobuf:"bytes,3,opt,name=_text,json=Text" json:"_text,omitempty"`                             //语音消息转换文本的内容
	XMultiLanText *MultiLanText `protobuf:"bytes,4,opt,name=_multi_lan_text,json=MultiLanText" json:"_multi_lan_text,omitempty"` //文本翻译
	MsgText       *string       `protobuf:"bytes,5,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                    // 消息内容
}

func (x *VoiceMessage) Reset() {
	*x = VoiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceMessage) ProtoMessage() {}

func (x *VoiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceMessage.ProtoReflect.Descriptor instead.
func (*VoiceMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{18}
}

func (x *VoiceMessage) GetXUrl() string {
	if x != nil && x.XUrl != nil {
		return *x.XUrl
	}
	return ""
}

func (x *VoiceMessage) GetXPlayTime() float32 {
	if x != nil && x.XPlayTime != nil {
		return *x.XPlayTime
	}
	return 0
}

func (x *VoiceMessage) GetXText() string {
	if x != nil && x.XText != nil {
		return *x.XText
	}
	return ""
}

func (x *VoiceMessage) GetXMultiLanText() *MultiLanText {
	if x != nil {
		return x.XMultiLanText
	}
	return nil
}

func (x *VoiceMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//图片消息
type PhotoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XUrl    *string `protobuf:"bytes,1,req,name=_url,json=Url" json:"_url,omitempty"`             //原图下载地址
	XHashId *string `protobuf:"bytes,2,req,name=_hashId,json=HashId" json:"_hashId,omitempty"`    //hash id
	XWidth  *int32  `protobuf:"varint,3,opt,name=_width,json=Width" json:"_width,omitempty"`      //图片宽
	XHeight *int32  `protobuf:"varint,4,opt,name=_height,json=Height" json:"_height,omitempty"`   //图片高
	MsgText *string `protobuf:"bytes,5,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"` // 消息内容
}

func (x *PhotoMessage) Reset() {
	*x = PhotoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoMessage) ProtoMessage() {}

func (x *PhotoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoMessage.ProtoReflect.Descriptor instead.
func (*PhotoMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{19}
}

func (x *PhotoMessage) GetXUrl() string {
	if x != nil && x.XUrl != nil {
		return *x.XUrl
	}
	return ""
}

func (x *PhotoMessage) GetXHashId() string {
	if x != nil && x.XHashId != nil {
		return *x.XHashId
	}
	return ""
}

func (x *PhotoMessage) GetXWidth() int32 {
	if x != nil && x.XWidth != nil {
		return *x.XWidth
	}
	return 0
}

func (x *PhotoMessage) GetXHeight() int32 {
	if x != nil && x.XHeight != nil {
		return *x.XHeight
	}
	return 0
}

func (x *PhotoMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//邮件消息
type MailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMailTitle         *string `protobuf:"bytes,1,opt,name=_mail_title,json=MailTitle" json:"_mail_title,omitempty"`                           //邮件title
	XMailSummary       *string `protobuf:"bytes,2,opt,name=_mail_summary,json=MailSummary" json:"_mail_summary,omitempty"`                     //邮件摘要
	XMailId            *uint64 `protobuf:"varint,3,req,name=_mail_id,json=MailId" json:"_mail_id,omitempty"`                                   //邮件id
	XMailTitleFormat   *string `protobuf:"bytes,4,opt,name=_mail_title_format,json=MailTitleFormat" json:"_mail_title_format,omitempty"`       //邮件title format
	XMailSummaryFormat *string `protobuf:"bytes,5,opt,name=_mail_summary_format,json=MailSummaryFormat" json:"_mail_summary_format,omitempty"` //邮件summary format
	XTargetIcon        *string `protobuf:"bytes,6,opt,name=_target_icon,json=TargetIcon" json:"_target_icon,omitempty"`                        //邮件 目标图标url
	XTargetType        *string `protobuf:"bytes,7,opt,name=_target_type,json=TargetType" json:"_target_type,omitempty"`                        //邮件 目标类型
	XTargetId          *string `protobuf:"bytes,8,opt,name=_target_id,json=TargetId" json:"_target_id,omitempty"`                              //邮件 目标id
	MsgText            *string `protobuf:"bytes,9,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                                   // 消息内容
}

func (x *MailMessage) Reset() {
	*x = MailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailMessage) ProtoMessage() {}

func (x *MailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailMessage.ProtoReflect.Descriptor instead.
func (*MailMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{20}
}

func (x *MailMessage) GetXMailTitle() string {
	if x != nil && x.XMailTitle != nil {
		return *x.XMailTitle
	}
	return ""
}

func (x *MailMessage) GetXMailSummary() string {
	if x != nil && x.XMailSummary != nil {
		return *x.XMailSummary
	}
	return ""
}

func (x *MailMessage) GetXMailId() uint64 {
	if x != nil && x.XMailId != nil {
		return *x.XMailId
	}
	return 0
}

func (x *MailMessage) GetXMailTitleFormat() string {
	if x != nil && x.XMailTitleFormat != nil {
		return *x.XMailTitleFormat
	}
	return ""
}

func (x *MailMessage) GetXMailSummaryFormat() string {
	if x != nil && x.XMailSummaryFormat != nil {
		return *x.XMailSummaryFormat
	}
	return ""
}

func (x *MailMessage) GetXTargetIcon() string {
	if x != nil && x.XTargetIcon != nil {
		return *x.XTargetIcon
	}
	return ""
}

func (x *MailMessage) GetXTargetType() string {
	if x != nil && x.XTargetType != nil {
		return *x.XTargetType
	}
	return ""
}

func (x *MailMessage) GetXTargetId() string {
	if x != nil && x.XTargetId != nil {
		return *x.XTargetId
	}
	return ""
}

func (x *MailMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//坐标消息
type CoordMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoordX       *int32     `protobuf:"varint,2,req,name=coord_x,json=coordX" json:"coord_x,omitempty"`                        //x坐标
	CoordY       *int32     `protobuf:"varint,3,req,name=coord_y,json=coordY" json:"coord_y,omitempty"`                        //y坐标
	XType        *CoordType `protobuf:"varint,4,opt,name=_type,json=Type,enum=ChatMessage.CoordType" json:"_type,omitempty"`   //坐标类型 废弃
	XLevel       *int32     `protobuf:"varint,5,opt,name=_level,json=Level" json:"_level,omitempty"`                           //坐标对应类型的level  废弃
	XDes         *string    `protobuf:"bytes,6,opt,name=_des,json=Des" json:"_des,omitempty"`                                  //坐标的描述  废弃
	XFormat      *string    `protobuf:"bytes,7,opt,name=_format,json=Format" json:"_format,omitempty"`                         //用于多语言处理  废弃
	ServerId     *int32     `protobuf:"varint,8,opt,name=server_id,json=serverId" json:"server_id,omitempty"`                  //坐标消息对应的服务器id
	XSpecialType *int32     `protobuf:"varint,9,opt,name=_special_type,json=SpecialType,def=0" json:"_special_type,omitempty"` //特殊类型，0：正常的坐标消息，1：战争集结消息
	XMassId      *int32     `protobuf:"varint,10,opt,name=_mass_id,json=MassId" json:"_mass_id,omitempty"`                     //战争集结的情况下，集结id
	MsgText      *string    `protobuf:"bytes,11,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                     // 消息内容
}

// Default values for CoordMessage fields.
const (
	Default_CoordMessage_XSpecialType = int32(0)
)

func (x *CoordMessage) Reset() {
	*x = CoordMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordMessage) ProtoMessage() {}

func (x *CoordMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordMessage.ProtoReflect.Descriptor instead.
func (*CoordMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{21}
}

func (x *CoordMessage) GetCoordX() int32 {
	if x != nil && x.CoordX != nil {
		return *x.CoordX
	}
	return 0
}

func (x *CoordMessage) GetCoordY() int32 {
	if x != nil && x.CoordY != nil {
		return *x.CoordY
	}
	return 0
}

func (x *CoordMessage) GetXType() CoordType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return CoordType_plain
}

func (x *CoordMessage) GetXLevel() int32 {
	if x != nil && x.XLevel != nil {
		return *x.XLevel
	}
	return 0
}

func (x *CoordMessage) GetXDes() string {
	if x != nil && x.XDes != nil {
		return *x.XDes
	}
	return ""
}

func (x *CoordMessage) GetXFormat() string {
	if x != nil && x.XFormat != nil {
		return *x.XFormat
	}
	return ""
}

func (x *CoordMessage) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *CoordMessage) GetXSpecialType() int32 {
	if x != nil && x.XSpecialType != nil {
		return *x.XSpecialType
	}
	return Default_CoordMessage_XSpecialType
}

func (x *CoordMessage) GetXMassId() int32 {
	if x != nil && x.XMassId != nil {
		return *x.XMassId
	}
	return 0
}

func (x *CoordMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//系统消息
type SysMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XText    *string         `protobuf:"bytes,1,req,name=_text,json=Text" json:"_text,omitempty"`          //文本消息原始内容
	XUser1   *pb.UserSummary `protobuf:"bytes,2,opt,name=_user1,json=User1" json:"_user1,omitempty"`       //国王玩家
	XUser2   *pb.UserSummary `protobuf:"bytes,3,opt,name=_user2,json=User2" json:"_user2,omitempty"`       //被任命头衔的玩家
	XSubText *string         `protobuf:"bytes,4,opt,name=_subText,json=SubText" json:"_subText,omitempty"` //被任命的头衔
	//optional Msg.rotary_good_item_record _rotary_good_item_record = 5;//轮盘奖励播报
	MsgText *string `protobuf:"bytes,5,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"` // 消息内容
}

func (x *SysMessage) Reset() {
	*x = SysMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysMessage) ProtoMessage() {}

func (x *SysMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysMessage.ProtoReflect.Descriptor instead.
func (*SysMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{22}
}

func (x *SysMessage) GetXText() string {
	if x != nil && x.XText != nil {
		return *x.XText
	}
	return ""
}

func (x *SysMessage) GetXUser1() *pb.UserSummary {
	if x != nil {
		return x.XUser1
	}
	return nil
}

func (x *SysMessage) GetXUser2() *pb.UserSummary {
	if x != nil {
		return x.XUser2
	}
	return nil
}

func (x *SysMessage) GetXSubText() string {
	if x != nil && x.XSubText != nil {
		return *x.XSubText
	}
	return ""
}

func (x *SysMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//装备消息
type EquipMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId          *int32                `protobuf:"varint,1,req,name=item_id,json=itemId" json:"item_id,omitempty"`                           //装备对应的道具id
	RefineAttribute []*pb.RefineAttribute `protobuf:"bytes,2,rep,name=refine_attribute,json=refineAttribute" json:"refine_attribute,omitempty"` //精炼属性 废弃
	//以下属性服务器不需要填写，客户端使用
	Name         *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`                                      //装备名字 废弃
	QualityLevel *int32  `protobuf:"varint,4,opt,name=quality_level,json=qualityLevel" json:"quality_level,omitempty"` //装备品质 废弃
	StarLevel    *int32  `protobuf:"varint,5,opt,name=star_level,json=starLevel" json:"star_level,omitempty"`          //装备的星级  废弃
	IconUrl      *string `protobuf:"bytes,6,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`                 //icon下载url 废弃
	MsgText      *string `protobuf:"bytes,7,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                 // 消息内容
	Id           *int32  `protobuf:"varint,8,opt,name=id" json:"id,omitempty"`                                         // 装备主键ID
	XUserId      *int32  `protobuf:"varint,9,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                 // 所属用户ID
}

func (x *EquipMessage) Reset() {
	*x = EquipMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipMessage) ProtoMessage() {}

func (x *EquipMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipMessage.ProtoReflect.Descriptor instead.
func (*EquipMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{23}
}

func (x *EquipMessage) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *EquipMessage) GetRefineAttribute() []*pb.RefineAttribute {
	if x != nil {
		return x.RefineAttribute
	}
	return nil
}

func (x *EquipMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EquipMessage) GetQualityLevel() int32 {
	if x != nil && x.QualityLevel != nil {
		return *x.QualityLevel
	}
	return 0
}

func (x *EquipMessage) GetStarLevel() int32 {
	if x != nil && x.StarLevel != nil {
		return *x.StarLevel
	}
	return 0
}

func (x *EquipMessage) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *EquipMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *EquipMessage) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EquipMessage) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//将军消息
type GeneralMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneralId       *int32  `protobuf:"varint,1,req,name=general_id,json=generalId" json:"general_id,omitempty"`                     //将军id
	Name            *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                                                 //将军名字 废弃
	QualityLevel    *int32  `protobuf:"varint,3,opt,name=quality_level,json=qualityLevel" json:"quality_level,omitempty"`            //将军品质 废弃
	StarLevel       *int32  `protobuf:"varint,4,opt,name=star_level,json=starLevel" json:"star_level,omitempty"`                     //将军的星级
	IconUrl         *string `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`                            //icon下载url 废弃
	GeneralFamousId *int32  `protobuf:"varint,6,opt,name=general_famous_id,json=generalFamousId" json:"general_famous_id,omitempty"` //将军名将id 废弃
	MsgText         *string `protobuf:"bytes,7,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                            // 消息内容
	Id              *int32  `protobuf:"varint,8,opt,name=id" json:"id,omitempty"`                                                    // 将军主键ID
	ServerId        *int32  `protobuf:"varint,9,opt,name=server_id,json=serverId" json:"server_id,omitempty"`                        // 服务器ID
}

func (x *GeneralMessage) Reset() {
	*x = GeneralMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralMessage) ProtoMessage() {}

func (x *GeneralMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralMessage.ProtoReflect.Descriptor instead.
func (*GeneralMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{24}
}

func (x *GeneralMessage) GetGeneralId() int32 {
	if x != nil && x.GeneralId != nil {
		return *x.GeneralId
	}
	return 0
}

func (x *GeneralMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GeneralMessage) GetQualityLevel() int32 {
	if x != nil && x.QualityLevel != nil {
		return *x.QualityLevel
	}
	return 0
}

func (x *GeneralMessage) GetStarLevel() int32 {
	if x != nil && x.StarLevel != nil {
		return *x.StarLevel
	}
	return 0
}

func (x *GeneralMessage) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *GeneralMessage) GetGeneralFamousId() int32 {
	if x != nil && x.GeneralFamousId != nil {
		return *x.GeneralFamousId
	}
	return 0
}

func (x *GeneralMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *GeneralMessage) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GeneralMessage) GetServerId() int32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type FameMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFameId       *int32  `protobuf:"varint,1,req,name=_fame_id,json=FameId" json:"_fame_id,omitempty"`                   //成就任务id
	XIsComplete   *int32  `protobuf:"varint,2,req,name=_is_complete,json=IsComplete" json:"_is_complete,omitempty"`       // 是否完成，0未完成，1完成
	XUserId       *int32  `protobuf:"varint,3,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`                   // 玩家ID,这个其实不需要
	XCompleteTime *uint64 `protobuf:"varint,4,opt,name=_complete_time,json=CompleteTime" json:"_complete_time,omitempty"` // 完成时间
	XEmblemPath   *string `protobuf:"bytes,5,opt,name=_emblem_path,json=EmblemPath" json:"_emblem_path,omitempty"`        // 成就徽章
	XFameName     *string `protobuf:"bytes,6,opt,name=_fame_name,json=FameName" json:"_fame_name,omitempty"`              // 任务名称
	XFameSummary  *string `protobuf:"bytes,7,opt,name=_fame_summary,json=FameSummary" json:"_fame_summary,omitempty"`     // 任务简介
	MsgText       *string `protobuf:"bytes,8,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`                   // 消息内容
}

func (x *FameMessage) Reset() {
	*x = FameMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FameMessage) ProtoMessage() {}

func (x *FameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FameMessage.ProtoReflect.Descriptor instead.
func (*FameMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{25}
}

func (x *FameMessage) GetXFameId() int32 {
	if x != nil && x.XFameId != nil {
		return *x.XFameId
	}
	return 0
}

func (x *FameMessage) GetXIsComplete() int32 {
	if x != nil && x.XIsComplete != nil {
		return *x.XIsComplete
	}
	return 0
}

func (x *FameMessage) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

func (x *FameMessage) GetXCompleteTime() uint64 {
	if x != nil && x.XCompleteTime != nil {
		return *x.XCompleteTime
	}
	return 0
}

func (x *FameMessage) GetXEmblemPath() string {
	if x != nil && x.XEmblemPath != nil {
		return *x.XEmblemPath
	}
	return ""
}

func (x *FameMessage) GetXFameName() string {
	if x != nil && x.XFameName != nil {
		return *x.XFameName
	}
	return ""
}

func (x *FameMessage) GetXFameSummary() string {
	if x != nil && x.XFameSummary != nil {
		return *x.XFameSummary
	}
	return ""
}

func (x *FameMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

//聊天消息内容
type MessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XType         *MessageType       `protobuf:"varint,1,req,name=_type,json=Type,enum=ChatMessage.MessageType" json:"_type,omitempty"`                           //聊天消息类型
	XMessageId    *uint64            `protobuf:"varint,2,req,name=_message_id,json=MessageId" json:"_message_id,omitempty"`                                       //聊天消息id
	XClientId     *string            `protobuf:"bytes,3,req,name=_client_id,json=ClientId" json:"_client_id,omitempty"`                                           //聊天消息的客户端生成id
	XCreateTime   *uint64            `protobuf:"varint,4,req,name=_create_time,json=CreateTime" json:"_create_time,omitempty"`                                    //聊天消息的生成时间, 精确到毫秒级
	XSenderType   *MessageSenderType `protobuf:"varint,5,req,name=_sender_type,json=SenderType,enum=ChatMessage.MessageSenderType" json:"_sender_type,omitempty"` //聊天消息发起者类型
	XSender       *pb.UserSummary    `protobuf:"bytes,6,opt,name=_sender,json=Sender" json:"_sender,omitempty"`                                                   //聊天消息的发送用户信息
	XText         *TextMessage       `protobuf:"bytes,7,opt,name=_text,json=Text" json:"_text,omitempty"`                                                         //文本消息
	XVoice        *VoiceMessage      `protobuf:"bytes,8,opt,name=_voice,json=Voice" json:"_voice,omitempty"`                                                      //语音消息
	XPhoto        *PhotoMessage      `protobuf:"bytes,9,opt,name=_photo,json=Photo" json:"_photo,omitempty"`                                                      //图片消息
	XMail         *MailMessage       `protobuf:"bytes,10,opt,name=_mail,json=Mail" json:"_mail,omitempty"`                                                        //邮件消息
	XCoord        *CoordMessage      `protobuf:"bytes,11,opt,name=_coord,json=Coord" json:"_coord,omitempty"`                                                     //坐标消息
	XSys          *SysMessage        `protobuf:"bytes,12,opt,name=_sys,json=Sys" json:"_sys,omitempty"`                                                           //系统消息
	XDeleted      *uint32            `protobuf:"varint,13,opt,name=_deleted,json=Deleted" json:"_deleted,omitempty"`                                              //1: 被删除，0： 未删除
	XEquip        *EquipMessage      `protobuf:"bytes,14,opt,name=_equip,json=Equip" json:"_equip,omitempty"`                                                     //装备消息
	XGeneral      *GeneralMessage    `protobuf:"bytes,15,opt,name=_general,json=General" json:"_general,omitempty"`                                               //将军消息
	XFame         *FameMessage       `protobuf:"bytes,16,opt,name=_fame,json=Fame" json:"_fame,omitempty"`                                                        // 成就任务消息
	XGoodsMessage *GoodsMessage      `protobuf:"bytes,17,opt,name=_goods_message,json=GoodsMessage" json:"_goods_message,omitempty"`                              //交易商品消息
	XPetMessage   *PetMessage        `protobuf:"bytes,18,opt,name=_pet_message,json=PetMessage" json:"_pet_message,omitempty"`                                    //宠物消息
}

func (x *MessageContent) Reset() {
	*x = MessageContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContent) ProtoMessage() {}

func (x *MessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContent.ProtoReflect.Descriptor instead.
func (*MessageContent) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{26}
}

func (x *MessageContent) GetXType() MessageType {
	if x != nil && x.XType != nil {
		return *x.XType
	}
	return MessageType_message_type_text
}

func (x *MessageContent) GetXMessageId() uint64 {
	if x != nil && x.XMessageId != nil {
		return *x.XMessageId
	}
	return 0
}

func (x *MessageContent) GetXClientId() string {
	if x != nil && x.XClientId != nil {
		return *x.XClientId
	}
	return ""
}

func (x *MessageContent) GetXCreateTime() uint64 {
	if x != nil && x.XCreateTime != nil {
		return *x.XCreateTime
	}
	return 0
}

func (x *MessageContent) GetXSenderType() MessageSenderType {
	if x != nil && x.XSenderType != nil {
		return *x.XSenderType
	}
	return MessageSenderType_message_sender_normal
}

func (x *MessageContent) GetXSender() *pb.UserSummary {
	if x != nil {
		return x.XSender
	}
	return nil
}

func (x *MessageContent) GetXText() *TextMessage {
	if x != nil {
		return x.XText
	}
	return nil
}

func (x *MessageContent) GetXVoice() *VoiceMessage {
	if x != nil {
		return x.XVoice
	}
	return nil
}

func (x *MessageContent) GetXPhoto() *PhotoMessage {
	if x != nil {
		return x.XPhoto
	}
	return nil
}

func (x *MessageContent) GetXMail() *MailMessage {
	if x != nil {
		return x.XMail
	}
	return nil
}

func (x *MessageContent) GetXCoord() *CoordMessage {
	if x != nil {
		return x.XCoord
	}
	return nil
}

func (x *MessageContent) GetXSys() *SysMessage {
	if x != nil {
		return x.XSys
	}
	return nil
}

func (x *MessageContent) GetXDeleted() uint32 {
	if x != nil && x.XDeleted != nil {
		return *x.XDeleted
	}
	return 0
}

func (x *MessageContent) GetXEquip() *EquipMessage {
	if x != nil {
		return x.XEquip
	}
	return nil
}

func (x *MessageContent) GetXGeneral() *GeneralMessage {
	if x != nil {
		return x.XGeneral
	}
	return nil
}

func (x *MessageContent) GetXFame() *FameMessage {
	if x != nil {
		return x.XFame
	}
	return nil
}

func (x *MessageContent) GetXGoodsMessage() *GoodsMessage {
	if x != nil {
		return x.XGoodsMessage
	}
	return nil
}

func (x *MessageContent) GetXPetMessage() *PetMessage {
	if x != nil {
		return x.XPetMessage
	}
	return nil
}

type GoodsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSku      *string `protobuf:"bytes,1,req,name=_sku,json=Sku" json:"_sku,omitempty"`                   // sku
	XItemId   *int32  `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`       // 物品ID
	MsgText   *string `protobuf:"bytes,3,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`       // 消息内容
	XRegionId *int32  `protobuf:"varint,4,opt,name=_region_id,json=RegionId" json:"_region_id,omitempty"` // 服ID
	XServerId *int32  `protobuf:"varint,5,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 区ID
}

func (x *GoodsMessage) Reset() {
	*x = GoodsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsMessage) ProtoMessage() {}

func (x *GoodsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsMessage.ProtoReflect.Descriptor instead.
func (*GoodsMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{27}
}

func (x *GoodsMessage) GetXSku() string {
	if x != nil && x.XSku != nil {
		return *x.XSku
	}
	return ""
}

func (x *GoodsMessage) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *GoodsMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *GoodsMessage) GetXRegionId() int32 {
	if x != nil && x.XRegionId != nil {
		return *x.XRegionId
	}
	return 0
}

func (x *GoodsMessage) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

type PetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPetId    *int32  `protobuf:"varint,1,opt,name=_pet_id,json=PetId" json:"_pet_id,omitempty"`          // 宠物主键ID
	XItemId   *int32  `protobuf:"varint,2,opt,name=_item_id,json=ItemId" json:"_item_id,omitempty"`       // 物品ID
	MsgText   *string `protobuf:"bytes,3,opt,name=msg_text,json=msgText" json:"msg_text,omitempty"`       // 消息内容
	XServerId *int32  `protobuf:"varint,4,opt,name=_server_id,json=ServerId" json:"_server_id,omitempty"` // 区ID
	XUserId   *int32  `protobuf:"varint,5,opt,name=_user_id,json=UserId" json:"_user_id,omitempty"`       // 所属用户ID
}

func (x *PetMessage) Reset() {
	*x = PetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetMessage) ProtoMessage() {}

func (x *PetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetMessage.ProtoReflect.Descriptor instead.
func (*PetMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{28}
}

func (x *PetMessage) GetXPetId() int32 {
	if x != nil && x.XPetId != nil {
		return *x.XPetId
	}
	return 0
}

func (x *PetMessage) GetXItemId() int32 {
	if x != nil && x.XItemId != nil {
		return *x.XItemId
	}
	return 0
}

func (x *PetMessage) GetMsgText() string {
	if x != nil && x.MsgText != nil {
		return *x.MsgText
	}
	return ""
}

func (x *PetMessage) GetXServerId() int32 {
	if x != nil && x.XServerId != nil {
		return *x.XServerId
	}
	return 0
}

func (x *PetMessage) GetXUserId() int32 {
	if x != nil && x.XUserId != nil {
		return *x.XUserId
	}
	return 0
}

//聊天频道的历史记录列表
type ChatList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChannel      *ChatChannelType  `protobuf:"varint,1,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //聊天频道
	XMessageList  []*MessageContent `protobuf:"bytes,2,rep,name=_message_list,json=MessageList" json:"_message_list,omitempty"`                     //聊天内容列表
	XPreMessageId *uint64           `protobuf:"varint,3,opt,name=_pre_message_id,json=PreMessageId" json:"_pre_message_id,omitempty"`               //返回的聊天列表内容的前一条消息id，如果是0表明聊天消息获取完毕
	XSessionUser  *pb.UserSummary   `protobuf:"bytes,4,opt,name=_session_user,json=SessionUser" json:"_session_user,omitempty"`                     //私聊情况下会话用户摘要信息
	XSessionId    *uint32           `protobuf:"varint,5,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
	XUnreadNum    *uint32           `protobuf:"varint,6,opt,name=_unread_num,json=UnreadNum" json:"_unread_num,omitempty"`                          //未读消息数
}

func (x *ChatList) Reset() {
	*x = ChatList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatList) ProtoMessage() {}

func (x *ChatList) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatList.ProtoReflect.Descriptor instead.
func (*ChatList) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{29}
}

func (x *ChatList) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *ChatList) GetXMessageList() []*MessageContent {
	if x != nil {
		return x.XMessageList
	}
	return nil
}

func (x *ChatList) GetXPreMessageId() uint64 {
	if x != nil && x.XPreMessageId != nil {
		return *x.XPreMessageId
	}
	return 0
}

func (x *ChatList) GetXSessionUser() *pb.UserSummary {
	if x != nil {
		return x.XSessionUser
	}
	return nil
}

func (x *ChatList) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *ChatList) GetXUnreadNum() uint32 {
	if x != nil && x.XUnreadNum != nil {
		return *x.XUnreadNum
	}
	return 0
}

//获取聊天记录的返回内容
type ChatHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XMessageList  []*MessageContent `protobuf:"bytes,1,rep,name=_message_list,json=MessageList" json:"_message_list,omitempty"`                     //聊天内容列表
	XPreMessageId *uint64           `protobuf:"varint,2,opt,name=_pre_message_id,json=PreMessageId" json:"_pre_message_id,omitempty"`               //返回的聊天列表内容的前一条消息id，如果是0表明聊天消息获取完毕
	XChannel      *ChatChannelType  `protobuf:"varint,3,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //聊天频道
	XSessionId    *uint32           `protobuf:"varint,4,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
	XOrientation  *uint32           `protobuf:"varint,5,req,name=_orientation,json=Orientation" json:"_orientation,omitempty"`                      //0: 获取新的聊天消息，1: 获取老的聊天消息
}

func (x *ChatHistoryReply) Reset() {
	*x = ChatHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryReply) ProtoMessage() {}

func (x *ChatHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryReply.ProtoReflect.Descriptor instead.
func (*ChatHistoryReply) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{30}
}

func (x *ChatHistoryReply) GetXMessageList() []*MessageContent {
	if x != nil {
		return x.XMessageList
	}
	return nil
}

func (x *ChatHistoryReply) GetXPreMessageId() uint64 {
	if x != nil && x.XPreMessageId != nil {
		return *x.XPreMessageId
	}
	return 0
}

func (x *ChatHistoryReply) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *ChatHistoryReply) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *ChatHistoryReply) GetXOrientation() uint32 {
	if x != nil && x.XOrientation != nil {
		return *x.XOrientation
	}
	return 0
}

//获取整体的聊天最新历史记录返回内容
type ChatHistoryWholeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChatList []*ChatList `protobuf:"bytes,1,rep,name=_chat_list,json=ChatList" json:"_chat_list,omitempty"`
}

func (x *ChatHistoryWholeReply) Reset() {
	*x = ChatHistoryWholeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryWholeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryWholeReply) ProtoMessage() {}

func (x *ChatHistoryWholeReply) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryWholeReply.ProtoReflect.Descriptor instead.
func (*ChatHistoryWholeReply) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{31}
}

func (x *ChatHistoryWholeReply) GetXChatList() []*ChatList {
	if x != nil {
		return x.XChatList
	}
	return nil
}

//Channel推送来的聊天消息
type ChatPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChannel   *ChatChannelType `protobuf:"varint,1,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //聊天频道
	XMessage   *MessageContent  `protobuf:"bytes,2,req,name=_message,json=Message" json:"_message,omitempty"`                                   //聊天内容
	XSessionId *uint32          `protobuf:"varint,3,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
}

func (x *ChatPush) Reset() {
	*x = ChatPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPush) ProtoMessage() {}

func (x *ChatPush) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPush.ProtoReflect.Descriptor instead.
func (*ChatPush) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{32}
}

func (x *ChatPush) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *ChatPush) GetXMessage() *MessageContent {
	if x != nil {
		return x.XMessage
	}
	return nil
}

func (x *ChatPush) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

type SendMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientId      *string          `protobuf:"bytes,1,req,name=_client_id,json=ClientId" json:"_client_id,omitempty"`                                                  //客户端生成的id，用于服务器排重
	XMessageId     *uint64          `protobuf:"varint,2,opt,name=_message_id,json=MessageId" json:"_message_id,omitempty"`                                              //聊天消息id
	XChannel       *ChatChannelType `protobuf:"varint,3,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"`                     //发送消息到对应的频道
	XSessionId     *uint32          `protobuf:"varint,4,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                                              //会话id
	XConsumeType   *SendConsumeType `protobuf:"varint,5,opt,name=_consume_type,json=ConsumeType,enum=ChatMessage.SendConsumeType,def=0" json:"_consume_type,omitempty"` //消耗类型
	XPrimaryItemId *int32           `protobuf:"varint,6,opt,name=_primary_item_id,json=PrimaryItemId" json:"_primary_item_id,omitempty"`                                //消耗的道具主键ID
}

// Default values for SendMessageReply fields.
const (
	Default_SendMessageReply_XConsumeType = SendConsumeType_free
)

func (x *SendMessageReply) Reset() {
	*x = SendMessageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageReply) ProtoMessage() {}

func (x *SendMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageReply.ProtoReflect.Descriptor instead.
func (*SendMessageReply) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{33}
}

func (x *SendMessageReply) GetXClientId() string {
	if x != nil && x.XClientId != nil {
		return *x.XClientId
	}
	return ""
}

func (x *SendMessageReply) GetXMessageId() uint64 {
	if x != nil && x.XMessageId != nil {
		return *x.XMessageId
	}
	return 0
}

func (x *SendMessageReply) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *SendMessageReply) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *SendMessageReply) GetXConsumeType() SendConsumeType {
	if x != nil && x.XConsumeType != nil {
		return *x.XConsumeType
	}
	return Default_SendMessageReply_XConsumeType
}

func (x *SendMessageReply) GetXPrimaryItemId() int32 {
	if x != nil && x.XPrimaryItemId != nil {
		return *x.XPrimaryItemId
	}
	return 0
}

//聊天频道消息标记已读
type MarkReadChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChannel   *ChatChannelType `protobuf:"varint,1,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //聊天频道
	XSessionId *uint32          `protobuf:"varint,2,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
	XMaxId     *uint64          `protobuf:"varint,3,req,name=_max_id,json=MaxId" json:"_max_id,omitempty"`                                      //聊天最大id
}

func (x *MarkReadChannel) Reset() {
	*x = MarkReadChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkReadChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkReadChannel) ProtoMessage() {}

func (x *MarkReadChannel) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkReadChannel.ProtoReflect.Descriptor instead.
func (*MarkReadChannel) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{34}
}

func (x *MarkReadChannel) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *MarkReadChannel) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *MarkReadChannel) GetXMaxId() uint64 {
	if x != nil && x.XMaxId != nil {
		return *x.XMaxId
	}
	return 0
}

type DeleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChannel   *ChatChannelType `protobuf:"varint,1,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //聊天频道
	XSessionId *uint32          `protobuf:"varint,2,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
	XClientId  *string          `protobuf:"bytes,3,req,name=_client_id,json=ClientId" json:"_client_id,omitempty"`                              //要删除的聊天消息客户端id
	XMessageId *uint64          `protobuf:"varint,4,req,name=_message_id,json=MessageId" json:"_message_id,omitempty"`                          //聊天消息id
}

func (x *DeleteMessage) Reset() {
	*x = DeleteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessage) ProtoMessage() {}

func (x *DeleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessage.ProtoReflect.Descriptor instead.
func (*DeleteMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteMessage) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *DeleteMessage) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *DeleteMessage) GetXClientId() string {
	if x != nil && x.XClientId != nil {
		return *x.XClientId
	}
	return ""
}

func (x *DeleteMessage) GetXMessageId() uint64 {
	if x != nil && x.XMessageId != nil {
		return *x.XMessageId
	}
	return 0
}

type DeleteMessagePush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChannel   *ChatChannelType `protobuf:"varint,1,req,name=_channel,json=Channel,enum=ChatMessage.ChatChannelType" json:"_channel,omitempty"` //聊天频道
	XSessionId *uint32          `protobuf:"varint,2,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"`                          //会话id
	XClientId  *string          `protobuf:"bytes,3,req,name=_client_id,json=ClientId" json:"_client_id,omitempty"`                              //推送的要删除的聊天消息客户端id
}

func (x *DeleteMessagePush) Reset() {
	*x = DeleteMessagePush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessagePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessagePush) ProtoMessage() {}

func (x *DeleteMessagePush) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessagePush.ProtoReflect.Descriptor instead.
func (*DeleteMessagePush) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteMessagePush) GetXChannel() ChatChannelType {
	if x != nil && x.XChannel != nil {
		return *x.XChannel
	}
	return ChatChannelType_world_channel
}

func (x *DeleteMessagePush) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

func (x *DeleteMessagePush) GetXClientId() string {
	if x != nil && x.XClientId != nil {
		return *x.XClientId
	}
	return ""
}

type DeletePvpMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSessionId *uint32 `protobuf:"varint,1,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"` //删除的私聊会话id
}

func (x *DeletePvpMessage) Reset() {
	*x = DeletePvpMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePvpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePvpMessage) ProtoMessage() {}

func (x *DeletePvpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePvpMessage.ProtoReflect.Descriptor instead.
func (*DeletePvpMessage) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{37}
}

func (x *DeletePvpMessage) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

type DeletePvpMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSessionId *uint32 `protobuf:"varint,1,req,name=_session_id,json=SessionId" json:"_session_id,omitempty"` //删除的私聊会话id
}

func (x *DeletePvpMessageReply) Reset() {
	*x = DeletePvpMessageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatmessage_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePvpMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePvpMessageReply) ProtoMessage() {}

func (x *DeletePvpMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_chatmessage_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePvpMessageReply.ProtoReflect.Descriptor instead.
func (*DeletePvpMessageReply) Descriptor() ([]byte, []int) {
	return file_chatmessage_proto_rawDescGZIP(), []int{38}
}

func (x *DeletePvpMessageReply) GetXSessionId() uint32 {
	if x != nil && x.XSessionId != nil {
		return *x.XSessionId
	}
	return 0
}

var File_chatmessage_proto protoreflect.FileDescriptor

var file_chatmessage_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47,
	0x0a, 0x18, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77,
	0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x63, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0d, 0x42, 0x61, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x0c, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a,
	0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x69, 0x64, 0x12, 0x42,
	0x0a, 0x0f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9a, 0x04, 0x0a,
	0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x78, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x59, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x64,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x6d,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22,
	0xfe, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xce, 0x02, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x04,
	0x5f, 0x73, 0x6b, 0x75, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x53, 0x6b, 0x75, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x61, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x6d, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x0e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0d,
	0x5f, 0x6f, 0x72, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x69, 0x4c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x57, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x61, 0x63, 0x69, 0x73, 0x6d, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x6e, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x64, 0x73, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x22, 0x82, 0x01, 0x0a, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x42, 0x0a, 0x0f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74,
	0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74,
	0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x61, 0x69,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x69, 0x6c,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x0d, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x79,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x59, 0x12, 0x2c,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x44, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a,
	0x06, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x31, 0x12, 0x28, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x12, 0x19, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x73, 0x67, 0x2e, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x97, 0x02, 0x0a,
	0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x61,
	0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x66, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x66, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6d, 0x62, 0x6c, 0x65,
	0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x6d, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65,
	0x78, 0x74, 0x22, 0xec, 0x06, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73,
	0x67, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x5f, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x05,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12,
	0x2b, 0x0a, 0x04, 0x5f, 0x73, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x53, 0x79, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x05, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x66, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x46,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x50, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x70, 0x65, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x70, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa6, 0x02, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x50, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xfb, 0x01, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x34, 0x0a, 0x0a, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x43, 0x68, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x39, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x07, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x8e, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x76, 0x70, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x70, 0x76, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x2a, 0x96, 0x02, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x10, 0x0a, 0x2a, 0x6c, 0x0a, 0x13, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x02, 0x2a, 0x8d, 0x01, 0x0a, 0x11, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x05, 0x2a, 0xdf, 0x02, 0x0a, 0x0a, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6e,
	0x70, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x63, 0x69, 0x74, 0x79, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x6f, 0x6d, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x65, 0x6c, 0x69, 0x63, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x67, 0x61, 0x72, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x73, 0x6e, 0x6f, 0x77, 0x62, 0x65, 0x72, 0x67, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x75, 0x6d, 0x70, 0x68, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x10, 0x0f, 0x12, 0x11,
	0x0a, 0x0d, 0x66, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x70, 0x75, 0x6c, 0x74, 0x10,
	0x10, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x72, 0x69, 0x6f,
	0x72, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x7a, 0x61,
	0x72, 0x64, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x62, 0x6f,
	0x73, 0x73, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x62, 0x61, 0x72, 0x62, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x10, 0x15, 0x2a, 0x31, 0x0a, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f,
	0x6c, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x42, 0x1d,
	0x5a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x62, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
}

var (
	file_chatmessage_proto_rawDescOnce sync.Once
	file_chatmessage_proto_rawDescData = file_chatmessage_proto_rawDesc
)

func file_chatmessage_proto_rawDescGZIP() []byte {
	file_chatmessage_proto_rawDescOnce.Do(func() {
		file_chatmessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_chatmessage_proto_rawDescData)
	})
	return file_chatmessage_proto_rawDescData
}

var file_chatmessage_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_chatmessage_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_chatmessage_proto_goTypes = []interface{}{
	(MessageType)(0),              // 0: ChatMessage.message_type
	(MessageSenderType)(0),        // 1: ChatMessage.message_sender_type
	(ChatChannelType)(0),          // 2: ChatMessage.chat_channel_type
	(CoordType)(0),                // 3: ChatMessage.coord_type
	(SendConsumeType)(0),          // 4: ChatMessage.send_consume_type
	(ReportMessageReportType)(0),  // 5: ChatMessage.report_message.report_type
	(*ChatHistoryWholeFetch)(nil), // 6: ChatMessage.chat_history_whole_fetch
	(*ChatHistoryFecth)(nil),      // 7: ChatMessage.chat_history_fecth
	(*SendCommonMessage)(nil),     // 8: ChatMessage.send_common_message
	(*SendTextMessage)(nil),       // 9: ChatMessage.send_text_message
	(*SendVoiceMessage)(nil),      // 10: ChatMessage.send_voice_message
	(*SendPhotoMessage)(nil),      // 11: ChatMessage.send_photo_message
	(*SendMailMessage)(nil),       // 12: ChatMessage.send_mail_message
	(*ParamsInfo)(nil),            // 13: ChatMessage.params_info
	(*SendCoordMessage)(nil),      // 14: ChatMessage.send_coord_message
	(*SendEquipMessage)(nil),      // 15: ChatMessage.send_equip_message
	(*SendGeneralMessage)(nil),    // 16: ChatMessage.send_general_message
	(*SendGoodsMessage)(nil),      // 17: ChatMessage.send_goods_message
	(*SendFameMessage)(nil),       // 18: ChatMessage.send_fame_message
	(*SendPetMessage)(nil),        // 19: ChatMessage.send_pet_message
	(*MarkRead)(nil),              // 20: ChatMessage.mark_read
	(*MultiLanText)(nil),          // 21: ChatMessage.multi_lan_text
	(*ReportMessage)(nil),         // 22: ChatMessage.report_message
	(*TextMessage)(nil),           // 23: ChatMessage.text_message
	(*VoiceMessage)(nil),          // 24: ChatMessage.voice_message
	(*PhotoMessage)(nil),          // 25: ChatMessage.photo_message
	(*MailMessage)(nil),           // 26: ChatMessage.mail_message
	(*CoordMessage)(nil),          // 27: ChatMessage.coord_message
	(*SysMessage)(nil),            // 28: ChatMessage.sys_message
	(*EquipMessage)(nil),          // 29: ChatMessage.equip_message
	(*GeneralMessage)(nil),        // 30: ChatMessage.general_message
	(*FameMessage)(nil),           // 31: ChatMessage.fame_message
	(*MessageContent)(nil),        // 32: ChatMessage.message_content
	(*GoodsMessage)(nil),          // 33: ChatMessage.goods_message
	(*PetMessage)(nil),            // 34: ChatMessage.pet_message
	(*ChatList)(nil),              // 35: ChatMessage.chat_list
	(*ChatHistoryReply)(nil),      // 36: ChatMessage.chat_history_reply
	(*ChatHistoryWholeReply)(nil), // 37: ChatMessage.chat_history_whole_reply
	(*ChatPush)(nil),              // 38: ChatMessage.chat_push
	(*SendMessageReply)(nil),      // 39: ChatMessage.send_message_reply
	(*MarkReadChannel)(nil),       // 40: ChatMessage.mark_read_channel
	(*DeleteMessage)(nil),         // 41: ChatMessage.delete_message
	(*DeleteMessagePush)(nil),     // 42: ChatMessage.delete_message_push
	(*DeletePvpMessage)(nil),      // 43: ChatMessage.delete_pvp_message
	(*DeletePvpMessageReply)(nil), // 44: ChatMessage.delete_pvp_message_reply
	(*pb.RefineAttribute)(nil),    // 45: Msg.refine_attribute
	(*pb.UserSummary)(nil),        // 46: Msg.user_summary
}
var file_chatmessage_proto_depIdxs = []int32{
	2,  // 0: ChatMessage.chat_history_fecth._channel:type_name -> ChatMessage.chat_channel_type
	2,  // 1: ChatMessage.send_common_message._channel:type_name -> ChatMessage.chat_channel_type
	1,  // 2: ChatMessage.send_common_message._sender_type:type_name -> ChatMessage.message_sender_type
	4,  // 3: ChatMessage.send_common_message._consume_type:type_name -> ChatMessage.send_consume_type
	8,  // 4: ChatMessage.send_text_message._common_message:type_name -> ChatMessage.send_common_message
	21, // 5: ChatMessage.send_text_message._multi_lan_text:type_name -> ChatMessage.multi_lan_text
	8,  // 6: ChatMessage.send_voice_message._common_message:type_name -> ChatMessage.send_common_message
	21, // 7: ChatMessage.send_voice_message._multi_lan_text:type_name -> ChatMessage.multi_lan_text
	8,  // 8: ChatMessage.send_photo_message._common_message:type_name -> ChatMessage.send_common_message
	8,  // 9: ChatMessage.send_mail_message._common_message:type_name -> ChatMessage.send_common_message
	13, // 10: ChatMessage.send_mail_message._params_info:type_name -> ChatMessage.params_info
	8,  // 11: ChatMessage.send_coord_message._common_message:type_name -> ChatMessage.send_common_message
	3,  // 12: ChatMessage.send_coord_message._type:type_name -> ChatMessage.coord_type
	8,  // 13: ChatMessage.send_equip_message._common_message:type_name -> ChatMessage.send_common_message
	45, // 14: ChatMessage.send_equip_message.refine_attribute:type_name -> Msg.refine_attribute
	8,  // 15: ChatMessage.send_general_message._common_message:type_name -> ChatMessage.send_common_message
	8,  // 16: ChatMessage.send_goods_message._common_message:type_name -> ChatMessage.send_common_message
	8,  // 17: ChatMessage.send_fame_message._common_message:type_name -> ChatMessage.send_common_message
	8,  // 18: ChatMessage.send_pet_message._common_message:type_name -> ChatMessage.send_common_message
	2,  // 19: ChatMessage.mark_read._channel:type_name -> ChatMessage.chat_channel_type
	5,  // 20: ChatMessage.report_message._type:type_name -> ChatMessage.report_message.report_type
	21, // 21: ChatMessage.text_message._multi_lan_text:type_name -> ChatMessage.multi_lan_text
	21, // 22: ChatMessage.voice_message._multi_lan_text:type_name -> ChatMessage.multi_lan_text
	3,  // 23: ChatMessage.coord_message._type:type_name -> ChatMessage.coord_type
	46, // 24: ChatMessage.sys_message._user1:type_name -> Msg.user_summary
	46, // 25: ChatMessage.sys_message._user2:type_name -> Msg.user_summary
	45, // 26: ChatMessage.equip_message.refine_attribute:type_name -> Msg.refine_attribute
	0,  // 27: ChatMessage.message_content._type:type_name -> ChatMessage.message_type
	1,  // 28: ChatMessage.message_content._sender_type:type_name -> ChatMessage.message_sender_type
	46, // 29: ChatMessage.message_content._sender:type_name -> Msg.user_summary
	23, // 30: ChatMessage.message_content._text:type_name -> ChatMessage.text_message
	24, // 31: ChatMessage.message_content._voice:type_name -> ChatMessage.voice_message
	25, // 32: ChatMessage.message_content._photo:type_name -> ChatMessage.photo_message
	26, // 33: ChatMessage.message_content._mail:type_name -> ChatMessage.mail_message
	27, // 34: ChatMessage.message_content._coord:type_name -> ChatMessage.coord_message
	28, // 35: ChatMessage.message_content._sys:type_name -> ChatMessage.sys_message
	29, // 36: ChatMessage.message_content._equip:type_name -> ChatMessage.equip_message
	30, // 37: ChatMessage.message_content._general:type_name -> ChatMessage.general_message
	31, // 38: ChatMessage.message_content._fame:type_name -> ChatMessage.fame_message
	33, // 39: ChatMessage.message_content._goods_message:type_name -> ChatMessage.goods_message
	34, // 40: ChatMessage.message_content._pet_message:type_name -> ChatMessage.pet_message
	2,  // 41: ChatMessage.chat_list._channel:type_name -> ChatMessage.chat_channel_type
	32, // 42: ChatMessage.chat_list._message_list:type_name -> ChatMessage.message_content
	46, // 43: ChatMessage.chat_list._session_user:type_name -> Msg.user_summary
	32, // 44: ChatMessage.chat_history_reply._message_list:type_name -> ChatMessage.message_content
	2,  // 45: ChatMessage.chat_history_reply._channel:type_name -> ChatMessage.chat_channel_type
	35, // 46: ChatMessage.chat_history_whole_reply._chat_list:type_name -> ChatMessage.chat_list
	2,  // 47: ChatMessage.chat_push._channel:type_name -> ChatMessage.chat_channel_type
	32, // 48: ChatMessage.chat_push._message:type_name -> ChatMessage.message_content
	2,  // 49: ChatMessage.send_message_reply._channel:type_name -> ChatMessage.chat_channel_type
	4,  // 50: ChatMessage.send_message_reply._consume_type:type_name -> ChatMessage.send_consume_type
	2,  // 51: ChatMessage.mark_read_channel._channel:type_name -> ChatMessage.chat_channel_type
	2,  // 52: ChatMessage.delete_message._channel:type_name -> ChatMessage.chat_channel_type
	2,  // 53: ChatMessage.delete_message_push._channel:type_name -> ChatMessage.chat_channel_type
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_chatmessage_proto_init() }
func file_chatmessage_proto_init() {
	if File_chatmessage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chatmessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryWholeFetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryFecth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCommonMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVoiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPhotoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCoordMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEquipMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGeneralMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGoodsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFameMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLanText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FameMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryWholeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkReadChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessagePush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePvpMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatmessage_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePvpMessageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chatmessage_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chatmessage_proto_goTypes,
		DependencyIndexes: file_chatmessage_proto_depIdxs,
		EnumInfos:         file_chatmessage_proto_enumTypes,
		MessageInfos:      file_chatmessage_proto_msgTypes,
	}.Build()
	File_chatmessage_proto = out.File
	file_chatmessage_proto_rawDesc = nil
	file_chatmessage_proto_goTypes = nil
	file_chatmessage_proto_depIdxs = nil
}
